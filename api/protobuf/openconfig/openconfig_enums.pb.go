// openconfig.enums is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_enums.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	_ "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// IETFInterfacesInterfaceType represents an enumerated type generated for the YANG identity interface-type.
type IETFInterfacesInterfaceType int32

const (
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_UNSET                         IETFInterfacesInterfaceType = 0
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VMWAREVIRTUALNIC              IETFInterfacesInterfaceType = 1565006
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SDSL                          IETFInterfacesInterfaceType = 6510195
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_RADSL                         IETFInterfacesInterfaceType = 6740905
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_X86LAPS                       IETFInterfacesInterfaceType = 6820753
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_LOCALTALK                     IETFInterfacesInterfaceType = 8569638
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DLSW                          IETFInterfacesInterfaceType = 9975993
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IDSL                          IETFInterfacesInterfaceType = 11625257
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_NFAS                          IETFInterfacesInterfaceType = 15826611
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_BRIDGE                        IETFInterfacesInterfaceType = 16268636
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DOCSCABLESCTE55D2USOOB        IETFInterfacesInterfaceType = 26367302
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IEEE80216WMAN                 IETFInterfacesInterfaceType = 27144395
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_TR008                         IETFInterfacesInterfaceType = 29978951
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DVBRCCUPSTREAM                IETFInterfacesInterfaceType = 32753636
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PROPDOCSWIRELESSDOWNSTREAM    IETFInterfacesInterfaceType = 33042753
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_FRF16MFRBUNDLE                IETFInterfacesInterfaceType = 33466019
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ACTELISMETALOOP               IETFInterfacesInterfaceType = 33876615
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VIRTUALIPADDRESS              IETFInterfacesInterfaceType = 34837125
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_HDSL2                         IETFInterfacesInterfaceType = 35292480
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VIRTUALTG                     IETFInterfacesInterfaceType = 36505915
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PDNETHERLOOP1                 IETFInterfacesInterfaceType = 39592732
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PDNETHERLOOP2                 IETFInterfacesInterfaceType = 39592735
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DOCSCABLEUPSTREAM             IETFInterfacesInterfaceType = 40317714
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_MSDSL                         IETFInterfacesInterfaceType = 42288188
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_FDDI                          IETFInterfacesInterfaceType = 45545244
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_GFP                           IETFInterfacesInterfaceType = 46876684
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PROPWIRELESSP2P               IETFInterfacesInterfaceType = 47272810
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_FIBRECHANNEL                  IETFInterfacesInterfaceType = 48464202
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PROPBWAP2MP                   IETFInterfacesInterfaceType = 53391395
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_MPLS                          IETFInterfacesInterfaceType = 59594435
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_FAST                          IETFInterfacesInterfaceType = 62764217
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VOICEEM                       IETFInterfacesInterfaceType = 68512445
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_RFC1483                       IETFInterfacesInterfaceType = 71949014
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_OPTICALTRANSPORT              IETFInterfacesInterfaceType = 72145124
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IPSWITCH                      IETFInterfacesInterfaceType = 75335244
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_FRAMERELAYSERVICE             IETFInterfacesInterfaceType = 76605298
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DOCSCABLEDOWNSTREAM           IETFInterfacesInterfaceType = 82085109
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SMDSDXI                       IETFInterfacesInterfaceType = 82940545
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_X213                          IETFInterfacesInterfaceType = 86923325
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DVBRCSTDMA                    IETFInterfacesInterfaceType = 87219061
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_REACHDSL                      IETFInterfacesInterfaceType = 94937173
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ISO88025FIBER                 IETFInterfacesInterfaceType = 95814573
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_CES                           IETFInterfacesInterfaceType = 96608266
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ISDNS                         IETFInterfacesInterfaceType = 98224960
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ISDNU                         IETFInterfacesInterfaceType = 98224966
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_CISCOISLVLAN                  IETFInterfacesInterfaceType = 98611879
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_E1                            IETFInterfacesInterfaceType = 98947197
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_OTHER                         IETFInterfacesInterfaceType = 102886491
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PROPMULTIPLEXOR               IETFInterfacesInterfaceType = 104872999
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ISO88025CRFPINT               IETFInterfacesInterfaceType = 107406283
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_OPTICALCHANNELGROUP           IETFInterfacesInterfaceType = 113721035
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DTM                           IETFInterfacesInterfaceType = 113840220
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_FRAMERELAYINTERCONNECT        IETFInterfacesInterfaceType = 114395621
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VDSL2                         IETFInterfacesInterfaceType = 114521030
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ESCON                         IETFInterfacesInterfaceType = 115055825
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_RFC877X25                     IETFInterfacesInterfaceType = 115857711
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_X25MLP                        IETFInterfacesInterfaceType = 123303819
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DOCSCABLEMACLAYER             IETFInterfacesInterfaceType = 123379145
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_BGPPOLICYACCOUNTING           IETFInterfacesInterfaceType = 123979459
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_A12MPPSWITCH                  IETFInterfacesInterfaceType = 124516534
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_RS232                         IETFInterfacesInterfaceType = 125504151
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IFVFITYPE                     IETFInterfacesInterfaceType = 125597175
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ATMVIRTUAL                    IETFInterfacesInterfaceType = 126930162
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DS0                           IETFInterfacesInterfaceType = 130617844
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DS1                           IETFInterfacesInterfaceType = 130617845
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DS3                           IETFInterfacesInterfaceType = 130617847
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_USB                           IETFInterfacesInterfaceType = 133030655
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_XBOXWIRELESS                  IETFInterfacesInterfaceType = 134112364
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_L2VLAN                        IETFInterfacesInterfaceType = 136888738
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ALUGPONONU                    IETFInterfacesInterfaceType = 142838813
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IBM370PARCHAN                 IETFInterfacesInterfaceType = 144282644
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IF_GSN                        IETFInterfacesInterfaceType = 144667633
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PROPVIRTUAL                   IETFInterfacesInterfaceType = 151318645
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DOCSCABLEUPSTREAMRFPORT       IETFInterfacesInterfaceType = 152154307
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_GR303IDT                      IETFInterfacesInterfaceType = 152588497
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DVBTDM                        IETFInterfacesInterfaceType = 154146406
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_HYPERCHANNEL                  IETFInterfacesInterfaceType = 154271532
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_X25PLE                        IETFInterfacesInterfaceType = 154740499
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_FASTETHER                     IETFInterfacesInterfaceType = 154868491
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ADSL                          IETFInterfacesInterfaceType = 159068577
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_STACKTOSTACK                  IETFInterfacesInterfaceType = 159738210
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ADSL2PLUS                     IETFInterfacesInterfaceType = 161466077
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IPFORWARD                     IETFInterfacesInterfaceType = 164396743
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IMT                           IETFInterfacesInterfaceType = 164717531
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IP                            IETFInterfacesInterfaceType = 166057704
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PIP                           IETFInterfacesInterfaceType = 166131694
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_X25HUNTGROUP                  IETFInterfacesInterfaceType = 167843534
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ALUEPON                       IETFInterfacesInterfaceType = 168357285
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ALUEPONPHYSICALUNI            IETFInterfacesInterfaceType = 173089984
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PROPCNLS                      IETFInterfacesInterfaceType = 175632828
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_CAPWAPDOT11PROFILE            IETFInterfacesInterfaceType = 178725861
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VOICEDID                      IETFInterfacesInterfaceType = 179978682
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_CNR                           IETFInterfacesInterfaceType = 180496426
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_HDH1822                       IETFInterfacesInterfaceType = 181667598
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ATMDXI                        IETFInterfacesInterfaceType = 185164750
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ARCNETPLUS                    IETFInterfacesInterfaceType = 185743218
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IPOVERCDLC                    IETFInterfacesInterfaceType = 187706792
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_LINEGROUP                     IETFInterfacesInterfaceType = 188639782
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DVBRCCMACLAYER                IETFInterfacesInterfaceType = 190229931
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_FRAMERELAY                    IETFInterfacesInterfaceType = 192403649
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ISDN                          IETFInterfacesInterfaceType = 193369057
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VOICEOVERCABLE                IETFInterfacesInterfaceType = 193481284
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ARAP                          IETFInterfacesInterfaceType = 194889541
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_EON                           IETFInterfacesInterfaceType = 197568375
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SONETOVERHEADCHANNEL          IETFInterfacesInterfaceType = 198587275
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SIXTOFOUR                     IETFInterfacesInterfaceType = 198588222
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_POS                           IETFInterfacesInterfaceType = 199686839
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ETHERNETCSMACD                IETFInterfacesInterfaceType = 200640927
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DS0BUNDLE                     IETFInterfacesInterfaceType = 201568324
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ATMLOGICAL                    IETFInterfacesInterfaceType = 209365342
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_RADIOMAC                      IETFInterfacesInterfaceType = 210946377
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PROPDOCSWIRELESSMACLAYER      IETFInterfacesInterfaceType = 212348549
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PON622                        IETFInterfacesInterfaceType = 214224204
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_NSIP                          IETFInterfacesInterfaceType = 215039369
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_MODEM                         IETFInterfacesInterfaceType = 220777299
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_OTNODU                        IETFInterfacesInterfaceType = 221697026
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ISO88024TOKENBUS              IETFInterfacesInterfaceType = 226662339
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_COFFEE                        IETFInterfacesInterfaceType = 228642743
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DOCSCABLEUPSTREAMCHANNEL      IETFInterfacesInterfaceType = 230766155
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ATMFUNI                       IETFInterfacesInterfaceType = 231177305
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_LMP                           IETFInterfacesInterfaceType = 232563358
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ADSL2                         IETFInterfacesInterfaceType = 233775169
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_CABLEDOWNSTREAMRFPORT         IETFInterfacesInterfaceType = 235031767
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DVBRCCDOWNSTREAM              IETFInterfacesInterfaceType = 237186979
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_MEDIAMAILOVERIP               IETFInterfacesInterfaceType = 237300945
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_BASICISDN                     IETFInterfacesInterfaceType = 240798305
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PLC                           IETFInterfacesInterfaceType = 250019614
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PROPDOCSWIRELESSUPSTREAM      IETFInterfacesInterfaceType = 259946614
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_TELINK                        IETFInterfacesInterfaceType = 263561362
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PON155                        IETFInterfacesInterfaceType = 265689965
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_TRANSPHDLC                    IETFInterfacesInterfaceType = 266205262
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SONETVT                       IETFInterfacesInterfaceType = 269056588
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DIGITALWRAPPEROVERHEADCHANNEL IETFInterfacesInterfaceType = 269831139
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VOICEFGDEANA                  IETFInterfacesInterfaceType = 271377999
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PRIMARYISDN                   IETFInterfacesInterfaceType = 274718125
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SDCI                          IETFInterfacesInterfaceType = 274951974
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_REGULAR1822                   IETFInterfacesInterfaceType = 275236866
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_AAL5                          IETFInterfacesInterfaceType = 276070712
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_AAL2                          IETFInterfacesInterfaceType = 276070719
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SONETPATH                     IETFInterfacesInterfaceType = 278556471
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_MPLSTUNNEL                    IETFInterfacesInterfaceType = 280402025
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ATM                           IETFInterfacesInterfaceType = 280868081
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SONET                         IETFInterfacesInterfaceType = 281707114
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ECONET                        IETFInterfacesInterfaceType = 282809795
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_L3IPVLAN                      IETFInterfacesInterfaceType = 283365084
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ISO88026MAN                   IETFInterfacesInterfaceType = 284539790
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_GFAST                         IETFInterfacesInterfaceType = 284732616
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_CAPWAPDOT11BSS                IETFInterfacesInterfaceType = 287119162
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ASYNC                         IETFInterfacesInterfaceType = 288480505
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DIGITALPOWERLINE              IETFInterfacesInterfaceType = 290391966
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ETHERNET3MBIT                 IETFInterfacesInterfaceType = 293951679
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_G703AT64K                     IETFInterfacesInterfaceType = 295222342
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ALUGPONPHYSICALUNI            IETFInterfacesInterfaceType = 299181714
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_HOMEPNA                       IETFInterfacesInterfaceType = 299867081
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SIP                           IETFInterfacesInterfaceType = 300512605
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_EPLRS                         IETFInterfacesInterfaceType = 301064637
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PROPATM                       IETFInterfacesInterfaceType = 301594276
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PROTEON10MBIT                 IETFInterfacesInterfaceType = 302514551
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DOCSCABLESCTE55D1FWDOOB       IETFInterfacesInterfaceType = 303230600
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ISO88022LLC                   IETFInterfacesInterfaceType = 303441265
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_FASTETHERFX                   IETFInterfacesInterfaceType = 305592941
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ATMRADIO                      IETFInterfacesInterfaceType = 305823410
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_CBLVECTASTAR                  IETFInterfacesInterfaceType = 307390607
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PARA                          IETFInterfacesInterfaceType = 310683645
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_TUNNEL                        IETFInterfacesInterfaceType = 310831889
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VOICEOVERIP                   IETFInterfacesInterfaceType = 311289458
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_OPTICALCHANNEL                IETFInterfacesInterfaceType = 314028106
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_Q2931                         IETFInterfacesInterfaceType = 315546603
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_MVL                           IETFInterfacesInterfaceType = 316291514
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PPP                           IETFInterfacesInterfaceType = 317130169
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_FRFORWARD                     IETFInterfacesInterfaceType = 317625102
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IEEE1394                      IETFInterfacesInterfaceType = 318235148
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_AFLANE8025                    IETFInterfacesInterfaceType = 319364675
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_AFLANE8023                    IETFInterfacesInterfaceType = 319364677
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ARCNET                        IETFInterfacesInterfaceType = 319683734
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VOICEENCAP                    IETFInterfacesInterfaceType = 320085758
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ATMVCIENDPT                   IETFInterfacesInterfaceType = 321577928
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ISO88023CSMACD                IETFInterfacesInterfaceType = 323108786
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DOCSCABLEMCMTSDOWNSTREAM      IETFInterfacesInterfaceType = 324059589
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_FASTDSL                       IETFInterfacesInterfaceType = 327234998
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_FRDLCIENDPT                   IETFInterfacesInterfaceType = 331858766
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ALUEPONLOGICALLINK            IETFInterfacesInterfaceType = 335068882
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_MOCAVERSION1                  IETFInterfacesInterfaceType = 336028310
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_MFSIGLINK                     IETFInterfacesInterfaceType = 337561425
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_G9981                         IETFInterfacesInterfaceType = 346881905
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_G9982                         IETFInterfacesInterfaceType = 346881906
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_G9983                         IETFInterfacesInterfaceType = 346881907
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_GTP                           IETFInterfacesInterfaceType = 348860930
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_MPC                           IETFInterfacesInterfaceType = 349846687
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DVBASIIN                      IETFInterfacesInterfaceType = 352651815
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_HIPERLAN2                     IETFInterfacesInterfaceType = 353249714
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_HSSI                          IETFInterfacesInterfaceType = 353395016
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VOICEEMFGD                    IETFInterfacesInterfaceType = 356893880
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SDLC                          IETFInterfacesInterfaceType = 358840141
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_FRAMERELAYMPI                 IETFInterfacesInterfaceType = 361654039
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IFPWTYPE                      IETFInterfacesInterfaceType = 363685441
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_CHANNEL                       IETFInterfacesInterfaceType = 365660696
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PROTEON80MBIT                 IETFInterfacesInterfaceType = 368321000
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_V11                           IETFInterfacesInterfaceType = 368423037
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_INTERLEAVE                    IETFInterfacesInterfaceType = 370817552
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VOICEOVERFRAMERELAY           IETFInterfacesInterfaceType = 370951175
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DOCSCABLENDR                  IETFInterfacesInterfaceType = 371051115
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DOCSCABLENDF                  IETFInterfacesInterfaceType = 371051135
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IPOVERCLAW                    IETFInterfacesInterfaceType = 373553475
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ISO88025TOKENRING             IETFInterfacesInterfaceType = 374087486
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_CAPWAPWTPVIRTUALRADIO         IETFInterfacesInterfaceType = 377882412
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IEEE80211                     IETFInterfacesInterfaceType = 379872273
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IEEE80212                     IETFInterfacesInterfaceType = 379872274
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_HOSTPAD                       IETFInterfacesInterfaceType = 382837620
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SMDSICIP                      IETFInterfacesInterfaceType = 383911039
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PTM                           IETFInterfacesInterfaceType = 384240760
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SRP                           IETFInterfacesInterfaceType = 384387804
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_GIGABITETHERNET               IETFInterfacesInterfaceType = 384522045
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DVBASIOUT                     IETFInterfacesInterfaceType = 385064858
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_MACSECCONTROLLEDIF            IETFInterfacesInterfaceType = 385408320
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_GR303RDT                      IETFInterfacesInterfaceType = 386381018
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PPPMULTILINKBUNDLE            IETFInterfacesInterfaceType = 389808788
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_STARLAN                       IETFInterfacesInterfaceType = 392045632
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VOICEFXO                      IETFInterfacesInterfaceType = 398407724
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VOICEFXS                      IETFInterfacesInterfaceType = 398407728
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DCN                           IETFInterfacesInterfaceType = 399059610
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DOCSCABLESCTE55D2DSOOB        IETFInterfacesInterfaceType = 401060431
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_V36                           IETFInterfacesInterfaceType = 401978180
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_V37                           IETFInterfacesInterfaceType = 401978181
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_V35                           IETFInterfacesInterfaceType = 401978183
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VOICEFGDOS                    IETFInterfacesInterfaceType = 403182892
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DS1FDL                        IETFInterfacesInterfaceType = 405008209
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_H323PROXY                     IETFInterfacesInterfaceType = 405322027
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SOFTWARELOOPBACK              IETFInterfacesInterfaceType = 405615795
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_LAPF                          IETFInterfacesInterfaceType = 407559920
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_LAPD                          IETFInterfacesInterfaceType = 407559922
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_LAPB                          IETFInterfacesInterfaceType = 407559924
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_QLLC                          IETFInterfacesInterfaceType = 408677579
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_TERMPAD                       IETFInterfacesInterfaceType = 408914436
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_BITS                          IETFInterfacesInterfaceType = 410011967
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DDNX25                        IETFInterfacesInterfaceType = 411155170
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IEEE8023ADLAG                 IETFInterfacesInterfaceType = 413161059
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_G703AT2MB                     IETFInterfacesInterfaceType = 413279788
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_GPON                          IETFInterfacesInterfaceType = 416724613
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ISO88025DTR                   IETFInterfacesInterfaceType = 420258513
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ATMSUBINTERFACE               IETFInterfacesInterfaceType = 420647634
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VDSL                          IETFInterfacesInterfaceType = 428082364
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DOCSOFDMAUPSTREAM             IETFInterfacesInterfaceType = 428242326
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VMWARENICTEAM                 IETFInterfacesInterfaceType = 430304464
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IEEE802154                    IETFInterfacesInterfaceType = 432639291
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_L3IPXVLAN                     IETFInterfacesInterfaceType = 434730178
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ATMIMA                        IETFInterfacesInterfaceType = 437373544
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_MACSECUNCONTROLLEDIF          IETFInterfacesInterfaceType = 438273729
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_FCIPLINK                      IETFInterfacesInterfaceType = 441424349
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SLIP                          IETFInterfacesInterfaceType = 443995157
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SIPSIG                        IETFInterfacesInterfaceType = 444909704
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_MPEGTRANSPORT                 IETFInterfacesInterfaceType = 444910235
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ISUP                          IETFInterfacesInterfaceType = 445020348
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_CCTEMUL                       IETFInterfacesInterfaceType = 448544526
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ULTRA                         IETFInterfacesInterfaceType = 451132219
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IANA_INTERFACE_TYPE           IETFInterfacesInterfaceType = 455303077
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_TDLC                          IETFInterfacesInterfaceType = 458492100
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VOICEOVERATM                  IETFInterfacesInterfaceType = 460680391
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ALUEPONONU                    IETFInterfacesInterfaceType = 461328495
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_RSRB                          IETFInterfacesInterfaceType = 467591542
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SHDSL                         IETFInterfacesInterfaceType = 469979751
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_PROPPOINTTOPOINTSERIAL        IETFInterfacesInterfaceType = 469979921
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DOCSCABLESCTE55D1RETOOB       IETFInterfacesInterfaceType = 477583546
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_MYRINET                       IETFInterfacesInterfaceType = 477828023
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_H323GATEKEEPER                IETFInterfacesInterfaceType = 487014318
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_IPOVERATM                     IETFInterfacesInterfaceType = 487580074
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_OTNOTU                        IETFInterfacesInterfaceType = 490139090
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ALUELP                        IETFInterfacesInterfaceType = 491118442
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_COMPOSITELINK                 IETFInterfacesInterfaceType = 499352976
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_QAM                           IETFInterfacesInterfaceType = 501537006
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_INFINIBAND                    IETFInterfacesInterfaceType = 502195319
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_HIPPI                         IETFInterfacesInterfaceType = 504532095
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DVBRCSMACLAYER                IETFInterfacesInterfaceType = 505127867
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ATMBOND                       IETFInterfacesInterfaceType = 507519306
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ILAN                          IETFInterfacesInterfaceType = 513673897
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SS7SIGLINK                    IETFInterfacesInterfaceType = 513812603
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_DOCSOFDMDOWNSTREAM            IETFInterfacesInterfaceType = 516003680
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_AVICIOPTICALETHER             IETFInterfacesInterfaceType = 516076235
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_RPR                           IETFInterfacesInterfaceType = 518755753
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_SIPTG                         IETFInterfacesInterfaceType = 526983982
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_WWANPP                        IETFInterfacesInterfaceType = 527365956
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_HIPPIINTERFACE                IETFInterfacesInterfaceType = 529837048
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_WWANPP2                       IETFInterfacesInterfaceType = 531578942
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_VOICEEBS                      IETFInterfacesInterfaceType = 532084325
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_BSC                           IETFInterfacesInterfaceType = 532973469
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_MIOX25                        IETFInterfacesInterfaceType = 535720499
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_HDLC                          IETFInterfacesInterfaceType = 536418624
)

// Enum value maps for IETFInterfacesInterfaceType.
var (
	IETFInterfacesInterfaceType_name = map[int32]string{
		0:         "IETFINTERFACESINTERFACETYPE_UNSET",
		1565006:   "IETFINTERFACESINTERFACETYPE_VMWAREVIRTUALNIC",
		6510195:   "IETFINTERFACESINTERFACETYPE_SDSL",
		6740905:   "IETFINTERFACESINTERFACETYPE_RADSL",
		6820753:   "IETFINTERFACESINTERFACETYPE_X86LAPS",
		8569638:   "IETFINTERFACESINTERFACETYPE_LOCALTALK",
		9975993:   "IETFINTERFACESINTERFACETYPE_DLSW",
		11625257:  "IETFINTERFACESINTERFACETYPE_IDSL",
		15826611:  "IETFINTERFACESINTERFACETYPE_NFAS",
		16268636:  "IETFINTERFACESINTERFACETYPE_BRIDGE",
		26367302:  "IETFINTERFACESINTERFACETYPE_DOCSCABLESCTE55D2USOOB",
		27144395:  "IETFINTERFACESINTERFACETYPE_IEEE80216WMAN",
		29978951:  "IETFINTERFACESINTERFACETYPE_TR008",
		32753636:  "IETFINTERFACESINTERFACETYPE_DVBRCCUPSTREAM",
		33042753:  "IETFINTERFACESINTERFACETYPE_PROPDOCSWIRELESSDOWNSTREAM",
		33466019:  "IETFINTERFACESINTERFACETYPE_FRF16MFRBUNDLE",
		33876615:  "IETFINTERFACESINTERFACETYPE_ACTELISMETALOOP",
		34837125:  "IETFINTERFACESINTERFACETYPE_VIRTUALIPADDRESS",
		35292480:  "IETFINTERFACESINTERFACETYPE_HDSL2",
		36505915:  "IETFINTERFACESINTERFACETYPE_VIRTUALTG",
		39592732:  "IETFINTERFACESINTERFACETYPE_PDNETHERLOOP1",
		39592735:  "IETFINTERFACESINTERFACETYPE_PDNETHERLOOP2",
		40317714:  "IETFINTERFACESINTERFACETYPE_DOCSCABLEUPSTREAM",
		42288188:  "IETFINTERFACESINTERFACETYPE_MSDSL",
		45545244:  "IETFINTERFACESINTERFACETYPE_FDDI",
		46876684:  "IETFINTERFACESINTERFACETYPE_GFP",
		47272810:  "IETFINTERFACESINTERFACETYPE_PROPWIRELESSP2P",
		48464202:  "IETFINTERFACESINTERFACETYPE_FIBRECHANNEL",
		53391395:  "IETFINTERFACESINTERFACETYPE_PROPBWAP2MP",
		59594435:  "IETFINTERFACESINTERFACETYPE_MPLS",
		62764217:  "IETFINTERFACESINTERFACETYPE_FAST",
		68512445:  "IETFINTERFACESINTERFACETYPE_VOICEEM",
		71949014:  "IETFINTERFACESINTERFACETYPE_RFC1483",
		72145124:  "IETFINTERFACESINTERFACETYPE_OPTICALTRANSPORT",
		75335244:  "IETFINTERFACESINTERFACETYPE_IPSWITCH",
		76605298:  "IETFINTERFACESINTERFACETYPE_FRAMERELAYSERVICE",
		82085109:  "IETFINTERFACESINTERFACETYPE_DOCSCABLEDOWNSTREAM",
		82940545:  "IETFINTERFACESINTERFACETYPE_SMDSDXI",
		86923325:  "IETFINTERFACESINTERFACETYPE_X213",
		87219061:  "IETFINTERFACESINTERFACETYPE_DVBRCSTDMA",
		94937173:  "IETFINTERFACESINTERFACETYPE_REACHDSL",
		95814573:  "IETFINTERFACESINTERFACETYPE_ISO88025FIBER",
		96608266:  "IETFINTERFACESINTERFACETYPE_CES",
		98224960:  "IETFINTERFACESINTERFACETYPE_ISDNS",
		98224966:  "IETFINTERFACESINTERFACETYPE_ISDNU",
		98611879:  "IETFINTERFACESINTERFACETYPE_CISCOISLVLAN",
		98947197:  "IETFINTERFACESINTERFACETYPE_E1",
		102886491: "IETFINTERFACESINTERFACETYPE_OTHER",
		104872999: "IETFINTERFACESINTERFACETYPE_PROPMULTIPLEXOR",
		107406283: "IETFINTERFACESINTERFACETYPE_ISO88025CRFPINT",
		113721035: "IETFINTERFACESINTERFACETYPE_OPTICALCHANNELGROUP",
		113840220: "IETFINTERFACESINTERFACETYPE_DTM",
		114395621: "IETFINTERFACESINTERFACETYPE_FRAMERELAYINTERCONNECT",
		114521030: "IETFINTERFACESINTERFACETYPE_VDSL2",
		115055825: "IETFINTERFACESINTERFACETYPE_ESCON",
		115857711: "IETFINTERFACESINTERFACETYPE_RFC877X25",
		123303819: "IETFINTERFACESINTERFACETYPE_X25MLP",
		123379145: "IETFINTERFACESINTERFACETYPE_DOCSCABLEMACLAYER",
		123979459: "IETFINTERFACESINTERFACETYPE_BGPPOLICYACCOUNTING",
		124516534: "IETFINTERFACESINTERFACETYPE_A12MPPSWITCH",
		125504151: "IETFINTERFACESINTERFACETYPE_RS232",
		125597175: "IETFINTERFACESINTERFACETYPE_IFVFITYPE",
		126930162: "IETFINTERFACESINTERFACETYPE_ATMVIRTUAL",
		130617844: "IETFINTERFACESINTERFACETYPE_DS0",
		130617845: "IETFINTERFACESINTERFACETYPE_DS1",
		130617847: "IETFINTERFACESINTERFACETYPE_DS3",
		133030655: "IETFINTERFACESINTERFACETYPE_USB",
		134112364: "IETFINTERFACESINTERFACETYPE_XBOXWIRELESS",
		136888738: "IETFINTERFACESINTERFACETYPE_L2VLAN",
		142838813: "IETFINTERFACESINTERFACETYPE_ALUGPONONU",
		144282644: "IETFINTERFACESINTERFACETYPE_IBM370PARCHAN",
		144667633: "IETFINTERFACESINTERFACETYPE_IF_GSN",
		151318645: "IETFINTERFACESINTERFACETYPE_PROPVIRTUAL",
		152154307: "IETFINTERFACESINTERFACETYPE_DOCSCABLEUPSTREAMRFPORT",
		152588497: "IETFINTERFACESINTERFACETYPE_GR303IDT",
		154146406: "IETFINTERFACESINTERFACETYPE_DVBTDM",
		154271532: "IETFINTERFACESINTERFACETYPE_HYPERCHANNEL",
		154740499: "IETFINTERFACESINTERFACETYPE_X25PLE",
		154868491: "IETFINTERFACESINTERFACETYPE_FASTETHER",
		159068577: "IETFINTERFACESINTERFACETYPE_ADSL",
		159738210: "IETFINTERFACESINTERFACETYPE_STACKTOSTACK",
		161466077: "IETFINTERFACESINTERFACETYPE_ADSL2PLUS",
		164396743: "IETFINTERFACESINTERFACETYPE_IPFORWARD",
		164717531: "IETFINTERFACESINTERFACETYPE_IMT",
		166057704: "IETFINTERFACESINTERFACETYPE_IP",
		166131694: "IETFINTERFACESINTERFACETYPE_PIP",
		167843534: "IETFINTERFACESINTERFACETYPE_X25HUNTGROUP",
		168357285: "IETFINTERFACESINTERFACETYPE_ALUEPON",
		173089984: "IETFINTERFACESINTERFACETYPE_ALUEPONPHYSICALUNI",
		175632828: "IETFINTERFACESINTERFACETYPE_PROPCNLS",
		178725861: "IETFINTERFACESINTERFACETYPE_CAPWAPDOT11PROFILE",
		179978682: "IETFINTERFACESINTERFACETYPE_VOICEDID",
		180496426: "IETFINTERFACESINTERFACETYPE_CNR",
		181667598: "IETFINTERFACESINTERFACETYPE_HDH1822",
		185164750: "IETFINTERFACESINTERFACETYPE_ATMDXI",
		185743218: "IETFINTERFACESINTERFACETYPE_ARCNETPLUS",
		187706792: "IETFINTERFACESINTERFACETYPE_IPOVERCDLC",
		188639782: "IETFINTERFACESINTERFACETYPE_LINEGROUP",
		190229931: "IETFINTERFACESINTERFACETYPE_DVBRCCMACLAYER",
		192403649: "IETFINTERFACESINTERFACETYPE_FRAMERELAY",
		193369057: "IETFINTERFACESINTERFACETYPE_ISDN",
		193481284: "IETFINTERFACESINTERFACETYPE_VOICEOVERCABLE",
		194889541: "IETFINTERFACESINTERFACETYPE_ARAP",
		197568375: "IETFINTERFACESINTERFACETYPE_EON",
		198587275: "IETFINTERFACESINTERFACETYPE_SONETOVERHEADCHANNEL",
		198588222: "IETFINTERFACESINTERFACETYPE_SIXTOFOUR",
		199686839: "IETFINTERFACESINTERFACETYPE_POS",
		200640927: "IETFINTERFACESINTERFACETYPE_ETHERNETCSMACD",
		201568324: "IETFINTERFACESINTERFACETYPE_DS0BUNDLE",
		209365342: "IETFINTERFACESINTERFACETYPE_ATMLOGICAL",
		210946377: "IETFINTERFACESINTERFACETYPE_RADIOMAC",
		212348549: "IETFINTERFACESINTERFACETYPE_PROPDOCSWIRELESSMACLAYER",
		214224204: "IETFINTERFACESINTERFACETYPE_PON622",
		215039369: "IETFINTERFACESINTERFACETYPE_NSIP",
		220777299: "IETFINTERFACESINTERFACETYPE_MODEM",
		221697026: "IETFINTERFACESINTERFACETYPE_OTNODU",
		226662339: "IETFINTERFACESINTERFACETYPE_ISO88024TOKENBUS",
		228642743: "IETFINTERFACESINTERFACETYPE_COFFEE",
		230766155: "IETFINTERFACESINTERFACETYPE_DOCSCABLEUPSTREAMCHANNEL",
		231177305: "IETFINTERFACESINTERFACETYPE_ATMFUNI",
		232563358: "IETFINTERFACESINTERFACETYPE_LMP",
		233775169: "IETFINTERFACESINTERFACETYPE_ADSL2",
		235031767: "IETFINTERFACESINTERFACETYPE_CABLEDOWNSTREAMRFPORT",
		237186979: "IETFINTERFACESINTERFACETYPE_DVBRCCDOWNSTREAM",
		237300945: "IETFINTERFACESINTERFACETYPE_MEDIAMAILOVERIP",
		240798305: "IETFINTERFACESINTERFACETYPE_BASICISDN",
		250019614: "IETFINTERFACESINTERFACETYPE_PLC",
		259946614: "IETFINTERFACESINTERFACETYPE_PROPDOCSWIRELESSUPSTREAM",
		263561362: "IETFINTERFACESINTERFACETYPE_TELINK",
		265689965: "IETFINTERFACESINTERFACETYPE_PON155",
		266205262: "IETFINTERFACESINTERFACETYPE_TRANSPHDLC",
		269056588: "IETFINTERFACESINTERFACETYPE_SONETVT",
		269831139: "IETFINTERFACESINTERFACETYPE_DIGITALWRAPPEROVERHEADCHANNEL",
		271377999: "IETFINTERFACESINTERFACETYPE_VOICEFGDEANA",
		274718125: "IETFINTERFACESINTERFACETYPE_PRIMARYISDN",
		274951974: "IETFINTERFACESINTERFACETYPE_SDCI",
		275236866: "IETFINTERFACESINTERFACETYPE_REGULAR1822",
		276070712: "IETFINTERFACESINTERFACETYPE_AAL5",
		276070719: "IETFINTERFACESINTERFACETYPE_AAL2",
		278556471: "IETFINTERFACESINTERFACETYPE_SONETPATH",
		280402025: "IETFINTERFACESINTERFACETYPE_MPLSTUNNEL",
		280868081: "IETFINTERFACESINTERFACETYPE_ATM",
		281707114: "IETFINTERFACESINTERFACETYPE_SONET",
		282809795: "IETFINTERFACESINTERFACETYPE_ECONET",
		283365084: "IETFINTERFACESINTERFACETYPE_L3IPVLAN",
		284539790: "IETFINTERFACESINTERFACETYPE_ISO88026MAN",
		284732616: "IETFINTERFACESINTERFACETYPE_GFAST",
		287119162: "IETFINTERFACESINTERFACETYPE_CAPWAPDOT11BSS",
		288480505: "IETFINTERFACESINTERFACETYPE_ASYNC",
		290391966: "IETFINTERFACESINTERFACETYPE_DIGITALPOWERLINE",
		293951679: "IETFINTERFACESINTERFACETYPE_ETHERNET3MBIT",
		295222342: "IETFINTERFACESINTERFACETYPE_G703AT64K",
		299181714: "IETFINTERFACESINTERFACETYPE_ALUGPONPHYSICALUNI",
		299867081: "IETFINTERFACESINTERFACETYPE_HOMEPNA",
		300512605: "IETFINTERFACESINTERFACETYPE_SIP",
		301064637: "IETFINTERFACESINTERFACETYPE_EPLRS",
		301594276: "IETFINTERFACESINTERFACETYPE_PROPATM",
		302514551: "IETFINTERFACESINTERFACETYPE_PROTEON10MBIT",
		303230600: "IETFINTERFACESINTERFACETYPE_DOCSCABLESCTE55D1FWDOOB",
		303441265: "IETFINTERFACESINTERFACETYPE_ISO88022LLC",
		305592941: "IETFINTERFACESINTERFACETYPE_FASTETHERFX",
		305823410: "IETFINTERFACESINTERFACETYPE_ATMRADIO",
		307390607: "IETFINTERFACESINTERFACETYPE_CBLVECTASTAR",
		310683645: "IETFINTERFACESINTERFACETYPE_PARA",
		310831889: "IETFINTERFACESINTERFACETYPE_TUNNEL",
		311289458: "IETFINTERFACESINTERFACETYPE_VOICEOVERIP",
		314028106: "IETFINTERFACESINTERFACETYPE_OPTICALCHANNEL",
		315546603: "IETFINTERFACESINTERFACETYPE_Q2931",
		316291514: "IETFINTERFACESINTERFACETYPE_MVL",
		317130169: "IETFINTERFACESINTERFACETYPE_PPP",
		317625102: "IETFINTERFACESINTERFACETYPE_FRFORWARD",
		318235148: "IETFINTERFACESINTERFACETYPE_IEEE1394",
		319364675: "IETFINTERFACESINTERFACETYPE_AFLANE8025",
		319364677: "IETFINTERFACESINTERFACETYPE_AFLANE8023",
		319683734: "IETFINTERFACESINTERFACETYPE_ARCNET",
		320085758: "IETFINTERFACESINTERFACETYPE_VOICEENCAP",
		321577928: "IETFINTERFACESINTERFACETYPE_ATMVCIENDPT",
		323108786: "IETFINTERFACESINTERFACETYPE_ISO88023CSMACD",
		324059589: "IETFINTERFACESINTERFACETYPE_DOCSCABLEMCMTSDOWNSTREAM",
		327234998: "IETFINTERFACESINTERFACETYPE_FASTDSL",
		331858766: "IETFINTERFACESINTERFACETYPE_FRDLCIENDPT",
		335068882: "IETFINTERFACESINTERFACETYPE_ALUEPONLOGICALLINK",
		336028310: "IETFINTERFACESINTERFACETYPE_MOCAVERSION1",
		337561425: "IETFINTERFACESINTERFACETYPE_MFSIGLINK",
		346881905: "IETFINTERFACESINTERFACETYPE_G9981",
		346881906: "IETFINTERFACESINTERFACETYPE_G9982",
		346881907: "IETFINTERFACESINTERFACETYPE_G9983",
		348860930: "IETFINTERFACESINTERFACETYPE_GTP",
		349846687: "IETFINTERFACESINTERFACETYPE_MPC",
		352651815: "IETFINTERFACESINTERFACETYPE_DVBASIIN",
		353249714: "IETFINTERFACESINTERFACETYPE_HIPERLAN2",
		353395016: "IETFINTERFACESINTERFACETYPE_HSSI",
		356893880: "IETFINTERFACESINTERFACETYPE_VOICEEMFGD",
		358840141: "IETFINTERFACESINTERFACETYPE_SDLC",
		361654039: "IETFINTERFACESINTERFACETYPE_FRAMERELAYMPI",
		363685441: "IETFINTERFACESINTERFACETYPE_IFPWTYPE",
		365660696: "IETFINTERFACESINTERFACETYPE_CHANNEL",
		368321000: "IETFINTERFACESINTERFACETYPE_PROTEON80MBIT",
		368423037: "IETFINTERFACESINTERFACETYPE_V11",
		370817552: "IETFINTERFACESINTERFACETYPE_INTERLEAVE",
		370951175: "IETFINTERFACESINTERFACETYPE_VOICEOVERFRAMERELAY",
		371051115: "IETFINTERFACESINTERFACETYPE_DOCSCABLENDR",
		371051135: "IETFINTERFACESINTERFACETYPE_DOCSCABLENDF",
		373553475: "IETFINTERFACESINTERFACETYPE_IPOVERCLAW",
		374087486: "IETFINTERFACESINTERFACETYPE_ISO88025TOKENRING",
		377882412: "IETFINTERFACESINTERFACETYPE_CAPWAPWTPVIRTUALRADIO",
		379872273: "IETFINTERFACESINTERFACETYPE_IEEE80211",
		379872274: "IETFINTERFACESINTERFACETYPE_IEEE80212",
		382837620: "IETFINTERFACESINTERFACETYPE_HOSTPAD",
		383911039: "IETFINTERFACESINTERFACETYPE_SMDSICIP",
		384240760: "IETFINTERFACESINTERFACETYPE_PTM",
		384387804: "IETFINTERFACESINTERFACETYPE_SRP",
		384522045: "IETFINTERFACESINTERFACETYPE_GIGABITETHERNET",
		385064858: "IETFINTERFACESINTERFACETYPE_DVBASIOUT",
		385408320: "IETFINTERFACESINTERFACETYPE_MACSECCONTROLLEDIF",
		386381018: "IETFINTERFACESINTERFACETYPE_GR303RDT",
		389808788: "IETFINTERFACESINTERFACETYPE_PPPMULTILINKBUNDLE",
		392045632: "IETFINTERFACESINTERFACETYPE_STARLAN",
		398407724: "IETFINTERFACESINTERFACETYPE_VOICEFXO",
		398407728: "IETFINTERFACESINTERFACETYPE_VOICEFXS",
		399059610: "IETFINTERFACESINTERFACETYPE_DCN",
		401060431: "IETFINTERFACESINTERFACETYPE_DOCSCABLESCTE55D2DSOOB",
		401978180: "IETFINTERFACESINTERFACETYPE_V36",
		401978181: "IETFINTERFACESINTERFACETYPE_V37",
		401978183: "IETFINTERFACESINTERFACETYPE_V35",
		403182892: "IETFINTERFACESINTERFACETYPE_VOICEFGDOS",
		405008209: "IETFINTERFACESINTERFACETYPE_DS1FDL",
		405322027: "IETFINTERFACESINTERFACETYPE_H323PROXY",
		405615795: "IETFINTERFACESINTERFACETYPE_SOFTWARELOOPBACK",
		407559920: "IETFINTERFACESINTERFACETYPE_LAPF",
		407559922: "IETFINTERFACESINTERFACETYPE_LAPD",
		407559924: "IETFINTERFACESINTERFACETYPE_LAPB",
		408677579: "IETFINTERFACESINTERFACETYPE_QLLC",
		408914436: "IETFINTERFACESINTERFACETYPE_TERMPAD",
		410011967: "IETFINTERFACESINTERFACETYPE_BITS",
		411155170: "IETFINTERFACESINTERFACETYPE_DDNX25",
		413161059: "IETFINTERFACESINTERFACETYPE_IEEE8023ADLAG",
		413279788: "IETFINTERFACESINTERFACETYPE_G703AT2MB",
		416724613: "IETFINTERFACESINTERFACETYPE_GPON",
		420258513: "IETFINTERFACESINTERFACETYPE_ISO88025DTR",
		420647634: "IETFINTERFACESINTERFACETYPE_ATMSUBINTERFACE",
		428082364: "IETFINTERFACESINTERFACETYPE_VDSL",
		428242326: "IETFINTERFACESINTERFACETYPE_DOCSOFDMAUPSTREAM",
		430304464: "IETFINTERFACESINTERFACETYPE_VMWARENICTEAM",
		432639291: "IETFINTERFACESINTERFACETYPE_IEEE802154",
		434730178: "IETFINTERFACESINTERFACETYPE_L3IPXVLAN",
		437373544: "IETFINTERFACESINTERFACETYPE_ATMIMA",
		438273729: "IETFINTERFACESINTERFACETYPE_MACSECUNCONTROLLEDIF",
		441424349: "IETFINTERFACESINTERFACETYPE_FCIPLINK",
		443995157: "IETFINTERFACESINTERFACETYPE_SLIP",
		444909704: "IETFINTERFACESINTERFACETYPE_SIPSIG",
		444910235: "IETFINTERFACESINTERFACETYPE_MPEGTRANSPORT",
		445020348: "IETFINTERFACESINTERFACETYPE_ISUP",
		448544526: "IETFINTERFACESINTERFACETYPE_CCTEMUL",
		451132219: "IETFINTERFACESINTERFACETYPE_ULTRA",
		455303077: "IETFINTERFACESINTERFACETYPE_IANA_INTERFACE_TYPE",
		458492100: "IETFINTERFACESINTERFACETYPE_TDLC",
		460680391: "IETFINTERFACESINTERFACETYPE_VOICEOVERATM",
		461328495: "IETFINTERFACESINTERFACETYPE_ALUEPONONU",
		467591542: "IETFINTERFACESINTERFACETYPE_RSRB",
		469979751: "IETFINTERFACESINTERFACETYPE_SHDSL",
		469979921: "IETFINTERFACESINTERFACETYPE_PROPPOINTTOPOINTSERIAL",
		477583546: "IETFINTERFACESINTERFACETYPE_DOCSCABLESCTE55D1RETOOB",
		477828023: "IETFINTERFACESINTERFACETYPE_MYRINET",
		487014318: "IETFINTERFACESINTERFACETYPE_H323GATEKEEPER",
		487580074: "IETFINTERFACESINTERFACETYPE_IPOVERATM",
		490139090: "IETFINTERFACESINTERFACETYPE_OTNOTU",
		491118442: "IETFINTERFACESINTERFACETYPE_ALUELP",
		499352976: "IETFINTERFACESINTERFACETYPE_COMPOSITELINK",
		501537006: "IETFINTERFACESINTERFACETYPE_QAM",
		502195319: "IETFINTERFACESINTERFACETYPE_INFINIBAND",
		504532095: "IETFINTERFACESINTERFACETYPE_HIPPI",
		505127867: "IETFINTERFACESINTERFACETYPE_DVBRCSMACLAYER",
		507519306: "IETFINTERFACESINTERFACETYPE_ATMBOND",
		513673897: "IETFINTERFACESINTERFACETYPE_ILAN",
		513812603: "IETFINTERFACESINTERFACETYPE_SS7SIGLINK",
		516003680: "IETFINTERFACESINTERFACETYPE_DOCSOFDMDOWNSTREAM",
		516076235: "IETFINTERFACESINTERFACETYPE_AVICIOPTICALETHER",
		518755753: "IETFINTERFACESINTERFACETYPE_RPR",
		526983982: "IETFINTERFACESINTERFACETYPE_SIPTG",
		527365956: "IETFINTERFACESINTERFACETYPE_WWANPP",
		529837048: "IETFINTERFACESINTERFACETYPE_HIPPIINTERFACE",
		531578942: "IETFINTERFACESINTERFACETYPE_WWANPP2",
		532084325: "IETFINTERFACESINTERFACETYPE_VOICEEBS",
		532973469: "IETFINTERFACESINTERFACETYPE_BSC",
		535720499: "IETFINTERFACESINTERFACETYPE_MIOX25",
		536418624: "IETFINTERFACESINTERFACETYPE_HDLC",
	}
	IETFInterfacesInterfaceType_value = map[string]int32{
		"IETFINTERFACESINTERFACETYPE_UNSET":                         0,
		"IETFINTERFACESINTERFACETYPE_VMWAREVIRTUALNIC":              1565006,
		"IETFINTERFACESINTERFACETYPE_SDSL":                          6510195,
		"IETFINTERFACESINTERFACETYPE_RADSL":                         6740905,
		"IETFINTERFACESINTERFACETYPE_X86LAPS":                       6820753,
		"IETFINTERFACESINTERFACETYPE_LOCALTALK":                     8569638,
		"IETFINTERFACESINTERFACETYPE_DLSW":                          9975993,
		"IETFINTERFACESINTERFACETYPE_IDSL":                          11625257,
		"IETFINTERFACESINTERFACETYPE_NFAS":                          15826611,
		"IETFINTERFACESINTERFACETYPE_BRIDGE":                        16268636,
		"IETFINTERFACESINTERFACETYPE_DOCSCABLESCTE55D2USOOB":        26367302,
		"IETFINTERFACESINTERFACETYPE_IEEE80216WMAN":                 27144395,
		"IETFINTERFACESINTERFACETYPE_TR008":                         29978951,
		"IETFINTERFACESINTERFACETYPE_DVBRCCUPSTREAM":                32753636,
		"IETFINTERFACESINTERFACETYPE_PROPDOCSWIRELESSDOWNSTREAM":    33042753,
		"IETFINTERFACESINTERFACETYPE_FRF16MFRBUNDLE":                33466019,
		"IETFINTERFACESINTERFACETYPE_ACTELISMETALOOP":               33876615,
		"IETFINTERFACESINTERFACETYPE_VIRTUALIPADDRESS":              34837125,
		"IETFINTERFACESINTERFACETYPE_HDSL2":                         35292480,
		"IETFINTERFACESINTERFACETYPE_VIRTUALTG":                     36505915,
		"IETFINTERFACESINTERFACETYPE_PDNETHERLOOP1":                 39592732,
		"IETFINTERFACESINTERFACETYPE_PDNETHERLOOP2":                 39592735,
		"IETFINTERFACESINTERFACETYPE_DOCSCABLEUPSTREAM":             40317714,
		"IETFINTERFACESINTERFACETYPE_MSDSL":                         42288188,
		"IETFINTERFACESINTERFACETYPE_FDDI":                          45545244,
		"IETFINTERFACESINTERFACETYPE_GFP":                           46876684,
		"IETFINTERFACESINTERFACETYPE_PROPWIRELESSP2P":               47272810,
		"IETFINTERFACESINTERFACETYPE_FIBRECHANNEL":                  48464202,
		"IETFINTERFACESINTERFACETYPE_PROPBWAP2MP":                   53391395,
		"IETFINTERFACESINTERFACETYPE_MPLS":                          59594435,
		"IETFINTERFACESINTERFACETYPE_FAST":                          62764217,
		"IETFINTERFACESINTERFACETYPE_VOICEEM":                       68512445,
		"IETFINTERFACESINTERFACETYPE_RFC1483":                       71949014,
		"IETFINTERFACESINTERFACETYPE_OPTICALTRANSPORT":              72145124,
		"IETFINTERFACESINTERFACETYPE_IPSWITCH":                      75335244,
		"IETFINTERFACESINTERFACETYPE_FRAMERELAYSERVICE":             76605298,
		"IETFINTERFACESINTERFACETYPE_DOCSCABLEDOWNSTREAM":           82085109,
		"IETFINTERFACESINTERFACETYPE_SMDSDXI":                       82940545,
		"IETFINTERFACESINTERFACETYPE_X213":                          86923325,
		"IETFINTERFACESINTERFACETYPE_DVBRCSTDMA":                    87219061,
		"IETFINTERFACESINTERFACETYPE_REACHDSL":                      94937173,
		"IETFINTERFACESINTERFACETYPE_ISO88025FIBER":                 95814573,
		"IETFINTERFACESINTERFACETYPE_CES":                           96608266,
		"IETFINTERFACESINTERFACETYPE_ISDNS":                         98224960,
		"IETFINTERFACESINTERFACETYPE_ISDNU":                         98224966,
		"IETFINTERFACESINTERFACETYPE_CISCOISLVLAN":                  98611879,
		"IETFINTERFACESINTERFACETYPE_E1":                            98947197,
		"IETFINTERFACESINTERFACETYPE_OTHER":                         102886491,
		"IETFINTERFACESINTERFACETYPE_PROPMULTIPLEXOR":               104872999,
		"IETFINTERFACESINTERFACETYPE_ISO88025CRFPINT":               107406283,
		"IETFINTERFACESINTERFACETYPE_OPTICALCHANNELGROUP":           113721035,
		"IETFINTERFACESINTERFACETYPE_DTM":                           113840220,
		"IETFINTERFACESINTERFACETYPE_FRAMERELAYINTERCONNECT":        114395621,
		"IETFINTERFACESINTERFACETYPE_VDSL2":                         114521030,
		"IETFINTERFACESINTERFACETYPE_ESCON":                         115055825,
		"IETFINTERFACESINTERFACETYPE_RFC877X25":                     115857711,
		"IETFINTERFACESINTERFACETYPE_X25MLP":                        123303819,
		"IETFINTERFACESINTERFACETYPE_DOCSCABLEMACLAYER":             123379145,
		"IETFINTERFACESINTERFACETYPE_BGPPOLICYACCOUNTING":           123979459,
		"IETFINTERFACESINTERFACETYPE_A12MPPSWITCH":                  124516534,
		"IETFINTERFACESINTERFACETYPE_RS232":                         125504151,
		"IETFINTERFACESINTERFACETYPE_IFVFITYPE":                     125597175,
		"IETFINTERFACESINTERFACETYPE_ATMVIRTUAL":                    126930162,
		"IETFINTERFACESINTERFACETYPE_DS0":                           130617844,
		"IETFINTERFACESINTERFACETYPE_DS1":                           130617845,
		"IETFINTERFACESINTERFACETYPE_DS3":                           130617847,
		"IETFINTERFACESINTERFACETYPE_USB":                           133030655,
		"IETFINTERFACESINTERFACETYPE_XBOXWIRELESS":                  134112364,
		"IETFINTERFACESINTERFACETYPE_L2VLAN":                        136888738,
		"IETFINTERFACESINTERFACETYPE_ALUGPONONU":                    142838813,
		"IETFINTERFACESINTERFACETYPE_IBM370PARCHAN":                 144282644,
		"IETFINTERFACESINTERFACETYPE_IF_GSN":                        144667633,
		"IETFINTERFACESINTERFACETYPE_PROPVIRTUAL":                   151318645,
		"IETFINTERFACESINTERFACETYPE_DOCSCABLEUPSTREAMRFPORT":       152154307,
		"IETFINTERFACESINTERFACETYPE_GR303IDT":                      152588497,
		"IETFINTERFACESINTERFACETYPE_DVBTDM":                        154146406,
		"IETFINTERFACESINTERFACETYPE_HYPERCHANNEL":                  154271532,
		"IETFINTERFACESINTERFACETYPE_X25PLE":                        154740499,
		"IETFINTERFACESINTERFACETYPE_FASTETHER":                     154868491,
		"IETFINTERFACESINTERFACETYPE_ADSL":                          159068577,
		"IETFINTERFACESINTERFACETYPE_STACKTOSTACK":                  159738210,
		"IETFINTERFACESINTERFACETYPE_ADSL2PLUS":                     161466077,
		"IETFINTERFACESINTERFACETYPE_IPFORWARD":                     164396743,
		"IETFINTERFACESINTERFACETYPE_IMT":                           164717531,
		"IETFINTERFACESINTERFACETYPE_IP":                            166057704,
		"IETFINTERFACESINTERFACETYPE_PIP":                           166131694,
		"IETFINTERFACESINTERFACETYPE_X25HUNTGROUP":                  167843534,
		"IETFINTERFACESINTERFACETYPE_ALUEPON":                       168357285,
		"IETFINTERFACESINTERFACETYPE_ALUEPONPHYSICALUNI":            173089984,
		"IETFINTERFACESINTERFACETYPE_PROPCNLS":                      175632828,
		"IETFINTERFACESINTERFACETYPE_CAPWAPDOT11PROFILE":            178725861,
		"IETFINTERFACESINTERFACETYPE_VOICEDID":                      179978682,
		"IETFINTERFACESINTERFACETYPE_CNR":                           180496426,
		"IETFINTERFACESINTERFACETYPE_HDH1822":                       181667598,
		"IETFINTERFACESINTERFACETYPE_ATMDXI":                        185164750,
		"IETFINTERFACESINTERFACETYPE_ARCNETPLUS":                    185743218,
		"IETFINTERFACESINTERFACETYPE_IPOVERCDLC":                    187706792,
		"IETFINTERFACESINTERFACETYPE_LINEGROUP":                     188639782,
		"IETFINTERFACESINTERFACETYPE_DVBRCCMACLAYER":                190229931,
		"IETFINTERFACESINTERFACETYPE_FRAMERELAY":                    192403649,
		"IETFINTERFACESINTERFACETYPE_ISDN":                          193369057,
		"IETFINTERFACESINTERFACETYPE_VOICEOVERCABLE":                193481284,
		"IETFINTERFACESINTERFACETYPE_ARAP":                          194889541,
		"IETFINTERFACESINTERFACETYPE_EON":                           197568375,
		"IETFINTERFACESINTERFACETYPE_SONETOVERHEADCHANNEL":          198587275,
		"IETFINTERFACESINTERFACETYPE_SIXTOFOUR":                     198588222,
		"IETFINTERFACESINTERFACETYPE_POS":                           199686839,
		"IETFINTERFACESINTERFACETYPE_ETHERNETCSMACD":                200640927,
		"IETFINTERFACESINTERFACETYPE_DS0BUNDLE":                     201568324,
		"IETFINTERFACESINTERFACETYPE_ATMLOGICAL":                    209365342,
		"IETFINTERFACESINTERFACETYPE_RADIOMAC":                      210946377,
		"IETFINTERFACESINTERFACETYPE_PROPDOCSWIRELESSMACLAYER":      212348549,
		"IETFINTERFACESINTERFACETYPE_PON622":                        214224204,
		"IETFINTERFACESINTERFACETYPE_NSIP":                          215039369,
		"IETFINTERFACESINTERFACETYPE_MODEM":                         220777299,
		"IETFINTERFACESINTERFACETYPE_OTNODU":                        221697026,
		"IETFINTERFACESINTERFACETYPE_ISO88024TOKENBUS":              226662339,
		"IETFINTERFACESINTERFACETYPE_COFFEE":                        228642743,
		"IETFINTERFACESINTERFACETYPE_DOCSCABLEUPSTREAMCHANNEL":      230766155,
		"IETFINTERFACESINTERFACETYPE_ATMFUNI":                       231177305,
		"IETFINTERFACESINTERFACETYPE_LMP":                           232563358,
		"IETFINTERFACESINTERFACETYPE_ADSL2":                         233775169,
		"IETFINTERFACESINTERFACETYPE_CABLEDOWNSTREAMRFPORT":         235031767,
		"IETFINTERFACESINTERFACETYPE_DVBRCCDOWNSTREAM":              237186979,
		"IETFINTERFACESINTERFACETYPE_MEDIAMAILOVERIP":               237300945,
		"IETFINTERFACESINTERFACETYPE_BASICISDN":                     240798305,
		"IETFINTERFACESINTERFACETYPE_PLC":                           250019614,
		"IETFINTERFACESINTERFACETYPE_PROPDOCSWIRELESSUPSTREAM":      259946614,
		"IETFINTERFACESINTERFACETYPE_TELINK":                        263561362,
		"IETFINTERFACESINTERFACETYPE_PON155":                        265689965,
		"IETFINTERFACESINTERFACETYPE_TRANSPHDLC":                    266205262,
		"IETFINTERFACESINTERFACETYPE_SONETVT":                       269056588,
		"IETFINTERFACESINTERFACETYPE_DIGITALWRAPPEROVERHEADCHANNEL": 269831139,
		"IETFINTERFACESINTERFACETYPE_VOICEFGDEANA":                  271377999,
		"IETFINTERFACESINTERFACETYPE_PRIMARYISDN":                   274718125,
		"IETFINTERFACESINTERFACETYPE_SDCI":                          274951974,
		"IETFINTERFACESINTERFACETYPE_REGULAR1822":                   275236866,
		"IETFINTERFACESINTERFACETYPE_AAL5":                          276070712,
		"IETFINTERFACESINTERFACETYPE_AAL2":                          276070719,
		"IETFINTERFACESINTERFACETYPE_SONETPATH":                     278556471,
		"IETFINTERFACESINTERFACETYPE_MPLSTUNNEL":                    280402025,
		"IETFINTERFACESINTERFACETYPE_ATM":                           280868081,
		"IETFINTERFACESINTERFACETYPE_SONET":                         281707114,
		"IETFINTERFACESINTERFACETYPE_ECONET":                        282809795,
		"IETFINTERFACESINTERFACETYPE_L3IPVLAN":                      283365084,
		"IETFINTERFACESINTERFACETYPE_ISO88026MAN":                   284539790,
		"IETFINTERFACESINTERFACETYPE_GFAST":                         284732616,
		"IETFINTERFACESINTERFACETYPE_CAPWAPDOT11BSS":                287119162,
		"IETFINTERFACESINTERFACETYPE_ASYNC":                         288480505,
		"IETFINTERFACESINTERFACETYPE_DIGITALPOWERLINE":              290391966,
		"IETFINTERFACESINTERFACETYPE_ETHERNET3MBIT":                 293951679,
		"IETFINTERFACESINTERFACETYPE_G703AT64K":                     295222342,
		"IETFINTERFACESINTERFACETYPE_ALUGPONPHYSICALUNI":            299181714,
		"IETFINTERFACESINTERFACETYPE_HOMEPNA":                       299867081,
		"IETFINTERFACESINTERFACETYPE_SIP":                           300512605,
		"IETFINTERFACESINTERFACETYPE_EPLRS":                         301064637,
		"IETFINTERFACESINTERFACETYPE_PROPATM":                       301594276,
		"IETFINTERFACESINTERFACETYPE_PROTEON10MBIT":                 302514551,
		"IETFINTERFACESINTERFACETYPE_DOCSCABLESCTE55D1FWDOOB":       303230600,
		"IETFINTERFACESINTERFACETYPE_ISO88022LLC":                   303441265,
		"IETFINTERFACESINTERFACETYPE_FASTETHERFX":                   305592941,
		"IETFINTERFACESINTERFACETYPE_ATMRADIO":                      305823410,
		"IETFINTERFACESINTERFACETYPE_CBLVECTASTAR":                  307390607,
		"IETFINTERFACESINTERFACETYPE_PARA":                          310683645,
		"IETFINTERFACESINTERFACETYPE_TUNNEL":                        310831889,
		"IETFINTERFACESINTERFACETYPE_VOICEOVERIP":                   311289458,
		"IETFINTERFACESINTERFACETYPE_OPTICALCHANNEL":                314028106,
		"IETFINTERFACESINTERFACETYPE_Q2931":                         315546603,
		"IETFINTERFACESINTERFACETYPE_MVL":                           316291514,
		"IETFINTERFACESINTERFACETYPE_PPP":                           317130169,
		"IETFINTERFACESINTERFACETYPE_FRFORWARD":                     317625102,
		"IETFINTERFACESINTERFACETYPE_IEEE1394":                      318235148,
		"IETFINTERFACESINTERFACETYPE_AFLANE8025":                    319364675,
		"IETFINTERFACESINTERFACETYPE_AFLANE8023":                    319364677,
		"IETFINTERFACESINTERFACETYPE_ARCNET":                        319683734,
		"IETFINTERFACESINTERFACETYPE_VOICEENCAP":                    320085758,
		"IETFINTERFACESINTERFACETYPE_ATMVCIENDPT":                   321577928,
		"IETFINTERFACESINTERFACETYPE_ISO88023CSMACD":                323108786,
		"IETFINTERFACESINTERFACETYPE_DOCSCABLEMCMTSDOWNSTREAM":      324059589,
		"IETFINTERFACESINTERFACETYPE_FASTDSL":                       327234998,
		"IETFINTERFACESINTERFACETYPE_FRDLCIENDPT":                   331858766,
		"IETFINTERFACESINTERFACETYPE_ALUEPONLOGICALLINK":            335068882,
		"IETFINTERFACESINTERFACETYPE_MOCAVERSION1":                  336028310,
		"IETFINTERFACESINTERFACETYPE_MFSIGLINK":                     337561425,
		"IETFINTERFACESINTERFACETYPE_G9981":                         346881905,
		"IETFINTERFACESINTERFACETYPE_G9982":                         346881906,
		"IETFINTERFACESINTERFACETYPE_G9983":                         346881907,
		"IETFINTERFACESINTERFACETYPE_GTP":                           348860930,
		"IETFINTERFACESINTERFACETYPE_MPC":                           349846687,
		"IETFINTERFACESINTERFACETYPE_DVBASIIN":                      352651815,
		"IETFINTERFACESINTERFACETYPE_HIPERLAN2":                     353249714,
		"IETFINTERFACESINTERFACETYPE_HSSI":                          353395016,
		"IETFINTERFACESINTERFACETYPE_VOICEEMFGD":                    356893880,
		"IETFINTERFACESINTERFACETYPE_SDLC":                          358840141,
		"IETFINTERFACESINTERFACETYPE_FRAMERELAYMPI":                 361654039,
		"IETFINTERFACESINTERFACETYPE_IFPWTYPE":                      363685441,
		"IETFINTERFACESINTERFACETYPE_CHANNEL":                       365660696,
		"IETFINTERFACESINTERFACETYPE_PROTEON80MBIT":                 368321000,
		"IETFINTERFACESINTERFACETYPE_V11":                           368423037,
		"IETFINTERFACESINTERFACETYPE_INTERLEAVE":                    370817552,
		"IETFINTERFACESINTERFACETYPE_VOICEOVERFRAMERELAY":           370951175,
		"IETFINTERFACESINTERFACETYPE_DOCSCABLENDR":                  371051115,
		"IETFINTERFACESINTERFACETYPE_DOCSCABLENDF":                  371051135,
		"IETFINTERFACESINTERFACETYPE_IPOVERCLAW":                    373553475,
		"IETFINTERFACESINTERFACETYPE_ISO88025TOKENRING":             374087486,
		"IETFINTERFACESINTERFACETYPE_CAPWAPWTPVIRTUALRADIO":         377882412,
		"IETFINTERFACESINTERFACETYPE_IEEE80211":                     379872273,
		"IETFINTERFACESINTERFACETYPE_IEEE80212":                     379872274,
		"IETFINTERFACESINTERFACETYPE_HOSTPAD":                       382837620,
		"IETFINTERFACESINTERFACETYPE_SMDSICIP":                      383911039,
		"IETFINTERFACESINTERFACETYPE_PTM":                           384240760,
		"IETFINTERFACESINTERFACETYPE_SRP":                           384387804,
		"IETFINTERFACESINTERFACETYPE_GIGABITETHERNET":               384522045,
		"IETFINTERFACESINTERFACETYPE_DVBASIOUT":                     385064858,
		"IETFINTERFACESINTERFACETYPE_MACSECCONTROLLEDIF":            385408320,
		"IETFINTERFACESINTERFACETYPE_GR303RDT":                      386381018,
		"IETFINTERFACESINTERFACETYPE_PPPMULTILINKBUNDLE":            389808788,
		"IETFINTERFACESINTERFACETYPE_STARLAN":                       392045632,
		"IETFINTERFACESINTERFACETYPE_VOICEFXO":                      398407724,
		"IETFINTERFACESINTERFACETYPE_VOICEFXS":                      398407728,
		"IETFINTERFACESINTERFACETYPE_DCN":                           399059610,
		"IETFINTERFACESINTERFACETYPE_DOCSCABLESCTE55D2DSOOB":        401060431,
		"IETFINTERFACESINTERFACETYPE_V36":                           401978180,
		"IETFINTERFACESINTERFACETYPE_V37":                           401978181,
		"IETFINTERFACESINTERFACETYPE_V35":                           401978183,
		"IETFINTERFACESINTERFACETYPE_VOICEFGDOS":                    403182892,
		"IETFINTERFACESINTERFACETYPE_DS1FDL":                        405008209,
		"IETFINTERFACESINTERFACETYPE_H323PROXY":                     405322027,
		"IETFINTERFACESINTERFACETYPE_SOFTWARELOOPBACK":              405615795,
		"IETFINTERFACESINTERFACETYPE_LAPF":                          407559920,
		"IETFINTERFACESINTERFACETYPE_LAPD":                          407559922,
		"IETFINTERFACESINTERFACETYPE_LAPB":                          407559924,
		"IETFINTERFACESINTERFACETYPE_QLLC":                          408677579,
		"IETFINTERFACESINTERFACETYPE_TERMPAD":                       408914436,
		"IETFINTERFACESINTERFACETYPE_BITS":                          410011967,
		"IETFINTERFACESINTERFACETYPE_DDNX25":                        411155170,
		"IETFINTERFACESINTERFACETYPE_IEEE8023ADLAG":                 413161059,
		"IETFINTERFACESINTERFACETYPE_G703AT2MB":                     413279788,
		"IETFINTERFACESINTERFACETYPE_GPON":                          416724613,
		"IETFINTERFACESINTERFACETYPE_ISO88025DTR":                   420258513,
		"IETFINTERFACESINTERFACETYPE_ATMSUBINTERFACE":               420647634,
		"IETFINTERFACESINTERFACETYPE_VDSL":                          428082364,
		"IETFINTERFACESINTERFACETYPE_DOCSOFDMAUPSTREAM":             428242326,
		"IETFINTERFACESINTERFACETYPE_VMWARENICTEAM":                 430304464,
		"IETFINTERFACESINTERFACETYPE_IEEE802154":                    432639291,
		"IETFINTERFACESINTERFACETYPE_L3IPXVLAN":                     434730178,
		"IETFINTERFACESINTERFACETYPE_ATMIMA":                        437373544,
		"IETFINTERFACESINTERFACETYPE_MACSECUNCONTROLLEDIF":          438273729,
		"IETFINTERFACESINTERFACETYPE_FCIPLINK":                      441424349,
		"IETFINTERFACESINTERFACETYPE_SLIP":                          443995157,
		"IETFINTERFACESINTERFACETYPE_SIPSIG":                        444909704,
		"IETFINTERFACESINTERFACETYPE_MPEGTRANSPORT":                 444910235,
		"IETFINTERFACESINTERFACETYPE_ISUP":                          445020348,
		"IETFINTERFACESINTERFACETYPE_CCTEMUL":                       448544526,
		"IETFINTERFACESINTERFACETYPE_ULTRA":                         451132219,
		"IETFINTERFACESINTERFACETYPE_IANA_INTERFACE_TYPE":           455303077,
		"IETFINTERFACESINTERFACETYPE_TDLC":                          458492100,
		"IETFINTERFACESINTERFACETYPE_VOICEOVERATM":                  460680391,
		"IETFINTERFACESINTERFACETYPE_ALUEPONONU":                    461328495,
		"IETFINTERFACESINTERFACETYPE_RSRB":                          467591542,
		"IETFINTERFACESINTERFACETYPE_SHDSL":                         469979751,
		"IETFINTERFACESINTERFACETYPE_PROPPOINTTOPOINTSERIAL":        469979921,
		"IETFINTERFACESINTERFACETYPE_DOCSCABLESCTE55D1RETOOB":       477583546,
		"IETFINTERFACESINTERFACETYPE_MYRINET":                       477828023,
		"IETFINTERFACESINTERFACETYPE_H323GATEKEEPER":                487014318,
		"IETFINTERFACESINTERFACETYPE_IPOVERATM":                     487580074,
		"IETFINTERFACESINTERFACETYPE_OTNOTU":                        490139090,
		"IETFINTERFACESINTERFACETYPE_ALUELP":                        491118442,
		"IETFINTERFACESINTERFACETYPE_COMPOSITELINK":                 499352976,
		"IETFINTERFACESINTERFACETYPE_QAM":                           501537006,
		"IETFINTERFACESINTERFACETYPE_INFINIBAND":                    502195319,
		"IETFINTERFACESINTERFACETYPE_HIPPI":                         504532095,
		"IETFINTERFACESINTERFACETYPE_DVBRCSMACLAYER":                505127867,
		"IETFINTERFACESINTERFACETYPE_ATMBOND":                       507519306,
		"IETFINTERFACESINTERFACETYPE_ILAN":                          513673897,
		"IETFINTERFACESINTERFACETYPE_SS7SIGLINK":                    513812603,
		"IETFINTERFACESINTERFACETYPE_DOCSOFDMDOWNSTREAM":            516003680,
		"IETFINTERFACESINTERFACETYPE_AVICIOPTICALETHER":             516076235,
		"IETFINTERFACESINTERFACETYPE_RPR":                           518755753,
		"IETFINTERFACESINTERFACETYPE_SIPTG":                         526983982,
		"IETFINTERFACESINTERFACETYPE_WWANPP":                        527365956,
		"IETFINTERFACESINTERFACETYPE_HIPPIINTERFACE":                529837048,
		"IETFINTERFACESINTERFACETYPE_WWANPP2":                       531578942,
		"IETFINTERFACESINTERFACETYPE_VOICEEBS":                      532084325,
		"IETFINTERFACESINTERFACETYPE_BSC":                           532973469,
		"IETFINTERFACESINTERFACETYPE_MIOX25":                        535720499,
		"IETFINTERFACESINTERFACETYPE_HDLC":                          536418624,
	}
)

func (x IETFInterfacesInterfaceType) Enum() *IETFInterfacesInterfaceType {
	p := new(IETFInterfacesInterfaceType)
	*p = x
	return p
}

func (x IETFInterfacesInterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IETFInterfacesInterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[0].Descriptor()
}

func (IETFInterfacesInterfaceType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[0]
}

func (x IETFInterfacesInterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IETFInterfacesInterfaceType.Descriptor instead.
func (IETFInterfacesInterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{0}
}

// OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE represents an enumerated type generated for the YANG identity AAA_ACCOUNTING_EVENT_TYPE.
type OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE int32

const (
	OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_UNSET                        OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE = 0
	OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_AAA_ACCOUNTING_EVENT_LOGIN   OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE = 32244738
	OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_AAA_ACCOUNTING_EVENT_COMMAND OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE = 42489322
)

// Enum value maps for OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE.
var (
	OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_name = map[int32]string{
		0:        "OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_UNSET",
		32244738: "OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_AAA_ACCOUNTING_EVENT_LOGIN",
		42489322: "OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_AAA_ACCOUNTING_EVENT_COMMAND",
	}
	OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_value = map[string]int32{
		"OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_UNSET":                        0,
		"OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_AAA_ACCOUNTING_EVENT_LOGIN":   32244738,
		"OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_AAA_ACCOUNTING_EVENT_COMMAND": 42489322,
	}
)

func (x OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE) Enum() *OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE {
	p := new(OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE)
	*p = x
	return p
}

func (x OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[1].Descriptor()
}

func (OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[1]
}

func (x OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE.Descriptor instead.
func (OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{1}
}

// OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE represents an enumerated type generated for the YANG identity AAA_AUTHORIZATION_EVENT_TYPE.
type OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE int32

const (
	OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_UNSET                           OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE = 0
	OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_AAA_AUTHORIZATION_EVENT_COMMAND OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE = 274509164
	OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_AAA_AUTHORIZATION_EVENT_CONFIG  OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE = 470326711
)

// Enum value maps for OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE.
var (
	OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_name = map[int32]string{
		0:         "OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_UNSET",
		274509164: "OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_AAA_AUTHORIZATION_EVENT_COMMAND",
		470326711: "OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_AAA_AUTHORIZATION_EVENT_CONFIG",
	}
	OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_value = map[string]int32{
		"OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_UNSET":                           0,
		"OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_AAA_AUTHORIZATION_EVENT_COMMAND": 274509164,
		"OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_AAA_AUTHORIZATION_EVENT_CONFIG":  470326711,
	}
)

func (x OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE) Enum() *OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE {
	p := new(OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE)
	*p = x
	return p
}

func (x OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[2].Descriptor()
}

func (OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[2]
}

func (x OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE.Descriptor instead.
func (OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{2}
}

// OpenconfigAaaTypesAAAMETHODTYPE represents an enumerated type generated for the YANG identity AAA_METHOD_TYPE.
type OpenconfigAaaTypesAAAMETHODTYPE int32

const (
	OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET      OpenconfigAaaTypesAAAMETHODTYPE = 0
	OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_TACACS_ALL OpenconfigAaaTypesAAAMETHODTYPE = 419164516
	OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_RADIUS_ALL OpenconfigAaaTypesAAAMETHODTYPE = 492107981
	OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_LOCAL      OpenconfigAaaTypesAAAMETHODTYPE = 525920480
)

// Enum value maps for OpenconfigAaaTypesAAAMETHODTYPE.
var (
	OpenconfigAaaTypesAAAMETHODTYPE_name = map[int32]string{
		0:         "OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET",
		419164516: "OPENCONFIGAAATYPESAAAMETHODTYPE_TACACS_ALL",
		492107981: "OPENCONFIGAAATYPESAAAMETHODTYPE_RADIUS_ALL",
		525920480: "OPENCONFIGAAATYPESAAAMETHODTYPE_LOCAL",
	}
	OpenconfigAaaTypesAAAMETHODTYPE_value = map[string]int32{
		"OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET":      0,
		"OPENCONFIGAAATYPESAAAMETHODTYPE_TACACS_ALL": 419164516,
		"OPENCONFIGAAATYPESAAAMETHODTYPE_RADIUS_ALL": 492107981,
		"OPENCONFIGAAATYPESAAAMETHODTYPE_LOCAL":      525920480,
	}
)

func (x OpenconfigAaaTypesAAAMETHODTYPE) Enum() *OpenconfigAaaTypesAAAMETHODTYPE {
	p := new(OpenconfigAaaTypesAAAMETHODTYPE)
	*p = x
	return p
}

func (x OpenconfigAaaTypesAAAMETHODTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAaaTypesAAAMETHODTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[3].Descriptor()
}

func (OpenconfigAaaTypesAAAMETHODTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[3]
}

func (x OpenconfigAaaTypesAAAMETHODTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAaaTypesAAAMETHODTYPE.Descriptor instead.
func (OpenconfigAaaTypesAAAMETHODTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{3}
}

// OpenconfigAaaTypesAAASERVERTYPE represents an enumerated type generated for the YANG identity AAA_SERVER_TYPE.
type OpenconfigAaaTypesAAASERVERTYPE int32

const (
	OpenconfigAaaTypesAAASERVERTYPE_OPENCONFIGAAATYPESAAASERVERTYPE_UNSET  OpenconfigAaaTypesAAASERVERTYPE = 0
	OpenconfigAaaTypesAAASERVERTYPE_OPENCONFIGAAATYPESAAASERVERTYPE_TACACS OpenconfigAaaTypesAAASERVERTYPE = 5938954
	OpenconfigAaaTypesAAASERVERTYPE_OPENCONFIGAAATYPESAAASERVERTYPE_RADIUS OpenconfigAaaTypesAAASERVERTYPE = 19148247
)

// Enum value maps for OpenconfigAaaTypesAAASERVERTYPE.
var (
	OpenconfigAaaTypesAAASERVERTYPE_name = map[int32]string{
		0:        "OPENCONFIGAAATYPESAAASERVERTYPE_UNSET",
		5938954:  "OPENCONFIGAAATYPESAAASERVERTYPE_TACACS",
		19148247: "OPENCONFIGAAATYPESAAASERVERTYPE_RADIUS",
	}
	OpenconfigAaaTypesAAASERVERTYPE_value = map[string]int32{
		"OPENCONFIGAAATYPESAAASERVERTYPE_UNSET":  0,
		"OPENCONFIGAAATYPESAAASERVERTYPE_TACACS": 5938954,
		"OPENCONFIGAAATYPESAAASERVERTYPE_RADIUS": 19148247,
	}
)

func (x OpenconfigAaaTypesAAASERVERTYPE) Enum() *OpenconfigAaaTypesAAASERVERTYPE {
	p := new(OpenconfigAaaTypesAAASERVERTYPE)
	*p = x
	return p
}

func (x OpenconfigAaaTypesAAASERVERTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAaaTypesAAASERVERTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[4].Descriptor()
}

func (OpenconfigAaaTypesAAASERVERTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[4]
}

func (x OpenconfigAaaTypesAAASERVERTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAaaTypesAAASERVERTYPE.Descriptor instead.
func (OpenconfigAaaTypesAAASERVERTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{4}
}

// OpenconfigAaaTypesSYSTEMDEFINEDROLES represents an enumerated type generated for the YANG identity SYSTEM_DEFINED_ROLES.
type OpenconfigAaaTypesSYSTEMDEFINEDROLES int32

const (
	OpenconfigAaaTypesSYSTEMDEFINEDROLES_OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_UNSET             OpenconfigAaaTypesSYSTEMDEFINEDROLES = 0
	OpenconfigAaaTypesSYSTEMDEFINEDROLES_OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_SYSTEM_ROLE_ADMIN OpenconfigAaaTypesSYSTEMDEFINEDROLES = 390815160
)

// Enum value maps for OpenconfigAaaTypesSYSTEMDEFINEDROLES.
var (
	OpenconfigAaaTypesSYSTEMDEFINEDROLES_name = map[int32]string{
		0:         "OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_UNSET",
		390815160: "OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_SYSTEM_ROLE_ADMIN",
	}
	OpenconfigAaaTypesSYSTEMDEFINEDROLES_value = map[string]int32{
		"OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_UNSET":             0,
		"OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_SYSTEM_ROLE_ADMIN": 390815160,
	}
)

func (x OpenconfigAaaTypesSYSTEMDEFINEDROLES) Enum() *OpenconfigAaaTypesSYSTEMDEFINEDROLES {
	p := new(OpenconfigAaaTypesSYSTEMDEFINEDROLES)
	*p = x
	return p
}

func (x OpenconfigAaaTypesSYSTEMDEFINEDROLES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAaaTypesSYSTEMDEFINEDROLES) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[5].Descriptor()
}

func (OpenconfigAaaTypesSYSTEMDEFINEDROLES) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[5]
}

func (x OpenconfigAaaTypesSYSTEMDEFINEDROLES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAaaTypesSYSTEMDEFINEDROLES.Descriptor instead.
func (OpenconfigAaaTypesSYSTEMDEFINEDROLES) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{5}
}

// OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex represents an enumerated type generated for the YANG enumerated type union.
type OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex int32

const (
	OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex_OPENCONFIGACCESSPOINTS_ACCESSPOINTS_ACCESSPOINT_SYSTEM_CPUS_CPU_STATE_INDEX_UNSET OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex = 0
	OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex_OPENCONFIGACCESSPOINTS_ACCESSPOINTS_ACCESSPOINT_SYSTEM_CPUS_CPU_STATE_INDEX_ALL   OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex = 1
)

// Enum value maps for OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex.
var (
	OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex_name = map[int32]string{
		0: "OPENCONFIGACCESSPOINTS_ACCESSPOINTS_ACCESSPOINT_SYSTEM_CPUS_CPU_STATE_INDEX_UNSET",
		1: "OPENCONFIGACCESSPOINTS_ACCESSPOINTS_ACCESSPOINT_SYSTEM_CPUS_CPU_STATE_INDEX_ALL",
	}
	OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex_value = map[string]int32{
		"OPENCONFIGACCESSPOINTS_ACCESSPOINTS_ACCESSPOINT_SYSTEM_CPUS_CPU_STATE_INDEX_UNSET": 0,
		"OPENCONFIGACCESSPOINTS_ACCESSPOINTS_ACCESSPOINT_SYSTEM_CPUS_CPU_STATE_INDEX_ALL":   1,
	}
)

func (x OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex) Enum() *OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex {
	p := new(OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex)
	*p = x
	return p
}

func (x OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[6].Descriptor()
}

func (OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[6]
}

func (x OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex.Descriptor instead.
func (OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{6}
}

// OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses represents an enumerated type generated for the YANG enumerated type union.
type OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses int32

const (
	OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses_OPENCONFIGACCESSPOINTS_ACCESSPOINTS_ACCESSPOINT_SYSTEM_GRPCSERVER_CONFIG_LISTENADDRESSES_UNSET OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses = 0
	OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses_OPENCONFIGACCESSPOINTS_ACCESSPOINTS_ACCESSPOINT_SYSTEM_GRPCSERVER_CONFIG_LISTENADDRESSES_ANY   OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses = 1
)

// Enum value maps for OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses.
var (
	OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses_name = map[int32]string{
		0: "OPENCONFIGACCESSPOINTS_ACCESSPOINTS_ACCESSPOINT_SYSTEM_GRPCSERVER_CONFIG_LISTENADDRESSES_UNSET",
		1: "OPENCONFIGACCESSPOINTS_ACCESSPOINTS_ACCESSPOINT_SYSTEM_GRPCSERVER_CONFIG_LISTENADDRESSES_ANY",
	}
	OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses_value = map[string]int32{
		"OPENCONFIGACCESSPOINTS_ACCESSPOINTS_ACCESSPOINT_SYSTEM_GRPCSERVER_CONFIG_LISTENADDRESSES_UNSET": 0,
		"OPENCONFIGACCESSPOINTS_ACCESSPOINTS_ACCESSPOINT_SYSTEM_GRPCSERVER_CONFIG_LISTENADDRESSES_ANY":   1,
	}
)

func (x OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses) Enum() *OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses {
	p := new(OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses)
	*p = x
	return p
}

func (x OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[7].Descriptor()
}

func (OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[7]
}

func (x OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses.Descriptor instead.
func (OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{7}
}

// OpenconfigAclACLCOUNTERCAPABILITY represents an enumerated type generated for the YANG identity ACL_COUNTER_CAPABILITY.
type OpenconfigAclACLCOUNTERCAPABILITY int32

const (
	OpenconfigAclACLCOUNTERCAPABILITY_OPENCONFIGACLACLCOUNTERCAPABILITY_UNSET               OpenconfigAclACLCOUNTERCAPABILITY = 0
	OpenconfigAclACLCOUNTERCAPABILITY_OPENCONFIGACLACLCOUNTERCAPABILITY_INTERFACE_ONLY      OpenconfigAclACLCOUNTERCAPABILITY = 99175805
	OpenconfigAclACLCOUNTERCAPABILITY_OPENCONFIGACLACLCOUNTERCAPABILITY_INTERFACE_AGGREGATE OpenconfigAclACLCOUNTERCAPABILITY = 132869768
	OpenconfigAclACLCOUNTERCAPABILITY_OPENCONFIGACLACLCOUNTERCAPABILITY_AGGREGATE_ONLY      OpenconfigAclACLCOUNTERCAPABILITY = 266482693
)

// Enum value maps for OpenconfigAclACLCOUNTERCAPABILITY.
var (
	OpenconfigAclACLCOUNTERCAPABILITY_name = map[int32]string{
		0:         "OPENCONFIGACLACLCOUNTERCAPABILITY_UNSET",
		99175805:  "OPENCONFIGACLACLCOUNTERCAPABILITY_INTERFACE_ONLY",
		132869768: "OPENCONFIGACLACLCOUNTERCAPABILITY_INTERFACE_AGGREGATE",
		266482693: "OPENCONFIGACLACLCOUNTERCAPABILITY_AGGREGATE_ONLY",
	}
	OpenconfigAclACLCOUNTERCAPABILITY_value = map[string]int32{
		"OPENCONFIGACLACLCOUNTERCAPABILITY_UNSET":               0,
		"OPENCONFIGACLACLCOUNTERCAPABILITY_INTERFACE_ONLY":      99175805,
		"OPENCONFIGACLACLCOUNTERCAPABILITY_INTERFACE_AGGREGATE": 132869768,
		"OPENCONFIGACLACLCOUNTERCAPABILITY_AGGREGATE_ONLY":      266482693,
	}
)

func (x OpenconfigAclACLCOUNTERCAPABILITY) Enum() *OpenconfigAclACLCOUNTERCAPABILITY {
	p := new(OpenconfigAclACLCOUNTERCAPABILITY)
	*p = x
	return p
}

func (x OpenconfigAclACLCOUNTERCAPABILITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAclACLCOUNTERCAPABILITY) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[8].Descriptor()
}

func (OpenconfigAclACLCOUNTERCAPABILITY) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[8]
}

func (x OpenconfigAclACLCOUNTERCAPABILITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAclACLCOUNTERCAPABILITY.Descriptor instead.
func (OpenconfigAclACLCOUNTERCAPABILITY) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{8}
}

// OpenconfigAclACLTYPE represents an enumerated type generated for the YANG identity ACL_TYPE.
type OpenconfigAclACLTYPE int32

const (
	OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_UNSET     OpenconfigAclACLTYPE = 0
	OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_ACL_L2    OpenconfigAclACLTYPE = 132416467
	OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_ACL_IPV4  OpenconfigAclACLTYPE = 411031372
	OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_ACL_IPV6  OpenconfigAclACLTYPE = 411031374
	OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_ACL_MIXED OpenconfigAclACLTYPE = 469804226
)

// Enum value maps for OpenconfigAclACLTYPE.
var (
	OpenconfigAclACLTYPE_name = map[int32]string{
		0:         "OPENCONFIGACLACLTYPE_UNSET",
		132416467: "OPENCONFIGACLACLTYPE_ACL_L2",
		411031372: "OPENCONFIGACLACLTYPE_ACL_IPV4",
		411031374: "OPENCONFIGACLACLTYPE_ACL_IPV6",
		469804226: "OPENCONFIGACLACLTYPE_ACL_MIXED",
	}
	OpenconfigAclACLTYPE_value = map[string]int32{
		"OPENCONFIGACLACLTYPE_UNSET":     0,
		"OPENCONFIGACLACLTYPE_ACL_L2":    132416467,
		"OPENCONFIGACLACLTYPE_ACL_IPV4":  411031372,
		"OPENCONFIGACLACLTYPE_ACL_IPV6":  411031374,
		"OPENCONFIGACLACLTYPE_ACL_MIXED": 469804226,
	}
)

func (x OpenconfigAclACLTYPE) Enum() *OpenconfigAclACLTYPE {
	p := new(OpenconfigAclACLTYPE)
	*p = x
	return p
}

func (x OpenconfigAclACLTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAclACLTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[9].Descriptor()
}

func (OpenconfigAclACLTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[9]
}

func (x OpenconfigAclACLTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAclACLTYPE.Descriptor instead.
func (OpenconfigAclACLTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{9}
}

// OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort represents an enumerated type generated for the YANG enumerated type port-num-range.
type OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort int32

const (
	OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort_OPENCONFIGACL_ACL_ACLSETS_ACLSET_ACLENTRIES_ACLENTRY_TRANSPORT_CONFIG_DESTINATIONPORT_UNSET OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort = 0
	OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort_OPENCONFIGACL_ACL_ACLSETS_ACLSET_ACLENTRIES_ACLENTRY_TRANSPORT_CONFIG_DESTINATIONPORT_ANY   OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort = 1
)

// Enum value maps for OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort.
var (
	OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort_name = map[int32]string{
		0: "OPENCONFIGACL_ACL_ACLSETS_ACLSET_ACLENTRIES_ACLENTRY_TRANSPORT_CONFIG_DESTINATIONPORT_UNSET",
		1: "OPENCONFIGACL_ACL_ACLSETS_ACLSET_ACLENTRIES_ACLENTRY_TRANSPORT_CONFIG_DESTINATIONPORT_ANY",
	}
	OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort_value = map[string]int32{
		"OPENCONFIGACL_ACL_ACLSETS_ACLSET_ACLENTRIES_ACLENTRY_TRANSPORT_CONFIG_DESTINATIONPORT_UNSET": 0,
		"OPENCONFIGACL_ACL_ACLSETS_ACLSET_ACLENTRIES_ACLENTRY_TRANSPORT_CONFIG_DESTINATIONPORT_ANY":   1,
	}
)

func (x OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort) Enum() *OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort {
	p := new(OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort)
	*p = x
	return p
}

func (x OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[10].Descriptor()
}

func (OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[10]
}

func (x OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort.Descriptor instead.
func (OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{10}
}

// OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort represents an enumerated type generated for the YANG enumerated type port-num-range.
type OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort int32

const (
	OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort_OPENCONFIGACL_ACL_ACLSETS_ACLSET_ACLENTRIES_ACLENTRY_TRANSPORT_CONFIG_SOURCEPORT_UNSET OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort = 0
	OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort_OPENCONFIGACL_ACL_ACLSETS_ACLSET_ACLENTRIES_ACLENTRY_TRANSPORT_CONFIG_SOURCEPORT_ANY   OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort = 1
)

// Enum value maps for OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort.
var (
	OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort_name = map[int32]string{
		0: "OPENCONFIGACL_ACL_ACLSETS_ACLSET_ACLENTRIES_ACLENTRY_TRANSPORT_CONFIG_SOURCEPORT_UNSET",
		1: "OPENCONFIGACL_ACL_ACLSETS_ACLSET_ACLENTRIES_ACLENTRY_TRANSPORT_CONFIG_SOURCEPORT_ANY",
	}
	OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort_value = map[string]int32{
		"OPENCONFIGACL_ACL_ACLSETS_ACLSET_ACLENTRIES_ACLENTRY_TRANSPORT_CONFIG_SOURCEPORT_UNSET": 0,
		"OPENCONFIGACL_ACL_ACLSETS_ACLSET_ACLENTRIES_ACLENTRY_TRANSPORT_CONFIG_SOURCEPORT_ANY":   1,
	}
)

func (x OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort) Enum() *OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort {
	p := new(OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort)
	*p = x
	return p
}

func (x OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[11].Descriptor()
}

func (OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[11]
}

func (x OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort.Descriptor instead.
func (OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{11}
}

// OpenconfigAclFORWARDINGACTION represents an enumerated type generated for the YANG identity FORWARDING_ACTION.
type OpenconfigAclFORWARDINGACTION int32

const (
	OpenconfigAclFORWARDINGACTION_OPENCONFIGACLFORWARDINGACTION_UNSET  OpenconfigAclFORWARDINGACTION = 0
	OpenconfigAclFORWARDINGACTION_OPENCONFIGACLFORWARDINGACTION_REJECT OpenconfigAclFORWARDINGACTION = 83418768
	OpenconfigAclFORWARDINGACTION_OPENCONFIGACLFORWARDINGACTION_DROP   OpenconfigAclFORWARDINGACTION = 303263142
	OpenconfigAclFORWARDINGACTION_OPENCONFIGACLFORWARDINGACTION_ACCEPT OpenconfigAclFORWARDINGACTION = 464955669
)

// Enum value maps for OpenconfigAclFORWARDINGACTION.
var (
	OpenconfigAclFORWARDINGACTION_name = map[int32]string{
		0:         "OPENCONFIGACLFORWARDINGACTION_UNSET",
		83418768:  "OPENCONFIGACLFORWARDINGACTION_REJECT",
		303263142: "OPENCONFIGACLFORWARDINGACTION_DROP",
		464955669: "OPENCONFIGACLFORWARDINGACTION_ACCEPT",
	}
	OpenconfigAclFORWARDINGACTION_value = map[string]int32{
		"OPENCONFIGACLFORWARDINGACTION_UNSET":  0,
		"OPENCONFIGACLFORWARDINGACTION_REJECT": 83418768,
		"OPENCONFIGACLFORWARDINGACTION_DROP":   303263142,
		"OPENCONFIGACLFORWARDINGACTION_ACCEPT": 464955669,
	}
)

func (x OpenconfigAclFORWARDINGACTION) Enum() *OpenconfigAclFORWARDINGACTION {
	p := new(OpenconfigAclFORWARDINGACTION)
	*p = x
	return p
}

func (x OpenconfigAclFORWARDINGACTION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAclFORWARDINGACTION) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[12].Descriptor()
}

func (OpenconfigAclFORWARDINGACTION) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[12]
}

func (x OpenconfigAclFORWARDINGACTION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAclFORWARDINGACTION.Descriptor instead.
func (OpenconfigAclFORWARDINGACTION) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{12}
}

// OpenconfigAclLOGACTION represents an enumerated type generated for the YANG identity LOG_ACTION.
type OpenconfigAclLOGACTION int32

const (
	OpenconfigAclLOGACTION_OPENCONFIGACLLOGACTION_UNSET      OpenconfigAclLOGACTION = 0
	OpenconfigAclLOGACTION_OPENCONFIGACLLOGACTION_LOG_NONE   OpenconfigAclLOGACTION = 184906209
	OpenconfigAclLOGACTION_OPENCONFIGACLLOGACTION_LOG_SYSLOG OpenconfigAclLOGACTION = 513275964
)

// Enum value maps for OpenconfigAclLOGACTION.
var (
	OpenconfigAclLOGACTION_name = map[int32]string{
		0:         "OPENCONFIGACLLOGACTION_UNSET",
		184906209: "OPENCONFIGACLLOGACTION_LOG_NONE",
		513275964: "OPENCONFIGACLLOGACTION_LOG_SYSLOG",
	}
	OpenconfigAclLOGACTION_value = map[string]int32{
		"OPENCONFIGACLLOGACTION_UNSET":      0,
		"OPENCONFIGACLLOGACTION_LOG_NONE":   184906209,
		"OPENCONFIGACLLOGACTION_LOG_SYSLOG": 513275964,
	}
)

func (x OpenconfigAclLOGACTION) Enum() *OpenconfigAclLOGACTION {
	p := new(OpenconfigAclLOGACTION)
	*p = x
	return p
}

func (x OpenconfigAclLOGACTION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAclLOGACTION) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[13].Descriptor()
}

func (OpenconfigAclLOGACTION) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[13]
}

func (x OpenconfigAclLOGACTION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAclLOGACTION.Descriptor instead.
func (OpenconfigAclLOGACTION) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{13}
}

// OpenconfigAftEncapsulationHeaderType represents an enumerated type generated for the YANG enumerated type encapsulation-header-type.
type OpenconfigAftEncapsulationHeaderType int32

const (
	OpenconfigAftEncapsulationHeaderType_OPENCONFIGAFTENCAPSULATIONHEADERTYPE_UNSET OpenconfigAftEncapsulationHeaderType = 0
	OpenconfigAftEncapsulationHeaderType_OPENCONFIGAFTENCAPSULATIONHEADERTYPE_GRE   OpenconfigAftEncapsulationHeaderType = 1
	OpenconfigAftEncapsulationHeaderType_OPENCONFIGAFTENCAPSULATIONHEADERTYPE_IPV4  OpenconfigAftEncapsulationHeaderType = 2
	OpenconfigAftEncapsulationHeaderType_OPENCONFIGAFTENCAPSULATIONHEADERTYPE_IPV6  OpenconfigAftEncapsulationHeaderType = 3
	OpenconfigAftEncapsulationHeaderType_OPENCONFIGAFTENCAPSULATIONHEADERTYPE_MPLS  OpenconfigAftEncapsulationHeaderType = 4
)

// Enum value maps for OpenconfigAftEncapsulationHeaderType.
var (
	OpenconfigAftEncapsulationHeaderType_name = map[int32]string{
		0: "OPENCONFIGAFTENCAPSULATIONHEADERTYPE_UNSET",
		1: "OPENCONFIGAFTENCAPSULATIONHEADERTYPE_GRE",
		2: "OPENCONFIGAFTENCAPSULATIONHEADERTYPE_IPV4",
		3: "OPENCONFIGAFTENCAPSULATIONHEADERTYPE_IPV6",
		4: "OPENCONFIGAFTENCAPSULATIONHEADERTYPE_MPLS",
	}
	OpenconfigAftEncapsulationHeaderType_value = map[string]int32{
		"OPENCONFIGAFTENCAPSULATIONHEADERTYPE_UNSET": 0,
		"OPENCONFIGAFTENCAPSULATIONHEADERTYPE_GRE":   1,
		"OPENCONFIGAFTENCAPSULATIONHEADERTYPE_IPV4":  2,
		"OPENCONFIGAFTENCAPSULATIONHEADERTYPE_IPV6":  3,
		"OPENCONFIGAFTENCAPSULATIONHEADERTYPE_MPLS":  4,
	}
)

func (x OpenconfigAftEncapsulationHeaderType) Enum() *OpenconfigAftEncapsulationHeaderType {
	p := new(OpenconfigAftEncapsulationHeaderType)
	*p = x
	return p
}

func (x OpenconfigAftEncapsulationHeaderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAftEncapsulationHeaderType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[14].Descriptor()
}

func (OpenconfigAftEncapsulationHeaderType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[14]
}

func (x OpenconfigAftEncapsulationHeaderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAftEncapsulationHeaderType.Descriptor instead.
func (OpenconfigAftEncapsulationHeaderType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{14}
}

// OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY represents an enumerated type generated for the YANG identity OPENCONFIG_ALARM_SEVERITY.
type OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY int32

const (
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNSET    OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY = 0
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNKNOWN  OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY = 70492973
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_CRITICAL OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY = 123728538
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_MAJOR    OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY = 157280644
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_MINOR    OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY = 275040832
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_WARNING  OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY = 380442931
)

// Enum value maps for OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY.
var (
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_name = map[int32]string{
		0:         "OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNSET",
		70492973:  "OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNKNOWN",
		123728538: "OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_CRITICAL",
		157280644: "OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_MAJOR",
		275040832: "OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_MINOR",
		380442931: "OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_WARNING",
	}
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_value = map[string]int32{
		"OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNSET":    0,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNKNOWN":  70492973,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_CRITICAL": 123728538,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_MAJOR":    157280644,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_MINOR":    275040832,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_WARNING":  380442931,
	}
)

func (x OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY) Enum() *OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY {
	p := new(OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY)
	*p = x
	return p
}

func (x OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[15].Descriptor()
}

func (OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[15]
}

func (x OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY.Descriptor instead.
func (OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{15}
}

// OpenconfigAlarmTypesOPENCONFIGALARMTYPEID represents an enumerated type generated for the YANG identity OPENCONFIG_ALARM_TYPE_ID.
type OpenconfigAlarmTypesOPENCONFIGALARMTYPEID int32

const (
	OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_UNSET OpenconfigAlarmTypesOPENCONFIGALARMTYPEID = 0
	OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_EQPT  OpenconfigAlarmTypesOPENCONFIGALARMTYPEID = 54945826
	OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_AIS   OpenconfigAlarmTypesOPENCONFIGALARMTYPEID = 356419557
	OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_LOS   OpenconfigAlarmTypesOPENCONFIGALARMTYPEID = 389213562
	OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_OTS   OpenconfigAlarmTypesOPENCONFIGALARMTYPEID = 507085248
)

// Enum value maps for OpenconfigAlarmTypesOPENCONFIGALARMTYPEID.
var (
	OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_name = map[int32]string{
		0:         "OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_UNSET",
		54945826:  "OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_EQPT",
		356419557: "OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_AIS",
		389213562: "OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_LOS",
		507085248: "OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_OTS",
	}
	OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_value = map[string]int32{
		"OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_UNSET": 0,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_EQPT":  54945826,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_AIS":   356419557,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_LOS":   389213562,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_OTS":   507085248,
	}
)

func (x OpenconfigAlarmTypesOPENCONFIGALARMTYPEID) Enum() *OpenconfigAlarmTypesOPENCONFIGALARMTYPEID {
	p := new(OpenconfigAlarmTypesOPENCONFIGALARMTYPEID)
	*p = x
	return p
}

func (x OpenconfigAlarmTypesOPENCONFIGALARMTYPEID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAlarmTypesOPENCONFIGALARMTYPEID) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[16].Descriptor()
}

func (OpenconfigAlarmTypesOPENCONFIGALARMTYPEID) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[16]
}

func (x OpenconfigAlarmTypesOPENCONFIGALARMTYPEID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAlarmTypesOPENCONFIGALARMTYPEID.Descriptor instead.
func (OpenconfigAlarmTypesOPENCONFIGALARMTYPEID) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{16}
}

// OpenconfigBfdBfdDiagnosticCode represents an enumerated type generated for the YANG enumerated type bfd-diagnostic-code.
type OpenconfigBfdBfdDiagnosticCode int32

const (
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_UNSET                          OpenconfigBfdBfdDiagnosticCode = 0
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_NO_DIAGNOSTIC                  OpenconfigBfdBfdDiagnosticCode = 1
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_DETECTION_TIMEOUT              OpenconfigBfdBfdDiagnosticCode = 2
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_ECHO_FAILED                    OpenconfigBfdBfdDiagnosticCode = 3
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_FORWARDING_RESET               OpenconfigBfdBfdDiagnosticCode = 4
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_PATH_DOWN                      OpenconfigBfdBfdDiagnosticCode = 5
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_CONCATENATED_PATH_DOWN         OpenconfigBfdBfdDiagnosticCode = 6
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_ADMIN_DOWN                     OpenconfigBfdBfdDiagnosticCode = 7
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_REVERSE_CONCATENATED_PATH_DOWN OpenconfigBfdBfdDiagnosticCode = 8
)

// Enum value maps for OpenconfigBfdBfdDiagnosticCode.
var (
	OpenconfigBfdBfdDiagnosticCode_name = map[int32]string{
		0: "OPENCONFIGBFDBFDDIAGNOSTICCODE_UNSET",
		1: "OPENCONFIGBFDBFDDIAGNOSTICCODE_NO_DIAGNOSTIC",
		2: "OPENCONFIGBFDBFDDIAGNOSTICCODE_DETECTION_TIMEOUT",
		3: "OPENCONFIGBFDBFDDIAGNOSTICCODE_ECHO_FAILED",
		4: "OPENCONFIGBFDBFDDIAGNOSTICCODE_FORWARDING_RESET",
		5: "OPENCONFIGBFDBFDDIAGNOSTICCODE_PATH_DOWN",
		6: "OPENCONFIGBFDBFDDIAGNOSTICCODE_CONCATENATED_PATH_DOWN",
		7: "OPENCONFIGBFDBFDDIAGNOSTICCODE_ADMIN_DOWN",
		8: "OPENCONFIGBFDBFDDIAGNOSTICCODE_REVERSE_CONCATENATED_PATH_DOWN",
	}
	OpenconfigBfdBfdDiagnosticCode_value = map[string]int32{
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_UNSET":                          0,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_NO_DIAGNOSTIC":                  1,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_DETECTION_TIMEOUT":              2,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_ECHO_FAILED":                    3,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_FORWARDING_RESET":               4,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_PATH_DOWN":                      5,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_CONCATENATED_PATH_DOWN":         6,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_ADMIN_DOWN":                     7,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_REVERSE_CONCATENATED_PATH_DOWN": 8,
	}
)

func (x OpenconfigBfdBfdDiagnosticCode) Enum() *OpenconfigBfdBfdDiagnosticCode {
	p := new(OpenconfigBfdBfdDiagnosticCode)
	*p = x
	return p
}

func (x OpenconfigBfdBfdDiagnosticCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBfdBfdDiagnosticCode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[17].Descriptor()
}

func (OpenconfigBfdBfdDiagnosticCode) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[17]
}

func (x OpenconfigBfdBfdDiagnosticCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBfdBfdDiagnosticCode.Descriptor instead.
func (OpenconfigBfdBfdDiagnosticCode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{17}
}

// OpenconfigBfdBfdSessionState represents an enumerated type generated for the YANG enumerated type bfd-session-state.
type OpenconfigBfdBfdSessionState int32

const (
	OpenconfigBfdBfdSessionState_OPENCONFIGBFDBFDSESSIONSTATE_UNSET      OpenconfigBfdBfdSessionState = 0
	OpenconfigBfdBfdSessionState_OPENCONFIGBFDBFDSESSIONSTATE_UP         OpenconfigBfdBfdSessionState = 1
	OpenconfigBfdBfdSessionState_OPENCONFIGBFDBFDSESSIONSTATE_DOWN       OpenconfigBfdBfdSessionState = 2
	OpenconfigBfdBfdSessionState_OPENCONFIGBFDBFDSESSIONSTATE_ADMIN_DOWN OpenconfigBfdBfdSessionState = 3
	OpenconfigBfdBfdSessionState_OPENCONFIGBFDBFDSESSIONSTATE_INIT       OpenconfigBfdBfdSessionState = 4
)

// Enum value maps for OpenconfigBfdBfdSessionState.
var (
	OpenconfigBfdBfdSessionState_name = map[int32]string{
		0: "OPENCONFIGBFDBFDSESSIONSTATE_UNSET",
		1: "OPENCONFIGBFDBFDSESSIONSTATE_UP",
		2: "OPENCONFIGBFDBFDSESSIONSTATE_DOWN",
		3: "OPENCONFIGBFDBFDSESSIONSTATE_ADMIN_DOWN",
		4: "OPENCONFIGBFDBFDSESSIONSTATE_INIT",
	}
	OpenconfigBfdBfdSessionState_value = map[string]int32{
		"OPENCONFIGBFDBFDSESSIONSTATE_UNSET":      0,
		"OPENCONFIGBFDBFDSESSIONSTATE_UP":         1,
		"OPENCONFIGBFDBFDSESSIONSTATE_DOWN":       2,
		"OPENCONFIGBFDBFDSESSIONSTATE_ADMIN_DOWN": 3,
		"OPENCONFIGBFDBFDSESSIONSTATE_INIT":       4,
	}
)

func (x OpenconfigBfdBfdSessionState) Enum() *OpenconfigBfdBfdSessionState {
	p := new(OpenconfigBfdBfdSessionState)
	*p = x
	return p
}

func (x OpenconfigBfdBfdSessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBfdBfdSessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[18].Descriptor()
}

func (OpenconfigBfdBfdSessionState) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[18]
}

func (x OpenconfigBfdBfdSessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBfdBfdSessionState.Descriptor instead.
func (OpenconfigBfdBfdSessionState) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{18}
}

// OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid represents an enumerated type generated for the YANG enumerated type sr-sid-type.
type OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid int32

const (
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid_OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_UNSET                   OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid = 0
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid_OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_IPV4_EXPLICIT_NULL      OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid = 1
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid_OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_ROUTER_ALERT            OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid = 2
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid_OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_IPV6_EXPLICIT_NULL      OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid = 3
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid_OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_IMPLICIT_NULL           OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid = 4
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid_OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_ENTROPY_LABEL_INDICATOR OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid = 8
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid_OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_NO_LABEL                OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid = 9
)

// Enum value maps for OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid.
var (
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid_name = map[int32]string{
		0: "OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_UNSET",
		1: "OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_ROUTER_ALERT",
		3: "OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_IMPLICIT_NULL",
		8: "OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_NO_LABEL",
	}
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid_value = map[string]int32{
		"OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_UNSET":                   0,
		"OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_ROUTER_ALERT":            2,
		"OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_IMPLICIT_NULL":           4,
		"OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_SEGMENTLISTS_SEGMENTLIST_SEGMENTS_SEGMENT_STATE_SID_NO_LABEL":                9,
	}
)

func (x OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid) Enum() *OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid {
	p := new(OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid)
	*p = x
	return p
}

func (x OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[19].Descriptor()
}

func (OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[19]
}

func (x OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid.Descriptor instead.
func (OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{19}
}

// OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid represents an enumerated type generated for the YANG enumerated type sr-sid-type.
type OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid int32

const (
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid_OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_UNSET                   OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid = 0
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid_OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_IPV4_EXPLICIT_NULL      OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid = 1
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid_OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_ROUTER_ALERT            OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid = 2
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid_OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_IPV6_EXPLICIT_NULL      OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid = 3
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid_OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_IMPLICIT_NULL           OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid = 4
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid_OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_ENTROPY_LABEL_INDICATOR OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid = 8
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid_OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_NO_LABEL                OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid = 9
)

// Enum value maps for OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid.
var (
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid_name = map[int32]string{
		0: "OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_UNSET",
		1: "OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_ROUTER_ALERT",
		3: "OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_IMPLICIT_NULL",
		8: "OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_NO_LABEL",
	}
	OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid_value = map[string]int32{
		"OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_UNSET":                   0,
		"OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_ROUTER_ALERT":            2,
		"OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_IMPLICIT_NULL":           4,
		"OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGBGP_BGP_RIB_ATTRSETS_ATTRSET_TUNNELENCAPSULATION_TUNNELS_TUNNEL_SUBTLVS_SUBTLV_STATE_BINDINGSID_NO_LABEL":                9,
	}
)

func (x OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid) Enum() *OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid {
	p := new(OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid)
	*p = x
	return p
}

func (x OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[20].Descriptor()
}

func (OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[20]
}

func (x OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid.Descriptor instead.
func (OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{20}
}

// OpenconfigBgpCommunityType represents an enumerated type generated for the YANG enumerated type community-type.
type OpenconfigBgpCommunityType int32

const (
	OpenconfigBgpCommunityType_OPENCONFIGBGPCOMMUNITYTYPE_NONE     OpenconfigBgpCommunityType = 0
	OpenconfigBgpCommunityType_OPENCONFIGBGPCOMMUNITYTYPE_STANDARD OpenconfigBgpCommunityType = 1
	OpenconfigBgpCommunityType_OPENCONFIGBGPCOMMUNITYTYPE_EXTENDED OpenconfigBgpCommunityType = 2
	OpenconfigBgpCommunityType_OPENCONFIGBGPCOMMUNITYTYPE_BOTH     OpenconfigBgpCommunityType = 3
)

// Enum value maps for OpenconfigBgpCommunityType.
var (
	OpenconfigBgpCommunityType_name = map[int32]string{
		0: "OPENCONFIGBGPCOMMUNITYTYPE_NONE",
		1: "OPENCONFIGBGPCOMMUNITYTYPE_STANDARD",
		2: "OPENCONFIGBGPCOMMUNITYTYPE_EXTENDED",
		3: "OPENCONFIGBGPCOMMUNITYTYPE_BOTH",
	}
	OpenconfigBgpCommunityType_value = map[string]int32{
		"OPENCONFIGBGPCOMMUNITYTYPE_NONE":     0,
		"OPENCONFIGBGPCOMMUNITYTYPE_STANDARD": 1,
		"OPENCONFIGBGPCOMMUNITYTYPE_EXTENDED": 2,
		"OPENCONFIGBGPCOMMUNITYTYPE_BOTH":     3,
	}
)

func (x OpenconfigBgpCommunityType) Enum() *OpenconfigBgpCommunityType {
	p := new(OpenconfigBgpCommunityType)
	*p = x
	return p
}

func (x OpenconfigBgpCommunityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpCommunityType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[21].Descriptor()
}

func (OpenconfigBgpCommunityType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[21]
}

func (x OpenconfigBgpCommunityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpCommunityType.Descriptor instead.
func (OpenconfigBgpCommunityType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{21}
}

// OpenconfigBgpPeerType represents an enumerated type generated for the YANG enumerated type peer-type.
type OpenconfigBgpPeerType int32

const (
	OpenconfigBgpPeerType_OPENCONFIGBGPPEERTYPE_UNSET    OpenconfigBgpPeerType = 0
	OpenconfigBgpPeerType_OPENCONFIGBGPPEERTYPE_INTERNAL OpenconfigBgpPeerType = 1
	OpenconfigBgpPeerType_OPENCONFIGBGPPEERTYPE_EXTERNAL OpenconfigBgpPeerType = 2
)

// Enum value maps for OpenconfigBgpPeerType.
var (
	OpenconfigBgpPeerType_name = map[int32]string{
		0: "OPENCONFIGBGPPEERTYPE_UNSET",
		1: "OPENCONFIGBGPPEERTYPE_INTERNAL",
		2: "OPENCONFIGBGPPEERTYPE_EXTERNAL",
	}
	OpenconfigBgpPeerType_value = map[string]int32{
		"OPENCONFIGBGPPEERTYPE_UNSET":    0,
		"OPENCONFIGBGPPEERTYPE_INTERNAL": 1,
		"OPENCONFIGBGPPEERTYPE_EXTERNAL": 2,
	}
)

func (x OpenconfigBgpPeerType) Enum() *OpenconfigBgpPeerType {
	p := new(OpenconfigBgpPeerType)
	*p = x
	return p
}

func (x OpenconfigBgpPeerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpPeerType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[22].Descriptor()
}

func (OpenconfigBgpPeerType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[22]
}

func (x OpenconfigBgpPeerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpPeerType.Descriptor instead.
func (OpenconfigBgpPeerType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{22}
}

// OpenconfigBgpPolicyBgpOriginAttrType represents an enumerated type generated for the YANG enumerated type bgp-origin-attr-type.
type OpenconfigBgpPolicyBgpOriginAttrType int32

const (
	OpenconfigBgpPolicyBgpOriginAttrType_OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_UNSET      OpenconfigBgpPolicyBgpOriginAttrType = 0
	OpenconfigBgpPolicyBgpOriginAttrType_OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_IGP        OpenconfigBgpPolicyBgpOriginAttrType = 1
	OpenconfigBgpPolicyBgpOriginAttrType_OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_EGP        OpenconfigBgpPolicyBgpOriginAttrType = 2
	OpenconfigBgpPolicyBgpOriginAttrType_OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_INCOMPLETE OpenconfigBgpPolicyBgpOriginAttrType = 3
)

// Enum value maps for OpenconfigBgpPolicyBgpOriginAttrType.
var (
	OpenconfigBgpPolicyBgpOriginAttrType_name = map[int32]string{
		0: "OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_UNSET",
		1: "OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_IGP",
		2: "OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_EGP",
		3: "OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_INCOMPLETE",
	}
	OpenconfigBgpPolicyBgpOriginAttrType_value = map[string]int32{
		"OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_UNSET":      0,
		"OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_IGP":        1,
		"OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_EGP":        2,
		"OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_INCOMPLETE": 3,
	}
)

func (x OpenconfigBgpPolicyBgpOriginAttrType) Enum() *OpenconfigBgpPolicyBgpOriginAttrType {
	p := new(OpenconfigBgpPolicyBgpOriginAttrType)
	*p = x
	return p
}

func (x OpenconfigBgpPolicyBgpOriginAttrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpPolicyBgpOriginAttrType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[23].Descriptor()
}

func (OpenconfigBgpPolicyBgpOriginAttrType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[23]
}

func (x OpenconfigBgpPolicyBgpOriginAttrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpPolicyBgpOriginAttrType.Descriptor instead.
func (OpenconfigBgpPolicyBgpOriginAttrType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{23}
}

// OpenconfigBgpPolicyBgpSetCommunityOptionType represents an enumerated type generated for the YANG enumerated type bgp-set-community-option-type.
type OpenconfigBgpPolicyBgpSetCommunityOptionType int32

const (
	OpenconfigBgpPolicyBgpSetCommunityOptionType_OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_UNSET   OpenconfigBgpPolicyBgpSetCommunityOptionType = 0
	OpenconfigBgpPolicyBgpSetCommunityOptionType_OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_ADD     OpenconfigBgpPolicyBgpSetCommunityOptionType = 1
	OpenconfigBgpPolicyBgpSetCommunityOptionType_OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_REMOVE  OpenconfigBgpPolicyBgpSetCommunityOptionType = 2
	OpenconfigBgpPolicyBgpSetCommunityOptionType_OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_REPLACE OpenconfigBgpPolicyBgpSetCommunityOptionType = 3
)

// Enum value maps for OpenconfigBgpPolicyBgpSetCommunityOptionType.
var (
	OpenconfigBgpPolicyBgpSetCommunityOptionType_name = map[int32]string{
		0: "OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_UNSET",
		1: "OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_ADD",
		2: "OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_REMOVE",
		3: "OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_REPLACE",
	}
	OpenconfigBgpPolicyBgpSetCommunityOptionType_value = map[string]int32{
		"OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_UNSET":   0,
		"OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_ADD":     1,
		"OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_REMOVE":  2,
		"OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_REPLACE": 3,
	}
)

func (x OpenconfigBgpPolicyBgpSetCommunityOptionType) Enum() *OpenconfigBgpPolicyBgpSetCommunityOptionType {
	p := new(OpenconfigBgpPolicyBgpSetCommunityOptionType)
	*p = x
	return p
}

func (x OpenconfigBgpPolicyBgpSetCommunityOptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpPolicyBgpSetCommunityOptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[24].Descriptor()
}

func (OpenconfigBgpPolicyBgpSetCommunityOptionType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[24]
}

func (x OpenconfigBgpPolicyBgpSetCommunityOptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpPolicyBgpSetCommunityOptionType.Descriptor instead.
func (OpenconfigBgpPolicyBgpSetCommunityOptionType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{24}
}

// OpenconfigBgpRemovePrivateAsOption represents an enumerated type generated for the YANG identity REMOVE_PRIVATE_AS_OPTION.
type OpenconfigBgpRemovePrivateAsOption int32

const (
	OpenconfigBgpRemovePrivateAsOption_OPENCONFIGBGPREMOVEPRIVATEASOPTION_UNSET                  OpenconfigBgpRemovePrivateAsOption = 0
	OpenconfigBgpRemovePrivateAsOption_OPENCONFIGBGPREMOVEPRIVATEASOPTION_PRIVATE_AS_REPLACE_ALL OpenconfigBgpRemovePrivateAsOption = 489360741
	OpenconfigBgpRemovePrivateAsOption_OPENCONFIGBGPREMOVEPRIVATEASOPTION_PRIVATE_AS_REMOVE_ALL  OpenconfigBgpRemovePrivateAsOption = 518520599
)

// Enum value maps for OpenconfigBgpRemovePrivateAsOption.
var (
	OpenconfigBgpRemovePrivateAsOption_name = map[int32]string{
		0:         "OPENCONFIGBGPREMOVEPRIVATEASOPTION_UNSET",
		489360741: "OPENCONFIGBGPREMOVEPRIVATEASOPTION_PRIVATE_AS_REPLACE_ALL",
		518520599: "OPENCONFIGBGPREMOVEPRIVATEASOPTION_PRIVATE_AS_REMOVE_ALL",
	}
	OpenconfigBgpRemovePrivateAsOption_value = map[string]int32{
		"OPENCONFIGBGPREMOVEPRIVATEASOPTION_UNSET":                  0,
		"OPENCONFIGBGPREMOVEPRIVATEASOPTION_PRIVATE_AS_REPLACE_ALL": 489360741,
		"OPENCONFIGBGPREMOVEPRIVATEASOPTION_PRIVATE_AS_REMOVE_ALL":  518520599,
	}
)

func (x OpenconfigBgpRemovePrivateAsOption) Enum() *OpenconfigBgpRemovePrivateAsOption {
	p := new(OpenconfigBgpRemovePrivateAsOption)
	*p = x
	return p
}

func (x OpenconfigBgpRemovePrivateAsOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpRemovePrivateAsOption) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[25].Descriptor()
}

func (OpenconfigBgpRemovePrivateAsOption) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[25]
}

func (x OpenconfigBgpRemovePrivateAsOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpRemovePrivateAsOption.Descriptor instead.
func (OpenconfigBgpRemovePrivateAsOption) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{25}
}

// OpenconfigBgpTypesAFISAFITYPE represents an enumerated type generated for the YANG identity AFI_SAFI_TYPE.
type OpenconfigBgpTypesAFISAFITYPE int32

const (
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_UNSET                OpenconfigBgpTypesAFISAFITYPE = 0
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_MULTICAST OpenconfigBgpTypesAFISAFITYPE = 53601692
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_SRTE_POLICY_IPV4     OpenconfigBgpTypesAFISAFITYPE = 56561937
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_SRTE_POLICY_IPV6     OpenconfigBgpTypesAFISAFITYPE = 56561939
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE_VPN        OpenconfigBgpTypesAFISAFITYPE = 86469376
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_MULTICAST OpenconfigBgpTypesAFISAFITYPE = 171618750
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_UNICAST         OpenconfigBgpTypesAFISAFITYPE = 196909421
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_EVPN           OpenconfigBgpTypesAFISAFITYPE = 213517208
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_UNICAST         OpenconfigBgpTypesAFISAFITYPE = 270342995
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_LABELED_UNICAST OpenconfigBgpTypesAFISAFITYPE = 279108253
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE_SPF        OpenconfigBgpTypesAFISAFITYPE = 320902005
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_VPNV4_FLOWSPEC       OpenconfigBgpTypesAFISAFITYPE = 339014910
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_UNICAST   OpenconfigBgpTypesAFISAFITYPE = 358537365
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_LABELED_UNICAST OpenconfigBgpTypesAFISAFITYPE = 420698035
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_UNICAST   OpenconfigBgpTypesAFISAFITYPE = 421890363
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_FLOWSPEC        OpenconfigBgpTypesAFISAFITYPE = 431646707
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE            OpenconfigBgpTypesAFISAFITYPE = 512270733
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_VPLS           OpenconfigBgpTypesAFISAFITYPE = 533405094
)

// Enum value maps for OpenconfigBgpTypesAFISAFITYPE.
var (
	OpenconfigBgpTypesAFISAFITYPE_name = map[int32]string{
		0:         "OPENCONFIGBGPTYPESAFISAFITYPE_UNSET",
		53601692:  "OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_MULTICAST",
		56561937:  "OPENCONFIGBGPTYPESAFISAFITYPE_SRTE_POLICY_IPV4",
		56561939:  "OPENCONFIGBGPTYPESAFISAFITYPE_SRTE_POLICY_IPV6",
		86469376:  "OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE_VPN",
		171618750: "OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_MULTICAST",
		196909421: "OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_UNICAST",
		213517208: "OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_EVPN",
		270342995: "OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_UNICAST",
		279108253: "OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_LABELED_UNICAST",
		320902005: "OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE_SPF",
		339014910: "OPENCONFIGBGPTYPESAFISAFITYPE_VPNV4_FLOWSPEC",
		358537365: "OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_UNICAST",
		420698035: "OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_LABELED_UNICAST",
		421890363: "OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_UNICAST",
		431646707: "OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_FLOWSPEC",
		512270733: "OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE",
		533405094: "OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_VPLS",
	}
	OpenconfigBgpTypesAFISAFITYPE_value = map[string]int32{
		"OPENCONFIGBGPTYPESAFISAFITYPE_UNSET":                0,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_MULTICAST": 53601692,
		"OPENCONFIGBGPTYPESAFISAFITYPE_SRTE_POLICY_IPV4":     56561937,
		"OPENCONFIGBGPTYPESAFISAFITYPE_SRTE_POLICY_IPV6":     56561939,
		"OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE_VPN":        86469376,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_MULTICAST": 171618750,
		"OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_UNICAST":         196909421,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_EVPN":           213517208,
		"OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_UNICAST":         270342995,
		"OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_LABELED_UNICAST": 279108253,
		"OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE_SPF":        320902005,
		"OPENCONFIGBGPTYPESAFISAFITYPE_VPNV4_FLOWSPEC":       339014910,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_UNICAST":   358537365,
		"OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_LABELED_UNICAST": 420698035,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_UNICAST":   421890363,
		"OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_FLOWSPEC":        431646707,
		"OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE":            512270733,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_VPLS":           533405094,
	}
)

func (x OpenconfigBgpTypesAFISAFITYPE) Enum() *OpenconfigBgpTypesAFISAFITYPE {
	p := new(OpenconfigBgpTypesAFISAFITYPE)
	*p = x
	return p
}

func (x OpenconfigBgpTypesAFISAFITYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesAFISAFITYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[26].Descriptor()
}

func (OpenconfigBgpTypesAFISAFITYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[26]
}

func (x OpenconfigBgpTypesAFISAFITYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesAFISAFITYPE.Descriptor instead.
func (OpenconfigBgpTypesAFISAFITYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{26}
}

// OpenconfigBgpTypesBGPCAPABILITY represents an enumerated type generated for the YANG identity BGP_CAPABILITY.
type OpenconfigBgpTypesBGPCAPABILITY int32

const (
	OpenconfigBgpTypesBGPCAPABILITY_OPENCONFIGBGPTYPESBGPCAPABILITY_UNSET                     OpenconfigBgpTypesBGPCAPABILITY = 0
	OpenconfigBgpTypesBGPCAPABILITY_OPENCONFIGBGPTYPESBGPCAPABILITY_ASN32                     OpenconfigBgpTypesBGPCAPABILITY = 32923126
	OpenconfigBgpTypesBGPCAPABILITY_OPENCONFIGBGPTYPESBGPCAPABILITY_MPBGP                     OpenconfigBgpTypesBGPCAPABILITY = 70073701
	OpenconfigBgpTypesBGPCAPABILITY_OPENCONFIGBGPTYPESBGPCAPABILITY_ADD_PATHS                 OpenconfigBgpTypesBGPCAPABILITY = 233946091
	OpenconfigBgpTypesBGPCAPABILITY_OPENCONFIGBGPTYPESBGPCAPABILITY_EXTENDED_NEXTHOP_ENCODING OpenconfigBgpTypesBGPCAPABILITY = 282666297
	OpenconfigBgpTypesBGPCAPABILITY_OPENCONFIGBGPTYPESBGPCAPABILITY_ROUTE_REFRESH             OpenconfigBgpTypesBGPCAPABILITY = 392898832
	OpenconfigBgpTypesBGPCAPABILITY_OPENCONFIGBGPTYPESBGPCAPABILITY_GRACEFUL_RESTART          OpenconfigBgpTypesBGPCAPABILITY = 473546604
)

// Enum value maps for OpenconfigBgpTypesBGPCAPABILITY.
var (
	OpenconfigBgpTypesBGPCAPABILITY_name = map[int32]string{
		0:         "OPENCONFIGBGPTYPESBGPCAPABILITY_UNSET",
		32923126:  "OPENCONFIGBGPTYPESBGPCAPABILITY_ASN32",
		70073701:  "OPENCONFIGBGPTYPESBGPCAPABILITY_MPBGP",
		233946091: "OPENCONFIGBGPTYPESBGPCAPABILITY_ADD_PATHS",
		282666297: "OPENCONFIGBGPTYPESBGPCAPABILITY_EXTENDED_NEXTHOP_ENCODING",
		392898832: "OPENCONFIGBGPTYPESBGPCAPABILITY_ROUTE_REFRESH",
		473546604: "OPENCONFIGBGPTYPESBGPCAPABILITY_GRACEFUL_RESTART",
	}
	OpenconfigBgpTypesBGPCAPABILITY_value = map[string]int32{
		"OPENCONFIGBGPTYPESBGPCAPABILITY_UNSET":                     0,
		"OPENCONFIGBGPTYPESBGPCAPABILITY_ASN32":                     32923126,
		"OPENCONFIGBGPTYPESBGPCAPABILITY_MPBGP":                     70073701,
		"OPENCONFIGBGPTYPESBGPCAPABILITY_ADD_PATHS":                 233946091,
		"OPENCONFIGBGPTYPESBGPCAPABILITY_EXTENDED_NEXTHOP_ENCODING": 282666297,
		"OPENCONFIGBGPTYPESBGPCAPABILITY_ROUTE_REFRESH":             392898832,
		"OPENCONFIGBGPTYPESBGPCAPABILITY_GRACEFUL_RESTART":          473546604,
	}
)

func (x OpenconfigBgpTypesBGPCAPABILITY) Enum() *OpenconfigBgpTypesBGPCAPABILITY {
	p := new(OpenconfigBgpTypesBGPCAPABILITY)
	*p = x
	return p
}

func (x OpenconfigBgpTypesBGPCAPABILITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesBGPCAPABILITY) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[27].Descriptor()
}

func (OpenconfigBgpTypesBGPCAPABILITY) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[27]
}

func (x OpenconfigBgpTypesBGPCAPABILITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesBGPCAPABILITY.Descriptor instead.
func (OpenconfigBgpTypesBGPCAPABILITY) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{27}
}

// OpenconfigBgpTypesBGPERRORCODE represents an enumerated type generated for the YANG identity BGP_ERROR_CODE.
type OpenconfigBgpTypesBGPERRORCODE int32

const (
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_UNSET                       OpenconfigBgpTypesBGPERRORCODE = 0
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_CEASE                       OpenconfigBgpTypesBGPERRORCODE = 84275578
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_HOLD_TIMER_EXPIRED          OpenconfigBgpTypesBGPERRORCODE = 87745534
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_UPDATE_MESSAGE_ERROR        OpenconfigBgpTypesBGPERRORCODE = 259392533
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_FINITE_STATE_MACHINE_ERROR  OpenconfigBgpTypesBGPERRORCODE = 375791507
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_MESSAGE_HEADER_ERROR        OpenconfigBgpTypesBGPERRORCODE = 421916061
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_ROUTE_REFRESH_MESSAGE_ERROR OpenconfigBgpTypesBGPERRORCODE = 460120607
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_OPEN_MESSAGE_ERROR          OpenconfigBgpTypesBGPERRORCODE = 461038742
)

// Enum value maps for OpenconfigBgpTypesBGPERRORCODE.
var (
	OpenconfigBgpTypesBGPERRORCODE_name = map[int32]string{
		0:         "OPENCONFIGBGPTYPESBGPERRORCODE_UNSET",
		84275578:  "OPENCONFIGBGPTYPESBGPERRORCODE_CEASE",
		87745534:  "OPENCONFIGBGPTYPESBGPERRORCODE_HOLD_TIMER_EXPIRED",
		259392533: "OPENCONFIGBGPTYPESBGPERRORCODE_UPDATE_MESSAGE_ERROR",
		375791507: "OPENCONFIGBGPTYPESBGPERRORCODE_FINITE_STATE_MACHINE_ERROR",
		421916061: "OPENCONFIGBGPTYPESBGPERRORCODE_MESSAGE_HEADER_ERROR",
		460120607: "OPENCONFIGBGPTYPESBGPERRORCODE_ROUTE_REFRESH_MESSAGE_ERROR",
		461038742: "OPENCONFIGBGPTYPESBGPERRORCODE_OPEN_MESSAGE_ERROR",
	}
	OpenconfigBgpTypesBGPERRORCODE_value = map[string]int32{
		"OPENCONFIGBGPTYPESBGPERRORCODE_UNSET":                       0,
		"OPENCONFIGBGPTYPESBGPERRORCODE_CEASE":                       84275578,
		"OPENCONFIGBGPTYPESBGPERRORCODE_HOLD_TIMER_EXPIRED":          87745534,
		"OPENCONFIGBGPTYPESBGPERRORCODE_UPDATE_MESSAGE_ERROR":        259392533,
		"OPENCONFIGBGPTYPESBGPERRORCODE_FINITE_STATE_MACHINE_ERROR":  375791507,
		"OPENCONFIGBGPTYPESBGPERRORCODE_MESSAGE_HEADER_ERROR":        421916061,
		"OPENCONFIGBGPTYPESBGPERRORCODE_ROUTE_REFRESH_MESSAGE_ERROR": 460120607,
		"OPENCONFIGBGPTYPESBGPERRORCODE_OPEN_MESSAGE_ERROR":          461038742,
	}
)

func (x OpenconfigBgpTypesBGPERRORCODE) Enum() *OpenconfigBgpTypesBGPERRORCODE {
	p := new(OpenconfigBgpTypesBGPERRORCODE)
	*p = x
	return p
}

func (x OpenconfigBgpTypesBGPERRORCODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesBGPERRORCODE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[28].Descriptor()
}

func (OpenconfigBgpTypesBGPERRORCODE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[28]
}

func (x OpenconfigBgpTypesBGPERRORCODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesBGPERRORCODE.Descriptor instead.
func (OpenconfigBgpTypesBGPERRORCODE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{28}
}

// OpenconfigBgpTypesBGPERRORSUBCODE represents an enumerated type generated for the YANG identity BGP_ERROR_SUBCODE.
type OpenconfigBgpTypesBGPERRORSUBCODE int32

const (
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSET                                  OpenconfigBgpTypesBGPERRORSUBCODE = 0
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_MESSAGE_HEADER_SUBCODE                 OpenconfigBgpTypesBGPERRORSUBCODE = 7391784
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_ATTRIBUTE_LENGTH_ERROR                 OpenconfigBgpTypesBGPERRORSUBCODE = 21009871
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_CAPABILITY                 OpenconfigBgpTypesBGPERRORSUBCODE = 26975061
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_NETWORK_FIELD                  OpenconfigBgpTypesBGPERRORSUBCODE = 90070374
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_MESSAGE_LENGTH                     OpenconfigBgpTypesBGPERRORSUBCODE = 90655699
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_ADMINISTRATIVE_RESET                   OpenconfigBgpTypesBGPERRORSUBCODE = 100947029
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_OPTIONAL_ATTRIBUTE_ERROR               OpenconfigBgpTypesBGPERRORSUBCODE = 123969321
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_MISSING_WELL_KNOWN_ATTRIBUTE           OpenconfigBgpTypesBGPERRORSUBCODE = 127563993
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_FINITE_STATE_MACHINE_SUBCODE           OpenconfigBgpTypesBGPERRORSUBCODE = 144030790
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_MAX_NUM_PREFIXES_REACHED               OpenconfigBgpTypesBGPERRORSUBCODE = 146707226
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_PEER_DE_CONFIGURED                     OpenconfigBgpTypesBGPERRORSUBCODE = 155193610
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_OPTIONAL_PARAMETER         OpenconfigBgpTypesBGPERRORSUBCODE = 164097199
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENSENT    OpenconfigBgpTypesBGPERRORSUBCODE = 164447325
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_ORIGIN_ATTRIBUTE               OpenconfigBgpTypesBGPERRORSUBCODE = 171350120
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_MESSAGE_TYPE                       OpenconfigBgpTypesBGPERRORSUBCODE = 190684995
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNACCEPTABLE_HOLD_TIME                 OpenconfigBgpTypesBGPERRORSUBCODE = 195987058
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONN_COLLISION_RESOLUTION              OpenconfigBgpTypesBGPERRORSUBCODE = 199470949
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_ADMINISTRATIVE_SHUTDOWN                OpenconfigBgpTypesBGPERRORSUBCODE = 212255550
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_PEER_AS                            OpenconfigBgpTypesBGPERRORSUBCODE = 242980858
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_ROUTE_REFRESH_SUBCODE                  OpenconfigBgpTypesBGPERRORSUBCODE = 252485546
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_CEASE_SUBCODE                          OpenconfigBgpTypesBGPERRORSUBCODE = 280284332
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_ESTABLISHED OpenconfigBgpTypesBGPERRORSUBCODE = 297152611
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_OPEN_MESSAGE_SUBCODE                   OpenconfigBgpTypesBGPERRORSUBCODE = 310116903
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_ATTRIBUTE_FLAGS_ERROR                  OpenconfigBgpTypesBGPERRORSUBCODE = 318925574
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONNECTION_NOT_SYNCHRONIZED            OpenconfigBgpTypesBGPERRORSUBCODE = 320164138
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_OTHER_CONFIG_CHANGE                    OpenconfigBgpTypesBGPERRORSUBCODE = 332981615
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_MALFORMED_ATTRIBUTE_LIST               OpenconfigBgpTypesBGPERRORSUBCODE = 363574162
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_MALFORMED_AS_PATH                      OpenconfigBgpTypesBGPERRORSUBCODE = 365416389
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNRECOGNIZED_WELL_KNOWN_ATTRIBUTE      OpenconfigBgpTypesBGPERRORSUBCODE = 371075444
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_VERSION_NUMBER             OpenconfigBgpTypesBGPERRORSUBCODE = 371752299
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSPECIFIC                             OpenconfigBgpTypesBGPERRORSUBCODE = 398076278
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UPDATE_MESSAGE_SUBCODE                 OpenconfigBgpTypesBGPERRORSUBCODE = 409904620
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_BGP_IDENTIFIER                     OpenconfigBgpTypesBGPERRORSUBCODE = 412786356
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_MESSAGE_LENGTH                 OpenconfigBgpTypesBGPERRORSUBCODE = 492961163
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_NEXT_HOP_ATTRIBUTE             OpenconfigBgpTypesBGPERRORSUBCODE = 498575901
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENCONFIRM OpenconfigBgpTypesBGPERRORSUBCODE = 519452397
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_OUT_OF_RESOURCES                       OpenconfigBgpTypesBGPERRORSUBCODE = 530387889
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONNECTION_REJECTED                    OpenconfigBgpTypesBGPERRORSUBCODE = 532202480
)

// Enum value maps for OpenconfigBgpTypesBGPERRORSUBCODE.
var (
	OpenconfigBgpTypesBGPERRORSUBCODE_name = map[int32]string{
		0:         "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSET",
		7391784:   "OPENCONFIGBGPTYPESBGPERRORSUBCODE_MESSAGE_HEADER_SUBCODE",
		21009871:  "OPENCONFIGBGPTYPESBGPERRORSUBCODE_ATTRIBUTE_LENGTH_ERROR",
		26975061:  "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_CAPABILITY",
		90070374:  "OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_NETWORK_FIELD",
		90655699:  "OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_MESSAGE_LENGTH",
		100947029: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_ADMINISTRATIVE_RESET",
		123969321: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_OPTIONAL_ATTRIBUTE_ERROR",
		127563993: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_MISSING_WELL_KNOWN_ATTRIBUTE",
		144030790: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_FINITE_STATE_MACHINE_SUBCODE",
		146707226: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_MAX_NUM_PREFIXES_REACHED",
		155193610: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_PEER_DE_CONFIGURED",
		164097199: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_OPTIONAL_PARAMETER",
		164447325: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENSENT",
		171350120: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_ORIGIN_ATTRIBUTE",
		190684995: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_MESSAGE_TYPE",
		195987058: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNACCEPTABLE_HOLD_TIME",
		199470949: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONN_COLLISION_RESOLUTION",
		212255550: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_ADMINISTRATIVE_SHUTDOWN",
		242980858: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_PEER_AS",
		252485546: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_ROUTE_REFRESH_SUBCODE",
		280284332: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_CEASE_SUBCODE",
		297152611: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_ESTABLISHED",
		310116903: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_OPEN_MESSAGE_SUBCODE",
		318925574: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_ATTRIBUTE_FLAGS_ERROR",
		320164138: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONNECTION_NOT_SYNCHRONIZED",
		332981615: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_OTHER_CONFIG_CHANGE",
		363574162: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_MALFORMED_ATTRIBUTE_LIST",
		365416389: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_MALFORMED_AS_PATH",
		371075444: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNRECOGNIZED_WELL_KNOWN_ATTRIBUTE",
		371752299: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_VERSION_NUMBER",
		398076278: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSPECIFIC",
		409904620: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UPDATE_MESSAGE_SUBCODE",
		412786356: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_BGP_IDENTIFIER",
		492961163: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_MESSAGE_LENGTH",
		498575901: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_NEXT_HOP_ATTRIBUTE",
		519452397: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENCONFIRM",
		530387889: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_OUT_OF_RESOURCES",
		532202480: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONNECTION_REJECTED",
	}
	OpenconfigBgpTypesBGPERRORSUBCODE_value = map[string]int32{
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSET":                                  0,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_MESSAGE_HEADER_SUBCODE":                 7391784,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_ATTRIBUTE_LENGTH_ERROR":                 21009871,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_CAPABILITY":                 26975061,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_NETWORK_FIELD":                  90070374,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_MESSAGE_LENGTH":                     90655699,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_ADMINISTRATIVE_RESET":                   100947029,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_OPTIONAL_ATTRIBUTE_ERROR":               123969321,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_MISSING_WELL_KNOWN_ATTRIBUTE":           127563993,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_FINITE_STATE_MACHINE_SUBCODE":           144030790,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_MAX_NUM_PREFIXES_REACHED":               146707226,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_PEER_DE_CONFIGURED":                     155193610,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_OPTIONAL_PARAMETER":         164097199,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENSENT":    164447325,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_ORIGIN_ATTRIBUTE":               171350120,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_MESSAGE_TYPE":                       190684995,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNACCEPTABLE_HOLD_TIME":                 195987058,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONN_COLLISION_RESOLUTION":              199470949,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_ADMINISTRATIVE_SHUTDOWN":                212255550,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_PEER_AS":                            242980858,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_ROUTE_REFRESH_SUBCODE":                  252485546,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_CEASE_SUBCODE":                          280284332,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_ESTABLISHED": 297152611,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_OPEN_MESSAGE_SUBCODE":                   310116903,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_ATTRIBUTE_FLAGS_ERROR":                  318925574,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONNECTION_NOT_SYNCHRONIZED":            320164138,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_OTHER_CONFIG_CHANGE":                    332981615,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_MALFORMED_ATTRIBUTE_LIST":               363574162,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_MALFORMED_AS_PATH":                      365416389,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNRECOGNIZED_WELL_KNOWN_ATTRIBUTE":      371075444,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_VERSION_NUMBER":             371752299,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSPECIFIC":                             398076278,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UPDATE_MESSAGE_SUBCODE":                 409904620,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_BGP_IDENTIFIER":                     412786356,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_MESSAGE_LENGTH":                 492961163,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_NEXT_HOP_ATTRIBUTE":             498575901,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENCONFIRM": 519452397,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_OUT_OF_RESOURCES":                       530387889,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONNECTION_REJECTED":                    532202480,
	}
)

func (x OpenconfigBgpTypesBGPERRORSUBCODE) Enum() *OpenconfigBgpTypesBGPERRORSUBCODE {
	p := new(OpenconfigBgpTypesBGPERRORSUBCODE)
	*p = x
	return p
}

func (x OpenconfigBgpTypesBGPERRORSUBCODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesBGPERRORSUBCODE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[29].Descriptor()
}

func (OpenconfigBgpTypesBGPERRORSUBCODE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[29]
}

func (x OpenconfigBgpTypesBGPERRORSUBCODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesBGPERRORSUBCODE.Descriptor instead.
func (OpenconfigBgpTypesBGPERRORSUBCODE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{29}
}

// OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY represents an enumerated type generated for the YANG identity BGP_WELL_KNOWN_STD_COMMUNITY.
type OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY int32

const (
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET               OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 0
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT           OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 7425995
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT_SUBCONFED OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 75227749
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NOPEER              OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 77476850
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_ADVERTISE        OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 126797620
)

// Enum value maps for OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY.
var (
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_name = map[int32]string{
		0:         "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET",
		7425995:   "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT",
		75227749:  "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT_SUBCONFED",
		77476850:  "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NOPEER",
		126797620: "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_ADVERTISE",
	}
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_value = map[string]int32{
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET":               0,
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT":           7425995,
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT_SUBCONFED": 75227749,
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NOPEER":              77476850,
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_ADVERTISE":        126797620,
	}
)

func (x OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) Enum() *OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY {
	p := new(OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY)
	*p = x
	return p
}

func (x OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[30].Descriptor()
}

func (OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[30]
}

func (x OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY.Descriptor instead.
func (OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{30}
}

// OpenconfigCatalogTypesCATALOGMEMBERTYPE represents an enumerated type generated for the YANG identity CATALOG_MEMBER_TYPE.
type OpenconfigCatalogTypesCATALOGMEMBERTYPE int32

const (
	OpenconfigCatalogTypesCATALOGMEMBERTYPE_OPENCONFIGCATALOGTYPESCATALOGMEMBERTYPE_UNSET          OpenconfigCatalogTypesCATALOGMEMBERTYPE = 0
	OpenconfigCatalogTypesCATALOGMEMBERTYPE_OPENCONFIGCATALOGTYPESCATALOGMEMBERTYPE_FEATURE_BUNDLE OpenconfigCatalogTypesCATALOGMEMBERTYPE = 144148303
	OpenconfigCatalogTypesCATALOGMEMBERTYPE_OPENCONFIGCATALOGTYPESCATALOGMEMBERTYPE_RELEASE_BUNDLE OpenconfigCatalogTypesCATALOGMEMBERTYPE = 172558128
	OpenconfigCatalogTypesCATALOGMEMBERTYPE_OPENCONFIGCATALOGTYPESCATALOGMEMBERTYPE_MODULE         OpenconfigCatalogTypesCATALOGMEMBERTYPE = 216067246
)

// Enum value maps for OpenconfigCatalogTypesCATALOGMEMBERTYPE.
var (
	OpenconfigCatalogTypesCATALOGMEMBERTYPE_name = map[int32]string{
		0:         "OPENCONFIGCATALOGTYPESCATALOGMEMBERTYPE_UNSET",
		144148303: "OPENCONFIGCATALOGTYPESCATALOGMEMBERTYPE_FEATURE_BUNDLE",
		172558128: "OPENCONFIGCATALOGTYPESCATALOGMEMBERTYPE_RELEASE_BUNDLE",
		216067246: "OPENCONFIGCATALOGTYPESCATALOGMEMBERTYPE_MODULE",
	}
	OpenconfigCatalogTypesCATALOGMEMBERTYPE_value = map[string]int32{
		"OPENCONFIGCATALOGTYPESCATALOGMEMBERTYPE_UNSET":          0,
		"OPENCONFIGCATALOGTYPESCATALOGMEMBERTYPE_FEATURE_BUNDLE": 144148303,
		"OPENCONFIGCATALOGTYPESCATALOGMEMBERTYPE_RELEASE_BUNDLE": 172558128,
		"OPENCONFIGCATALOGTYPESCATALOGMEMBERTYPE_MODULE":         216067246,
	}
)

func (x OpenconfigCatalogTypesCATALOGMEMBERTYPE) Enum() *OpenconfigCatalogTypesCATALOGMEMBERTYPE {
	p := new(OpenconfigCatalogTypesCATALOGMEMBERTYPE)
	*p = x
	return p
}

func (x OpenconfigCatalogTypesCATALOGMEMBERTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigCatalogTypesCATALOGMEMBERTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[31].Descriptor()
}

func (OpenconfigCatalogTypesCATALOGMEMBERTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[31]
}

func (x OpenconfigCatalogTypesCATALOGMEMBERTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigCatalogTypesCATALOGMEMBERTYPE.Descriptor instead.
func (OpenconfigCatalogTypesCATALOGMEMBERTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{31}
}

// OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE represents an enumerated type generated for the YANG identity IMPLEMENTATION_STATUS_TYPE.
type OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE int32

const (
	OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE_OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_UNSET       OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE = 0
	OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE_OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_PLANNED     OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE = 49763311
	OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE_OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_PARTIAL     OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE = 236449718
	OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE_OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_COMPLETE    OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE = 263061934
	OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE_OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_IN_PROGRESS OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE = 524664764
)

// Enum value maps for OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE.
var (
	OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE_name = map[int32]string{
		0:         "OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_UNSET",
		49763311:  "OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_PLANNED",
		236449718: "OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_PARTIAL",
		263061934: "OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_COMPLETE",
		524664764: "OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_IN_PROGRESS",
	}
	OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE_value = map[string]int32{
		"OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_UNSET":       0,
		"OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_PLANNED":     49763311,
		"OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_PARTIAL":     236449718,
		"OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_COMPLETE":    263061934,
		"OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_IN_PROGRESS": 524664764,
	}
)

func (x OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE) Enum() *OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE {
	p := new(OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE)
	*p = x
	return p
}

func (x OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[32].Descriptor()
}

func (OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[32]
}

func (x OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE.Descriptor instead.
func (OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{32}
}

// OpenconfigCatalogTypesMODULECATEGORYBASE represents an enumerated type generated for the YANG identity MODULE_CATEGORY_BASE.
type OpenconfigCatalogTypesMODULECATEGORYBASE int32

const (
	OpenconfigCatalogTypesMODULECATEGORYBASE_OPENCONFIGCATALOGTYPESMODULECATEGORYBASE_UNSET                OpenconfigCatalogTypesMODULECATEGORYBASE = 0
	OpenconfigCatalogTypesMODULECATEGORYBASE_OPENCONFIGCATALOGTYPESMODULECATEGORYBASE_IETF_MODEL_LAYER     OpenconfigCatalogTypesMODULECATEGORYBASE = 95725600
	OpenconfigCatalogTypesMODULECATEGORYBASE_OPENCONFIGCATALOGTYPESMODULECATEGORYBASE_IETF_NETWORK_ELEMENT OpenconfigCatalogTypesMODULECATEGORYBASE = 379703314
	OpenconfigCatalogTypesMODULECATEGORYBASE_OPENCONFIGCATALOGTYPESMODULECATEGORYBASE_IETF_NETWORK_SERVICE OpenconfigCatalogTypesMODULECATEGORYBASE = 401800823
)

// Enum value maps for OpenconfigCatalogTypesMODULECATEGORYBASE.
var (
	OpenconfigCatalogTypesMODULECATEGORYBASE_name = map[int32]string{
		0:         "OPENCONFIGCATALOGTYPESMODULECATEGORYBASE_UNSET",
		95725600:  "OPENCONFIGCATALOGTYPESMODULECATEGORYBASE_IETF_MODEL_LAYER",
		379703314: "OPENCONFIGCATALOGTYPESMODULECATEGORYBASE_IETF_NETWORK_ELEMENT",
		401800823: "OPENCONFIGCATALOGTYPESMODULECATEGORYBASE_IETF_NETWORK_SERVICE",
	}
	OpenconfigCatalogTypesMODULECATEGORYBASE_value = map[string]int32{
		"OPENCONFIGCATALOGTYPESMODULECATEGORYBASE_UNSET":                0,
		"OPENCONFIGCATALOGTYPESMODULECATEGORYBASE_IETF_MODEL_LAYER":     95725600,
		"OPENCONFIGCATALOGTYPESMODULECATEGORYBASE_IETF_NETWORK_ELEMENT": 379703314,
		"OPENCONFIGCATALOGTYPESMODULECATEGORYBASE_IETF_NETWORK_SERVICE": 401800823,
	}
)

func (x OpenconfigCatalogTypesMODULECATEGORYBASE) Enum() *OpenconfigCatalogTypesMODULECATEGORYBASE {
	p := new(OpenconfigCatalogTypesMODULECATEGORYBASE)
	*p = x
	return p
}

func (x OpenconfigCatalogTypesMODULECATEGORYBASE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigCatalogTypesMODULECATEGORYBASE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[33].Descriptor()
}

func (OpenconfigCatalogTypesMODULECATEGORYBASE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[33]
}

func (x OpenconfigCatalogTypesMODULECATEGORYBASE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigCatalogTypesMODULECATEGORYBASE.Descriptor instead.
func (OpenconfigCatalogTypesMODULECATEGORYBASE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{33}
}

// OpenconfigCatalogTypesMODULESTATUSTYPE represents an enumerated type generated for the YANG identity MODULE_STATUS_TYPE.
type OpenconfigCatalogTypesMODULESTATUSTYPE int32

const (
	OpenconfigCatalogTypesMODULESTATUSTYPE_OPENCONFIGCATALOGTYPESMODULESTATUSTYPE_UNSET        OpenconfigCatalogTypesMODULESTATUSTYPE = 0
	OpenconfigCatalogTypesMODULESTATUSTYPE_OPENCONFIGCATALOGTYPESMODULESTATUSTYPE_EXPERIMENTAL OpenconfigCatalogTypesMODULESTATUSTYPE = 95131679
	OpenconfigCatalogTypesMODULESTATUSTYPE_OPENCONFIGCATALOGTYPESMODULESTATUSTYPE_PRODUCTION   OpenconfigCatalogTypesMODULESTATUSTYPE = 448485660
)

// Enum value maps for OpenconfigCatalogTypesMODULESTATUSTYPE.
var (
	OpenconfigCatalogTypesMODULESTATUSTYPE_name = map[int32]string{
		0:         "OPENCONFIGCATALOGTYPESMODULESTATUSTYPE_UNSET",
		95131679:  "OPENCONFIGCATALOGTYPESMODULESTATUSTYPE_EXPERIMENTAL",
		448485660: "OPENCONFIGCATALOGTYPESMODULESTATUSTYPE_PRODUCTION",
	}
	OpenconfigCatalogTypesMODULESTATUSTYPE_value = map[string]int32{
		"OPENCONFIGCATALOGTYPESMODULESTATUSTYPE_UNSET":        0,
		"OPENCONFIGCATALOGTYPESMODULESTATUSTYPE_EXPERIMENTAL": 95131679,
		"OPENCONFIGCATALOGTYPESMODULESTATUSTYPE_PRODUCTION":   448485660,
	}
)

func (x OpenconfigCatalogTypesMODULESTATUSTYPE) Enum() *OpenconfigCatalogTypesMODULESTATUSTYPE {
	p := new(OpenconfigCatalogTypesMODULESTATUSTYPE)
	*p = x
	return p
}

func (x OpenconfigCatalogTypesMODULESTATUSTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigCatalogTypesMODULESTATUSTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[34].Descriptor()
}

func (OpenconfigCatalogTypesMODULESTATUSTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[34]
}

func (x OpenconfigCatalogTypesMODULESTATUSTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigCatalogTypesMODULESTATUSTYPE.Descriptor instead.
func (OpenconfigCatalogTypesMODULESTATUSTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{34}
}

// OpenconfigCatalogTypesMODULESUBCATEGORYBASE represents an enumerated type generated for the YANG identity MODULE_SUBCATEGORY_BASE.
type OpenconfigCatalogTypesMODULESUBCATEGORYBASE int32

const (
	OpenconfigCatalogTypesMODULESUBCATEGORYBASE_OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_UNSET              OpenconfigCatalogTypesMODULESUBCATEGORYBASE = 0
	OpenconfigCatalogTypesMODULESUBCATEGORYBASE_OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_IETF_TYPE_USER     OpenconfigCatalogTypesMODULESUBCATEGORYBASE = 135819901
	OpenconfigCatalogTypesMODULESUBCATEGORYBASE_OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_IETF_TYPE_STANDARD OpenconfigCatalogTypesMODULESUBCATEGORYBASE = 318398963
	OpenconfigCatalogTypesMODULESUBCATEGORYBASE_OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_IETF_MODEL_TYPE    OpenconfigCatalogTypesMODULESUBCATEGORYBASE = 429394511
	OpenconfigCatalogTypesMODULESUBCATEGORYBASE_OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_IETF_TYPE_VENDOR   OpenconfigCatalogTypesMODULESUBCATEGORYBASE = 526461606
)

// Enum value maps for OpenconfigCatalogTypesMODULESUBCATEGORYBASE.
var (
	OpenconfigCatalogTypesMODULESUBCATEGORYBASE_name = map[int32]string{
		0:         "OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_UNSET",
		135819901: "OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_IETF_TYPE_USER",
		318398963: "OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_IETF_TYPE_STANDARD",
		429394511: "OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_IETF_MODEL_TYPE",
		526461606: "OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_IETF_TYPE_VENDOR",
	}
	OpenconfigCatalogTypesMODULESUBCATEGORYBASE_value = map[string]int32{
		"OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_UNSET":              0,
		"OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_IETF_TYPE_USER":     135819901,
		"OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_IETF_TYPE_STANDARD": 318398963,
		"OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_IETF_MODEL_TYPE":    429394511,
		"OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_IETF_TYPE_VENDOR":   526461606,
	}
)

func (x OpenconfigCatalogTypesMODULESUBCATEGORYBASE) Enum() *OpenconfigCatalogTypesMODULESUBCATEGORYBASE {
	p := new(OpenconfigCatalogTypesMODULESUBCATEGORYBASE)
	*p = x
	return p
}

func (x OpenconfigCatalogTypesMODULESUBCATEGORYBASE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigCatalogTypesMODULESUBCATEGORYBASE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[35].Descriptor()
}

func (OpenconfigCatalogTypesMODULESUBCATEGORYBASE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[35]
}

func (x OpenconfigCatalogTypesMODULESUBCATEGORYBASE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigCatalogTypesMODULESUBCATEGORYBASE.Descriptor instead.
func (OpenconfigCatalogTypesMODULESUBCATEGORYBASE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{35}
}

// OpenconfigCatalogTypesORGANIZATIONTYPE represents an enumerated type generated for the YANG identity ORGANIZATION_TYPE.
type OpenconfigCatalogTypesORGANIZATIONTYPE int32

const (
	OpenconfigCatalogTypesORGANIZATIONTYPE_OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_UNSET      OpenconfigCatalogTypesORGANIZATIONTYPE = 0
	OpenconfigCatalogTypesORGANIZATIONTYPE_OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_COMMERCIAL OpenconfigCatalogTypesORGANIZATIONTYPE = 55136337
	OpenconfigCatalogTypesORGANIZATIONTYPE_OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_STANDARDS  OpenconfigCatalogTypesORGANIZATIONTYPE = 117508923
	OpenconfigCatalogTypesORGANIZATIONTYPE_OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_INDUSTRY   OpenconfigCatalogTypesORGANIZATIONTYPE = 145081989
	OpenconfigCatalogTypesORGANIZATIONTYPE_OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_INDIVIDUAL OpenconfigCatalogTypesORGANIZATIONTYPE = 344820802
)

// Enum value maps for OpenconfigCatalogTypesORGANIZATIONTYPE.
var (
	OpenconfigCatalogTypesORGANIZATIONTYPE_name = map[int32]string{
		0:         "OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_UNSET",
		55136337:  "OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_COMMERCIAL",
		117508923: "OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_STANDARDS",
		145081989: "OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_INDUSTRY",
		344820802: "OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_INDIVIDUAL",
	}
	OpenconfigCatalogTypesORGANIZATIONTYPE_value = map[string]int32{
		"OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_UNSET":      0,
		"OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_COMMERCIAL": 55136337,
		"OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_STANDARDS":  117508923,
		"OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_INDUSTRY":   145081989,
		"OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_INDIVIDUAL": 344820802,
	}
)

func (x OpenconfigCatalogTypesORGANIZATIONTYPE) Enum() *OpenconfigCatalogTypesORGANIZATIONTYPE {
	p := new(OpenconfigCatalogTypesORGANIZATIONTYPE)
	*p = x
	return p
}

func (x OpenconfigCatalogTypesORGANIZATIONTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigCatalogTypesORGANIZATIONTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[36].Descriptor()
}

func (OpenconfigCatalogTypesORGANIZATIONTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[36]
}

func (x OpenconfigCatalogTypesORGANIZATIONTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigCatalogTypesORGANIZATIONTYPE.Descriptor instead.
func (OpenconfigCatalogTypesORGANIZATIONTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{36}
}

// OpenconfigExampleBASEIDENTITY represents an enumerated type generated for the YANG identity BASE_IDENTITY.
type OpenconfigExampleBASEIDENTITY int32

const (
	OpenconfigExampleBASEIDENTITY_OPENCONFIGEXAMPLEBASEIDENTITY_UNSET     OpenconfigExampleBASEIDENTITY = 0
	OpenconfigExampleBASEIDENTITY_OPENCONFIGEXAMPLEBASEIDENTITY_DERIVED_B OpenconfigExampleBASEIDENTITY = 292367549
	OpenconfigExampleBASEIDENTITY_OPENCONFIGEXAMPLEBASEIDENTITY_DERIVED_A OpenconfigExampleBASEIDENTITY = 292367550
)

// Enum value maps for OpenconfigExampleBASEIDENTITY.
var (
	OpenconfigExampleBASEIDENTITY_name = map[int32]string{
		0:         "OPENCONFIGEXAMPLEBASEIDENTITY_UNSET",
		292367549: "OPENCONFIGEXAMPLEBASEIDENTITY_DERIVED_B",
		292367550: "OPENCONFIGEXAMPLEBASEIDENTITY_DERIVED_A",
	}
	OpenconfigExampleBASEIDENTITY_value = map[string]int32{
		"OPENCONFIGEXAMPLEBASEIDENTITY_UNSET":     0,
		"OPENCONFIGEXAMPLEBASEIDENTITY_DERIVED_B": 292367549,
		"OPENCONFIGEXAMPLEBASEIDENTITY_DERIVED_A": 292367550,
	}
)

func (x OpenconfigExampleBASEIDENTITY) Enum() *OpenconfigExampleBASEIDENTITY {
	p := new(OpenconfigExampleBASEIDENTITY)
	*p = x
	return p
}

func (x OpenconfigExampleBASEIDENTITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigExampleBASEIDENTITY) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[37].Descriptor()
}

func (OpenconfigExampleBASEIDENTITY) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[37]
}

func (x OpenconfigExampleBASEIDENTITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigExampleBASEIDENTITY.Descriptor instead.
func (OpenconfigExampleBASEIDENTITY) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{37}
}

// OpenconfigIfAggregateAggregationType represents an enumerated type generated for the YANG enumerated type aggregation-type.
type OpenconfigIfAggregateAggregationType int32

const (
	OpenconfigIfAggregateAggregationType_OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_UNSET  OpenconfigIfAggregateAggregationType = 0
	OpenconfigIfAggregateAggregationType_OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_LACP   OpenconfigIfAggregateAggregationType = 1
	OpenconfigIfAggregateAggregationType_OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_STATIC OpenconfigIfAggregateAggregationType = 2
)

// Enum value maps for OpenconfigIfAggregateAggregationType.
var (
	OpenconfigIfAggregateAggregationType_name = map[int32]string{
		0: "OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_UNSET",
		1: "OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_LACP",
		2: "OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_STATIC",
	}
	OpenconfigIfAggregateAggregationType_value = map[string]int32{
		"OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_UNSET":  0,
		"OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_LACP":   1,
		"OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_STATIC": 2,
	}
)

func (x OpenconfigIfAggregateAggregationType) Enum() *OpenconfigIfAggregateAggregationType {
	p := new(OpenconfigIfAggregateAggregationType)
	*p = x
	return p
}

func (x OpenconfigIfAggregateAggregationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIfAggregateAggregationType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[38].Descriptor()
}

func (OpenconfigIfAggregateAggregationType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[38]
}

func (x OpenconfigIfAggregateAggregationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIfAggregateAggregationType.Descriptor instead.
func (OpenconfigIfAggregateAggregationType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{38}
}

// OpenconfigIfEthernetETHERNETSPEED represents an enumerated type generated for the YANG identity ETHERNET_SPEED.
type OpenconfigIfEthernetETHERNETSPEED int32

const (
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_UNSET         OpenconfigIfEthernetETHERNETSPEED = 0
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_600GB   OpenconfigIfEthernetETHERNETSPEED = 33095753
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_UNKNOWN OpenconfigIfEthernetETHERNETSPEED = 63922730
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_2500MB  OpenconfigIfEthernetETHERNETSPEED = 129756682
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_800GB   OpenconfigIfEthernetETHERNETSPEED = 141062131
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_1GB     OpenconfigIfEthernetETHERNETSPEED = 158137778
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_25GB    OpenconfigIfEthernetETHERNETSPEED = 164726524
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_100MB   OpenconfigIfEthernetETHERNETSPEED = 176009444
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_10GB    OpenconfigIfEthernetETHERNETSPEED = 221101252
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_200GB   OpenconfigIfEthernetETHERNETSPEED = 231972805
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_100GB   OpenconfigIfEthernetETHERNETSPEED = 276675162
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_10MB    OpenconfigIfEthernetETHERNETSPEED = 321766842
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_400GB   OpenconfigIfEthernetETHERNETSPEED = 339939183
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_5GB     OpenconfigIfEthernetETHERNETSPEED = 425875238
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_50GB    OpenconfigIfEthernetETHERNETSPEED = 434311888
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_40GB    OpenconfigIfEthernetETHERNETSPEED = 470711119
)

// Enum value maps for OpenconfigIfEthernetETHERNETSPEED.
var (
	OpenconfigIfEthernetETHERNETSPEED_name = map[int32]string{
		0:         "OPENCONFIGIFETHERNETETHERNETSPEED_UNSET",
		33095753:  "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_600GB",
		63922730:  "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_UNKNOWN",
		129756682: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_2500MB",
		141062131: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_800GB",
		158137778: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_1GB",
		164726524: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_25GB",
		176009444: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_100MB",
		221101252: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_10GB",
		231972805: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_200GB",
		276675162: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_100GB",
		321766842: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_10MB",
		339939183: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_400GB",
		425875238: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_5GB",
		434311888: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_50GB",
		470711119: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_40GB",
	}
	OpenconfigIfEthernetETHERNETSPEED_value = map[string]int32{
		"OPENCONFIGIFETHERNETETHERNETSPEED_UNSET":         0,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_600GB":   33095753,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_UNKNOWN": 63922730,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_2500MB":  129756682,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_800GB":   141062131,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_1GB":     158137778,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_25GB":    164726524,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_100MB":   176009444,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_10GB":    221101252,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_200GB":   231972805,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_100GB":   276675162,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_10MB":    321766842,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_400GB":   339939183,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_5GB":     425875238,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_50GB":    434311888,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_40GB":    470711119,
	}
)

func (x OpenconfigIfEthernetETHERNETSPEED) Enum() *OpenconfigIfEthernetETHERNETSPEED {
	p := new(OpenconfigIfEthernetETHERNETSPEED)
	*p = x
	return p
}

func (x OpenconfigIfEthernetETHERNETSPEED) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIfEthernetETHERNETSPEED) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[39].Descriptor()
}

func (OpenconfigIfEthernetETHERNETSPEED) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[39]
}

func (x OpenconfigIfEthernetETHERNETSPEED) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIfEthernetETHERNETSPEED.Descriptor instead.
func (OpenconfigIfEthernetETHERNETSPEED) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{39}
}

// OpenconfigIfIpIpAddressOrigin represents an enumerated type generated for the YANG enumerated type ip-address-origin.
type OpenconfigIfIpIpAddressOrigin int32

const (
	OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_UNSET      OpenconfigIfIpIpAddressOrigin = 0
	OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_OTHER      OpenconfigIfIpIpAddressOrigin = 1
	OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_STATIC     OpenconfigIfIpIpAddressOrigin = 2
	OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_DHCP       OpenconfigIfIpIpAddressOrigin = 3
	OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_LINK_LAYER OpenconfigIfIpIpAddressOrigin = 4
	OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_RANDOM     OpenconfigIfIpIpAddressOrigin = 5
)

// Enum value maps for OpenconfigIfIpIpAddressOrigin.
var (
	OpenconfigIfIpIpAddressOrigin_name = map[int32]string{
		0: "OPENCONFIGIFIPIPADDRESSORIGIN_UNSET",
		1: "OPENCONFIGIFIPIPADDRESSORIGIN_OTHER",
		2: "OPENCONFIGIFIPIPADDRESSORIGIN_STATIC",
		3: "OPENCONFIGIFIPIPADDRESSORIGIN_DHCP",
		4: "OPENCONFIGIFIPIPADDRESSORIGIN_LINK_LAYER",
		5: "OPENCONFIGIFIPIPADDRESSORIGIN_RANDOM",
	}
	OpenconfigIfIpIpAddressOrigin_value = map[string]int32{
		"OPENCONFIGIFIPIPADDRESSORIGIN_UNSET":      0,
		"OPENCONFIGIFIPIPADDRESSORIGIN_OTHER":      1,
		"OPENCONFIGIFIPIPADDRESSORIGIN_STATIC":     2,
		"OPENCONFIGIFIPIPADDRESSORIGIN_DHCP":       3,
		"OPENCONFIGIFIPIPADDRESSORIGIN_LINK_LAYER": 4,
		"OPENCONFIGIFIPIPADDRESSORIGIN_RANDOM":     5,
	}
)

func (x OpenconfigIfIpIpAddressOrigin) Enum() *OpenconfigIfIpIpAddressOrigin {
	p := new(OpenconfigIfIpIpAddressOrigin)
	*p = x
	return p
}

func (x OpenconfigIfIpIpAddressOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIfIpIpAddressOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[40].Descriptor()
}

func (OpenconfigIfIpIpAddressOrigin) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[40]
}

func (x OpenconfigIfIpIpAddressOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIfIpIpAddressOrigin.Descriptor instead.
func (OpenconfigIfIpIpAddressOrigin) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{40}
}

// OpenconfigIfIpNeighborOrigin represents an enumerated type generated for the YANG enumerated type neighbor-origin.
type OpenconfigIfIpNeighborOrigin int32

const (
	OpenconfigIfIpNeighborOrigin_OPENCONFIGIFIPNEIGHBORORIGIN_UNSET   OpenconfigIfIpNeighborOrigin = 0
	OpenconfigIfIpNeighborOrigin_OPENCONFIGIFIPNEIGHBORORIGIN_OTHER   OpenconfigIfIpNeighborOrigin = 1
	OpenconfigIfIpNeighborOrigin_OPENCONFIGIFIPNEIGHBORORIGIN_STATIC  OpenconfigIfIpNeighborOrigin = 2
	OpenconfigIfIpNeighborOrigin_OPENCONFIGIFIPNEIGHBORORIGIN_DYNAMIC OpenconfigIfIpNeighborOrigin = 3
)

// Enum value maps for OpenconfigIfIpNeighborOrigin.
var (
	OpenconfigIfIpNeighborOrigin_name = map[int32]string{
		0: "OPENCONFIGIFIPNEIGHBORORIGIN_UNSET",
		1: "OPENCONFIGIFIPNEIGHBORORIGIN_OTHER",
		2: "OPENCONFIGIFIPNEIGHBORORIGIN_STATIC",
		3: "OPENCONFIGIFIPNEIGHBORORIGIN_DYNAMIC",
	}
	OpenconfigIfIpNeighborOrigin_value = map[string]int32{
		"OPENCONFIGIFIPNEIGHBORORIGIN_UNSET":   0,
		"OPENCONFIGIFIPNEIGHBORORIGIN_OTHER":   1,
		"OPENCONFIGIFIPNEIGHBORORIGIN_STATIC":  2,
		"OPENCONFIGIFIPNEIGHBORORIGIN_DYNAMIC": 3,
	}
)

func (x OpenconfigIfIpNeighborOrigin) Enum() *OpenconfigIfIpNeighborOrigin {
	p := new(OpenconfigIfIpNeighborOrigin)
	*p = x
	return p
}

func (x OpenconfigIfIpNeighborOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIfIpNeighborOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[41].Descriptor()
}

func (OpenconfigIfIpNeighborOrigin) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[41]
}

func (x OpenconfigIfIpNeighborOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIfIpNeighborOrigin.Descriptor instead.
func (OpenconfigIfIpNeighborOrigin) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{41}
}

// OpenconfigIsisAdaptiveTimerType represents an enumerated type generated for the YANG enumerated type adaptive-timer-type.
type OpenconfigIsisAdaptiveTimerType int32

const (
	OpenconfigIsisAdaptiveTimerType_OPENCONFIGISISADAPTIVETIMERTYPE_UNSET       OpenconfigIsisAdaptiveTimerType = 0
	OpenconfigIsisAdaptiveTimerType_OPENCONFIGISISADAPTIVETIMERTYPE_LINEAR      OpenconfigIsisAdaptiveTimerType = 1
	OpenconfigIsisAdaptiveTimerType_OPENCONFIGISISADAPTIVETIMERTYPE_EXPONENTIAL OpenconfigIsisAdaptiveTimerType = 2
)

// Enum value maps for OpenconfigIsisAdaptiveTimerType.
var (
	OpenconfigIsisAdaptiveTimerType_name = map[int32]string{
		0: "OPENCONFIGISISADAPTIVETIMERTYPE_UNSET",
		1: "OPENCONFIGISISADAPTIVETIMERTYPE_LINEAR",
		2: "OPENCONFIGISISADAPTIVETIMERTYPE_EXPONENTIAL",
	}
	OpenconfigIsisAdaptiveTimerType_value = map[string]int32{
		"OPENCONFIGISISADAPTIVETIMERTYPE_UNSET":       0,
		"OPENCONFIGISISADAPTIVETIMERTYPE_LINEAR":      1,
		"OPENCONFIGISISADAPTIVETIMERTYPE_EXPONENTIAL": 2,
	}
)

func (x OpenconfigIsisAdaptiveTimerType) Enum() *OpenconfigIsisAdaptiveTimerType {
	p := new(OpenconfigIsisAdaptiveTimerType)
	*p = x
	return p
}

func (x OpenconfigIsisAdaptiveTimerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisAdaptiveTimerType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[42].Descriptor()
}

func (OpenconfigIsisAdaptiveTimerType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[42]
}

func (x OpenconfigIsisAdaptiveTimerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisAdaptiveTimerType.Descriptor instead.
func (OpenconfigIsisAdaptiveTimerType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{42}
}

// OpenconfigIsisCircuitType represents an enumerated type generated for the YANG enumerated type circuit-type.
type OpenconfigIsisCircuitType int32

const (
	OpenconfigIsisCircuitType_OPENCONFIGISISCIRCUITTYPE_UNSET          OpenconfigIsisCircuitType = 0
	OpenconfigIsisCircuitType_OPENCONFIGISISCIRCUITTYPE_POINT_TO_POINT OpenconfigIsisCircuitType = 1
	OpenconfigIsisCircuitType_OPENCONFIGISISCIRCUITTYPE_BROADCAST      OpenconfigIsisCircuitType = 2
)

// Enum value maps for OpenconfigIsisCircuitType.
var (
	OpenconfigIsisCircuitType_name = map[int32]string{
		0: "OPENCONFIGISISCIRCUITTYPE_UNSET",
		1: "OPENCONFIGISISCIRCUITTYPE_POINT_TO_POINT",
		2: "OPENCONFIGISISCIRCUITTYPE_BROADCAST",
	}
	OpenconfigIsisCircuitType_value = map[string]int32{
		"OPENCONFIGISISCIRCUITTYPE_UNSET":          0,
		"OPENCONFIGISISCIRCUITTYPE_POINT_TO_POINT": 1,
		"OPENCONFIGISISCIRCUITTYPE_BROADCAST":      2,
	}
)

func (x OpenconfigIsisCircuitType) Enum() *OpenconfigIsisCircuitType {
	p := new(OpenconfigIsisCircuitType)
	*p = x
	return p
}

func (x OpenconfigIsisCircuitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisCircuitType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[43].Descriptor()
}

func (OpenconfigIsisCircuitType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[43]
}

func (x OpenconfigIsisCircuitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisCircuitType.Descriptor instead.
func (OpenconfigIsisCircuitType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{43}
}

// OpenconfigIsisHelloPaddingType represents an enumerated type generated for the YANG enumerated type hello-padding-type.
type OpenconfigIsisHelloPaddingType int32

const (
	OpenconfigIsisHelloPaddingType_OPENCONFIGISISHELLOPADDINGTYPE_UNSET    OpenconfigIsisHelloPaddingType = 0
	OpenconfigIsisHelloPaddingType_OPENCONFIGISISHELLOPADDINGTYPE_STRICT   OpenconfigIsisHelloPaddingType = 1
	OpenconfigIsisHelloPaddingType_OPENCONFIGISISHELLOPADDINGTYPE_LOOSE    OpenconfigIsisHelloPaddingType = 2
	OpenconfigIsisHelloPaddingType_OPENCONFIGISISHELLOPADDINGTYPE_ADAPTIVE OpenconfigIsisHelloPaddingType = 3
	OpenconfigIsisHelloPaddingType_OPENCONFIGISISHELLOPADDINGTYPE_DISABLE  OpenconfigIsisHelloPaddingType = 4
)

// Enum value maps for OpenconfigIsisHelloPaddingType.
var (
	OpenconfigIsisHelloPaddingType_name = map[int32]string{
		0: "OPENCONFIGISISHELLOPADDINGTYPE_UNSET",
		1: "OPENCONFIGISISHELLOPADDINGTYPE_STRICT",
		2: "OPENCONFIGISISHELLOPADDINGTYPE_LOOSE",
		3: "OPENCONFIGISISHELLOPADDINGTYPE_ADAPTIVE",
		4: "OPENCONFIGISISHELLOPADDINGTYPE_DISABLE",
	}
	OpenconfigIsisHelloPaddingType_value = map[string]int32{
		"OPENCONFIGISISHELLOPADDINGTYPE_UNSET":    0,
		"OPENCONFIGISISHELLOPADDINGTYPE_STRICT":   1,
		"OPENCONFIGISISHELLOPADDINGTYPE_LOOSE":    2,
		"OPENCONFIGISISHELLOPADDINGTYPE_ADAPTIVE": 3,
		"OPENCONFIGISISHELLOPADDINGTYPE_DISABLE":  4,
	}
)

func (x OpenconfigIsisHelloPaddingType) Enum() *OpenconfigIsisHelloPaddingType {
	p := new(OpenconfigIsisHelloPaddingType)
	*p = x
	return p
}

func (x OpenconfigIsisHelloPaddingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisHelloPaddingType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[44].Descriptor()
}

func (OpenconfigIsisHelloPaddingType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[44]
}

func (x OpenconfigIsisHelloPaddingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisHelloPaddingType.Descriptor instead.
func (OpenconfigIsisHelloPaddingType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{44}
}

// OpenconfigIsisIsisInterfaceAdjState represents an enumerated type generated for the YANG enumerated type isis-interface-adj-state.
type OpenconfigIsisIsisInterfaceAdjState int32

const (
	OpenconfigIsisIsisInterfaceAdjState_OPENCONFIGISISISISINTERFACEADJSTATE_UNSET  OpenconfigIsisIsisInterfaceAdjState = 0
	OpenconfigIsisIsisInterfaceAdjState_OPENCONFIGISISISISINTERFACEADJSTATE_UP     OpenconfigIsisIsisInterfaceAdjState = 1
	OpenconfigIsisIsisInterfaceAdjState_OPENCONFIGISISISISINTERFACEADJSTATE_DOWN   OpenconfigIsisIsisInterfaceAdjState = 2
	OpenconfigIsisIsisInterfaceAdjState_OPENCONFIGISISISISINTERFACEADJSTATE_INIT   OpenconfigIsisIsisInterfaceAdjState = 3
	OpenconfigIsisIsisInterfaceAdjState_OPENCONFIGISISISISINTERFACEADJSTATE_FAILED OpenconfigIsisIsisInterfaceAdjState = 4
)

// Enum value maps for OpenconfigIsisIsisInterfaceAdjState.
var (
	OpenconfigIsisIsisInterfaceAdjState_name = map[int32]string{
		0: "OPENCONFIGISISISISINTERFACEADJSTATE_UNSET",
		1: "OPENCONFIGISISISISINTERFACEADJSTATE_UP",
		2: "OPENCONFIGISISISISINTERFACEADJSTATE_DOWN",
		3: "OPENCONFIGISISISISINTERFACEADJSTATE_INIT",
		4: "OPENCONFIGISISISISINTERFACEADJSTATE_FAILED",
	}
	OpenconfigIsisIsisInterfaceAdjState_value = map[string]int32{
		"OPENCONFIGISISISISINTERFACEADJSTATE_UNSET":  0,
		"OPENCONFIGISISISISINTERFACEADJSTATE_UP":     1,
		"OPENCONFIGISISISISINTERFACEADJSTATE_DOWN":   2,
		"OPENCONFIGISISISISINTERFACEADJSTATE_INIT":   3,
		"OPENCONFIGISISISISINTERFACEADJSTATE_FAILED": 4,
	}
)

func (x OpenconfigIsisIsisInterfaceAdjState) Enum() *OpenconfigIsisIsisInterfaceAdjState {
	p := new(OpenconfigIsisIsisInterfaceAdjState)
	*p = x
	return p
}

func (x OpenconfigIsisIsisInterfaceAdjState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisIsisInterfaceAdjState) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[45].Descriptor()
}

func (OpenconfigIsisIsisInterfaceAdjState) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[45]
}

func (x OpenconfigIsisIsisInterfaceAdjState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisIsisInterfaceAdjState.Descriptor instead.
func (OpenconfigIsisIsisInterfaceAdjState) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{45}
}

// OpenconfigIsisIsisMetricFlags represents an enumerated type generated for the YANG enumerated type isis-metric-flags.
type OpenconfigIsisIsisMetricFlags int32

const (
	OpenconfigIsisIsisMetricFlags_OPENCONFIGISISISISMETRICFLAGS_UNSET       OpenconfigIsisIsisMetricFlags = 0
	OpenconfigIsisIsisMetricFlags_OPENCONFIGISISISISMETRICFLAGS_INTERNAL    OpenconfigIsisIsisMetricFlags = 1
	OpenconfigIsisIsisMetricFlags_OPENCONFIGISISISISMETRICFLAGS_UNSUPPORTED OpenconfigIsisIsisMetricFlags = 2
)

// Enum value maps for OpenconfigIsisIsisMetricFlags.
var (
	OpenconfigIsisIsisMetricFlags_name = map[int32]string{
		0: "OPENCONFIGISISISISMETRICFLAGS_UNSET",
		1: "OPENCONFIGISISISISMETRICFLAGS_INTERNAL",
		2: "OPENCONFIGISISISISMETRICFLAGS_UNSUPPORTED",
	}
	OpenconfigIsisIsisMetricFlags_value = map[string]int32{
		"OPENCONFIGISISISISMETRICFLAGS_UNSET":       0,
		"OPENCONFIGISISISISMETRICFLAGS_INTERNAL":    1,
		"OPENCONFIGISISISISMETRICFLAGS_UNSUPPORTED": 2,
	}
)

func (x OpenconfigIsisIsisMetricFlags) Enum() *OpenconfigIsisIsisMetricFlags {
	p := new(OpenconfigIsisIsisMetricFlags)
	*p = x
	return p
}

func (x OpenconfigIsisIsisMetricFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisIsisMetricFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[46].Descriptor()
}

func (OpenconfigIsisIsisMetricFlags) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[46]
}

func (x OpenconfigIsisIsisMetricFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisIsisMetricFlags.Descriptor instead.
func (OpenconfigIsisIsisMetricFlags) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{46}
}

// OpenconfigIsisLevelType represents an enumerated type generated for the YANG enumerated type level-type.
type OpenconfigIsisLevelType int32

const (
	OpenconfigIsisLevelType_OPENCONFIGISISLEVELTYPE_LEVEL_1_2 OpenconfigIsisLevelType = 0
	OpenconfigIsisLevelType_OPENCONFIGISISLEVELTYPE_LEVEL_1   OpenconfigIsisLevelType = 1
	OpenconfigIsisLevelType_OPENCONFIGISISLEVELTYPE_LEVEL_2   OpenconfigIsisLevelType = 2
)

// Enum value maps for OpenconfigIsisLevelType.
var (
	OpenconfigIsisLevelType_name = map[int32]string{
		0: "OPENCONFIGISISLEVELTYPE_LEVEL_1_2",
		1: "OPENCONFIGISISLEVELTYPE_LEVEL_1",
		2: "OPENCONFIGISISLEVELTYPE_LEVEL_2",
	}
	OpenconfigIsisLevelType_value = map[string]int32{
		"OPENCONFIGISISLEVELTYPE_LEVEL_1_2": 0,
		"OPENCONFIGISISLEVELTYPE_LEVEL_1":   1,
		"OPENCONFIGISISLEVELTYPE_LEVEL_2":   2,
	}
)

func (x OpenconfigIsisLevelType) Enum() *OpenconfigIsisLevelType {
	p := new(OpenconfigIsisLevelType)
	*p = x
	return p
}

func (x OpenconfigIsisLevelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisLevelType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[47].Descriptor()
}

func (OpenconfigIsisLevelType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[47]
}

func (x OpenconfigIsisLevelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisLevelType.Descriptor instead.
func (OpenconfigIsisLevelType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{47}
}

// OpenconfigIsisLsdbTypesISISSUBTLVTYPE represents an enumerated type generated for the YANG identity ISIS_SUBTLV_TYPE.
type OpenconfigIsisLsdbTypesISISSUBTLVTYPE int32

const (
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_UNSET                                    OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 0
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_SUBTLVS_TYPE             OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 8389823
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADMIN_GROUP              OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 30752835
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV6_NEIGHBOR_ADDRESS    OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 62595447
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_TE_DEFAULT_METRIC        OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 84488708
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_PREFIX_FLAGS             OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 120776505
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_RESIDUAL_BANDWIDTH       OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 125276661
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_IPV4_ROUTER_ID           OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 146710436
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV4_INTERFACE_ADDRESS   OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 151077274
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_DELAY_VARIATION     OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 152169028
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_AVAILABLE_BANDWIDTH      OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 162926581
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UTILIZED_BANDWIDTH       OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 199835886
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_LOSS                OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 204065508
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MIN_MAX_LINK_DELAY       OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 225688360
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SR_ALGORITHM           OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 238900237
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_ATTRIBUTES          OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 250713986
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_PROTECTION_TYPE     OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 262837899
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_IPV6_ROUTER_ID           OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 266502986
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SR_CAPABILITY          OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 297502288
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV4_NEIGHBOR_ADDRESS    OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 302536829
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MAX_LINK_BANDWIDTH       OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 305192025
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_PREFIX_SID               OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 311178044
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_ID                  OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 318085186
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MAX_RESERVABLE_BANDWIDTH OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 336093730
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UNRESERVED_BANDWIDTH     OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 347423013
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_SUBTLVS_TYPE             OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 360228928
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_BANDWIDTH_CONSTRAINTS    OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 372383028
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_DELAY               OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 407431566
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_TAG64                    OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 428754929
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV6_INTERFACE_ADDRESS   OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 447335508
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UNCONSTRAINED_LSP        OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 462470049
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADJ_LAN_SID              OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 477375444
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADJ_SID                  OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 488894800
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SUBTLVS_TYPE           OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 494655834
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_TAG                      OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 502161515
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_EXTENDED_ADMIN_GROUP     OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 533689701
)

// Enum value maps for OpenconfigIsisLsdbTypesISISSUBTLVTYPE.
var (
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_UNSET",
		8389823:   "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_SUBTLVS_TYPE",
		30752835:  "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADMIN_GROUP",
		62595447:  "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV6_NEIGHBOR_ADDRESS",
		84488708:  "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_TE_DEFAULT_METRIC",
		120776505: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_PREFIX_FLAGS",
		125276661: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_RESIDUAL_BANDWIDTH",
		146710436: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_IPV4_ROUTER_ID",
		151077274: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV4_INTERFACE_ADDRESS",
		152169028: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_DELAY_VARIATION",
		162926581: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_AVAILABLE_BANDWIDTH",
		199835886: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UTILIZED_BANDWIDTH",
		204065508: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_LOSS",
		225688360: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MIN_MAX_LINK_DELAY",
		238900237: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SR_ALGORITHM",
		250713986: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_ATTRIBUTES",
		262837899: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_PROTECTION_TYPE",
		266502986: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_IPV6_ROUTER_ID",
		297502288: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SR_CAPABILITY",
		302536829: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV4_NEIGHBOR_ADDRESS",
		305192025: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MAX_LINK_BANDWIDTH",
		311178044: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_PREFIX_SID",
		318085186: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_ID",
		336093730: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MAX_RESERVABLE_BANDWIDTH",
		347423013: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UNRESERVED_BANDWIDTH",
		360228928: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_SUBTLVS_TYPE",
		372383028: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_BANDWIDTH_CONSTRAINTS",
		407431566: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_DELAY",
		428754929: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_TAG64",
		447335508: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV6_INTERFACE_ADDRESS",
		462470049: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UNCONSTRAINED_LSP",
		477375444: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADJ_LAN_SID",
		488894800: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADJ_SID",
		494655834: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SUBTLVS_TYPE",
		502161515: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_TAG",
		533689701: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_EXTENDED_ADMIN_GROUP",
	}
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_value = map[string]int32{
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_UNSET":                                    0,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_SUBTLVS_TYPE":             8389823,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADMIN_GROUP":              30752835,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV6_NEIGHBOR_ADDRESS":    62595447,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_TE_DEFAULT_METRIC":        84488708,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_PREFIX_FLAGS":             120776505,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_RESIDUAL_BANDWIDTH":       125276661,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_IPV4_ROUTER_ID":           146710436,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV4_INTERFACE_ADDRESS":   151077274,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_DELAY_VARIATION":     152169028,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_AVAILABLE_BANDWIDTH":      162926581,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UTILIZED_BANDWIDTH":       199835886,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_LOSS":                204065508,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MIN_MAX_LINK_DELAY":       225688360,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SR_ALGORITHM":           238900237,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_ATTRIBUTES":          250713986,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_PROTECTION_TYPE":     262837899,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_IPV6_ROUTER_ID":           266502986,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SR_CAPABILITY":          297502288,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV4_NEIGHBOR_ADDRESS":    302536829,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MAX_LINK_BANDWIDTH":       305192025,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_PREFIX_SID":               311178044,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_ID":                  318085186,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MAX_RESERVABLE_BANDWIDTH": 336093730,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UNRESERVED_BANDWIDTH":     347423013,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_SUBTLVS_TYPE":             360228928,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_BANDWIDTH_CONSTRAINTS":    372383028,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_DELAY":               407431566,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_TAG64":                    428754929,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV6_INTERFACE_ADDRESS":   447335508,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UNCONSTRAINED_LSP":        462470049,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADJ_LAN_SID":              477375444,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADJ_SID":                  488894800,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SUBTLVS_TYPE":           494655834,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_TAG":                      502161515,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_EXTENDED_ADMIN_GROUP":     533689701,
	}
)

func (x OpenconfigIsisLsdbTypesISISSUBTLVTYPE) Enum() *OpenconfigIsisLsdbTypesISISSUBTLVTYPE {
	p := new(OpenconfigIsisLsdbTypesISISSUBTLVTYPE)
	*p = x
	return p
}

func (x OpenconfigIsisLsdbTypesISISSUBTLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisLsdbTypesISISSUBTLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[48].Descriptor()
}

func (OpenconfigIsisLsdbTypesISISSUBTLVTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[48]
}

func (x OpenconfigIsisLsdbTypesISISSUBTLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisLsdbTypesISISSUBTLVTYPE.Descriptor instead.
func (OpenconfigIsisLsdbTypesISISSUBTLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{48}
}

// OpenconfigIsisLsdbTypesISISTLVTYPE represents an enumerated type generated for the YANG identity ISIS_TLV_TYPE.
type OpenconfigIsisLsdbTypesISISTLVTYPE int32

const (
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_UNSET                      OpenconfigIsisLsdbTypesISISTLVTYPE = 0
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_ISN                     OpenconfigIsisLsdbTypesISISTLVTYPE = 11791417
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_SRLG                  OpenconfigIsisLsdbTypesISISTLVTYPE = 34773981
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_PURGE_OI                   OpenconfigIsisLsdbTypesISISTLVTYPE = 83596849
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_NLPID                      OpenconfigIsisLsdbTypesISISTLVTYPE = 97911270
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_REACHABILITY          OpenconfigIsisLsdbTypesISISTLVTYPE = 123793844
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IPV6_REACHABILITY       OpenconfigIsisLsdbTypesISISTLVTYPE = 160105040
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_EXTERNAL_REACHABILITY OpenconfigIsisLsdbTypesISISTLVTYPE = 172032920
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_LSP_BUFFER_SIZE            OpenconfigIsisLsdbTypesISISTLVTYPE = 174409741
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_INSTANCE_ID                OpenconfigIsisLsdbTypesISISTLVTYPE = 190868124
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_MULTI_TOPOLOGY             OpenconfigIsisLsdbTypesISISTLVTYPE = 209052772
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IPV4_REACHABILITY       OpenconfigIsisLsdbTypesISISTLVTYPE = 213324354
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_INTERNAL_REACHABILITY OpenconfigIsisLsdbTypesISISTLVTYPE = 215509190
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_AUTHENTICATION             OpenconfigIsisLsdbTypesISISTLVTYPE = 226539161
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_INTERFACE_ADDRESSES   OpenconfigIsisLsdbTypesISISTLVTYPE = 264046255
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_TE_ROUTER_ID          OpenconfigIsisLsdbTypesISISTLVTYPE = 278019714
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IS_NEIGHBOR_ATTRIBUTE   OpenconfigIsisLsdbTypesISISTLVTYPE = 297996031
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_INTERFACE_ADDRESSES   OpenconfigIsisLsdbTypesISISTLVTYPE = 302296485
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_ROUTER_CAPABILITY          OpenconfigIsisLsdbTypesISISTLVTYPE = 346670691
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_DYNAMIC_NAME               OpenconfigIsisLsdbTypesISISTLVTYPE = 351978310
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_EXTENDED_IPV4_REACHABILITY OpenconfigIsisLsdbTypesISISTLVTYPE = 375140970
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_ISIS_ALIAS_ID              OpenconfigIsisLsdbTypesISISTLVTYPE = 380304980
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_AREA_ADDRESSES             OpenconfigIsisLsdbTypesISISTLVTYPE = 402418059
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_SRLG                  OpenconfigIsisLsdbTypesISISTLVTYPE = 411570407
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IIS_NEIGHBORS              OpenconfigIsisLsdbTypesISISTLVTYPE = 466521582
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_TE_ROUTER_ID          OpenconfigIsisLsdbTypesISISTLVTYPE = 490607584
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_EXTENDED_IS_REACHABILITY   OpenconfigIsisLsdbTypesISISTLVTYPE = 512182221
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IS_NEIGHBOR_ATTRIBUTE      OpenconfigIsisLsdbTypesISISTLVTYPE = 515453003
)

// Enum value maps for OpenconfigIsisLsdbTypesISISTLVTYPE.
var (
	OpenconfigIsisLsdbTypesISISTLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGISISLSDBTYPESISISTLVTYPE_UNSET",
		11791417:  "OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_ISN",
		34773981:  "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_SRLG",
		83596849:  "OPENCONFIGISISLSDBTYPESISISTLVTYPE_PURGE_OI",
		97911270:  "OPENCONFIGISISLSDBTYPESISISTLVTYPE_NLPID",
		123793844: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_REACHABILITY",
		160105040: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IPV6_REACHABILITY",
		172032920: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_EXTERNAL_REACHABILITY",
		174409741: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_LSP_BUFFER_SIZE",
		190868124: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_INSTANCE_ID",
		209052772: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_MULTI_TOPOLOGY",
		213324354: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IPV4_REACHABILITY",
		215509190: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_INTERNAL_REACHABILITY",
		226539161: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_AUTHENTICATION",
		264046255: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_INTERFACE_ADDRESSES",
		278019714: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_TE_ROUTER_ID",
		297996031: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IS_NEIGHBOR_ATTRIBUTE",
		302296485: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_INTERFACE_ADDRESSES",
		346670691: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_ROUTER_CAPABILITY",
		351978310: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_DYNAMIC_NAME",
		375140970: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_EXTENDED_IPV4_REACHABILITY",
		380304980: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_ISIS_ALIAS_ID",
		402418059: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_AREA_ADDRESSES",
		411570407: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_SRLG",
		466521582: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IIS_NEIGHBORS",
		490607584: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_TE_ROUTER_ID",
		512182221: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_EXTENDED_IS_REACHABILITY",
		515453003: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IS_NEIGHBOR_ATTRIBUTE",
	}
	OpenconfigIsisLsdbTypesISISTLVTYPE_value = map[string]int32{
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_UNSET":                      0,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_ISN":                     11791417,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_SRLG":                  34773981,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_PURGE_OI":                   83596849,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_NLPID":                      97911270,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_REACHABILITY":          123793844,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IPV6_REACHABILITY":       160105040,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_EXTERNAL_REACHABILITY": 172032920,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_LSP_BUFFER_SIZE":            174409741,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_INSTANCE_ID":                190868124,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_MULTI_TOPOLOGY":             209052772,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IPV4_REACHABILITY":       213324354,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_INTERNAL_REACHABILITY": 215509190,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_AUTHENTICATION":             226539161,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_INTERFACE_ADDRESSES":   264046255,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_TE_ROUTER_ID":          278019714,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IS_NEIGHBOR_ATTRIBUTE":   297996031,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_INTERFACE_ADDRESSES":   302296485,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_ROUTER_CAPABILITY":          346670691,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_DYNAMIC_NAME":               351978310,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_EXTENDED_IPV4_REACHABILITY": 375140970,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_ISIS_ALIAS_ID":              380304980,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_AREA_ADDRESSES":             402418059,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_SRLG":                  411570407,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IIS_NEIGHBORS":              466521582,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_TE_ROUTER_ID":          490607584,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_EXTENDED_IS_REACHABILITY":   512182221,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IS_NEIGHBOR_ATTRIBUTE":      515453003,
	}
)

func (x OpenconfigIsisLsdbTypesISISTLVTYPE) Enum() *OpenconfigIsisLsdbTypesISISTLVTYPE {
	p := new(OpenconfigIsisLsdbTypesISISTLVTYPE)
	*p = x
	return p
}

func (x OpenconfigIsisLsdbTypesISISTLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisLsdbTypesISISTLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[49].Descriptor()
}

func (OpenconfigIsisLsdbTypesISISTLVTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[49]
}

func (x OpenconfigIsisLsdbTypesISISTLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisLsdbTypesISISTLVTYPE.Descriptor instead.
func (OpenconfigIsisLsdbTypesISISTLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{49}
}

// OpenconfigIsisMetricStyle represents an enumerated type generated for the YANG enumerated type metric-style.
type OpenconfigIsisMetricStyle int32

const (
	OpenconfigIsisMetricStyle_OPENCONFIGISISMETRICSTYLE_UNSET         OpenconfigIsisMetricStyle = 0
	OpenconfigIsisMetricStyle_OPENCONFIGISISMETRICSTYLE_NARROW_METRIC OpenconfigIsisMetricStyle = 1
	OpenconfigIsisMetricStyle_OPENCONFIGISISMETRICSTYLE_WIDE_METRIC   OpenconfigIsisMetricStyle = 2
)

// Enum value maps for OpenconfigIsisMetricStyle.
var (
	OpenconfigIsisMetricStyle_name = map[int32]string{
		0: "OPENCONFIGISISMETRICSTYLE_UNSET",
		1: "OPENCONFIGISISMETRICSTYLE_NARROW_METRIC",
		2: "OPENCONFIGISISMETRICSTYLE_WIDE_METRIC",
	}
	OpenconfigIsisMetricStyle_value = map[string]int32{
		"OPENCONFIGISISMETRICSTYLE_UNSET":         0,
		"OPENCONFIGISISMETRICSTYLE_NARROW_METRIC": 1,
		"OPENCONFIGISISMETRICSTYLE_WIDE_METRIC":   2,
	}
)

func (x OpenconfigIsisMetricStyle) Enum() *OpenconfigIsisMetricStyle {
	p := new(OpenconfigIsisMetricStyle)
	*p = x
	return p
}

func (x OpenconfigIsisMetricStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisMetricStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[50].Descriptor()
}

func (OpenconfigIsisMetricStyle) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[50]
}

func (x OpenconfigIsisMetricStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisMetricStyle.Descriptor instead.
func (OpenconfigIsisMetricStyle) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{50}
}

// OpenconfigIsisTypesAFISAFITYPE represents an enumerated type generated for the YANG identity AFI_SAFI_TYPE.
type OpenconfigIsisTypesAFISAFITYPE int32

const (
	OpenconfigIsisTypesAFISAFITYPE_OPENCONFIGISISTYPESAFISAFITYPE_UNSET          OpenconfigIsisTypesAFISAFITYPE = 0
	OpenconfigIsisTypesAFISAFITYPE_OPENCONFIGISISTYPESAFISAFITYPE_IPV6_MULTICAST OpenconfigIsisTypesAFISAFITYPE = 40100870
	OpenconfigIsisTypesAFISAFITYPE_OPENCONFIGISISTYPESAFISAFITYPE_IPV4_MULTICAST OpenconfigIsisTypesAFISAFITYPE = 161450660
	OpenconfigIsisTypesAFISAFITYPE_OPENCONFIGISISTYPESAFISAFITYPE_IPV4_UNICAST   OpenconfigIsisTypesAFISAFITYPE = 196909421
	OpenconfigIsisTypesAFISAFITYPE_OPENCONFIGISISTYPESAFISAFITYPE_IPV6_UNICAST   OpenconfigIsisTypesAFISAFITYPE = 270342995
)

// Enum value maps for OpenconfigIsisTypesAFISAFITYPE.
var (
	OpenconfigIsisTypesAFISAFITYPE_name = map[int32]string{
		0:         "OPENCONFIGISISTYPESAFISAFITYPE_UNSET",
		40100870:  "OPENCONFIGISISTYPESAFISAFITYPE_IPV6_MULTICAST",
		161450660: "OPENCONFIGISISTYPESAFISAFITYPE_IPV4_MULTICAST",
		196909421: "OPENCONFIGISISTYPESAFISAFITYPE_IPV4_UNICAST",
		270342995: "OPENCONFIGISISTYPESAFISAFITYPE_IPV6_UNICAST",
	}
	OpenconfigIsisTypesAFISAFITYPE_value = map[string]int32{
		"OPENCONFIGISISTYPESAFISAFITYPE_UNSET":          0,
		"OPENCONFIGISISTYPESAFISAFITYPE_IPV6_MULTICAST": 40100870,
		"OPENCONFIGISISTYPESAFISAFITYPE_IPV4_MULTICAST": 161450660,
		"OPENCONFIGISISTYPESAFISAFITYPE_IPV4_UNICAST":   196909421,
		"OPENCONFIGISISTYPESAFISAFITYPE_IPV6_UNICAST":   270342995,
	}
)

func (x OpenconfigIsisTypesAFISAFITYPE) Enum() *OpenconfigIsisTypesAFISAFITYPE {
	p := new(OpenconfigIsisTypesAFISAFITYPE)
	*p = x
	return p
}

func (x OpenconfigIsisTypesAFISAFITYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesAFISAFITYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[51].Descriptor()
}

func (OpenconfigIsisTypesAFISAFITYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[51]
}

func (x OpenconfigIsisTypesAFISAFITYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesAFISAFITYPE.Descriptor instead.
func (OpenconfigIsisTypesAFISAFITYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{51}
}

// OpenconfigIsisTypesAFITYPE represents an enumerated type generated for the YANG identity AFI_TYPE.
type OpenconfigIsisTypesAFITYPE int32

const (
	OpenconfigIsisTypesAFITYPE_OPENCONFIGISISTYPESAFITYPE_UNSET OpenconfigIsisTypesAFITYPE = 0
	OpenconfigIsisTypesAFITYPE_OPENCONFIGISISTYPESAFITYPE_IPV4  OpenconfigIsisTypesAFITYPE = 255993089
	OpenconfigIsisTypesAFITYPE_OPENCONFIGISISTYPESAFITYPE_IPV6  OpenconfigIsisTypesAFITYPE = 255993091
)

// Enum value maps for OpenconfigIsisTypesAFITYPE.
var (
	OpenconfigIsisTypesAFITYPE_name = map[int32]string{
		0:         "OPENCONFIGISISTYPESAFITYPE_UNSET",
		255993089: "OPENCONFIGISISTYPESAFITYPE_IPV4",
		255993091: "OPENCONFIGISISTYPESAFITYPE_IPV6",
	}
	OpenconfigIsisTypesAFITYPE_value = map[string]int32{
		"OPENCONFIGISISTYPESAFITYPE_UNSET": 0,
		"OPENCONFIGISISTYPESAFITYPE_IPV4":  255993089,
		"OPENCONFIGISISTYPESAFITYPE_IPV6":  255993091,
	}
)

func (x OpenconfigIsisTypesAFITYPE) Enum() *OpenconfigIsisTypesAFITYPE {
	p := new(OpenconfigIsisTypesAFITYPE)
	*p = x
	return p
}

func (x OpenconfigIsisTypesAFITYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesAFITYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[52].Descriptor()
}

func (OpenconfigIsisTypesAFITYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[52]
}

func (x OpenconfigIsisTypesAFITYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesAFITYPE.Descriptor instead.
func (OpenconfigIsisTypesAFITYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{52}
}

// OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE represents an enumerated type generated for the YANG identity OVERLOAD_RESET_TRIGGER_TYPE.
type OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE int32

const (
	OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE_OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_UNSET           OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE = 0
	OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE_OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_WAIT_FOR_SYSTEM OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE = 29067962
	OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE_OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_WAIT_FOR_BGP    OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE = 495828064
)

// Enum value maps for OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE.
var (
	OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE_name = map[int32]string{
		0:         "OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_UNSET",
		29067962:  "OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_WAIT_FOR_SYSTEM",
		495828064: "OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_WAIT_FOR_BGP",
	}
	OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE_value = map[string]int32{
		"OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_UNSET":           0,
		"OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_WAIT_FOR_SYSTEM": 29067962,
		"OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_WAIT_FOR_BGP":    495828064,
	}
)

func (x OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE) Enum() *OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE {
	p := new(OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE)
	*p = x
	return p
}

func (x OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[53].Descriptor()
}

func (OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[53]
}

func (x OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE.Descriptor instead.
func (OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{53}
}

// OpenconfigIsisTypesSAFITYPE represents an enumerated type generated for the YANG identity SAFI_TYPE.
type OpenconfigIsisTypesSAFITYPE int32

const (
	OpenconfigIsisTypesSAFITYPE_OPENCONFIGISISTYPESSAFITYPE_UNSET     OpenconfigIsisTypesSAFITYPE = 0
	OpenconfigIsisTypesSAFITYPE_OPENCONFIGISISTYPESSAFITYPE_UNICAST   OpenconfigIsisTypesSAFITYPE = 82321848
	OpenconfigIsisTypesSAFITYPE_OPENCONFIGISISTYPESSAFITYPE_MULTICAST OpenconfigIsisTypesSAFITYPE = 276368649
)

// Enum value maps for OpenconfigIsisTypesSAFITYPE.
var (
	OpenconfigIsisTypesSAFITYPE_name = map[int32]string{
		0:         "OPENCONFIGISISTYPESSAFITYPE_UNSET",
		82321848:  "OPENCONFIGISISTYPESSAFITYPE_UNICAST",
		276368649: "OPENCONFIGISISTYPESSAFITYPE_MULTICAST",
	}
	OpenconfigIsisTypesSAFITYPE_value = map[string]int32{
		"OPENCONFIGISISTYPESSAFITYPE_UNSET":     0,
		"OPENCONFIGISISTYPESSAFITYPE_UNICAST":   82321848,
		"OPENCONFIGISISTYPESSAFITYPE_MULTICAST": 276368649,
	}
)

func (x OpenconfigIsisTypesSAFITYPE) Enum() *OpenconfigIsisTypesSAFITYPE {
	p := new(OpenconfigIsisTypesSAFITYPE)
	*p = x
	return p
}

func (x OpenconfigIsisTypesSAFITYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesSAFITYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[54].Descriptor()
}

func (OpenconfigIsisTypesSAFITYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[54]
}

func (x OpenconfigIsisTypesSAFITYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesSAFITYPE.Descriptor instead.
func (OpenconfigIsisTypesSAFITYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{54}
}

// OpenconfigLacpLacpActivityType represents an enumerated type generated for the YANG enumerated type lacp-activity-type.
type OpenconfigLacpLacpActivityType int32

const (
	OpenconfigLacpLacpActivityType_OPENCONFIGLACPLACPACTIVITYTYPE_ACTIVE  OpenconfigLacpLacpActivityType = 0
	OpenconfigLacpLacpActivityType_OPENCONFIGLACPLACPACTIVITYTYPE_PASSIVE OpenconfigLacpLacpActivityType = 2
)

// Enum value maps for OpenconfigLacpLacpActivityType.
var (
	OpenconfigLacpLacpActivityType_name = map[int32]string{
		0: "OPENCONFIGLACPLACPACTIVITYTYPE_ACTIVE",
		2: "OPENCONFIGLACPLACPACTIVITYTYPE_PASSIVE",
	}
	OpenconfigLacpLacpActivityType_value = map[string]int32{
		"OPENCONFIGLACPLACPACTIVITYTYPE_ACTIVE":  0,
		"OPENCONFIGLACPLACPACTIVITYTYPE_PASSIVE": 2,
	}
)

func (x OpenconfigLacpLacpActivityType) Enum() *OpenconfigLacpLacpActivityType {
	p := new(OpenconfigLacpLacpActivityType)
	*p = x
	return p
}

func (x OpenconfigLacpLacpActivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigLacpLacpActivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[55].Descriptor()
}

func (OpenconfigLacpLacpActivityType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[55]
}

func (x OpenconfigLacpLacpActivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigLacpLacpActivityType.Descriptor instead.
func (OpenconfigLacpLacpActivityType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{55}
}

// OpenconfigLacpLacpPeriodType represents an enumerated type generated for the YANG enumerated type lacp-period-type.
type OpenconfigLacpLacpPeriodType int32

const (
	OpenconfigLacpLacpPeriodType_OPENCONFIGLACPLACPPERIODTYPE_SLOW OpenconfigLacpLacpPeriodType = 0
	OpenconfigLacpLacpPeriodType_OPENCONFIGLACPLACPPERIODTYPE_FAST OpenconfigLacpLacpPeriodType = 1
)

// Enum value maps for OpenconfigLacpLacpPeriodType.
var (
	OpenconfigLacpLacpPeriodType_name = map[int32]string{
		0: "OPENCONFIGLACPLACPPERIODTYPE_SLOW",
		1: "OPENCONFIGLACPLACPPERIODTYPE_FAST",
	}
	OpenconfigLacpLacpPeriodType_value = map[string]int32{
		"OPENCONFIGLACPLACPPERIODTYPE_SLOW": 0,
		"OPENCONFIGLACPLACPPERIODTYPE_FAST": 1,
	}
)

func (x OpenconfigLacpLacpPeriodType) Enum() *OpenconfigLacpLacpPeriodType {
	p := new(OpenconfigLacpLacpPeriodType)
	*p = x
	return p
}

func (x OpenconfigLacpLacpPeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigLacpLacpPeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[56].Descriptor()
}

func (OpenconfigLacpLacpPeriodType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[56]
}

func (x OpenconfigLacpLacpPeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigLacpLacpPeriodType.Descriptor instead.
func (OpenconfigLacpLacpPeriodType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{56}
}

// OpenconfigLacpLacpSynchronizationType represents an enumerated type generated for the YANG enumerated type lacp-synchronization-type.
type OpenconfigLacpLacpSynchronizationType int32

const (
	OpenconfigLacpLacpSynchronizationType_OPENCONFIGLACPLACPSYNCHRONIZATIONTYPE_UNSET    OpenconfigLacpLacpSynchronizationType = 0
	OpenconfigLacpLacpSynchronizationType_OPENCONFIGLACPLACPSYNCHRONIZATIONTYPE_IN_SYNC  OpenconfigLacpLacpSynchronizationType = 1
	OpenconfigLacpLacpSynchronizationType_OPENCONFIGLACPLACPSYNCHRONIZATIONTYPE_OUT_SYNC OpenconfigLacpLacpSynchronizationType = 2
)

// Enum value maps for OpenconfigLacpLacpSynchronizationType.
var (
	OpenconfigLacpLacpSynchronizationType_name = map[int32]string{
		0: "OPENCONFIGLACPLACPSYNCHRONIZATIONTYPE_UNSET",
		1: "OPENCONFIGLACPLACPSYNCHRONIZATIONTYPE_IN_SYNC",
		2: "OPENCONFIGLACPLACPSYNCHRONIZATIONTYPE_OUT_SYNC",
	}
	OpenconfigLacpLacpSynchronizationType_value = map[string]int32{
		"OPENCONFIGLACPLACPSYNCHRONIZATIONTYPE_UNSET":    0,
		"OPENCONFIGLACPLACPSYNCHRONIZATIONTYPE_IN_SYNC":  1,
		"OPENCONFIGLACPLACPSYNCHRONIZATIONTYPE_OUT_SYNC": 2,
	}
)

func (x OpenconfigLacpLacpSynchronizationType) Enum() *OpenconfigLacpLacpSynchronizationType {
	p := new(OpenconfigLacpLacpSynchronizationType)
	*p = x
	return p
}

func (x OpenconfigLacpLacpSynchronizationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigLacpLacpSynchronizationType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[57].Descriptor()
}

func (OpenconfigLacpLacpSynchronizationType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[57]
}

func (x OpenconfigLacpLacpSynchronizationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigLacpLacpSynchronizationType.Descriptor instead.
func (OpenconfigLacpLacpSynchronizationType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{57}
}

// OpenconfigLacpLacpTimeoutType represents an enumerated type generated for the YANG enumerated type lacp-timeout-type.
type OpenconfigLacpLacpTimeoutType int32

const (
	OpenconfigLacpLacpTimeoutType_OPENCONFIGLACPLACPTIMEOUTTYPE_UNSET OpenconfigLacpLacpTimeoutType = 0
	OpenconfigLacpLacpTimeoutType_OPENCONFIGLACPLACPTIMEOUTTYPE_LONG  OpenconfigLacpLacpTimeoutType = 1
	OpenconfigLacpLacpTimeoutType_OPENCONFIGLACPLACPTIMEOUTTYPE_SHORT OpenconfigLacpLacpTimeoutType = 2
)

// Enum value maps for OpenconfigLacpLacpTimeoutType.
var (
	OpenconfigLacpLacpTimeoutType_name = map[int32]string{
		0: "OPENCONFIGLACPLACPTIMEOUTTYPE_UNSET",
		1: "OPENCONFIGLACPLACPTIMEOUTTYPE_LONG",
		2: "OPENCONFIGLACPLACPTIMEOUTTYPE_SHORT",
	}
	OpenconfigLacpLacpTimeoutType_value = map[string]int32{
		"OPENCONFIGLACPLACPTIMEOUTTYPE_UNSET": 0,
		"OPENCONFIGLACPLACPTIMEOUTTYPE_LONG":  1,
		"OPENCONFIGLACPLACPTIMEOUTTYPE_SHORT": 2,
	}
)

func (x OpenconfigLacpLacpTimeoutType) Enum() *OpenconfigLacpLacpTimeoutType {
	p := new(OpenconfigLacpLacpTimeoutType)
	*p = x
	return p
}

func (x OpenconfigLacpLacpTimeoutType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigLacpLacpTimeoutType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[58].Descriptor()
}

func (OpenconfigLacpLacpTimeoutType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[58]
}

func (x OpenconfigLacpLacpTimeoutType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigLacpLacpTimeoutType.Descriptor instead.
func (OpenconfigLacpLacpTimeoutType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{58}
}

// OpenconfigLldpChassisIdType represents an enumerated type generated for the YANG enumerated type chassis-id-type.
type OpenconfigLldpChassisIdType int32

const (
	OpenconfigLldpChassisIdType_OPENCONFIGLLDPCHASSISIDTYPE_UNSET             OpenconfigLldpChassisIdType = 0
	OpenconfigLldpChassisIdType_OPENCONFIGLLDPCHASSISIDTYPE_CHASSIS_COMPONENT OpenconfigLldpChassisIdType = 1
	OpenconfigLldpChassisIdType_OPENCONFIGLLDPCHASSISIDTYPE_INTERFACE_ALIAS   OpenconfigLldpChassisIdType = 2
	OpenconfigLldpChassisIdType_OPENCONFIGLLDPCHASSISIDTYPE_PORT_COMPONENT    OpenconfigLldpChassisIdType = 3
	OpenconfigLldpChassisIdType_OPENCONFIGLLDPCHASSISIDTYPE_MAC_ADDRESS       OpenconfigLldpChassisIdType = 4
	OpenconfigLldpChassisIdType_OPENCONFIGLLDPCHASSISIDTYPE_NETWORK_ADDRESS   OpenconfigLldpChassisIdType = 5
	OpenconfigLldpChassisIdType_OPENCONFIGLLDPCHASSISIDTYPE_INTERFACE_NAME    OpenconfigLldpChassisIdType = 6
	OpenconfigLldpChassisIdType_OPENCONFIGLLDPCHASSISIDTYPE_LOCAL             OpenconfigLldpChassisIdType = 7
)

// Enum value maps for OpenconfigLldpChassisIdType.
var (
	OpenconfigLldpChassisIdType_name = map[int32]string{
		0: "OPENCONFIGLLDPCHASSISIDTYPE_UNSET",
		1: "OPENCONFIGLLDPCHASSISIDTYPE_CHASSIS_COMPONENT",
		2: "OPENCONFIGLLDPCHASSISIDTYPE_INTERFACE_ALIAS",
		3: "OPENCONFIGLLDPCHASSISIDTYPE_PORT_COMPONENT",
		4: "OPENCONFIGLLDPCHASSISIDTYPE_MAC_ADDRESS",
		5: "OPENCONFIGLLDPCHASSISIDTYPE_NETWORK_ADDRESS",
		6: "OPENCONFIGLLDPCHASSISIDTYPE_INTERFACE_NAME",
		7: "OPENCONFIGLLDPCHASSISIDTYPE_LOCAL",
	}
	OpenconfigLldpChassisIdType_value = map[string]int32{
		"OPENCONFIGLLDPCHASSISIDTYPE_UNSET":             0,
		"OPENCONFIGLLDPCHASSISIDTYPE_CHASSIS_COMPONENT": 1,
		"OPENCONFIGLLDPCHASSISIDTYPE_INTERFACE_ALIAS":   2,
		"OPENCONFIGLLDPCHASSISIDTYPE_PORT_COMPONENT":    3,
		"OPENCONFIGLLDPCHASSISIDTYPE_MAC_ADDRESS":       4,
		"OPENCONFIGLLDPCHASSISIDTYPE_NETWORK_ADDRESS":   5,
		"OPENCONFIGLLDPCHASSISIDTYPE_INTERFACE_NAME":    6,
		"OPENCONFIGLLDPCHASSISIDTYPE_LOCAL":             7,
	}
)

func (x OpenconfigLldpChassisIdType) Enum() *OpenconfigLldpChassisIdType {
	p := new(OpenconfigLldpChassisIdType)
	*p = x
	return p
}

func (x OpenconfigLldpChassisIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigLldpChassisIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[59].Descriptor()
}

func (OpenconfigLldpChassisIdType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[59]
}

func (x OpenconfigLldpChassisIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigLldpChassisIdType.Descriptor instead.
func (OpenconfigLldpChassisIdType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{59}
}

// OpenconfigLldpPortIdType represents an enumerated type generated for the YANG enumerated type port-id-type.
type OpenconfigLldpPortIdType int32

const (
	OpenconfigLldpPortIdType_OPENCONFIGLLDPPORTIDTYPE_UNSET            OpenconfigLldpPortIdType = 0
	OpenconfigLldpPortIdType_OPENCONFIGLLDPPORTIDTYPE_INTERFACE_ALIAS  OpenconfigLldpPortIdType = 1
	OpenconfigLldpPortIdType_OPENCONFIGLLDPPORTIDTYPE_PORT_COMPONENT   OpenconfigLldpPortIdType = 2
	OpenconfigLldpPortIdType_OPENCONFIGLLDPPORTIDTYPE_MAC_ADDRESS      OpenconfigLldpPortIdType = 3
	OpenconfigLldpPortIdType_OPENCONFIGLLDPPORTIDTYPE_NETWORK_ADDRESS  OpenconfigLldpPortIdType = 4
	OpenconfigLldpPortIdType_OPENCONFIGLLDPPORTIDTYPE_INTERFACE_NAME   OpenconfigLldpPortIdType = 5
	OpenconfigLldpPortIdType_OPENCONFIGLLDPPORTIDTYPE_AGENT_CIRCUIT_ID OpenconfigLldpPortIdType = 6
	OpenconfigLldpPortIdType_OPENCONFIGLLDPPORTIDTYPE_LOCAL            OpenconfigLldpPortIdType = 7
)

// Enum value maps for OpenconfigLldpPortIdType.
var (
	OpenconfigLldpPortIdType_name = map[int32]string{
		0: "OPENCONFIGLLDPPORTIDTYPE_UNSET",
		1: "OPENCONFIGLLDPPORTIDTYPE_INTERFACE_ALIAS",
		2: "OPENCONFIGLLDPPORTIDTYPE_PORT_COMPONENT",
		3: "OPENCONFIGLLDPPORTIDTYPE_MAC_ADDRESS",
		4: "OPENCONFIGLLDPPORTIDTYPE_NETWORK_ADDRESS",
		5: "OPENCONFIGLLDPPORTIDTYPE_INTERFACE_NAME",
		6: "OPENCONFIGLLDPPORTIDTYPE_AGENT_CIRCUIT_ID",
		7: "OPENCONFIGLLDPPORTIDTYPE_LOCAL",
	}
	OpenconfigLldpPortIdType_value = map[string]int32{
		"OPENCONFIGLLDPPORTIDTYPE_UNSET":            0,
		"OPENCONFIGLLDPPORTIDTYPE_INTERFACE_ALIAS":  1,
		"OPENCONFIGLLDPPORTIDTYPE_PORT_COMPONENT":   2,
		"OPENCONFIGLLDPPORTIDTYPE_MAC_ADDRESS":      3,
		"OPENCONFIGLLDPPORTIDTYPE_NETWORK_ADDRESS":  4,
		"OPENCONFIGLLDPPORTIDTYPE_INTERFACE_NAME":   5,
		"OPENCONFIGLLDPPORTIDTYPE_AGENT_CIRCUIT_ID": 6,
		"OPENCONFIGLLDPPORTIDTYPE_LOCAL":            7,
	}
)

func (x OpenconfigLldpPortIdType) Enum() *OpenconfigLldpPortIdType {
	p := new(OpenconfigLldpPortIdType)
	*p = x
	return p
}

func (x OpenconfigLldpPortIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigLldpPortIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[60].Descriptor()
}

func (OpenconfigLldpPortIdType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[60]
}

func (x OpenconfigLldpPortIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigLldpPortIdType.Descriptor instead.
func (OpenconfigLldpPortIdType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{60}
}

// OpenconfigLldpTypesLLDPSYSTEMCAPABILITY represents an enumerated type generated for the YANG identity LLDP_SYSTEM_CAPABILITY.
type OpenconfigLldpTypesLLDPSYSTEMCAPABILITY int32

const (
	OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_UNSET               OpenconfigLldpTypesLLDPSYSTEMCAPABILITY = 0
	OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_ROUTER              OpenconfigLldpTypesLLDPSYSTEMCAPABILITY = 11115187
	OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_S_VLAN              OpenconfigLldpTypesLLDPSYSTEMCAPABILITY = 96684641
	OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_MAC_BRIDGE          OpenconfigLldpTypesLLDPSYSTEMCAPABILITY = 98146663
	OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_STATION_ONLY        OpenconfigLldpTypesLLDPSYSTEMCAPABILITY = 107168325
	OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_DOCSIS_CABLE_DEVICE OpenconfigLldpTypesLLDPSYSTEMCAPABILITY = 232330836
	OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_REPEATER            OpenconfigLldpTypesLLDPSYSTEMCAPABILITY = 287396560
	OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_WLAN_ACCESS_POINT   OpenconfigLldpTypesLLDPSYSTEMCAPABILITY = 331434386
	OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_TELEPHONE           OpenconfigLldpTypesLLDPSYSTEMCAPABILITY = 347385640
	OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_C_VLAN              OpenconfigLldpTypesLLDPSYSTEMCAPABILITY = 371416145
	OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_OTHER               OpenconfigLldpTypesLLDPSYSTEMCAPABILITY = 480015482
	OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_TWO_PORT_MAC_RELAY  OpenconfigLldpTypesLLDPSYSTEMCAPABILITY = 502835810
)

// Enum value maps for OpenconfigLldpTypesLLDPSYSTEMCAPABILITY.
var (
	OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_name = map[int32]string{
		0:         "OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_UNSET",
		11115187:  "OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_ROUTER",
		96684641:  "OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_S_VLAN",
		98146663:  "OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_MAC_BRIDGE",
		107168325: "OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_STATION_ONLY",
		232330836: "OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_DOCSIS_CABLE_DEVICE",
		287396560: "OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_REPEATER",
		331434386: "OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_WLAN_ACCESS_POINT",
		347385640: "OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_TELEPHONE",
		371416145: "OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_C_VLAN",
		480015482: "OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_OTHER",
		502835810: "OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_TWO_PORT_MAC_RELAY",
	}
	OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_value = map[string]int32{
		"OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_UNSET":               0,
		"OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_ROUTER":              11115187,
		"OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_S_VLAN":              96684641,
		"OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_MAC_BRIDGE":          98146663,
		"OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_STATION_ONLY":        107168325,
		"OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_DOCSIS_CABLE_DEVICE": 232330836,
		"OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_REPEATER":            287396560,
		"OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_WLAN_ACCESS_POINT":   331434386,
		"OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_TELEPHONE":           347385640,
		"OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_C_VLAN":              371416145,
		"OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_OTHER":               480015482,
		"OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_TWO_PORT_MAC_RELAY":  502835810,
	}
)

func (x OpenconfigLldpTypesLLDPSYSTEMCAPABILITY) Enum() *OpenconfigLldpTypesLLDPSYSTEMCAPABILITY {
	p := new(OpenconfigLldpTypesLLDPSYSTEMCAPABILITY)
	*p = x
	return p
}

func (x OpenconfigLldpTypesLLDPSYSTEMCAPABILITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigLldpTypesLLDPSYSTEMCAPABILITY) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[61].Descriptor()
}

func (OpenconfigLldpTypesLLDPSYSTEMCAPABILITY) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[61]
}

func (x OpenconfigLldpTypesLLDPSYSTEMCAPABILITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigLldpTypesLLDPSYSTEMCAPABILITY.Descriptor instead.
func (OpenconfigLldpTypesLLDPSYSTEMCAPABILITY) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{61}
}

// OpenconfigLldpTypesLLDPTLV represents an enumerated type generated for the YANG identity LLDP_TLV.
type OpenconfigLldpTypesLLDPTLV int32

const (
	OpenconfigLldpTypesLLDPTLV_OPENCONFIGLLDPTYPESLLDPTLV_UNSET               OpenconfigLldpTypesLLDPTLV = 0
	OpenconfigLldpTypesLLDPTLV_OPENCONFIGLLDPTYPESLLDPTLV_PORT_DESCRIPTION    OpenconfigLldpTypesLLDPTLV = 15326996
	OpenconfigLldpTypesLLDPTLV_OPENCONFIGLLDPTYPESLLDPTLV_SYSTEM_CAPABILITIES OpenconfigLldpTypesLLDPTLV = 28592394
	OpenconfigLldpTypesLLDPTLV_OPENCONFIGLLDPTYPESLLDPTLV_MANAGEMENT_ADDRESS  OpenconfigLldpTypesLLDPTLV = 75782954
	OpenconfigLldpTypesLLDPTLV_OPENCONFIGLLDPTYPESLLDPTLV_PORT_ID             OpenconfigLldpTypesLLDPTLV = 190600013
	OpenconfigLldpTypesLLDPTLV_OPENCONFIGLLDPTYPESLLDPTLV_SYSTEM_DESCRIPTION  OpenconfigLldpTypesLLDPTLV = 275005382
	OpenconfigLldpTypesLLDPTLV_OPENCONFIGLLDPTYPESLLDPTLV_SYSTEM_NAME         OpenconfigLldpTypesLLDPTLV = 293558073
	OpenconfigLldpTypesLLDPTLV_OPENCONFIGLLDPTYPESLLDPTLV_CHASSIS_ID          OpenconfigLldpTypesLLDPTLV = 407794970
)

// Enum value maps for OpenconfigLldpTypesLLDPTLV.
var (
	OpenconfigLldpTypesLLDPTLV_name = map[int32]string{
		0:         "OPENCONFIGLLDPTYPESLLDPTLV_UNSET",
		15326996:  "OPENCONFIGLLDPTYPESLLDPTLV_PORT_DESCRIPTION",
		28592394:  "OPENCONFIGLLDPTYPESLLDPTLV_SYSTEM_CAPABILITIES",
		75782954:  "OPENCONFIGLLDPTYPESLLDPTLV_MANAGEMENT_ADDRESS",
		190600013: "OPENCONFIGLLDPTYPESLLDPTLV_PORT_ID",
		275005382: "OPENCONFIGLLDPTYPESLLDPTLV_SYSTEM_DESCRIPTION",
		293558073: "OPENCONFIGLLDPTYPESLLDPTLV_SYSTEM_NAME",
		407794970: "OPENCONFIGLLDPTYPESLLDPTLV_CHASSIS_ID",
	}
	OpenconfigLldpTypesLLDPTLV_value = map[string]int32{
		"OPENCONFIGLLDPTYPESLLDPTLV_UNSET":               0,
		"OPENCONFIGLLDPTYPESLLDPTLV_PORT_DESCRIPTION":    15326996,
		"OPENCONFIGLLDPTYPESLLDPTLV_SYSTEM_CAPABILITIES": 28592394,
		"OPENCONFIGLLDPTYPESLLDPTLV_MANAGEMENT_ADDRESS":  75782954,
		"OPENCONFIGLLDPTYPESLLDPTLV_PORT_ID":             190600013,
		"OPENCONFIGLLDPTYPESLLDPTLV_SYSTEM_DESCRIPTION":  275005382,
		"OPENCONFIGLLDPTYPESLLDPTLV_SYSTEM_NAME":         293558073,
		"OPENCONFIGLLDPTYPESLLDPTLV_CHASSIS_ID":          407794970,
	}
)

func (x OpenconfigLldpTypesLLDPTLV) Enum() *OpenconfigLldpTypesLLDPTLV {
	p := new(OpenconfigLldpTypesLLDPTLV)
	*p = x
	return p
}

func (x OpenconfigLldpTypesLLDPTLV) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigLldpTypesLLDPTLV) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[62].Descriptor()
}

func (OpenconfigLldpTypesLLDPTLV) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[62]
}

func (x OpenconfigLldpTypesLLDPTLV) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigLldpTypesLLDPTLV.Descriptor instead.
func (OpenconfigLldpTypesLLDPTLV) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{62}
}

// OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP represents an enumerated type generated for the YANG identity LOCAL_DEFINED_NEXT_HOP.
type OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP int32

const (
	OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP_OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_UNSET      OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP = 0
	OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP_OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_LOCAL_LINK OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP = 335034920
	OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP_OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_DROP       OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP = 485660995
)

// Enum value maps for OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP.
var (
	OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP_name = map[int32]string{
		0:         "OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_UNSET",
		335034920: "OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_LOCAL_LINK",
		485660995: "OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_DROP",
	}
	OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP_value = map[string]int32{
		"OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_UNSET":      0,
		"OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_LOCAL_LINK": 335034920,
		"OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_DROP":       485660995,
	}
)

func (x OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP) Enum() *OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP {
	p := new(OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP)
	*p = x
	return p
}

func (x OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[63].Descriptor()
}

func (OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[63]
}

func (x OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP.Descriptor instead.
func (OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{63}
}

// OpenconfigMacsecConfidentialityOffset represents an enumerated type generated for the YANG enumerated type confidentiality-offset.
type OpenconfigMacsecConfidentialityOffset int32

const (
	OpenconfigMacsecConfidentialityOffset_OPENCONFIGMACSECCONFIDENTIALITYOFFSET_0_BYTES  OpenconfigMacsecConfidentialityOffset = 0
	OpenconfigMacsecConfidentialityOffset_OPENCONFIGMACSECCONFIDENTIALITYOFFSET_30_BYTES OpenconfigMacsecConfidentialityOffset = 2
	OpenconfigMacsecConfidentialityOffset_OPENCONFIGMACSECCONFIDENTIALITYOFFSET_50_BYTES OpenconfigMacsecConfidentialityOffset = 3
)

// Enum value maps for OpenconfigMacsecConfidentialityOffset.
var (
	OpenconfigMacsecConfidentialityOffset_name = map[int32]string{
		0: "OPENCONFIGMACSECCONFIDENTIALITYOFFSET_0_BYTES",
		2: "OPENCONFIGMACSECCONFIDENTIALITYOFFSET_30_BYTES",
		3: "OPENCONFIGMACSECCONFIDENTIALITYOFFSET_50_BYTES",
	}
	OpenconfigMacsecConfidentialityOffset_value = map[string]int32{
		"OPENCONFIGMACSECCONFIDENTIALITYOFFSET_0_BYTES":  0,
		"OPENCONFIGMACSECCONFIDENTIALITYOFFSET_30_BYTES": 2,
		"OPENCONFIGMACSECCONFIDENTIALITYOFFSET_50_BYTES": 3,
	}
)

func (x OpenconfigMacsecConfidentialityOffset) Enum() *OpenconfigMacsecConfidentialityOffset {
	p := new(OpenconfigMacsecConfidentialityOffset)
	*p = x
	return p
}

func (x OpenconfigMacsecConfidentialityOffset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMacsecConfidentialityOffset) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[64].Descriptor()
}

func (OpenconfigMacsecConfidentialityOffset) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[64]
}

func (x OpenconfigMacsecConfidentialityOffset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMacsecConfidentialityOffset.Descriptor instead.
func (OpenconfigMacsecConfidentialityOffset) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{64}
}

// OpenconfigMacsecMacsecCipherSuite represents an enumerated type generated for the YANG enumerated type macsec-cipher-suite.
type OpenconfigMacsecMacsecCipherSuite int32

const (
	OpenconfigMacsecMacsecCipherSuite_OPENCONFIGMACSECMACSECCIPHERSUITE_UNSET           OpenconfigMacsecMacsecCipherSuite = 0
	OpenconfigMacsecMacsecCipherSuite_OPENCONFIGMACSECMACSECCIPHERSUITE_GCM_AES_128     OpenconfigMacsecMacsecCipherSuite = 1
	OpenconfigMacsecMacsecCipherSuite_OPENCONFIGMACSECMACSECCIPHERSUITE_GCM_AES_256     OpenconfigMacsecMacsecCipherSuite = 2
	OpenconfigMacsecMacsecCipherSuite_OPENCONFIGMACSECMACSECCIPHERSUITE_GCM_AES_XPN_128 OpenconfigMacsecMacsecCipherSuite = 3
	OpenconfigMacsecMacsecCipherSuite_OPENCONFIGMACSECMACSECCIPHERSUITE_GCM_AES_XPN_256 OpenconfigMacsecMacsecCipherSuite = 4
)

// Enum value maps for OpenconfigMacsecMacsecCipherSuite.
var (
	OpenconfigMacsecMacsecCipherSuite_name = map[int32]string{
		0: "OPENCONFIGMACSECMACSECCIPHERSUITE_UNSET",
		1: "OPENCONFIGMACSECMACSECCIPHERSUITE_GCM_AES_128",
		2: "OPENCONFIGMACSECMACSECCIPHERSUITE_GCM_AES_256",
		3: "OPENCONFIGMACSECMACSECCIPHERSUITE_GCM_AES_XPN_128",
		4: "OPENCONFIGMACSECMACSECCIPHERSUITE_GCM_AES_XPN_256",
	}
	OpenconfigMacsecMacsecCipherSuite_value = map[string]int32{
		"OPENCONFIGMACSECMACSECCIPHERSUITE_UNSET":           0,
		"OPENCONFIGMACSECMACSECCIPHERSUITE_GCM_AES_128":     1,
		"OPENCONFIGMACSECMACSECCIPHERSUITE_GCM_AES_256":     2,
		"OPENCONFIGMACSECMACSECCIPHERSUITE_GCM_AES_XPN_128": 3,
		"OPENCONFIGMACSECMACSECCIPHERSUITE_GCM_AES_XPN_256": 4,
	}
)

func (x OpenconfigMacsecMacsecCipherSuite) Enum() *OpenconfigMacsecMacsecCipherSuite {
	p := new(OpenconfigMacsecMacsecCipherSuite)
	*p = x
	return p
}

func (x OpenconfigMacsecMacsecCipherSuite) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMacsecMacsecCipherSuite) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[65].Descriptor()
}

func (OpenconfigMacsecMacsecCipherSuite) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[65]
}

func (x OpenconfigMacsecMacsecCipherSuite) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMacsecMacsecCipherSuite.Descriptor instead.
func (OpenconfigMacsecMacsecCipherSuite) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{65}
}

// OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime represents an enumerated type generated for the YANG enumerated type union.
type OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime int32

const (
	OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime_OPENCONFIGMACSEC_MACSEC_MKA_KEYCHAINS_KEYCHAIN_MKAKEYS_MKAKEY_CONFIG_EXPIRATIONDATETIME_UNSET         OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime = 0
	OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime_OPENCONFIGMACSEC_MACSEC_MKA_KEYCHAINS_KEYCHAIN_MKAKEYS_MKAKEY_CONFIG_EXPIRATIONDATETIME_NO_EXPIRATION OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime = 1
)

// Enum value maps for OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime.
var (
	OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime_name = map[int32]string{
		0: "OPENCONFIGMACSEC_MACSEC_MKA_KEYCHAINS_KEYCHAIN_MKAKEYS_MKAKEY_CONFIG_EXPIRATIONDATETIME_UNSET",
		1: "OPENCONFIGMACSEC_MACSEC_MKA_KEYCHAINS_KEYCHAIN_MKAKEYS_MKAKEY_CONFIG_EXPIRATIONDATETIME_NO_EXPIRATION",
	}
	OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime_value = map[string]int32{
		"OPENCONFIGMACSEC_MACSEC_MKA_KEYCHAINS_KEYCHAIN_MKAKEYS_MKAKEY_CONFIG_EXPIRATIONDATETIME_UNSET":         0,
		"OPENCONFIGMACSEC_MACSEC_MKA_KEYCHAINS_KEYCHAIN_MKAKEYS_MKAKEY_CONFIG_EXPIRATIONDATETIME_NO_EXPIRATION": 1,
	}
)

func (x OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime) Enum() *OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime {
	p := new(OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime)
	*p = x
	return p
}

func (x OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[66].Descriptor()
}

func (OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[66]
}

func (x OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime.Descriptor instead.
func (OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{66}
}

// OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime represents an enumerated type generated for the YANG enumerated type union.
type OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime int32

const (
	OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime_OPENCONFIGMACSEC_MACSEC_MKA_KEYCHAINS_KEYCHAIN_MKAKEYS_MKAKEY_CONFIG_VALIDDATETIME_UNSET             OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime = 0
	OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime_OPENCONFIGMACSEC_MACSEC_MKA_KEYCHAINS_KEYCHAIN_MKAKEYS_MKAKEY_CONFIG_VALIDDATETIME_VALID_IMMEDIATELY OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime = 1
)

// Enum value maps for OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime.
var (
	OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime_name = map[int32]string{
		0: "OPENCONFIGMACSEC_MACSEC_MKA_KEYCHAINS_KEYCHAIN_MKAKEYS_MKAKEY_CONFIG_VALIDDATETIME_UNSET",
		1: "OPENCONFIGMACSEC_MACSEC_MKA_KEYCHAINS_KEYCHAIN_MKAKEYS_MKAKEY_CONFIG_VALIDDATETIME_VALID_IMMEDIATELY",
	}
	OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime_value = map[string]int32{
		"OPENCONFIGMACSEC_MACSEC_MKA_KEYCHAINS_KEYCHAIN_MKAKEYS_MKAKEY_CONFIG_VALIDDATETIME_UNSET":             0,
		"OPENCONFIGMACSEC_MACSEC_MKA_KEYCHAINS_KEYCHAIN_MKAKEYS_MKAKEY_CONFIG_VALIDDATETIME_VALID_IMMEDIATELY": 1,
	}
)

func (x OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime) Enum() *OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime {
	p := new(OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime)
	*p = x
	return p
}

func (x OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[67].Descriptor()
}

func (OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[67]
}

func (x OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime.Descriptor instead.
func (OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{67}
}

// OpenconfigMessagesDEBUGSERVICE represents an enumerated type generated for the YANG identity DEBUG_SERVICE.
type OpenconfigMessagesDEBUGSERVICE int32

const (
	OpenconfigMessagesDEBUGSERVICE_OPENCONFIGMESSAGESDEBUGSERVICE_UNSET OpenconfigMessagesDEBUGSERVICE = 0
)

// Enum value maps for OpenconfigMessagesDEBUGSERVICE.
var (
	OpenconfigMessagesDEBUGSERVICE_name = map[int32]string{
		0: "OPENCONFIGMESSAGESDEBUGSERVICE_UNSET",
	}
	OpenconfigMessagesDEBUGSERVICE_value = map[string]int32{
		"OPENCONFIGMESSAGESDEBUGSERVICE_UNSET": 0,
	}
)

func (x OpenconfigMessagesDEBUGSERVICE) Enum() *OpenconfigMessagesDEBUGSERVICE {
	p := new(OpenconfigMessagesDEBUGSERVICE)
	*p = x
	return p
}

func (x OpenconfigMessagesDEBUGSERVICE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMessagesDEBUGSERVICE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[68].Descriptor()
}

func (OpenconfigMessagesDEBUGSERVICE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[68]
}

func (x OpenconfigMessagesDEBUGSERVICE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMessagesDEBUGSERVICE.Descriptor instead.
func (OpenconfigMessagesDEBUGSERVICE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{68}
}

// OpenconfigMessagesSyslogSeverity represents an enumerated type generated for the YANG enumerated type syslog-severity.
type OpenconfigMessagesSyslogSeverity int32

const (
	OpenconfigMessagesSyslogSeverity_OPENCONFIGMESSAGESSYSLOGSEVERITY_UNSET         OpenconfigMessagesSyslogSeverity = 0
	OpenconfigMessagesSyslogSeverity_OPENCONFIGMESSAGESSYSLOGSEVERITY_EMERGENCY     OpenconfigMessagesSyslogSeverity = 1
	OpenconfigMessagesSyslogSeverity_OPENCONFIGMESSAGESSYSLOGSEVERITY_ALERT         OpenconfigMessagesSyslogSeverity = 2
	OpenconfigMessagesSyslogSeverity_OPENCONFIGMESSAGESSYSLOGSEVERITY_CRITICAL      OpenconfigMessagesSyslogSeverity = 3
	OpenconfigMessagesSyslogSeverity_OPENCONFIGMESSAGESSYSLOGSEVERITY_ERROR         OpenconfigMessagesSyslogSeverity = 4
	OpenconfigMessagesSyslogSeverity_OPENCONFIGMESSAGESSYSLOGSEVERITY_WARNING       OpenconfigMessagesSyslogSeverity = 5
	OpenconfigMessagesSyslogSeverity_OPENCONFIGMESSAGESSYSLOGSEVERITY_NOTICE        OpenconfigMessagesSyslogSeverity = 6
	OpenconfigMessagesSyslogSeverity_OPENCONFIGMESSAGESSYSLOGSEVERITY_INFORMATIONAL OpenconfigMessagesSyslogSeverity = 7
	OpenconfigMessagesSyslogSeverity_OPENCONFIGMESSAGESSYSLOGSEVERITY_DEBUG         OpenconfigMessagesSyslogSeverity = 8
)

// Enum value maps for OpenconfigMessagesSyslogSeverity.
var (
	OpenconfigMessagesSyslogSeverity_name = map[int32]string{
		0: "OPENCONFIGMESSAGESSYSLOGSEVERITY_UNSET",
		1: "OPENCONFIGMESSAGESSYSLOGSEVERITY_EMERGENCY",
		2: "OPENCONFIGMESSAGESSYSLOGSEVERITY_ALERT",
		3: "OPENCONFIGMESSAGESSYSLOGSEVERITY_CRITICAL",
		4: "OPENCONFIGMESSAGESSYSLOGSEVERITY_ERROR",
		5: "OPENCONFIGMESSAGESSYSLOGSEVERITY_WARNING",
		6: "OPENCONFIGMESSAGESSYSLOGSEVERITY_NOTICE",
		7: "OPENCONFIGMESSAGESSYSLOGSEVERITY_INFORMATIONAL",
		8: "OPENCONFIGMESSAGESSYSLOGSEVERITY_DEBUG",
	}
	OpenconfigMessagesSyslogSeverity_value = map[string]int32{
		"OPENCONFIGMESSAGESSYSLOGSEVERITY_UNSET":         0,
		"OPENCONFIGMESSAGESSYSLOGSEVERITY_EMERGENCY":     1,
		"OPENCONFIGMESSAGESSYSLOGSEVERITY_ALERT":         2,
		"OPENCONFIGMESSAGESSYSLOGSEVERITY_CRITICAL":      3,
		"OPENCONFIGMESSAGESSYSLOGSEVERITY_ERROR":         4,
		"OPENCONFIGMESSAGESSYSLOGSEVERITY_WARNING":       5,
		"OPENCONFIGMESSAGESSYSLOGSEVERITY_NOTICE":        6,
		"OPENCONFIGMESSAGESSYSLOGSEVERITY_INFORMATIONAL": 7,
		"OPENCONFIGMESSAGESSYSLOGSEVERITY_DEBUG":         8,
	}
)

func (x OpenconfigMessagesSyslogSeverity) Enum() *OpenconfigMessagesSyslogSeverity {
	p := new(OpenconfigMessagesSyslogSeverity)
	*p = x
	return p
}

func (x OpenconfigMessagesSyslogSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMessagesSyslogSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[69].Descriptor()
}

func (OpenconfigMessagesSyslogSeverity) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[69]
}

func (x OpenconfigMessagesSyslogSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMessagesSyslogSeverity.Descriptor instead.
func (OpenconfigMessagesSyslogSeverity) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{69}
}

// OpenconfigMplsCspfTieBreaking represents an enumerated type generated for the YANG enumerated type cspf-tie-breaking.
type OpenconfigMplsCspfTieBreaking int32

const (
	OpenconfigMplsCspfTieBreaking_OPENCONFIGMPLSCSPFTIEBREAKING_RANDOM     OpenconfigMplsCspfTieBreaking = 0
	OpenconfigMplsCspfTieBreaking_OPENCONFIGMPLSCSPFTIEBREAKING_LEAST_FILL OpenconfigMplsCspfTieBreaking = 2
	OpenconfigMplsCspfTieBreaking_OPENCONFIGMPLSCSPFTIEBREAKING_MOST_FILL  OpenconfigMplsCspfTieBreaking = 3
)

// Enum value maps for OpenconfigMplsCspfTieBreaking.
var (
	OpenconfigMplsCspfTieBreaking_name = map[int32]string{
		0: "OPENCONFIGMPLSCSPFTIEBREAKING_RANDOM",
		2: "OPENCONFIGMPLSCSPFTIEBREAKING_LEAST_FILL",
		3: "OPENCONFIGMPLSCSPFTIEBREAKING_MOST_FILL",
	}
	OpenconfigMplsCspfTieBreaking_value = map[string]int32{
		"OPENCONFIGMPLSCSPFTIEBREAKING_RANDOM":     0,
		"OPENCONFIGMPLSCSPFTIEBREAKING_LEAST_FILL": 2,
		"OPENCONFIGMPLSCSPFTIEBREAKING_MOST_FILL":  3,
	}
)

func (x OpenconfigMplsCspfTieBreaking) Enum() *OpenconfigMplsCspfTieBreaking {
	p := new(OpenconfigMplsCspfTieBreaking)
	*p = x
	return p
}

func (x OpenconfigMplsCspfTieBreaking) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsCspfTieBreaking) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[70].Descriptor()
}

func (OpenconfigMplsCspfTieBreaking) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[70]
}

func (x OpenconfigMplsCspfTieBreaking) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsCspfTieBreaking.Descriptor instead.
func (OpenconfigMplsCspfTieBreaking) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{70}
}

// OpenconfigMplsLdpMplsLdpAdjacencyType represents an enumerated type generated for the YANG enumerated type mpls-ldp-adjacency-type.
type OpenconfigMplsLdpMplsLdpAdjacencyType int32

const (
	OpenconfigMplsLdpMplsLdpAdjacencyType_OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_UNSET    OpenconfigMplsLdpMplsLdpAdjacencyType = 0
	OpenconfigMplsLdpMplsLdpAdjacencyType_OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_LINK     OpenconfigMplsLdpMplsLdpAdjacencyType = 1
	OpenconfigMplsLdpMplsLdpAdjacencyType_OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_TARGETED OpenconfigMplsLdpMplsLdpAdjacencyType = 2
)

// Enum value maps for OpenconfigMplsLdpMplsLdpAdjacencyType.
var (
	OpenconfigMplsLdpMplsLdpAdjacencyType_name = map[int32]string{
		0: "OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_UNSET",
		1: "OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_LINK",
		2: "OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_TARGETED",
	}
	OpenconfigMplsLdpMplsLdpAdjacencyType_value = map[string]int32{
		"OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_UNSET":    0,
		"OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_LINK":     1,
		"OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_TARGETED": 2,
	}
)

func (x OpenconfigMplsLdpMplsLdpAdjacencyType) Enum() *OpenconfigMplsLdpMplsLdpAdjacencyType {
	p := new(OpenconfigMplsLdpMplsLdpAdjacencyType)
	*p = x
	return p
}

func (x OpenconfigMplsLdpMplsLdpAdjacencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsLdpMplsLdpAdjacencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[71].Descriptor()
}

func (OpenconfigMplsLdpMplsLdpAdjacencyType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[71]
}

func (x OpenconfigMplsLdpMplsLdpAdjacencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsLdpMplsLdpAdjacencyType.Descriptor instead.
func (OpenconfigMplsLdpMplsLdpAdjacencyType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{71}
}

// OpenconfigMplsLdpMplsLdpAfi represents an enumerated type generated for the YANG enumerated type mpls-ldp-afi.
type OpenconfigMplsLdpMplsLdpAfi int32

const (
	OpenconfigMplsLdpMplsLdpAfi_OPENCONFIGMPLSLDPMPLSLDPAFI_UNSET OpenconfigMplsLdpMplsLdpAfi = 0
	OpenconfigMplsLdpMplsLdpAfi_OPENCONFIGMPLSLDPMPLSLDPAFI_IPV4  OpenconfigMplsLdpMplsLdpAfi = 1
	OpenconfigMplsLdpMplsLdpAfi_OPENCONFIGMPLSLDPMPLSLDPAFI_IPV6  OpenconfigMplsLdpMplsLdpAfi = 2
)

// Enum value maps for OpenconfigMplsLdpMplsLdpAfi.
var (
	OpenconfigMplsLdpMplsLdpAfi_name = map[int32]string{
		0: "OPENCONFIGMPLSLDPMPLSLDPAFI_UNSET",
		1: "OPENCONFIGMPLSLDPMPLSLDPAFI_IPV4",
		2: "OPENCONFIGMPLSLDPMPLSLDPAFI_IPV6",
	}
	OpenconfigMplsLdpMplsLdpAfi_value = map[string]int32{
		"OPENCONFIGMPLSLDPMPLSLDPAFI_UNSET": 0,
		"OPENCONFIGMPLSLDPMPLSLDPAFI_IPV4":  1,
		"OPENCONFIGMPLSLDPMPLSLDPAFI_IPV6":  2,
	}
)

func (x OpenconfigMplsLdpMplsLdpAfi) Enum() *OpenconfigMplsLdpMplsLdpAfi {
	p := new(OpenconfigMplsLdpMplsLdpAfi)
	*p = x
	return p
}

func (x OpenconfigMplsLdpMplsLdpAfi) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsLdpMplsLdpAfi) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[72].Descriptor()
}

func (OpenconfigMplsLdpMplsLdpAfi) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[72]
}

func (x OpenconfigMplsLdpMplsLdpAfi) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsLdpMplsLdpAfi.Descriptor instead.
func (OpenconfigMplsLdpMplsLdpAfi) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{72}
}

// OpenconfigMplsMplsHopType represents an enumerated type generated for the YANG enumerated type mpls-hop-type.
type OpenconfigMplsMplsHopType int32

const (
	OpenconfigMplsMplsHopType_OPENCONFIGMPLSMPLSHOPTYPE_UNSET  OpenconfigMplsMplsHopType = 0
	OpenconfigMplsMplsHopType_OPENCONFIGMPLSMPLSHOPTYPE_LOOSE  OpenconfigMplsMplsHopType = 1
	OpenconfigMplsMplsHopType_OPENCONFIGMPLSMPLSHOPTYPE_STRICT OpenconfigMplsMplsHopType = 2
)

// Enum value maps for OpenconfigMplsMplsHopType.
var (
	OpenconfigMplsMplsHopType_name = map[int32]string{
		0: "OPENCONFIGMPLSMPLSHOPTYPE_UNSET",
		1: "OPENCONFIGMPLSMPLSHOPTYPE_LOOSE",
		2: "OPENCONFIGMPLSMPLSHOPTYPE_STRICT",
	}
	OpenconfigMplsMplsHopType_value = map[string]int32{
		"OPENCONFIGMPLSMPLSHOPTYPE_UNSET":  0,
		"OPENCONFIGMPLSMPLSHOPTYPE_LOOSE":  1,
		"OPENCONFIGMPLSMPLSHOPTYPE_STRICT": 2,
	}
)

func (x OpenconfigMplsMplsHopType) Enum() *OpenconfigMplsMplsHopType {
	p := new(OpenconfigMplsMplsHopType)
	*p = x
	return p
}

func (x OpenconfigMplsMplsHopType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsMplsHopType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[73].Descriptor()
}

func (OpenconfigMplsMplsHopType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[73]
}

func (x OpenconfigMplsMplsHopType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsMplsHopType.Descriptor instead.
func (OpenconfigMplsMplsHopType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{73}
}

// OpenconfigMplsMplsSrlgFloodingType represents an enumerated type generated for the YANG enumerated type mpls-srlg-flooding-type.
type OpenconfigMplsMplsSrlgFloodingType int32

const (
	OpenconfigMplsMplsSrlgFloodingType_OPENCONFIGMPLSMPLSSRLGFLOODINGTYPE_FLOODED_SRLG OpenconfigMplsMplsSrlgFloodingType = 0
	OpenconfigMplsMplsSrlgFloodingType_OPENCONFIGMPLSMPLSSRLGFLOODINGTYPE_STATIC_SRLG  OpenconfigMplsMplsSrlgFloodingType = 2
)

// Enum value maps for OpenconfigMplsMplsSrlgFloodingType.
var (
	OpenconfigMplsMplsSrlgFloodingType_name = map[int32]string{
		0: "OPENCONFIGMPLSMPLSSRLGFLOODINGTYPE_FLOODED_SRLG",
		2: "OPENCONFIGMPLSMPLSSRLGFLOODINGTYPE_STATIC_SRLG",
	}
	OpenconfigMplsMplsSrlgFloodingType_value = map[string]int32{
		"OPENCONFIGMPLSMPLSSRLGFLOODINGTYPE_FLOODED_SRLG": 0,
		"OPENCONFIGMPLSMPLSSRLGFLOODINGTYPE_STATIC_SRLG":  2,
	}
)

func (x OpenconfigMplsMplsSrlgFloodingType) Enum() *OpenconfigMplsMplsSrlgFloodingType {
	p := new(OpenconfigMplsMplsSrlgFloodingType)
	*p = x
	return p
}

func (x OpenconfigMplsMplsSrlgFloodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsMplsSrlgFloodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[74].Descriptor()
}

func (OpenconfigMplsMplsSrlgFloodingType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[74]
}

func (x OpenconfigMplsMplsSrlgFloodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsMplsSrlgFloodingType.Descriptor instead.
func (OpenconfigMplsMplsSrlgFloodingType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{74}
}

// OpenconfigMplsTeBandwidthType represents an enumerated type generated for the YANG enumerated type te-bandwidth-type.
type OpenconfigMplsTeBandwidthType int32

const (
	OpenconfigMplsTeBandwidthType_OPENCONFIGMPLSTEBANDWIDTHTYPE_SPECIFIED OpenconfigMplsTeBandwidthType = 0
	OpenconfigMplsTeBandwidthType_OPENCONFIGMPLSTEBANDWIDTHTYPE_AUTO      OpenconfigMplsTeBandwidthType = 2
)

// Enum value maps for OpenconfigMplsTeBandwidthType.
var (
	OpenconfigMplsTeBandwidthType_name = map[int32]string{
		0: "OPENCONFIGMPLSTEBANDWIDTHTYPE_SPECIFIED",
		2: "OPENCONFIGMPLSTEBANDWIDTHTYPE_AUTO",
	}
	OpenconfigMplsTeBandwidthType_value = map[string]int32{
		"OPENCONFIGMPLSTEBANDWIDTHTYPE_SPECIFIED": 0,
		"OPENCONFIGMPLSTEBANDWIDTHTYPE_AUTO":      2,
	}
)

func (x OpenconfigMplsTeBandwidthType) Enum() *OpenconfigMplsTeBandwidthType {
	p := new(OpenconfigMplsTeBandwidthType)
	*p = x
	return p
}

func (x OpenconfigMplsTeBandwidthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTeBandwidthType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[75].Descriptor()
}

func (OpenconfigMplsTeBandwidthType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[75]
}

func (x OpenconfigMplsTeBandwidthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTeBandwidthType.Descriptor instead.
func (OpenconfigMplsTeBandwidthType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{75}
}

// OpenconfigMplsTypesLSPMETRICTYPE represents an enumerated type generated for the YANG identity LSP_METRIC_TYPE.
type OpenconfigMplsTypesLSPMETRICTYPE int32

const (
	OpenconfigMplsTypesLSPMETRICTYPE_OPENCONFIGMPLSTYPESLSPMETRICTYPE_UNSET                OpenconfigMplsTypesLSPMETRICTYPE = 0
	OpenconfigMplsTypesLSPMETRICTYPE_OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_INHERITED OpenconfigMplsTypesLSPMETRICTYPE = 114379355
	OpenconfigMplsTypesLSPMETRICTYPE_OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_ABSOLUTE  OpenconfigMplsTypesLSPMETRICTYPE = 239349140
	OpenconfigMplsTypesLSPMETRICTYPE_OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_RELATIVE  OpenconfigMplsTypesLSPMETRICTYPE = 414552655
)

// Enum value maps for OpenconfigMplsTypesLSPMETRICTYPE.
var (
	OpenconfigMplsTypesLSPMETRICTYPE_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESLSPMETRICTYPE_UNSET",
		114379355: "OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_INHERITED",
		239349140: "OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_ABSOLUTE",
		414552655: "OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_RELATIVE",
	}
	OpenconfigMplsTypesLSPMETRICTYPE_value = map[string]int32{
		"OPENCONFIGMPLSTYPESLSPMETRICTYPE_UNSET":                0,
		"OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_INHERITED": 114379355,
		"OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_ABSOLUTE":  239349140,
		"OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_RELATIVE":  414552655,
	}
)

func (x OpenconfigMplsTypesLSPMETRICTYPE) Enum() *OpenconfigMplsTypesLSPMETRICTYPE {
	p := new(OpenconfigMplsTypesLSPMETRICTYPE)
	*p = x
	return p
}

func (x OpenconfigMplsTypesLSPMETRICTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesLSPMETRICTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[76].Descriptor()
}

func (OpenconfigMplsTypesLSPMETRICTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[76]
}

func (x OpenconfigMplsTypesLSPMETRICTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesLSPMETRICTYPE.Descriptor instead.
func (OpenconfigMplsTypesLSPMETRICTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{76}
}

// OpenconfigMplsTypesLSPOPERSTATUS represents an enumerated type generated for the YANG identity LSP_OPER_STATUS.
type OpenconfigMplsTypesLSPOPERSTATUS int32

const (
	OpenconfigMplsTypesLSPOPERSTATUS_OPENCONFIGMPLSTYPESLSPOPERSTATUS_UNSET OpenconfigMplsTypesLSPOPERSTATUS = 0
	OpenconfigMplsTypesLSPOPERSTATUS_OPENCONFIGMPLSTYPESLSPOPERSTATUS_UP    OpenconfigMplsTypesLSPOPERSTATUS = 264074669
	OpenconfigMplsTypesLSPOPERSTATUS_OPENCONFIGMPLSTYPESLSPOPERSTATUS_DOWN  OpenconfigMplsTypesLSPOPERSTATUS = 335566726
)

// Enum value maps for OpenconfigMplsTypesLSPOPERSTATUS.
var (
	OpenconfigMplsTypesLSPOPERSTATUS_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESLSPOPERSTATUS_UNSET",
		264074669: "OPENCONFIGMPLSTYPESLSPOPERSTATUS_UP",
		335566726: "OPENCONFIGMPLSTYPESLSPOPERSTATUS_DOWN",
	}
	OpenconfigMplsTypesLSPOPERSTATUS_value = map[string]int32{
		"OPENCONFIGMPLSTYPESLSPOPERSTATUS_UNSET": 0,
		"OPENCONFIGMPLSTYPESLSPOPERSTATUS_UP":    264074669,
		"OPENCONFIGMPLSTYPESLSPOPERSTATUS_DOWN":  335566726,
	}
)

func (x OpenconfigMplsTypesLSPOPERSTATUS) Enum() *OpenconfigMplsTypesLSPOPERSTATUS {
	p := new(OpenconfigMplsTypesLSPOPERSTATUS)
	*p = x
	return p
}

func (x OpenconfigMplsTypesLSPOPERSTATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesLSPOPERSTATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[77].Descriptor()
}

func (OpenconfigMplsTypesLSPOPERSTATUS) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[77]
}

func (x OpenconfigMplsTypesLSPOPERSTATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesLSPOPERSTATUS.Descriptor instead.
func (OpenconfigMplsTypesLSPOPERSTATUS) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{77}
}

// OpenconfigMplsTypesLSPROLE represents an enumerated type generated for the YANG identity LSP_ROLE.
type OpenconfigMplsTypesLSPROLE int32

const (
	OpenconfigMplsTypesLSPROLE_OPENCONFIGMPLSTYPESLSPROLE_UNSET   OpenconfigMplsTypesLSPROLE = 0
	OpenconfigMplsTypesLSPROLE_OPENCONFIGMPLSTYPESLSPROLE_TRANSIT OpenconfigMplsTypesLSPROLE = 221541038
	OpenconfigMplsTypesLSPROLE_OPENCONFIGMPLSTYPESLSPROLE_INGRESS OpenconfigMplsTypesLSPROLE = 336963778
	OpenconfigMplsTypesLSPROLE_OPENCONFIGMPLSTYPESLSPROLE_EGRESS  OpenconfigMplsTypesLSPROLE = 375604564
)

// Enum value maps for OpenconfigMplsTypesLSPROLE.
var (
	OpenconfigMplsTypesLSPROLE_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESLSPROLE_UNSET",
		221541038: "OPENCONFIGMPLSTYPESLSPROLE_TRANSIT",
		336963778: "OPENCONFIGMPLSTYPESLSPROLE_INGRESS",
		375604564: "OPENCONFIGMPLSTYPESLSPROLE_EGRESS",
	}
	OpenconfigMplsTypesLSPROLE_value = map[string]int32{
		"OPENCONFIGMPLSTYPESLSPROLE_UNSET":   0,
		"OPENCONFIGMPLSTYPESLSPROLE_TRANSIT": 221541038,
		"OPENCONFIGMPLSTYPESLSPROLE_INGRESS": 336963778,
		"OPENCONFIGMPLSTYPESLSPROLE_EGRESS":  375604564,
	}
)

func (x OpenconfigMplsTypesLSPROLE) Enum() *OpenconfigMplsTypesLSPROLE {
	p := new(OpenconfigMplsTypesLSPROLE)
	*p = x
	return p
}

func (x OpenconfigMplsTypesLSPROLE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesLSPROLE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[78].Descriptor()
}

func (OpenconfigMplsTypesLSPROLE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[78]
}

func (x OpenconfigMplsTypesLSPROLE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesLSPROLE.Descriptor instead.
func (OpenconfigMplsTypesLSPROLE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{78}
}

// OpenconfigMplsTypesNULLLABELTYPE represents an enumerated type generated for the YANG identity NULL_LABEL_TYPE.
type OpenconfigMplsTypesNULLLABELTYPE int32

const (
	OpenconfigMplsTypesNULLLABELTYPE_OPENCONFIGMPLSTYPESNULLLABELTYPE_UNSET    OpenconfigMplsTypesNULLLABELTYPE = 0
	OpenconfigMplsTypesNULLLABELTYPE_OPENCONFIGMPLSTYPESNULLLABELTYPE_IMPLICIT OpenconfigMplsTypesNULLLABELTYPE = 26700381
	OpenconfigMplsTypesNULLLABELTYPE_OPENCONFIGMPLSTYPESNULLLABELTYPE_EXPLICIT OpenconfigMplsTypesNULLLABELTYPE = 440297628
)

// Enum value maps for OpenconfigMplsTypesNULLLABELTYPE.
var (
	OpenconfigMplsTypesNULLLABELTYPE_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESNULLLABELTYPE_UNSET",
		26700381:  "OPENCONFIGMPLSTYPESNULLLABELTYPE_IMPLICIT",
		440297628: "OPENCONFIGMPLSTYPESNULLLABELTYPE_EXPLICIT",
	}
	OpenconfigMplsTypesNULLLABELTYPE_value = map[string]int32{
		"OPENCONFIGMPLSTYPESNULLLABELTYPE_UNSET":    0,
		"OPENCONFIGMPLSTYPESNULLLABELTYPE_IMPLICIT": 26700381,
		"OPENCONFIGMPLSTYPESNULLLABELTYPE_EXPLICIT": 440297628,
	}
)

func (x OpenconfigMplsTypesNULLLABELTYPE) Enum() *OpenconfigMplsTypesNULLLABELTYPE {
	p := new(OpenconfigMplsTypesNULLLABELTYPE)
	*p = x
	return p
}

func (x OpenconfigMplsTypesNULLLABELTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesNULLLABELTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[79].Descriptor()
}

func (OpenconfigMplsTypesNULLLABELTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[79]
}

func (x OpenconfigMplsTypesNULLLABELTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesNULLLABELTYPE.Descriptor instead.
func (OpenconfigMplsTypesNULLLABELTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{79}
}

// OpenconfigMplsTypesPATHCOMPUTATIONMETHOD represents an enumerated type generated for the YANG identity PATH_COMPUTATION_METHOD.
type OpenconfigMplsTypesPATHCOMPUTATIONMETHOD int32

const (
	OpenconfigMplsTypesPATHCOMPUTATIONMETHOD_OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_UNSET              OpenconfigMplsTypesPATHCOMPUTATIONMETHOD = 0
	OpenconfigMplsTypesPATHCOMPUTATIONMETHOD_OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_EXTERNALLY_QUERIED OpenconfigMplsTypesPATHCOMPUTATIONMETHOD = 417421502
	OpenconfigMplsTypesPATHCOMPUTATIONMETHOD_OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_EXPLICITLY_DEFINED OpenconfigMplsTypesPATHCOMPUTATIONMETHOD = 423111651
	OpenconfigMplsTypesPATHCOMPUTATIONMETHOD_OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_LOCALLY_COMPUTED   OpenconfigMplsTypesPATHCOMPUTATIONMETHOD = 445762314
)

// Enum value maps for OpenconfigMplsTypesPATHCOMPUTATIONMETHOD.
var (
	OpenconfigMplsTypesPATHCOMPUTATIONMETHOD_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_UNSET",
		417421502: "OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_EXTERNALLY_QUERIED",
		423111651: "OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_EXPLICITLY_DEFINED",
		445762314: "OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_LOCALLY_COMPUTED",
	}
	OpenconfigMplsTypesPATHCOMPUTATIONMETHOD_value = map[string]int32{
		"OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_UNSET":              0,
		"OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_EXTERNALLY_QUERIED": 417421502,
		"OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_EXPLICITLY_DEFINED": 423111651,
		"OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_LOCALLY_COMPUTED":   445762314,
	}
)

func (x OpenconfigMplsTypesPATHCOMPUTATIONMETHOD) Enum() *OpenconfigMplsTypesPATHCOMPUTATIONMETHOD {
	p := new(OpenconfigMplsTypesPATHCOMPUTATIONMETHOD)
	*p = x
	return p
}

func (x OpenconfigMplsTypesPATHCOMPUTATIONMETHOD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesPATHCOMPUTATIONMETHOD) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[80].Descriptor()
}

func (OpenconfigMplsTypesPATHCOMPUTATIONMETHOD) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[80]
}

func (x OpenconfigMplsTypesPATHCOMPUTATIONMETHOD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesPATHCOMPUTATIONMETHOD.Descriptor instead.
func (OpenconfigMplsTypesPATHCOMPUTATIONMETHOD) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{80}
}

// OpenconfigMplsTypesPATHSETUPPROTOCOL represents an enumerated type generated for the YANG identity PATH_SETUP_PROTOCOL.
type OpenconfigMplsTypesPATHSETUPPROTOCOL int32

const (
	OpenconfigMplsTypesPATHSETUPPROTOCOL_OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_UNSET           OpenconfigMplsTypesPATHSETUPPROTOCOL = 0
	OpenconfigMplsTypesPATHSETUPPROTOCOL_OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_RSVP OpenconfigMplsTypesPATHSETUPPROTOCOL = 32490986
	OpenconfigMplsTypesPATHSETUPPROTOCOL_OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_SR   OpenconfigMplsTypesPATHSETUPPROTOCOL = 259153130
	OpenconfigMplsTypesPATHSETUPPROTOCOL_OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_LDP  OpenconfigMplsTypesPATHSETUPPROTOCOL = 523024019
)

// Enum value maps for OpenconfigMplsTypesPATHSETUPPROTOCOL.
var (
	OpenconfigMplsTypesPATHSETUPPROTOCOL_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_UNSET",
		32490986:  "OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_RSVP",
		259153130: "OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_SR",
		523024019: "OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_LDP",
	}
	OpenconfigMplsTypesPATHSETUPPROTOCOL_value = map[string]int32{
		"OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_UNSET":           0,
		"OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_RSVP": 32490986,
		"OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_SR":   259153130,
		"OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_LDP":  523024019,
	}
)

func (x OpenconfigMplsTypesPATHSETUPPROTOCOL) Enum() *OpenconfigMplsTypesPATHSETUPPROTOCOL {
	p := new(OpenconfigMplsTypesPATHSETUPPROTOCOL)
	*p = x
	return p
}

func (x OpenconfigMplsTypesPATHSETUPPROTOCOL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesPATHSETUPPROTOCOL) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[81].Descriptor()
}

func (OpenconfigMplsTypesPATHSETUPPROTOCOL) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[81]
}

func (x OpenconfigMplsTypesPATHSETUPPROTOCOL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesPATHSETUPPROTOCOL.Descriptor instead.
func (OpenconfigMplsTypesPATHSETUPPROTOCOL) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{81}
}

// OpenconfigMplsTypesPROTECTIONTYPE represents an enumerated type generated for the YANG identity PROTECTION_TYPE.
type OpenconfigMplsTypesPROTECTIONTYPE int32

const (
	OpenconfigMplsTypesPROTECTIONTYPE_OPENCONFIGMPLSTYPESPROTECTIONTYPE_UNSET                          OpenconfigMplsTypesPROTECTIONTYPE = 0
	OpenconfigMplsTypesPROTECTIONTYPE_OPENCONFIGMPLSTYPESPROTECTIONTYPE_UNPROTECTED                    OpenconfigMplsTypesPROTECTIONTYPE = 54186176
	OpenconfigMplsTypesPROTECTIONTYPE_OPENCONFIGMPLSTYPESPROTECTIONTYPE_LINK_NODE_PROTECTION_REQUESTED OpenconfigMplsTypesPROTECTIONTYPE = 298364029
	OpenconfigMplsTypesPROTECTIONTYPE_OPENCONFIGMPLSTYPESPROTECTIONTYPE_LINK_PROTECTION_REQUIRED       OpenconfigMplsTypesPROTECTIONTYPE = 390056449
)

// Enum value maps for OpenconfigMplsTypesPROTECTIONTYPE.
var (
	OpenconfigMplsTypesPROTECTIONTYPE_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESPROTECTIONTYPE_UNSET",
		54186176:  "OPENCONFIGMPLSTYPESPROTECTIONTYPE_UNPROTECTED",
		298364029: "OPENCONFIGMPLSTYPESPROTECTIONTYPE_LINK_NODE_PROTECTION_REQUESTED",
		390056449: "OPENCONFIGMPLSTYPESPROTECTIONTYPE_LINK_PROTECTION_REQUIRED",
	}
	OpenconfigMplsTypesPROTECTIONTYPE_value = map[string]int32{
		"OPENCONFIGMPLSTYPESPROTECTIONTYPE_UNSET":                          0,
		"OPENCONFIGMPLSTYPESPROTECTIONTYPE_UNPROTECTED":                    54186176,
		"OPENCONFIGMPLSTYPESPROTECTIONTYPE_LINK_NODE_PROTECTION_REQUESTED": 298364029,
		"OPENCONFIGMPLSTYPESPROTECTIONTYPE_LINK_PROTECTION_REQUIRED":       390056449,
	}
)

func (x OpenconfigMplsTypesPROTECTIONTYPE) Enum() *OpenconfigMplsTypesPROTECTIONTYPE {
	p := new(OpenconfigMplsTypesPROTECTIONTYPE)
	*p = x
	return p
}

func (x OpenconfigMplsTypesPROTECTIONTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesPROTECTIONTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[82].Descriptor()
}

func (OpenconfigMplsTypesPROTECTIONTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[82]
}

func (x OpenconfigMplsTypesPROTECTIONTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesPROTECTIONTYPE.Descriptor instead.
func (OpenconfigMplsTypesPROTECTIONTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{82}
}

// OpenconfigMplsTypesPSEUDOWIREENCAPSULATION represents an enumerated type generated for the YANG identity PSEUDOWIRE_ENCAPSULATION.
type OpenconfigMplsTypesPSEUDOWIREENCAPSULATION int32

const (
	OpenconfigMplsTypesPSEUDOWIREENCAPSULATION_OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_UNSET                    OpenconfigMplsTypesPSEUDOWIREENCAPSULATION = 0
	OpenconfigMplsTypesPSEUDOWIREENCAPSULATION_OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_PWE_ETHERNET_RAW_MODE    OpenconfigMplsTypesPSEUDOWIREENCAPSULATION = 439293174
	OpenconfigMplsTypesPSEUDOWIREENCAPSULATION_OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_PWE_ETHERNET_TAGGED_MODE OpenconfigMplsTypesPSEUDOWIREENCAPSULATION = 461760696
)

// Enum value maps for OpenconfigMplsTypesPSEUDOWIREENCAPSULATION.
var (
	OpenconfigMplsTypesPSEUDOWIREENCAPSULATION_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_UNSET",
		439293174: "OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_PWE_ETHERNET_RAW_MODE",
		461760696: "OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_PWE_ETHERNET_TAGGED_MODE",
	}
	OpenconfigMplsTypesPSEUDOWIREENCAPSULATION_value = map[string]int32{
		"OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_UNSET":                    0,
		"OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_PWE_ETHERNET_RAW_MODE":    439293174,
		"OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_PWE_ETHERNET_TAGGED_MODE": 461760696,
	}
)

func (x OpenconfigMplsTypesPSEUDOWIREENCAPSULATION) Enum() *OpenconfigMplsTypesPSEUDOWIREENCAPSULATION {
	p := new(OpenconfigMplsTypesPSEUDOWIREENCAPSULATION)
	*p = x
	return p
}

func (x OpenconfigMplsTypesPSEUDOWIREENCAPSULATION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesPSEUDOWIREENCAPSULATION) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[83].Descriptor()
}

func (OpenconfigMplsTypesPSEUDOWIREENCAPSULATION) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[83]
}

func (x OpenconfigMplsTypesPSEUDOWIREENCAPSULATION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesPSEUDOWIREENCAPSULATION.Descriptor instead.
func (OpenconfigMplsTypesPSEUDOWIREENCAPSULATION) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{83}
}

// OpenconfigMplsTypesTUNNELADMINSTATUS represents an enumerated type generated for the YANG identity TUNNEL_ADMIN_STATUS.
type OpenconfigMplsTypesTUNNELADMINSTATUS int32

const (
	OpenconfigMplsTypesTUNNELADMINSTATUS_OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_UNSET      OpenconfigMplsTypesTUNNELADMINSTATUS = 0
	OpenconfigMplsTypesTUNNELADMINSTATUS_OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_ADMIN_UP   OpenconfigMplsTypesTUNNELADMINSTATUS = 74384195
	OpenconfigMplsTypesTUNNELADMINSTATUS_OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_ADMIN_DOWN OpenconfigMplsTypesTUNNELADMINSTATUS = 141379584
)

// Enum value maps for OpenconfigMplsTypesTUNNELADMINSTATUS.
var (
	OpenconfigMplsTypesTUNNELADMINSTATUS_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_UNSET",
		74384195:  "OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_ADMIN_UP",
		141379584: "OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_ADMIN_DOWN",
	}
	OpenconfigMplsTypesTUNNELADMINSTATUS_value = map[string]int32{
		"OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_UNSET":      0,
		"OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_ADMIN_UP":   74384195,
		"OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_ADMIN_DOWN": 141379584,
	}
)

func (x OpenconfigMplsTypesTUNNELADMINSTATUS) Enum() *OpenconfigMplsTypesTUNNELADMINSTATUS {
	p := new(OpenconfigMplsTypesTUNNELADMINSTATUS)
	*p = x
	return p
}

func (x OpenconfigMplsTypesTUNNELADMINSTATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesTUNNELADMINSTATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[84].Descriptor()
}

func (OpenconfigMplsTypesTUNNELADMINSTATUS) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[84]
}

func (x OpenconfigMplsTypesTUNNELADMINSTATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesTUNNELADMINSTATUS.Descriptor instead.
func (OpenconfigMplsTypesTUNNELADMINSTATUS) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{84}
}

// OpenconfigMplsTypesTUNNELTYPE represents an enumerated type generated for the YANG identity TUNNEL_TYPE.
type OpenconfigMplsTypesTUNNELTYPE int32

const (
	OpenconfigMplsTypesTUNNELTYPE_OPENCONFIGMPLSTYPESTUNNELTYPE_UNSET OpenconfigMplsTypesTUNNELTYPE = 0
	OpenconfigMplsTypesTUNNELTYPE_OPENCONFIGMPLSTYPESTUNNELTYPE_P2P   OpenconfigMplsTypesTUNNELTYPE = 234390308
	OpenconfigMplsTypesTUNNELTYPE_OPENCONFIGMPLSTYPESTUNNELTYPE_P2MP  OpenconfigMplsTypesTUNNELTYPE = 389452523
)

// Enum value maps for OpenconfigMplsTypesTUNNELTYPE.
var (
	OpenconfigMplsTypesTUNNELTYPE_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESTUNNELTYPE_UNSET",
		234390308: "OPENCONFIGMPLSTYPESTUNNELTYPE_P2P",
		389452523: "OPENCONFIGMPLSTYPESTUNNELTYPE_P2MP",
	}
	OpenconfigMplsTypesTUNNELTYPE_value = map[string]int32{
		"OPENCONFIGMPLSTYPESTUNNELTYPE_UNSET": 0,
		"OPENCONFIGMPLSTYPESTUNNELTYPE_P2P":   234390308,
		"OPENCONFIGMPLSTYPESTUNNELTYPE_P2MP":  389452523,
	}
)

func (x OpenconfigMplsTypesTUNNELTYPE) Enum() *OpenconfigMplsTypesTUNNELTYPE {
	p := new(OpenconfigMplsTypesTUNNELTYPE)
	*p = x
	return p
}

func (x OpenconfigMplsTypesTUNNELTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesTUNNELTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[85].Descriptor()
}

func (OpenconfigMplsTypesTUNNELTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[85]
}

func (x OpenconfigMplsTypesTUNNELTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesTUNNELTYPE.Descriptor instead.
func (OpenconfigMplsTypesTUNNELTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{85}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[86].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[86]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{86}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[87].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[87]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{87}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[88].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[88]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{88}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[89].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[89]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{89}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_LOWERBOUND_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[90].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[90]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{90}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_GLOBAL_RESERVEDLABELBLOCKS_RESERVEDLABELBLOCK_CONFIG_UPPERBOUND_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[91].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[91]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{91}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_INCOMINGLABEL_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[92].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[92]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{92}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_LSPS_STATICLSPS_STATICLSP_EGRESS_CONFIG_PUSHLABEL_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[93].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[93]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{93}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority represents an enumerated type generated for the YANG enumerated type union.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_INTERFACEATTRIBUTES_INTERFACE_BANDWIDTHRESERVATIONS_BANDWIDTHRESERVATION_STATE_PRIORITY_UNSET OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_INTERFACEATTRIBUTES_INTERFACE_BANDWIDTHRESERVATIONS_BANDWIDTHRESERVATION_STATE_PRIORITY_ALL   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority = 1
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_INTERFACEATTRIBUTES_INTERFACE_BANDWIDTHRESERVATIONS_BANDWIDTHRESERVATION_STATE_PRIORITY_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_INTERFACEATTRIBUTES_INTERFACE_BANDWIDTHRESERVATIONS_BANDWIDTHRESERVATION_STATE_PRIORITY_ALL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_INTERFACEATTRIBUTES_INTERFACE_BANDWIDTHRESERVATIONS_BANDWIDTHRESERVATION_STATE_PRIORITY_UNSET": 0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_INTERFACEATTRIBUTES_INTERFACE_BANDWIDTHRESERVATIONS_BANDWIDTHRESERVATION_STATE_PRIORITY_ALL":   1,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[94].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[94]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{94}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_EXPLICITROUTEOBJECTS_EXPLICITROUTEOBJECT_STATE_LABEL_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[95].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[95]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{95}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_RECORDROUTEOBJECTS_RECORDROUTEOBJECT_STATE_REPORTEDLABEL_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[96].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[96]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{96}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELIN_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[97].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[97]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{97}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_RSVPTE_SESSIONS_SESSION_STATE_LABELOUT_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[98].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[98]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{98}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_MPLS_SIGNALINGPROTOCOLS_SEGMENTROUTING_AGGREGATESIDCOUNTERS_AGGREGATESIDCOUNTER_STATE_MPLSLABEL_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[99].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[99]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{99}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue represents an enumerated type generated for the YANG enumerated type sr-sid-type.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_ACTION_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_CONFIG_VALUE_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[100].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[100]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{100}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_POLICYFORWARDING_POLICIES_POLICY_RULES_RULE_SRTE_CONFIG_MPLSBSID_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[101].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[101]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{101}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId represents an enumerated type generated for the YANG enumerated type union.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_CONFIG_SIDID_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[102].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[102]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{102}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal represents an enumerated type generated for the YANG enumerated type sr-sid-type.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_ADJACENCYSIDS_ADJACENCYSID_STATE_ALLOCATEDDYNAMICLOCAL_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[103].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[103]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{103}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId represents an enumerated type generated for the YANG enumerated type sr-sid-type.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_INTERFACES_INTERFACE_LEVELS_LEVEL_AFISAFI_AF_SEGMENTROUTING_PREFIXSIDS_PREFIXSID_CONFIG_SIDID_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[104].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[104]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{104}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_ISIS_LEVELS_LEVEL_LINKSTATEDATABASE_LSP_TLVS_TLV_ROUTERCAPABILITIES_CAPABILITY_SUBTLVS_SUBTLV_SEGMENTROUTINGCAPABILITY_SRGBDESCRIPTORS_SRGBDESCRIPTOR_STATE_LABEL_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[105].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[105]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{105}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType represents an enumerated type generated for the YANG enumerated type union.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_ROUTERINFORMATION_TLVS_TLV_SEGMENTROUTINGSIDLABELRANGE_TLVS_TLV_STATE_TYPE_UNSET   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_ROUTERINFORMATION_TLVS_TLV_SEGMENTROUTINGSIDLABELRANGE_TLVS_TLV_STATE_TYPE_UNKNOWN OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType = 1
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_ROUTERINFORMATION_TLVS_TLV_SEGMENTROUTINGSIDLABELRANGE_TLVS_TLV_STATE_TYPE_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_ROUTERINFORMATION_TLVS_TLV_SEGMENTROUTINGSIDLABELRANGE_TLVS_TLV_STATE_TYPE_UNKNOWN",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_ROUTERINFORMATION_TLVS_TLV_SEGMENTROUTINGSIDLABELRANGE_TLVS_TLV_STATE_TYPE_UNSET":   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_ROUTERINFORMATION_TLVS_TLV_SEGMENTROUTINGSIDLABELRANGE_TLVS_TLV_STATE_TYPE_UNKNOWN": 1,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[106].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[106]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{106}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType represents an enumerated type generated for the YANG enumerated type union.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_ROUTERINFORMATION_TLVS_TLV_STATE_TYPE_UNSET   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_ROUTERINFORMATION_TLVS_TLV_STATE_TYPE_UNKNOWN OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType = 1
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_ROUTERINFORMATION_TLVS_TLV_STATE_TYPE_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_ROUTERINFORMATION_TLVS_TLV_STATE_TYPE_UNKNOWN",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_ROUTERINFORMATION_TLVS_TLV_STATE_TYPE_UNSET":   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_ROUTERINFORMATION_TLVS_TLV_STATE_TYPE_UNKNOWN": 1,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[107].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[107]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{107}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType represents an enumerated type generated for the YANG enumerated type union.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_TRAFFICENGINEERING_TLVS_TLV_LINK_SUBTLVS_SUBTLV_STATE_TYPE_UNSET   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_TRAFFICENGINEERING_TLVS_TLV_LINK_SUBTLVS_SUBTLV_STATE_TYPE_UNKNOWN OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType = 1
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_TRAFFICENGINEERING_TLVS_TLV_LINK_SUBTLVS_SUBTLV_STATE_TYPE_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_TRAFFICENGINEERING_TLVS_TLV_LINK_SUBTLVS_SUBTLV_STATE_TYPE_UNKNOWN",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_TRAFFICENGINEERING_TLVS_TLV_LINK_SUBTLVS_SUBTLV_STATE_TYPE_UNSET":   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_TRAFFICENGINEERING_TLVS_TLV_LINK_SUBTLVS_SUBTLV_STATE_TYPE_UNKNOWN": 1,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[108].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[108]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{108}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType represents an enumerated type generated for the YANG enumerated type union.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_TRAFFICENGINEERING_TLVS_TLV_NODEATTRIBUTE_SUBTLVS_SUBTLV_STATE_TYPE_UNSET   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_TRAFFICENGINEERING_TLVS_TLV_NODEATTRIBUTE_SUBTLVS_SUBTLV_STATE_TYPE_UNKNOWN OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType = 1
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_TRAFFICENGINEERING_TLVS_TLV_NODEATTRIBUTE_SUBTLVS_SUBTLV_STATE_TYPE_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_TRAFFICENGINEERING_TLVS_TLV_NODEATTRIBUTE_SUBTLVS_SUBTLV_STATE_TYPE_UNKNOWN",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_TRAFFICENGINEERING_TLVS_TLV_NODEATTRIBUTE_SUBTLVS_SUBTLV_STATE_TYPE_UNSET":   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_PROTOCOLS_PROTOCOL_OSPFV2_AREAS_AREA_LSDB_LSATYPES_LSATYPE_LSAS_LSA_OPAQUELSA_TRAFFICENGINEERING_TLVS_TLV_NODEATTRIBUTE_SUBTLVS_SUBTLV_STATE_TYPE_UNKNOWN": 1,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[109].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[109]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{109}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue represents an enumerated type generated for the YANG enumerated type sr-sid-type.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_CANDIDATEPATHS_CANDIDATEPATH_SEGMENTLISTS_SEGMENTLIST_SIDS_SID_STATE_VALUE_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[110].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[110]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{110}
}

// OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid represents an enumerated type generated for the YANG enumerated type sr-sid-type.
type OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid int32

const (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_UNSET                   OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid = 0
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_IPV4_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid = 1
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_ROUTER_ALERT            OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid = 2
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_IPV6_EXPLICIT_NULL      OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid = 3
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_IMPLICIT_NULL           OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid = 4
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_ENTROPY_LABEL_INDICATOR OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid = 8
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid_OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_NO_LABEL                OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid = 9
)

// Enum value maps for OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid.
var (
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid_name = map[int32]string{
		0: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_UNSET",
		1: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_ROUTER_ALERT",
		3: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_IMPLICIT_NULL",
		8: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_NO_LABEL",
	}
	OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_UNSET":                   0,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_ROUTER_ALERT":            2,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_IMPLICIT_NULL":           4,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGNETWORKINSTANCE_NETWORKINSTANCES_NETWORKINSTANCE_SEGMENTROUTING_TEPOLICIES_TEPOLICY_STATE_BSID_NO_LABEL":                9,
	}
)

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid) Enum() *OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid {
	p := new(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[111].Descriptor()
}

func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[111]
}

func (x OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid.Descriptor instead.
func (OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{111}
}

// OpenconfigNetworkInstanceTypesENCAPSULATION represents an enumerated type generated for the YANG identity ENCAPSULATION.
type OpenconfigNetworkInstanceTypesENCAPSULATION int32

const (
	OpenconfigNetworkInstanceTypesENCAPSULATION_OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_UNSET OpenconfigNetworkInstanceTypesENCAPSULATION = 0
	OpenconfigNetworkInstanceTypesENCAPSULATION_OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_MPLS  OpenconfigNetworkInstanceTypesENCAPSULATION = 365922551
	OpenconfigNetworkInstanceTypesENCAPSULATION_OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_VXLAN OpenconfigNetworkInstanceTypesENCAPSULATION = 518286338
)

// Enum value maps for OpenconfigNetworkInstanceTypesENCAPSULATION.
var (
	OpenconfigNetworkInstanceTypesENCAPSULATION_name = map[int32]string{
		0:         "OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_UNSET",
		365922551: "OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_MPLS",
		518286338: "OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_VXLAN",
	}
	OpenconfigNetworkInstanceTypesENCAPSULATION_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_UNSET": 0,
		"OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_MPLS":  365922551,
		"OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_VXLAN": 518286338,
	}
)

func (x OpenconfigNetworkInstanceTypesENCAPSULATION) Enum() *OpenconfigNetworkInstanceTypesENCAPSULATION {
	p := new(OpenconfigNetworkInstanceTypesENCAPSULATION)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceTypesENCAPSULATION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceTypesENCAPSULATION) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[112].Descriptor()
}

func (OpenconfigNetworkInstanceTypesENCAPSULATION) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[112]
}

func (x OpenconfigNetworkInstanceTypesENCAPSULATION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceTypesENCAPSULATION.Descriptor instead.
func (OpenconfigNetworkInstanceTypesENCAPSULATION) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{112}
}

// OpenconfigNetworkInstanceTypesENDPOINTTYPE represents an enumerated type generated for the YANG identity ENDPOINT_TYPE.
type OpenconfigNetworkInstanceTypesENDPOINTTYPE int32

const (
	OpenconfigNetworkInstanceTypesENDPOINTTYPE_OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_UNSET  OpenconfigNetworkInstanceTypesENDPOINTTYPE = 0
	OpenconfigNetworkInstanceTypesENDPOINTTYPE_OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_REMOTE OpenconfigNetworkInstanceTypesENDPOINTTYPE = 315230175
	OpenconfigNetworkInstanceTypesENDPOINTTYPE_OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_LOCAL  OpenconfigNetworkInstanceTypesENDPOINTTYPE = 473263274
)

// Enum value maps for OpenconfigNetworkInstanceTypesENDPOINTTYPE.
var (
	OpenconfigNetworkInstanceTypesENDPOINTTYPE_name = map[int32]string{
		0:         "OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_UNSET",
		315230175: "OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_REMOTE",
		473263274: "OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_LOCAL",
	}
	OpenconfigNetworkInstanceTypesENDPOINTTYPE_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_UNSET":  0,
		"OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_REMOTE": 315230175,
		"OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_LOCAL":  473263274,
	}
)

func (x OpenconfigNetworkInstanceTypesENDPOINTTYPE) Enum() *OpenconfigNetworkInstanceTypesENDPOINTTYPE {
	p := new(OpenconfigNetworkInstanceTypesENDPOINTTYPE)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceTypesENDPOINTTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceTypesENDPOINTTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[113].Descriptor()
}

func (OpenconfigNetworkInstanceTypesENDPOINTTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[113]
}

func (x OpenconfigNetworkInstanceTypesENDPOINTTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceTypesENDPOINTTYPE.Descriptor instead.
func (OpenconfigNetworkInstanceTypesENDPOINTTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{113}
}

// OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE represents an enumerated type generated for the YANG identity LABEL_ALLOCATION_MODE.
type OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE int32

const (
	OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE_OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_UNSET          OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE = 0
	OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE_OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_PER_NEXTHOP    OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE = 42305384
	OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE_OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_PER_PREFIX     OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE = 147569928
	OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE_OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_INSTANCE_LABEL OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE = 260096202
)

// Enum value maps for OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE.
var (
	OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE_name = map[int32]string{
		0:         "OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_UNSET",
		42305384:  "OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_PER_NEXTHOP",
		147569928: "OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_PER_PREFIX",
		260096202: "OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_INSTANCE_LABEL",
	}
	OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_UNSET":          0,
		"OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_PER_NEXTHOP":    42305384,
		"OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_PER_PREFIX":     147569928,
		"OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_INSTANCE_LABEL": 260096202,
	}
)

func (x OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE) Enum() *OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE {
	p := new(OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[114].Descriptor()
}

func (OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[114]
}

func (x OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE.Descriptor instead.
func (OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{114}
}

// OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE represents an enumerated type generated for the YANG identity NETWORK_INSTANCE_TYPE.
type OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE int32

const (
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_UNSET            OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE = 0
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2P2P            OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE = 49773504
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2VSI            OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE = 65578160
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L3VRF            OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE = 161283259
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2L3             OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE = 409599277
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_DEFAULT_INSTANCE OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE = 476488119
)

// Enum value maps for OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE.
var (
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_name = map[int32]string{
		0:         "OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_UNSET",
		49773504:  "OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2P2P",
		65578160:  "OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2VSI",
		161283259: "OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L3VRF",
		409599277: "OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2L3",
		476488119: "OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_DEFAULT_INSTANCE",
	}
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_UNSET":            0,
		"OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2P2P":            49773504,
		"OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2VSI":            65578160,
		"OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L3VRF":            161283259,
		"OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2L3":             409599277,
		"OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_DEFAULT_INSTANCE": 476488119,
	}
)

func (x OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE) Enum() *OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE {
	p := new(OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[115].Descriptor()
}

func (OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[115]
}

func (x OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE.Descriptor instead.
func (OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{115}
}

// OpenconfigOpenflowFailureMode represents an enumerated type generated for the YANG enumerated type failure-mode.
type OpenconfigOpenflowFailureMode int32

const (
	OpenconfigOpenflowFailureMode_OPENCONFIGOPENFLOWFAILUREMODE_UNSET      OpenconfigOpenflowFailureMode = 0
	OpenconfigOpenflowFailureMode_OPENCONFIGOPENFLOWFAILUREMODE_SECURE     OpenconfigOpenflowFailureMode = 1
	OpenconfigOpenflowFailureMode_OPENCONFIGOPENFLOWFAILUREMODE_STANDALONE OpenconfigOpenflowFailureMode = 2
)

// Enum value maps for OpenconfigOpenflowFailureMode.
var (
	OpenconfigOpenflowFailureMode_name = map[int32]string{
		0: "OPENCONFIGOPENFLOWFAILUREMODE_UNSET",
		1: "OPENCONFIGOPENFLOWFAILUREMODE_SECURE",
		2: "OPENCONFIGOPENFLOWFAILUREMODE_STANDALONE",
	}
	OpenconfigOpenflowFailureMode_value = map[string]int32{
		"OPENCONFIGOPENFLOWFAILUREMODE_UNSET":      0,
		"OPENCONFIGOPENFLOWFAILUREMODE_SECURE":     1,
		"OPENCONFIGOPENFLOWFAILUREMODE_STANDALONE": 2,
	}
)

func (x OpenconfigOpenflowFailureMode) Enum() *OpenconfigOpenflowFailureMode {
	p := new(OpenconfigOpenflowFailureMode)
	*p = x
	return p
}

func (x OpenconfigOpenflowFailureMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOpenflowFailureMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[116].Descriptor()
}

func (OpenconfigOpenflowFailureMode) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[116]
}

func (x OpenconfigOpenflowFailureMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOpenflowFailureMode.Descriptor instead.
func (OpenconfigOpenflowFailureMode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{116}
}

// OpenconfigOpenflowTransport represents an enumerated type generated for the YANG enumerated type transport.
type OpenconfigOpenflowTransport int32

const (
	OpenconfigOpenflowTransport_OPENCONFIGOPENFLOWTRANSPORT_TCP OpenconfigOpenflowTransport = 0
	OpenconfigOpenflowTransport_OPENCONFIGOPENFLOWTRANSPORT_TLS OpenconfigOpenflowTransport = 2
)

// Enum value maps for OpenconfigOpenflowTransport.
var (
	OpenconfigOpenflowTransport_name = map[int32]string{
		0: "OPENCONFIGOPENFLOWTRANSPORT_TCP",
		2: "OPENCONFIGOPENFLOWTRANSPORT_TLS",
	}
	OpenconfigOpenflowTransport_value = map[string]int32{
		"OPENCONFIGOPENFLOWTRANSPORT_TCP": 0,
		"OPENCONFIGOPENFLOWTRANSPORT_TLS": 2,
	}
)

func (x OpenconfigOpenflowTransport) Enum() *OpenconfigOpenflowTransport {
	p := new(OpenconfigOpenflowTransport)
	*p = x
	return p
}

func (x OpenconfigOpenflowTransport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOpenflowTransport) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[117].Descriptor()
}

func (OpenconfigOpenflowTransport) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[117]
}

func (x OpenconfigOpenflowTransport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOpenflowTransport.Descriptor instead.
func (OpenconfigOpenflowTransport) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{117}
}

// OpenconfigOpticalAmplifierFIBERTYPEPROFILE represents an enumerated type generated for the YANG identity FIBER_TYPE_PROFILE.
type OpenconfigOpticalAmplifierFIBERTYPEPROFILE int32

const (
	OpenconfigOpticalAmplifierFIBERTYPEPROFILE_OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_UNSET OpenconfigOpticalAmplifierFIBERTYPEPROFILE = 0
	OpenconfigOpticalAmplifierFIBERTYPEPROFILE_OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_TWRS  OpenconfigOpticalAmplifierFIBERTYPEPROFILE = 28856180
	OpenconfigOpticalAmplifierFIBERTYPEPROFILE_OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_SSMF  OpenconfigOpticalAmplifierFIBERTYPEPROFILE = 36171489
	OpenconfigOpticalAmplifierFIBERTYPEPROFILE_OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_LEAF  OpenconfigOpticalAmplifierFIBERTYPEPROFILE = 102938290
	OpenconfigOpticalAmplifierFIBERTYPEPROFILE_OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_DSF   OpenconfigOpticalAmplifierFIBERTYPEPROFILE = 171548757
	OpenconfigOpticalAmplifierFIBERTYPEPROFILE_OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_TWC   OpenconfigOpticalAmplifierFIBERTYPEPROFILE = 241322124
)

// Enum value maps for OpenconfigOpticalAmplifierFIBERTYPEPROFILE.
var (
	OpenconfigOpticalAmplifierFIBERTYPEPROFILE_name = map[int32]string{
		0:         "OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_UNSET",
		28856180:  "OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_TWRS",
		36171489:  "OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_SSMF",
		102938290: "OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_LEAF",
		171548757: "OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_DSF",
		241322124: "OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_TWC",
	}
	OpenconfigOpticalAmplifierFIBERTYPEPROFILE_value = map[string]int32{
		"OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_UNSET": 0,
		"OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_TWRS":  28856180,
		"OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_SSMF":  36171489,
		"OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_LEAF":  102938290,
		"OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_DSF":   171548757,
		"OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_TWC":   241322124,
	}
)

func (x OpenconfigOpticalAmplifierFIBERTYPEPROFILE) Enum() *OpenconfigOpticalAmplifierFIBERTYPEPROFILE {
	p := new(OpenconfigOpticalAmplifierFIBERTYPEPROFILE)
	*p = x
	return p
}

func (x OpenconfigOpticalAmplifierFIBERTYPEPROFILE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOpticalAmplifierFIBERTYPEPROFILE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[118].Descriptor()
}

func (OpenconfigOpticalAmplifierFIBERTYPEPROFILE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[118]
}

func (x OpenconfigOpticalAmplifierFIBERTYPEPROFILE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOpticalAmplifierFIBERTYPEPROFILE.Descriptor instead.
func (OpenconfigOpticalAmplifierFIBERTYPEPROFILE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{118}
}

// OpenconfigOpticalAmplifierGAINRANGE represents an enumerated type generated for the YANG identity GAIN_RANGE.
type OpenconfigOpticalAmplifierGAINRANGE int32

const (
	OpenconfigOpticalAmplifierGAINRANGE_OPENCONFIGOPTICALAMPLIFIERGAINRANGE_UNSET            OpenconfigOpticalAmplifierGAINRANGE = 0
	OpenconfigOpticalAmplifierGAINRANGE_OPENCONFIGOPTICALAMPLIFIERGAINRANGE_MID_GAIN_RANGE   OpenconfigOpticalAmplifierGAINRANGE = 175270936
	OpenconfigOpticalAmplifierGAINRANGE_OPENCONFIGOPTICALAMPLIFIERGAINRANGE_HIGH_GAIN_RANGE  OpenconfigOpticalAmplifierGAINRANGE = 240520630
	OpenconfigOpticalAmplifierGAINRANGE_OPENCONFIGOPTICALAMPLIFIERGAINRANGE_LOW_GAIN_RANGE   OpenconfigOpticalAmplifierGAINRANGE = 292888456
	OpenconfigOpticalAmplifierGAINRANGE_OPENCONFIGOPTICALAMPLIFIERGAINRANGE_FIXED_GAIN_RANGE OpenconfigOpticalAmplifierGAINRANGE = 500021236
)

// Enum value maps for OpenconfigOpticalAmplifierGAINRANGE.
var (
	OpenconfigOpticalAmplifierGAINRANGE_name = map[int32]string{
		0:         "OPENCONFIGOPTICALAMPLIFIERGAINRANGE_UNSET",
		175270936: "OPENCONFIGOPTICALAMPLIFIERGAINRANGE_MID_GAIN_RANGE",
		240520630: "OPENCONFIGOPTICALAMPLIFIERGAINRANGE_HIGH_GAIN_RANGE",
		292888456: "OPENCONFIGOPTICALAMPLIFIERGAINRANGE_LOW_GAIN_RANGE",
		500021236: "OPENCONFIGOPTICALAMPLIFIERGAINRANGE_FIXED_GAIN_RANGE",
	}
	OpenconfigOpticalAmplifierGAINRANGE_value = map[string]int32{
		"OPENCONFIGOPTICALAMPLIFIERGAINRANGE_UNSET":            0,
		"OPENCONFIGOPTICALAMPLIFIERGAINRANGE_MID_GAIN_RANGE":   175270936,
		"OPENCONFIGOPTICALAMPLIFIERGAINRANGE_HIGH_GAIN_RANGE":  240520630,
		"OPENCONFIGOPTICALAMPLIFIERGAINRANGE_LOW_GAIN_RANGE":   292888456,
		"OPENCONFIGOPTICALAMPLIFIERGAINRANGE_FIXED_GAIN_RANGE": 500021236,
	}
)

func (x OpenconfigOpticalAmplifierGAINRANGE) Enum() *OpenconfigOpticalAmplifierGAINRANGE {
	p := new(OpenconfigOpticalAmplifierGAINRANGE)
	*p = x
	return p
}

func (x OpenconfigOpticalAmplifierGAINRANGE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOpticalAmplifierGAINRANGE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[119].Descriptor()
}

func (OpenconfigOpticalAmplifierGAINRANGE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[119]
}

func (x OpenconfigOpticalAmplifierGAINRANGE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOpticalAmplifierGAINRANGE.Descriptor instead.
func (OpenconfigOpticalAmplifierGAINRANGE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{119}
}

// OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE represents an enumerated type generated for the YANG identity OPTICAL_AMPLIFIER_MODE.
type OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE int32

const (
	OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE_OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERMODE_UNSET          OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE = 0
	OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE_OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERMODE_CONSTANT_POWER OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE = 58375877
	OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE_OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERMODE_DYNAMIC_GAIN   OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE = 65315476
	OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE_OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERMODE_CONSTANT_GAIN  OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE = 471033275
)

// Enum value maps for OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE.
var (
	OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE_name = map[int32]string{
		0:         "OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERMODE_UNSET",
		58375877:  "OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERMODE_CONSTANT_POWER",
		65315476:  "OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERMODE_DYNAMIC_GAIN",
		471033275: "OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERMODE_CONSTANT_GAIN",
	}
	OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE_value = map[string]int32{
		"OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERMODE_UNSET":          0,
		"OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERMODE_CONSTANT_POWER": 58375877,
		"OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERMODE_DYNAMIC_GAIN":   65315476,
		"OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERMODE_CONSTANT_GAIN":  471033275,
	}
)

func (x OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE) Enum() *OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE {
	p := new(OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE)
	*p = x
	return p
}

func (x OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[120].Descriptor()
}

func (OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[120]
}

func (x OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE.Descriptor instead.
func (OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{120}
}

// OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE represents an enumerated type generated for the YANG identity OPTICAL_AMPLIFIER_TYPE.
type OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE int32

const (
	OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE_OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_UNSET          OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE = 0
	OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE_OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_EDFA           OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE = 119400506
	OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE_OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_BACKWARD_RAMAN OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE = 185961505
	OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE_OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_HYBRID         OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE = 517524076
	OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE_OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_FORWARD_RAMAN  OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE = 526622329
)

// Enum value maps for OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE.
var (
	OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE_name = map[int32]string{
		0:         "OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_UNSET",
		119400506: "OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_EDFA",
		185961505: "OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_BACKWARD_RAMAN",
		517524076: "OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_HYBRID",
		526622329: "OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_FORWARD_RAMAN",
	}
	OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE_value = map[string]int32{
		"OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_UNSET":          0,
		"OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_EDFA":           119400506,
		"OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_BACKWARD_RAMAN": 185961505,
		"OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_HYBRID":         517524076,
		"OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_FORWARD_RAMAN":  526622329,
	}
)

func (x OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE) Enum() *OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE {
	p := new(OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE)
	*p = x
	return p
}

func (x OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[121].Descriptor()
}

func (OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[121]
}

func (x OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE.Descriptor instead.
func (OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{121}
}

// OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE represents an enumerated type generated for the YANG identity OPTICAL_ATTENUATOR_MODE.
type OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE int32

const (
	OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE_OPENCONFIGOPTICALATTENUATOROPTICALATTENUATORMODE_UNSET                OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE = 0
	OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE_OPENCONFIGOPTICALATTENUATOROPTICALATTENUATORMODE_CONSTANT_ATTENUATION OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE = 174730558
	OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE_OPENCONFIGOPTICALATTENUATOROPTICALATTENUATORMODE_CONSTANT_POWER       OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE = 300714897
)

// Enum value maps for OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE.
var (
	OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE_name = map[int32]string{
		0:         "OPENCONFIGOPTICALATTENUATOROPTICALATTENUATORMODE_UNSET",
		174730558: "OPENCONFIGOPTICALATTENUATOROPTICALATTENUATORMODE_CONSTANT_ATTENUATION",
		300714897: "OPENCONFIGOPTICALATTENUATOROPTICALATTENUATORMODE_CONSTANT_POWER",
	}
	OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE_value = map[string]int32{
		"OPENCONFIGOPTICALATTENUATOROPTICALATTENUATORMODE_UNSET":                0,
		"OPENCONFIGOPTICALATTENUATOROPTICALATTENUATORMODE_CONSTANT_ATTENUATION": 174730558,
		"OPENCONFIGOPTICALATTENUATOROPTICALATTENUATORMODE_CONSTANT_POWER":       300714897,
	}
)

func (x OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE) Enum() *OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE {
	p := new(OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE)
	*p = x
	return p
}

func (x OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[122].Descriptor()
}

func (OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[122]
}

func (x OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE.Descriptor instead.
func (OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{122}
}

// OpenconfigOspfTypesGRACELSATLVTYPES represents an enumerated type generated for the YANG identity GRACE_LSA_TLV_TYPES.
type OpenconfigOspfTypesGRACELSATLVTYPES int32

const (
	OpenconfigOspfTypesGRACELSATLVTYPES_OPENCONFIGOSPFTYPESGRACELSATLVTYPES_UNSET                      OpenconfigOspfTypesGRACELSATLVTYPES = 0
	OpenconfigOspfTypesGRACELSATLVTYPES_OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_RESTART_REASON       OpenconfigOspfTypesGRACELSATLVTYPES = 71890108
	OpenconfigOspfTypesGRACELSATLVTYPES_OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_IP_INTERFACE_ADDRESS OpenconfigOspfTypesGRACELSATLVTYPES = 152130218
	OpenconfigOspfTypesGRACELSATLVTYPES_OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_PERIOD               OpenconfigOspfTypesGRACELSATLVTYPES = 243906855
)

// Enum value maps for OpenconfigOspfTypesGRACELSATLVTYPES.
var (
	OpenconfigOspfTypesGRACELSATLVTYPES_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESGRACELSATLVTYPES_UNSET",
		71890108:  "OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_RESTART_REASON",
		152130218: "OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_IP_INTERFACE_ADDRESS",
		243906855: "OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_PERIOD",
	}
	OpenconfigOspfTypesGRACELSATLVTYPES_value = map[string]int32{
		"OPENCONFIGOSPFTYPESGRACELSATLVTYPES_UNSET":                      0,
		"OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_RESTART_REASON":       71890108,
		"OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_IP_INTERFACE_ADDRESS": 152130218,
		"OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_PERIOD":               243906855,
	}
)

func (x OpenconfigOspfTypesGRACELSATLVTYPES) Enum() *OpenconfigOspfTypesGRACELSATLVTYPES {
	p := new(OpenconfigOspfTypesGRACELSATLVTYPES)
	*p = x
	return p
}

func (x OpenconfigOspfTypesGRACELSATLVTYPES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesGRACELSATLVTYPES) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[123].Descriptor()
}

func (OpenconfigOspfTypesGRACELSATLVTYPES) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[123]
}

func (x OpenconfigOspfTypesGRACELSATLVTYPES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesGRACELSATLVTYPES.Descriptor instead.
func (OpenconfigOspfTypesGRACELSATLVTYPES) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{123}
}

// OpenconfigOspfTypesMAXMETRICINCLUDE represents an enumerated type generated for the YANG identity MAX_METRIC_INCLUDE.
type OpenconfigOspfTypesMAXMETRICINCLUDE int32

const (
	OpenconfigOspfTypesMAXMETRICINCLUDE_OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_UNSET                             OpenconfigOspfTypesMAXMETRICINCLUDE = 0
	OpenconfigOspfTypesMAXMETRICINCLUDE_OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_MAX_METRIC_INCLUDE_STUB           OpenconfigOspfTypesMAXMETRICINCLUDE = 49035700
	OpenconfigOspfTypesMAXMETRICINCLUDE_OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_MAX_METRIC_INCLUDE_TYPE2_EXTERNAL OpenconfigOspfTypesMAXMETRICINCLUDE = 174031936
)

// Enum value maps for OpenconfigOspfTypesMAXMETRICINCLUDE.
var (
	OpenconfigOspfTypesMAXMETRICINCLUDE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_UNSET",
		49035700:  "OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_MAX_METRIC_INCLUDE_STUB",
		174031936: "OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_MAX_METRIC_INCLUDE_TYPE2_EXTERNAL",
	}
	OpenconfigOspfTypesMAXMETRICINCLUDE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_UNSET":                             0,
		"OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_MAX_METRIC_INCLUDE_STUB":           49035700,
		"OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_MAX_METRIC_INCLUDE_TYPE2_EXTERNAL": 174031936,
	}
)

func (x OpenconfigOspfTypesMAXMETRICINCLUDE) Enum() *OpenconfigOspfTypesMAXMETRICINCLUDE {
	p := new(OpenconfigOspfTypesMAXMETRICINCLUDE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesMAXMETRICINCLUDE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesMAXMETRICINCLUDE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[124].Descriptor()
}

func (OpenconfigOspfTypesMAXMETRICINCLUDE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[124]
}

func (x OpenconfigOspfTypesMAXMETRICINCLUDE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesMAXMETRICINCLUDE.Descriptor instead.
func (OpenconfigOspfTypesMAXMETRICINCLUDE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{124}
}

// OpenconfigOspfTypesMAXMETRICTRIGGER represents an enumerated type generated for the YANG identity MAX_METRIC_TRIGGER.
type OpenconfigOspfTypesMAXMETRICTRIGGER int32

const (
	OpenconfigOspfTypesMAXMETRICTRIGGER_OPENCONFIGOSPFTYPESMAXMETRICTRIGGER_UNSET                     OpenconfigOspfTypesMAXMETRICTRIGGER = 0
	OpenconfigOspfTypesMAXMETRICTRIGGER_OPENCONFIGOSPFTYPESMAXMETRICTRIGGER_MAX_METRIC_ON_SYSTEM_BOOT OpenconfigOspfTypesMAXMETRICTRIGGER = 428003983
)

// Enum value maps for OpenconfigOspfTypesMAXMETRICTRIGGER.
var (
	OpenconfigOspfTypesMAXMETRICTRIGGER_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESMAXMETRICTRIGGER_UNSET",
		428003983: "OPENCONFIGOSPFTYPESMAXMETRICTRIGGER_MAX_METRIC_ON_SYSTEM_BOOT",
	}
	OpenconfigOspfTypesMAXMETRICTRIGGER_value = map[string]int32{
		"OPENCONFIGOSPFTYPESMAXMETRICTRIGGER_UNSET":                     0,
		"OPENCONFIGOSPFTYPESMAXMETRICTRIGGER_MAX_METRIC_ON_SYSTEM_BOOT": 428003983,
	}
)

func (x OpenconfigOspfTypesMAXMETRICTRIGGER) Enum() *OpenconfigOspfTypesMAXMETRICTRIGGER {
	p := new(OpenconfigOspfTypesMAXMETRICTRIGGER)
	*p = x
	return p
}

func (x OpenconfigOspfTypesMAXMETRICTRIGGER) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesMAXMETRICTRIGGER) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[125].Descriptor()
}

func (OpenconfigOspfTypesMAXMETRICTRIGGER) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[125]
}

func (x OpenconfigOspfTypesMAXMETRICTRIGGER) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesMAXMETRICTRIGGER.Descriptor instead.
func (OpenconfigOspfTypesMAXMETRICTRIGGER) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{125}
}

// OpenconfigOspfTypesOSPFLSATYPE represents an enumerated type generated for the YANG identity OSPF_LSA_TYPE.
type OpenconfigOspfTypesOSPFLSATYPE int32

const (
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_UNSET                        OpenconfigOspfTypesOSPFLSATYPE = 0
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_SUMMARY_ASBR_LSA             OpenconfigOspfTypesOSPFLSATYPE = 125037213
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_LINK_SCOPE_OPAQUE_LSA OpenconfigOspfTypesOSPFLSATYPE = 137304350
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_AS_SCOPE_OPAQUE_LSA   OpenconfigOspfTypesOSPFLSATYPE = 186883594
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_SUMMARY_IP_NETWORK_LSA       OpenconfigOspfTypesOSPFLSATYPE = 188591841
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_AREA_SCOPE_OPAQUE_LSA OpenconfigOspfTypesOSPFLSATYPE = 215291727
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_ROUTER_LSA                   OpenconfigOspfTypesOSPFLSATYPE = 260046265
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_NETWORK_LSA                  OpenconfigOspfTypesOSPFLSATYPE = 350986634
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_NSSA_AS_EXTERNAL_LSA         OpenconfigOspfTypesOSPFLSATYPE = 444724228
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_AS_EXTERNAL_LSA              OpenconfigOspfTypesOSPFLSATYPE = 492019634
)

// Enum value maps for OpenconfigOspfTypesOSPFLSATYPE.
var (
	OpenconfigOspfTypesOSPFLSATYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFLSATYPE_UNSET",
		125037213: "OPENCONFIGOSPFTYPESOSPFLSATYPE_SUMMARY_ASBR_LSA",
		137304350: "OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_LINK_SCOPE_OPAQUE_LSA",
		186883594: "OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_AS_SCOPE_OPAQUE_LSA",
		188591841: "OPENCONFIGOSPFTYPESOSPFLSATYPE_SUMMARY_IP_NETWORK_LSA",
		215291727: "OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_AREA_SCOPE_OPAQUE_LSA",
		260046265: "OPENCONFIGOSPFTYPESOSPFLSATYPE_ROUTER_LSA",
		350986634: "OPENCONFIGOSPFTYPESOSPFLSATYPE_NETWORK_LSA",
		444724228: "OPENCONFIGOSPFTYPESOSPFLSATYPE_NSSA_AS_EXTERNAL_LSA",
		492019634: "OPENCONFIGOSPFTYPESOSPFLSATYPE_AS_EXTERNAL_LSA",
	}
	OpenconfigOspfTypesOSPFLSATYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_UNSET":                        0,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_SUMMARY_ASBR_LSA":             125037213,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_LINK_SCOPE_OPAQUE_LSA": 137304350,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_AS_SCOPE_OPAQUE_LSA":   186883594,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_SUMMARY_IP_NETWORK_LSA":       188591841,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_AREA_SCOPE_OPAQUE_LSA": 215291727,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_ROUTER_LSA":                   260046265,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_NETWORK_LSA":                  350986634,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_NSSA_AS_EXTERNAL_LSA":         444724228,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_AS_EXTERNAL_LSA":              492019634,
	}
)

func (x OpenconfigOspfTypesOSPFLSATYPE) Enum() *OpenconfigOspfTypesOSPFLSATYPE {
	p := new(OpenconfigOspfTypesOSPFLSATYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFLSATYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFLSATYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[126].Descriptor()
}

func (OpenconfigOspfTypesOSPFLSATYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[126]
}

func (x OpenconfigOspfTypesOSPFLSATYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFLSATYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFLSATYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{126}
}

// OpenconfigOspfTypesOSPFNEIGHBORSTATE represents an enumerated type generated for the YANG identity OSPF_NEIGHBOR_STATE.
type OpenconfigOspfTypesOSPFNEIGHBORSTATE int32

const (
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_UNSET    OpenconfigOspfTypesOSPFNEIGHBORSTATE = 0
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_INIT     OpenconfigOspfTypesOSPFNEIGHBORSTATE = 37357902
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_FULL     OpenconfigOspfTypesOSPFNEIGHBORSTATE = 66779439
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_ATTEMPT  OpenconfigOspfTypesOSPFNEIGHBORSTATE = 115294523
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_TWO_WAY  OpenconfigOspfTypesOSPFNEIGHBORSTATE = 143682058
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_DOWN     OpenconfigOspfTypesOSPFNEIGHBORSTATE = 324638956
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_LOADING  OpenconfigOspfTypesOSPFNEIGHBORSTATE = 380579724
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_EXCHANGE OpenconfigOspfTypesOSPFNEIGHBORSTATE = 384166631
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_EXSTART  OpenconfigOspfTypesOSPFNEIGHBORSTATE = 428183021
)

// Enum value maps for OpenconfigOspfTypesOSPFNEIGHBORSTATE.
var (
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_UNSET",
		37357902:  "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_INIT",
		66779439:  "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_FULL",
		115294523: "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_ATTEMPT",
		143682058: "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_TWO_WAY",
		324638956: "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_DOWN",
		380579724: "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_LOADING",
		384166631: "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_EXCHANGE",
		428183021: "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_EXSTART",
	}
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_UNSET":    0,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_INIT":     37357902,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_FULL":     66779439,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_ATTEMPT":  115294523,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_TWO_WAY":  143682058,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_DOWN":     324638956,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_LOADING":  380579724,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_EXCHANGE": 384166631,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_EXSTART":  428183021,
	}
)

func (x OpenconfigOspfTypesOSPFNEIGHBORSTATE) Enum() *OpenconfigOspfTypesOSPFNEIGHBORSTATE {
	p := new(OpenconfigOspfTypesOSPFNEIGHBORSTATE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFNEIGHBORSTATE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFNEIGHBORSTATE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[127].Descriptor()
}

func (OpenconfigOspfTypesOSPFNEIGHBORSTATE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[127]
}

func (x OpenconfigOspfTypesOSPFNEIGHBORSTATE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFNEIGHBORSTATE.Descriptor instead.
func (OpenconfigOspfTypesOSPFNEIGHBORSTATE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{127}
}

// OpenconfigOspfTypesOSPFNETWORKTYPE represents an enumerated type generated for the YANG identity OSPF_NETWORK_TYPE.
type OpenconfigOspfTypesOSPFNETWORKTYPE int32

const (
	OpenconfigOspfTypesOSPFNETWORKTYPE_OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_UNSET                  OpenconfigOspfTypesOSPFNETWORKTYPE = 0
	OpenconfigOspfTypesOSPFNETWORKTYPE_OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_POINT_TO_POINT_NETWORK OpenconfigOspfTypesOSPFNETWORKTYPE = 33508311
	OpenconfigOspfTypesOSPFNETWORKTYPE_OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_BROADCAST_NETWORK      OpenconfigOspfTypesOSPFNETWORKTYPE = 330434029
	OpenconfigOspfTypesOSPFNETWORKTYPE_OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_NON_BROADCAST_NETWORK  OpenconfigOspfTypesOSPFNETWORKTYPE = 449794969
)

// Enum value maps for OpenconfigOspfTypesOSPFNETWORKTYPE.
var (
	OpenconfigOspfTypesOSPFNETWORKTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_UNSET",
		33508311:  "OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_POINT_TO_POINT_NETWORK",
		330434029: "OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_BROADCAST_NETWORK",
		449794969: "OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_NON_BROADCAST_NETWORK",
	}
	OpenconfigOspfTypesOSPFNETWORKTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_UNSET":                  0,
		"OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_POINT_TO_POINT_NETWORK": 33508311,
		"OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_BROADCAST_NETWORK":      330434029,
		"OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_NON_BROADCAST_NETWORK":  449794969,
	}
)

func (x OpenconfigOspfTypesOSPFNETWORKTYPE) Enum() *OpenconfigOspfTypesOSPFNETWORKTYPE {
	p := new(OpenconfigOspfTypesOSPFNETWORKTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFNETWORKTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFNETWORKTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[128].Descriptor()
}

func (OpenconfigOspfTypesOSPFNETWORKTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[128]
}

func (x OpenconfigOspfTypesOSPFNETWORKTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFNETWORKTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFNETWORKTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{128}
}

// OpenconfigOspfTypesOSPFOPAQUELSATYPE represents an enumerated type generated for the YANG identity OSPF_OPAQUE_LSA_TYPE.
type OpenconfigOspfTypesOSPFOPAQUELSATYPE int32

const (
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_UNSET                  OpenconfigOspfTypesOSPFOPAQUELSATYPE = 0
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_OSPFV2_EXTENDED_PREFIX OpenconfigOspfTypesOSPFOPAQUELSATYPE = 19017104
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_GRACE_LSA              OpenconfigOspfTypesOSPFOPAQUELSATYPE = 196570736
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_TRAFFIC_ENGINEERING    OpenconfigOspfTypesOSPFOPAQUELSATYPE = 198655238
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_OSPFV2_EXTENDED_LINK   OpenconfigOspfTypesOSPFOPAQUELSATYPE = 213605388
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_ROUTER_INFORMATION     OpenconfigOspfTypesOSPFOPAQUELSATYPE = 246496211
)

// Enum value maps for OpenconfigOspfTypesOSPFOPAQUELSATYPE.
var (
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_UNSET",
		19017104:  "OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_OSPFV2_EXTENDED_PREFIX",
		196570736: "OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_GRACE_LSA",
		198655238: "OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_TRAFFIC_ENGINEERING",
		213605388: "OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_OSPFV2_EXTENDED_LINK",
		246496211: "OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_ROUTER_INFORMATION",
	}
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_UNSET":                  0,
		"OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_OSPFV2_EXTENDED_PREFIX": 19017104,
		"OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_GRACE_LSA":              196570736,
		"OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_TRAFFIC_ENGINEERING":    198655238,
		"OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_OSPFV2_EXTENDED_LINK":   213605388,
		"OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_ROUTER_INFORMATION":     246496211,
	}
)

func (x OpenconfigOspfTypesOSPFOPAQUELSATYPE) Enum() *OpenconfigOspfTypesOSPFOPAQUELSATYPE {
	p := new(OpenconfigOspfTypesOSPFOPAQUELSATYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFOPAQUELSATYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFOPAQUELSATYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[129].Descriptor()
}

func (OpenconfigOspfTypesOSPFOPAQUELSATYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[129]
}

func (x OpenconfigOspfTypesOSPFOPAQUELSATYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFOPAQUELSATYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFOPAQUELSATYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{129}
}

// OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES represents an enumerated type generated for the YANG identity OSPF_RI_SR_SID_LABEL_TLV_TYPES.
type OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES int32

const (
	OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES_OPENCONFIGOSPFTYPESOSPFRISRSIDLABELTLVTYPES_UNSET            OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES = 0
	OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES_OPENCONFIGOSPFTYPESOSPFRISRSIDLABELTLVTYPES_SR_SID_LABEL_TLV OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES = 411420284
)

// Enum value maps for OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES.
var (
	OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFRISRSIDLABELTLVTYPES_UNSET",
		411420284: "OPENCONFIGOSPFTYPESOSPFRISRSIDLABELTLVTYPES_SR_SID_LABEL_TLV",
	}
	OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFRISRSIDLABELTLVTYPES_UNSET":            0,
		"OPENCONFIGOSPFTYPESOSPFRISRSIDLABELTLVTYPES_SR_SID_LABEL_TLV": 411420284,
	}
)

func (x OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES) Enum() *OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES {
	p := new(OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[130].Descriptor()
}

func (OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[130]
}

func (x OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES.Descriptor instead.
func (OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{130}
}

// OpenconfigOspfTypesOSPFTELINKTLVTYPE represents an enumerated type generated for the YANG identity OSPF_TE_LINK_TLV_TYPE.
type OpenconfigOspfTypesOSPFTELINKTLVTYPE int32

const (
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_UNSET                                OpenconfigOspfTypesOSPFTELINKTLVTYPE = 0
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_ADMIN_GROUP                  OpenconfigOspfTypesOSPFTELINKTLVTYPE = 41688158
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_MAXIMUM_RESERVABLE_BANDWIDTH OpenconfigOspfTypesOSPFTELINKTLVTYPE = 81262405
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_UNRESERVED_BANDWIDTH         OpenconfigOspfTypesOSPFTELINKTLVTYPE = 237811802
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_METRIC                       OpenconfigOspfTypesOSPFTELINKTLVTYPE = 275089009
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_MAXIMUM_BANDWIDTH            OpenconfigOspfTypesOSPFTELINKTLVTYPE = 357259331
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_LOCAL_IP                     OpenconfigOspfTypesOSPFTELINKTLVTYPE = 399771326
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_ID                           OpenconfigOspfTypesOSPFTELINKTLVTYPE = 464176934
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_REMOTE_IP                    OpenconfigOspfTypesOSPFTELINKTLVTYPE = 469648989
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_TYPE                         OpenconfigOspfTypesOSPFTELINKTLVTYPE = 494048733
)

// Enum value maps for OpenconfigOspfTypesOSPFTELINKTLVTYPE.
var (
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_UNSET",
		41688158:  "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_ADMIN_GROUP",
		81262405:  "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_MAXIMUM_RESERVABLE_BANDWIDTH",
		237811802: "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_UNRESERVED_BANDWIDTH",
		275089009: "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_METRIC",
		357259331: "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_MAXIMUM_BANDWIDTH",
		399771326: "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_LOCAL_IP",
		464176934: "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_ID",
		469648989: "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_REMOTE_IP",
		494048733: "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_TYPE",
	}
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_UNSET":                                0,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_ADMIN_GROUP":                  41688158,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_MAXIMUM_RESERVABLE_BANDWIDTH": 81262405,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_UNRESERVED_BANDWIDTH":         237811802,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_METRIC":                       275089009,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_MAXIMUM_BANDWIDTH":            357259331,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_LOCAL_IP":                     399771326,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_ID":                           464176934,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_REMOTE_IP":                    469648989,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_TYPE":                         494048733,
	}
)

func (x OpenconfigOspfTypesOSPFTELINKTLVTYPE) Enum() *OpenconfigOspfTypesOSPFTELINKTLVTYPE {
	p := new(OpenconfigOspfTypesOSPFTELINKTLVTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFTELINKTLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFTELINKTLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[131].Descriptor()
}

func (OpenconfigOspfTypesOSPFTELINKTLVTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[131]
}

func (x OpenconfigOspfTypesOSPFTELINKTLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFTELINKTLVTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFTELINKTLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{131}
}

// OpenconfigOspfTypesOSPFTELSATLVTYPE represents an enumerated type generated for the YANG identity OSPF_TE_LSA_TLV_TYPE.
type OpenconfigOspfTypesOSPFTELSATLVTYPE int32

const (
	OpenconfigOspfTypesOSPFTELSATLVTYPE_OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_UNSET                    OpenconfigOspfTypesOSPFTELSATLVTYPE = 0
	OpenconfigOspfTypesOSPFTELSATLVTYPE_OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_ROUTER_IPV6_ADDRESS   OpenconfigOspfTypesOSPFTELSATLVTYPE = 47313214
	OpenconfigOspfTypesOSPFTELSATLVTYPE_OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_NODE_ATTRIBUTE        OpenconfigOspfTypesOSPFTELSATLVTYPE = 60513351
	OpenconfigOspfTypesOSPFTELSATLVTYPE_OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_LINK                  OpenconfigOspfTypesOSPFTELSATLVTYPE = 105910866
	OpenconfigOspfTypesOSPFTELSATLVTYPE_OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_OPTICAL_NODE_PROPERTY OpenconfigOspfTypesOSPFTELSATLVTYPE = 237041647
	OpenconfigOspfTypesOSPFTELSATLVTYPE_OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_LINK_LOCAL            OpenconfigOspfTypesOSPFTELSATLVTYPE = 348906014
	OpenconfigOspfTypesOSPFTELSATLVTYPE_OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_ROUTER_ADDRESS        OpenconfigOspfTypesOSPFTELSATLVTYPE = 367832736
)

// Enum value maps for OpenconfigOspfTypesOSPFTELSATLVTYPE.
var (
	OpenconfigOspfTypesOSPFTELSATLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_UNSET",
		47313214:  "OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_ROUTER_IPV6_ADDRESS",
		60513351:  "OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_NODE_ATTRIBUTE",
		105910866: "OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_LINK",
		237041647: "OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_OPTICAL_NODE_PROPERTY",
		348906014: "OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_LINK_LOCAL",
		367832736: "OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_ROUTER_ADDRESS",
	}
	OpenconfigOspfTypesOSPFTELSATLVTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_UNSET":                    0,
		"OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_ROUTER_IPV6_ADDRESS":   47313214,
		"OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_NODE_ATTRIBUTE":        60513351,
		"OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_LINK":                  105910866,
		"OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_OPTICAL_NODE_PROPERTY": 237041647,
		"OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_LINK_LOCAL":            348906014,
		"OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_ROUTER_ADDRESS":        367832736,
	}
)

func (x OpenconfigOspfTypesOSPFTELSATLVTYPE) Enum() *OpenconfigOspfTypesOSPFTELSATLVTYPE {
	p := new(OpenconfigOspfTypesOSPFTELSATLVTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFTELSATLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFTELSATLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[132].Descriptor()
}

func (OpenconfigOspfTypesOSPFTELSATLVTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[132]
}

func (x OpenconfigOspfTypesOSPFTELSATLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFTELSATLVTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFTELSATLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{132}
}

// OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE represents an enumerated type generated for the YANG identity OSPFV2_EXTENDED_LINK_SUBTLV_TYPE.
type OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE int32

const (
	OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDLINKSUBTLVTYPE_UNSET         OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE = 0
	OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDLINKSUBTLVTYPE_ADJACENCY_SID OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE = 334305683
)

// Enum value maps for OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE.
var (
	OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDLINKSUBTLVTYPE_UNSET",
		334305683: "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDLINKSUBTLVTYPE_ADJACENCY_SID",
	}
	OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDLINKSUBTLVTYPE_UNSET":         0,
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDLINKSUBTLVTYPE_ADJACENCY_SID": 334305683,
	}
)

func (x OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE) Enum() *OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE {
	p := new(OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[133].Descriptor()
}

func (OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[133]
}

func (x OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{133}
}

// OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE represents an enumerated type generated for the YANG identity OSPFV2_EXTENDED_PREFIX_SID_LABEL_BINDING_SUBTLV_TYPE.
type OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE int32

const (
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_UNSET                  OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE = 0
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_ERO_PATH               OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE = 1829898
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_ERO_METRIC             OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE = 48923107
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_SID_MPLS_LABEL_BINDING OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE = 526744022
)

// Enum value maps for OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE.
var (
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_UNSET",
		1829898:   "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_ERO_PATH",
		48923107:  "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_ERO_METRIC",
		526744022: "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_SID_MPLS_LABEL_BINDING",
	}
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_UNSET":                  0,
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_ERO_PATH":               1829898,
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_ERO_METRIC":             48923107,
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_SID_MPLS_LABEL_BINDING": 526744022,
	}
)

func (x OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE) Enum() *OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE {
	p := new(OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[134].Descriptor()
}

func (OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[134]
}

func (x OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{134}
}

// OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE represents an enumerated type generated for the YANG identity OSPFV2_EXTENDED_PREFIX_SUBTLV_TYPE.
type OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE int32

const (
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_UNSET                 OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE = 0
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_SID_LABEL_BINDING     OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE = 2971965
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_EXTENDED_PREFIX_RANGE OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE = 203356488
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_PREFIX_SID            OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE = 237697073
)

// Enum value maps for OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE.
var (
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_UNSET",
		2971965:   "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_SID_LABEL_BINDING",
		203356488: "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_EXTENDED_PREFIX_RANGE",
		237697073: "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_PREFIX_SID",
	}
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_UNSET":                 0,
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_SID_LABEL_BINDING":     2971965,
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_EXTENDED_PREFIX_RANGE": 203356488,
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_PREFIX_SID":            237697073,
	}
)

func (x OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE) Enum() *OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE {
	p := new(OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[135].Descriptor()
}

func (OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[135]
}

func (x OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{135}
}

// OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE represents an enumerated type generated for the YANG identity OSPFV2_EXTPREFIX_BINDING_ERO_PATH_SEGMENT_TYPE.
type OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE int32

const (
	OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_UNSET                        OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE = 0
	OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_IPV4_SEGMENT                 OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE = 340016298
	OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_UNNUMBERED_INTERFACE_SEGMENT OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE = 502490798
)

// Enum value maps for OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE.
var (
	OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_UNSET",
		340016298: "OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_IPV4_SEGMENT",
		502490798: "OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_UNNUMBERED_INTERFACE_SEGMENT",
	}
	OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_UNSET":                        0,
		"OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_IPV4_SEGMENT":                 340016298,
		"OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_UNNUMBERED_INTERFACE_SEGMENT": 502490798,
	}
)

func (x OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE) Enum() *OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE {
	p := new(OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[136].Descriptor()
}

func (OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[136]
}

func (x OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{136}
}

// OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE represents an enumerated type generated for the YANG identity OSPFV2_ROUTER_LINK_TYPE.
type OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE int32

const (
	OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE_OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_UNSET                OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE = 0
	OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE_OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_STUB_NETWORK_LINK    OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE = 94378445
	OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE_OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_VIRTUAL_LINK         OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE = 172444033
	OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE_OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_POINT_TO_POINT_LINK  OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE = 244608719
	OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE_OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_TRANSIT_NETWORK_LINK OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE = 516096852
)

// Enum value maps for OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE.
var (
	OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_UNSET",
		94378445:  "OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_STUB_NETWORK_LINK",
		172444033: "OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_VIRTUAL_LINK",
		244608719: "OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_POINT_TO_POINT_LINK",
		516096852: "OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_TRANSIT_NETWORK_LINK",
	}
	OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_UNSET":                0,
		"OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_STUB_NETWORK_LINK":    94378445,
		"OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_VIRTUAL_LINK":         172444033,
		"OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_POINT_TO_POINT_LINK":  244608719,
		"OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_TRANSIT_NETWORK_LINK": 516096852,
	}
)

func (x OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE) Enum() *OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE {
	p := new(OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[137].Descriptor()
}

func (OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[137]
}

func (x OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{137}
}

// OpenconfigOspfTypesRILSATLVTYPES represents an enumerated type generated for the YANG identity RI_LSA_TLV_TYPES.
type OpenconfigOspfTypesRILSATLVTYPES int32

const (
	OpenconfigOspfTypesRILSATLVTYPES_OPENCONFIGOSPFTYPESRILSATLVTYPES_UNSET                         OpenconfigOspfTypesRILSATLVTYPES = 0
	OpenconfigOspfTypesRILSATLVTYPES_OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_NODE_ADMIN_TAG             OpenconfigOspfTypesRILSATLVTYPES = 97947365
	OpenconfigOspfTypesRILSATLVTYPES_OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_FUNCTIONAL_CAPABILITIES    OpenconfigOspfTypesRILSATLVTYPES = 121815788
	OpenconfigOspfTypesRILSATLVTYPES_OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_INFORMATIONAL_CAPABILITIES OpenconfigOspfTypesRILSATLVTYPES = 231438658
	OpenconfigOspfTypesRILSATLVTYPES_OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_SR_ALGORITHM               OpenconfigOspfTypesRILSATLVTYPES = 317127065
	OpenconfigOspfTypesRILSATLVTYPES_OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_SR_SID_LABEL_RANGE         OpenconfigOspfTypesRILSATLVTYPES = 397406623
)

// Enum value maps for OpenconfigOspfTypesRILSATLVTYPES.
var (
	OpenconfigOspfTypesRILSATLVTYPES_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESRILSATLVTYPES_UNSET",
		97947365:  "OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_NODE_ADMIN_TAG",
		121815788: "OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_FUNCTIONAL_CAPABILITIES",
		231438658: "OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_INFORMATIONAL_CAPABILITIES",
		317127065: "OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_SR_ALGORITHM",
		397406623: "OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_SR_SID_LABEL_RANGE",
	}
	OpenconfigOspfTypesRILSATLVTYPES_value = map[string]int32{
		"OPENCONFIGOSPFTYPESRILSATLVTYPES_UNSET":                         0,
		"OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_NODE_ADMIN_TAG":             97947365,
		"OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_FUNCTIONAL_CAPABILITIES":    121815788,
		"OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_INFORMATIONAL_CAPABILITIES": 231438658,
		"OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_SR_ALGORITHM":               317127065,
		"OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_SR_SID_LABEL_RANGE":         397406623,
	}
)

func (x OpenconfigOspfTypesRILSATLVTYPES) Enum() *OpenconfigOspfTypesRILSATLVTYPES {
	p := new(OpenconfigOspfTypesRILSATLVTYPES)
	*p = x
	return p
}

func (x OpenconfigOspfTypesRILSATLVTYPES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesRILSATLVTYPES) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[138].Descriptor()
}

func (OpenconfigOspfTypesRILSATLVTYPES) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[138]
}

func (x OpenconfigOspfTypesRILSATLVTYPES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesRILSATLVTYPES.Descriptor instead.
func (OpenconfigOspfTypesRILSATLVTYPES) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{138}
}

// OpenconfigOspfTypesROUTERLSATYPES represents an enumerated type generated for the YANG identity ROUTER_LSA_TYPES.
type OpenconfigOspfTypesROUTERLSATYPES int32

const (
	OpenconfigOspfTypesROUTERLSATYPES_OPENCONFIGOSPFTYPESROUTERLSATYPES_UNSET                      OpenconfigOspfTypesROUTERLSATYPES = 0
	OpenconfigOspfTypesROUTERLSATYPES_OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_STUB_NETWORK    OpenconfigOspfTypesROUTERLSATYPES = 67415949
	OpenconfigOspfTypesROUTERLSATYPES_OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_P2P             OpenconfigOspfTypesROUTERLSATYPES = 75093792
	OpenconfigOspfTypesROUTERLSATYPES_OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_TRANSIT_NETWORK OpenconfigOspfTypesROUTERLSATYPES = 193866836
	OpenconfigOspfTypesROUTERLSATYPES_OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_VIRTUAL_LINK    OpenconfigOspfTypesROUTERLSATYPES = 347259778
)

// Enum value maps for OpenconfigOspfTypesROUTERLSATYPES.
var (
	OpenconfigOspfTypesROUTERLSATYPES_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESROUTERLSATYPES_UNSET",
		67415949:  "OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_STUB_NETWORK",
		75093792:  "OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_P2P",
		193866836: "OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_TRANSIT_NETWORK",
		347259778: "OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_VIRTUAL_LINK",
	}
	OpenconfigOspfTypesROUTERLSATYPES_value = map[string]int32{
		"OPENCONFIGOSPFTYPESROUTERLSATYPES_UNSET":                      0,
		"OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_STUB_NETWORK":    67415949,
		"OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_P2P":             75093792,
		"OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_TRANSIT_NETWORK": 193866836,
		"OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_VIRTUAL_LINK":    347259778,
	}
)

func (x OpenconfigOspfTypesROUTERLSATYPES) Enum() *OpenconfigOspfTypesROUTERLSATYPES {
	p := new(OpenconfigOspfTypesROUTERLSATYPES)
	*p = x
	return p
}

func (x OpenconfigOspfTypesROUTERLSATYPES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesROUTERLSATYPES) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[139].Descriptor()
}

func (OpenconfigOspfTypesROUTERLSATYPES) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[139]
}

func (x OpenconfigOspfTypesROUTERLSATYPES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesROUTERLSATYPES.Descriptor instead.
func (OpenconfigOspfTypesROUTERLSATYPES) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{139}
}

// OpenconfigOspfTypesSRALGORITHM represents an enumerated type generated for the YANG identity SR_ALGORITHM.
type OpenconfigOspfTypesSRALGORITHM int32

const (
	OpenconfigOspfTypesSRALGORITHM_OPENCONFIGOSPFTYPESSRALGORITHM_UNSET      OpenconfigOspfTypesSRALGORITHM = 0
	OpenconfigOspfTypesSRALGORITHM_OPENCONFIGOSPFTYPESSRALGORITHM_SPF        OpenconfigOspfTypesSRALGORITHM = 245503321
	OpenconfigOspfTypesSRALGORITHM_OPENCONFIGOSPFTYPESSRALGORITHM_STRICT_SPF OpenconfigOspfTypesSRALGORITHM = 435702079
)

// Enum value maps for OpenconfigOspfTypesSRALGORITHM.
var (
	OpenconfigOspfTypesSRALGORITHM_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESSRALGORITHM_UNSET",
		245503321: "OPENCONFIGOSPFTYPESSRALGORITHM_SPF",
		435702079: "OPENCONFIGOSPFTYPESSRALGORITHM_STRICT_SPF",
	}
	OpenconfigOspfTypesSRALGORITHM_value = map[string]int32{
		"OPENCONFIGOSPFTYPESSRALGORITHM_UNSET":      0,
		"OPENCONFIGOSPFTYPESSRALGORITHM_SPF":        245503321,
		"OPENCONFIGOSPFTYPESSRALGORITHM_STRICT_SPF": 435702079,
	}
)

func (x OpenconfigOspfTypesSRALGORITHM) Enum() *OpenconfigOspfTypesSRALGORITHM {
	p := new(OpenconfigOspfTypesSRALGORITHM)
	*p = x
	return p
}

func (x OpenconfigOspfTypesSRALGORITHM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesSRALGORITHM) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[140].Descriptor()
}

func (OpenconfigOspfTypesSRALGORITHM) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[140]
}

func (x OpenconfigOspfTypesSRALGORITHM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesSRALGORITHM.Descriptor instead.
func (OpenconfigOspfTypesSRALGORITHM) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{140}
}

// OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE represents an enumerated type generated for the YANG identity TE_NODE_ATTRIBUTE_TLV_TYPE.
type OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE int32

const (
	OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE_OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_UNSET                   OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE = 0
	OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE_OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_NODE_IPV4_LOCAL_ADDRESS OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE = 171010107
	OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE_OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_NODE_IPV6_LOCAL_ADDRESS OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE = 183121285
)

// Enum value maps for OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE.
var (
	OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_UNSET",
		171010107: "OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_NODE_IPV4_LOCAL_ADDRESS",
		183121285: "OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_NODE_IPV6_LOCAL_ADDRESS",
	}
	OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_UNSET":                   0,
		"OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_NODE_IPV4_LOCAL_ADDRESS": 171010107,
		"OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_NODE_IPV6_LOCAL_ADDRESS": 183121285,
	}
)

func (x OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE) Enum() *OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE {
	p := new(OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[141].Descriptor()
}

func (OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[141]
}

func (x OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE.Descriptor instead.
func (OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{141}
}

// OpenconfigOspfv2SrSidType represents an enumerated type generated for the YANG enumerated type sr-sid-type.
type OpenconfigOspfv2SrSidType int32

const (
	OpenconfigOspfv2SrSidType_OPENCONFIGOSPFV2SRSIDTYPE_UNSET OpenconfigOspfv2SrSidType = 0
	OpenconfigOspfv2SrSidType_OPENCONFIGOSPFV2SRSIDTYPE_LABEL OpenconfigOspfv2SrSidType = 1
	OpenconfigOspfv2SrSidType_OPENCONFIGOSPFV2SRSIDTYPE_SID   OpenconfigOspfv2SrSidType = 2
)

// Enum value maps for OpenconfigOspfv2SrSidType.
var (
	OpenconfigOspfv2SrSidType_name = map[int32]string{
		0: "OPENCONFIGOSPFV2SRSIDTYPE_UNSET",
		1: "OPENCONFIGOSPFV2SRSIDTYPE_LABEL",
		2: "OPENCONFIGOSPFV2SRSIDTYPE_SID",
	}
	OpenconfigOspfv2SrSidType_value = map[string]int32{
		"OPENCONFIGOSPFV2SRSIDTYPE_UNSET": 0,
		"OPENCONFIGOSPFV2SRSIDTYPE_LABEL": 1,
		"OPENCONFIGOSPFV2SRSIDTYPE_SID":   2,
	}
)

func (x OpenconfigOspfv2SrSidType) Enum() *OpenconfigOspfv2SrSidType {
	p := new(OpenconfigOspfv2SrSidType)
	*p = x
	return p
}

func (x OpenconfigOspfv2SrSidType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfv2SrSidType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[142].Descriptor()
}

func (OpenconfigOspfv2SrSidType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[142]
}

func (x OpenconfigOspfv2SrSidType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfv2SrSidType.Descriptor instead.
func (OpenconfigOspfv2SrSidType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{142}
}

// OpenconfigPacketMatchTypesETHERTYPE represents an enumerated type generated for the YANG identity ETHERTYPE.
type OpenconfigPacketMatchTypesETHERTYPE int32

const (
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_UNSET          OpenconfigPacketMatchTypesETHERTYPE = 0
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_ROCE OpenconfigPacketMatchTypesETHERTYPE = 14086673
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_LLDP OpenconfigPacketMatchTypesETHERTYPE = 63862784
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_IPV4 OpenconfigPacketMatchTypesETHERTYPE = 140115701
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_IPV6 OpenconfigPacketMatchTypesETHERTYPE = 140115703
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_ARP  OpenconfigPacketMatchTypesETHERTYPE = 383275775
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_MPLS OpenconfigPacketMatchTypesETHERTYPE = 427890540
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_VLAN OpenconfigPacketMatchTypesETHERTYPE = 522848603
)

// Enum value maps for OpenconfigPacketMatchTypesETHERTYPE.
var (
	OpenconfigPacketMatchTypesETHERTYPE_name = map[int32]string{
		0:         "OPENCONFIGPACKETMATCHTYPESETHERTYPE_UNSET",
		14086673:  "OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_ROCE",
		63862784:  "OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_LLDP",
		140115701: "OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_IPV4",
		140115703: "OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_IPV6",
		383275775: "OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_ARP",
		427890540: "OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_MPLS",
		522848603: "OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_VLAN",
	}
	OpenconfigPacketMatchTypesETHERTYPE_value = map[string]int32{
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_UNSET":          0,
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_ROCE": 14086673,
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_LLDP": 63862784,
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_IPV4": 140115701,
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_IPV6": 140115703,
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_ARP":  383275775,
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_MPLS": 427890540,
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_VLAN": 522848603,
	}
)

func (x OpenconfigPacketMatchTypesETHERTYPE) Enum() *OpenconfigPacketMatchTypesETHERTYPE {
	p := new(OpenconfigPacketMatchTypesETHERTYPE)
	*p = x
	return p
}

func (x OpenconfigPacketMatchTypesETHERTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPacketMatchTypesETHERTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[143].Descriptor()
}

func (OpenconfigPacketMatchTypesETHERTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[143]
}

func (x OpenconfigPacketMatchTypesETHERTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPacketMatchTypesETHERTYPE.Descriptor instead.
func (OpenconfigPacketMatchTypesETHERTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{143}
}

// OpenconfigPacketMatchTypesIPPROTOCOL represents an enumerated type generated for the YANG identity IP_PROTOCOL.
type OpenconfigPacketMatchTypesIPPROTOCOL int32

const (
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET   OpenconfigPacketMatchTypesIPPROTOCOL = 0
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_GRE  OpenconfigPacketMatchTypesIPPROTOCOL = 24050007
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_TCP  OpenconfigPacketMatchTypesIPPROTOCOL = 38721802
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_L2TP OpenconfigPacketMatchTypesIPPROTOCOL = 81903923
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_AUTH OpenconfigPacketMatchTypesIPPROTOCOL = 203904199
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_PIM  OpenconfigPacketMatchTypesIPPROTOCOL = 272904165
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_IGMP OpenconfigPacketMatchTypesIPPROTOCOL = 512271866
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_ICMP OpenconfigPacketMatchTypesIPPROTOCOL = 512860246
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_UDP  OpenconfigPacketMatchTypesIPPROTOCOL = 525100026
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_RSVP OpenconfigPacketMatchTypesIPPROTOCOL = 530070378
)

// Enum value maps for OpenconfigPacketMatchTypesIPPROTOCOL.
var (
	OpenconfigPacketMatchTypesIPPROTOCOL_name = map[int32]string{
		0:         "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET",
		24050007:  "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_GRE",
		38721802:  "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_TCP",
		81903923:  "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_L2TP",
		203904199: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_AUTH",
		272904165: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_PIM",
		512271866: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_IGMP",
		512860246: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_ICMP",
		525100026: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_UDP",
		530070378: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_RSVP",
	}
	OpenconfigPacketMatchTypesIPPROTOCOL_value = map[string]int32{
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET":   0,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_GRE":  24050007,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_TCP":  38721802,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_L2TP": 81903923,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_AUTH": 203904199,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_PIM":  272904165,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_IGMP": 512271866,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_ICMP": 512860246,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_UDP":  525100026,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_RSVP": 530070378,
	}
)

func (x OpenconfigPacketMatchTypesIPPROTOCOL) Enum() *OpenconfigPacketMatchTypesIPPROTOCOL {
	p := new(OpenconfigPacketMatchTypesIPPROTOCOL)
	*p = x
	return p
}

func (x OpenconfigPacketMatchTypesIPPROTOCOL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPacketMatchTypesIPPROTOCOL) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[144].Descriptor()
}

func (OpenconfigPacketMatchTypesIPPROTOCOL) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[144]
}

func (x OpenconfigPacketMatchTypesIPPROTOCOL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPacketMatchTypesIPPROTOCOL.Descriptor instead.
func (OpenconfigPacketMatchTypesIPPROTOCOL) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{144}
}

// OpenconfigPacketMatchTypesTCPFLAGS represents an enumerated type generated for the YANG identity TCP_FLAGS.
type OpenconfigPacketMatchTypesTCPFLAGS int32

const (
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_UNSET   OpenconfigPacketMatchTypesTCPFLAGS = 0
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_CWR OpenconfigPacketMatchTypesTCPFLAGS = 7246418
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_ACK OpenconfigPacketMatchTypesTCPFLAGS = 74689745
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_RST OpenconfigPacketMatchTypesTCPFLAGS = 76795313
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_ECE OpenconfigPacketMatchTypesTCPFLAGS = 208309299
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_PSH OpenconfigPacketMatchTypesTCPFLAGS = 211387811
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_SYN OpenconfigPacketMatchTypesTCPFLAGS = 244795956
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_FIN OpenconfigPacketMatchTypesTCPFLAGS = 308430701
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_URG OpenconfigPacketMatchTypesTCPFLAGS = 496075790
)

// Enum value maps for OpenconfigPacketMatchTypesTCPFLAGS.
var (
	OpenconfigPacketMatchTypesTCPFLAGS_name = map[int32]string{
		0:         "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_UNSET",
		7246418:   "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_CWR",
		74689745:  "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_ACK",
		76795313:  "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_RST",
		208309299: "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_ECE",
		211387811: "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_PSH",
		244795956: "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_SYN",
		308430701: "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_FIN",
		496075790: "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_URG",
	}
	OpenconfigPacketMatchTypesTCPFLAGS_value = map[string]int32{
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_UNSET":   0,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_CWR": 7246418,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_ACK": 74689745,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_RST": 76795313,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_ECE": 208309299,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_PSH": 211387811,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_SYN": 244795956,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_FIN": 308430701,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_URG": 496075790,
	}
)

func (x OpenconfigPacketMatchTypesTCPFLAGS) Enum() *OpenconfigPacketMatchTypesTCPFLAGS {
	p := new(OpenconfigPacketMatchTypesTCPFLAGS)
	*p = x
	return p
}

func (x OpenconfigPacketMatchTypesTCPFLAGS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPacketMatchTypesTCPFLAGS) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[145].Descriptor()
}

func (OpenconfigPacketMatchTypesTCPFLAGS) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[145]
}

func (x OpenconfigPacketMatchTypesTCPFLAGS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPacketMatchTypesTCPFLAGS.Descriptor instead.
func (OpenconfigPacketMatchTypesTCPFLAGS) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{145}
}

// OpenconfigPimTypesPIMMODE represents an enumerated type generated for the YANG identity PIM_MODE.
type OpenconfigPimTypesPIMMODE int32

const (
	OpenconfigPimTypesPIMMODE_OPENCONFIGPIMTYPESPIMMODE_UNSET           OpenconfigPimTypesPIMMODE = 0
	OpenconfigPimTypesPIMMODE_OPENCONFIGPIMTYPESPIMMODE_PIM_MODE_DENSE  OpenconfigPimTypesPIMMODE = 286716321
	OpenconfigPimTypesPIMMODE_OPENCONFIGPIMTYPESPIMMODE_PIM_MODE_SPARSE OpenconfigPimTypesPIMMODE = 535294624
)

// Enum value maps for OpenconfigPimTypesPIMMODE.
var (
	OpenconfigPimTypesPIMMODE_name = map[int32]string{
		0:         "OPENCONFIGPIMTYPESPIMMODE_UNSET",
		286716321: "OPENCONFIGPIMTYPESPIMMODE_PIM_MODE_DENSE",
		535294624: "OPENCONFIGPIMTYPESPIMMODE_PIM_MODE_SPARSE",
	}
	OpenconfigPimTypesPIMMODE_value = map[string]int32{
		"OPENCONFIGPIMTYPESPIMMODE_UNSET":           0,
		"OPENCONFIGPIMTYPESPIMMODE_PIM_MODE_DENSE":  286716321,
		"OPENCONFIGPIMTYPESPIMMODE_PIM_MODE_SPARSE": 535294624,
	}
)

func (x OpenconfigPimTypesPIMMODE) Enum() *OpenconfigPimTypesPIMMODE {
	p := new(OpenconfigPimTypesPIMMODE)
	*p = x
	return p
}

func (x OpenconfigPimTypesPIMMODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPimTypesPIMMODE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[146].Descriptor()
}

func (OpenconfigPimTypesPIMMODE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[146]
}

func (x OpenconfigPimTypesPIMMODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPimTypesPIMMODE.Descriptor instead.
func (OpenconfigPimTypesPIMMODE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{146}
}

// OpenconfigPlatformLinecardComponentPowerType represents an enumerated type generated for the YANG enumerated type component-power-type.
type OpenconfigPlatformLinecardComponentPowerType int32

const (
	OpenconfigPlatformLinecardComponentPowerType_OPENCONFIGPLATFORMLINECARDCOMPONENTPOWERTYPE_POWER_ENABLED  OpenconfigPlatformLinecardComponentPowerType = 0
	OpenconfigPlatformLinecardComponentPowerType_OPENCONFIGPLATFORMLINECARDCOMPONENTPOWERTYPE_POWER_DISABLED OpenconfigPlatformLinecardComponentPowerType = 2
)

// Enum value maps for OpenconfigPlatformLinecardComponentPowerType.
var (
	OpenconfigPlatformLinecardComponentPowerType_name = map[int32]string{
		0: "OPENCONFIGPLATFORMLINECARDCOMPONENTPOWERTYPE_POWER_ENABLED",
		2: "OPENCONFIGPLATFORMLINECARDCOMPONENTPOWERTYPE_POWER_DISABLED",
	}
	OpenconfigPlatformLinecardComponentPowerType_value = map[string]int32{
		"OPENCONFIGPLATFORMLINECARDCOMPONENTPOWERTYPE_POWER_ENABLED":  0,
		"OPENCONFIGPLATFORMLINECARDCOMPONENTPOWERTYPE_POWER_DISABLED": 2,
	}
)

func (x OpenconfigPlatformLinecardComponentPowerType) Enum() *OpenconfigPlatformLinecardComponentPowerType {
	p := new(OpenconfigPlatformLinecardComponentPowerType)
	*p = x
	return p
}

func (x OpenconfigPlatformLinecardComponentPowerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPlatformLinecardComponentPowerType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[147].Descriptor()
}

func (OpenconfigPlatformLinecardComponentPowerType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[147]
}

func (x OpenconfigPlatformLinecardComponentPowerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPlatformLinecardComponentPowerType.Descriptor instead.
func (OpenconfigPlatformLinecardComponentPowerType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{147}
}

// OpenconfigPlatformTypesCOMPONENTOPERSTATUS represents an enumerated type generated for the YANG identity COMPONENT_OPER_STATUS.
type OpenconfigPlatformTypesCOMPONENTOPERSTATUS int32

const (
	OpenconfigPlatformTypesCOMPONENTOPERSTATUS_OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_UNSET    OpenconfigPlatformTypesCOMPONENTOPERSTATUS = 0
	OpenconfigPlatformTypesCOMPONENTOPERSTATUS_OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_INACTIVE OpenconfigPlatformTypesCOMPONENTOPERSTATUS = 66232085
	OpenconfigPlatformTypesCOMPONENTOPERSTATUS_OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_ACTIVE   OpenconfigPlatformTypesCOMPONENTOPERSTATUS = 350531364
	OpenconfigPlatformTypesCOMPONENTOPERSTATUS_OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_DISABLED OpenconfigPlatformTypesCOMPONENTOPERSTATUS = 449140422
)

// Enum value maps for OpenconfigPlatformTypesCOMPONENTOPERSTATUS.
var (
	OpenconfigPlatformTypesCOMPONENTOPERSTATUS_name = map[int32]string{
		0:         "OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_UNSET",
		66232085:  "OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_INACTIVE",
		350531364: "OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_ACTIVE",
		449140422: "OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_DISABLED",
	}
	OpenconfigPlatformTypesCOMPONENTOPERSTATUS_value = map[string]int32{
		"OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_UNSET":    0,
		"OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_INACTIVE": 66232085,
		"OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_ACTIVE":   350531364,
		"OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_DISABLED": 449140422,
	}
)

func (x OpenconfigPlatformTypesCOMPONENTOPERSTATUS) Enum() *OpenconfigPlatformTypesCOMPONENTOPERSTATUS {
	p := new(OpenconfigPlatformTypesCOMPONENTOPERSTATUS)
	*p = x
	return p
}

func (x OpenconfigPlatformTypesCOMPONENTOPERSTATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPlatformTypesCOMPONENTOPERSTATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[148].Descriptor()
}

func (OpenconfigPlatformTypesCOMPONENTOPERSTATUS) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[148]
}

func (x OpenconfigPlatformTypesCOMPONENTOPERSTATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPlatformTypesCOMPONENTOPERSTATUS.Descriptor instead.
func (OpenconfigPlatformTypesCOMPONENTOPERSTATUS) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{148}
}

// OpenconfigPlatformTypesFECMODETYPE represents an enumerated type generated for the YANG identity FEC_MODE_TYPE.
type OpenconfigPlatformTypesFECMODETYPE int32

const (
	OpenconfigPlatformTypesFECMODETYPE_OPENCONFIGPLATFORMTYPESFECMODETYPE_UNSET        OpenconfigPlatformTypesFECMODETYPE = 0
	OpenconfigPlatformTypesFECMODETYPE_OPENCONFIGPLATFORMTYPESFECMODETYPE_FEC_ENABLED  OpenconfigPlatformTypesFECMODETYPE = 113144348
	OpenconfigPlatformTypesFECMODETYPE_OPENCONFIGPLATFORMTYPESFECMODETYPE_FEC_AUTO     OpenconfigPlatformTypesFECMODETYPE = 412198356
	OpenconfigPlatformTypesFECMODETYPE_OPENCONFIGPLATFORMTYPESFECMODETYPE_FEC_DISABLED OpenconfigPlatformTypesFECMODETYPE = 452774341
)

// Enum value maps for OpenconfigPlatformTypesFECMODETYPE.
var (
	OpenconfigPlatformTypesFECMODETYPE_name = map[int32]string{
		0:         "OPENCONFIGPLATFORMTYPESFECMODETYPE_UNSET",
		113144348: "OPENCONFIGPLATFORMTYPESFECMODETYPE_FEC_ENABLED",
		412198356: "OPENCONFIGPLATFORMTYPESFECMODETYPE_FEC_AUTO",
		452774341: "OPENCONFIGPLATFORMTYPESFECMODETYPE_FEC_DISABLED",
	}
	OpenconfigPlatformTypesFECMODETYPE_value = map[string]int32{
		"OPENCONFIGPLATFORMTYPESFECMODETYPE_UNSET":        0,
		"OPENCONFIGPLATFORMTYPESFECMODETYPE_FEC_ENABLED":  113144348,
		"OPENCONFIGPLATFORMTYPESFECMODETYPE_FEC_AUTO":     412198356,
		"OPENCONFIGPLATFORMTYPESFECMODETYPE_FEC_DISABLED": 452774341,
	}
)

func (x OpenconfigPlatformTypesFECMODETYPE) Enum() *OpenconfigPlatformTypesFECMODETYPE {
	p := new(OpenconfigPlatformTypesFECMODETYPE)
	*p = x
	return p
}

func (x OpenconfigPlatformTypesFECMODETYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPlatformTypesFECMODETYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[149].Descriptor()
}

func (OpenconfigPlatformTypesFECMODETYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[149]
}

func (x OpenconfigPlatformTypesFECMODETYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPlatformTypesFECMODETYPE.Descriptor instead.
func (OpenconfigPlatformTypesFECMODETYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{149}
}

// OpenconfigPlatformTypesFECSTATUSTYPE represents an enumerated type generated for the YANG identity FEC_STATUS_TYPE.
type OpenconfigPlatformTypesFECSTATUSTYPE int32

const (
	OpenconfigPlatformTypesFECSTATUSTYPE_OPENCONFIGPLATFORMTYPESFECSTATUSTYPE_UNSET               OpenconfigPlatformTypesFECSTATUSTYPE = 0
	OpenconfigPlatformTypesFECSTATUSTYPE_OPENCONFIGPLATFORMTYPESFECSTATUSTYPE_FEC_STATUS_LOCKED   OpenconfigPlatformTypesFECSTATUSTYPE = 474867667
	OpenconfigPlatformTypesFECSTATUSTYPE_OPENCONFIGPLATFORMTYPESFECSTATUSTYPE_FEC_STATUS_UNLOCKED OpenconfigPlatformTypesFECSTATUSTYPE = 500386402
)

// Enum value maps for OpenconfigPlatformTypesFECSTATUSTYPE.
var (
	OpenconfigPlatformTypesFECSTATUSTYPE_name = map[int32]string{
		0:         "OPENCONFIGPLATFORMTYPESFECSTATUSTYPE_UNSET",
		474867667: "OPENCONFIGPLATFORMTYPESFECSTATUSTYPE_FEC_STATUS_LOCKED",
		500386402: "OPENCONFIGPLATFORMTYPESFECSTATUSTYPE_FEC_STATUS_UNLOCKED",
	}
	OpenconfigPlatformTypesFECSTATUSTYPE_value = map[string]int32{
		"OPENCONFIGPLATFORMTYPESFECSTATUSTYPE_UNSET":               0,
		"OPENCONFIGPLATFORMTYPESFECSTATUSTYPE_FEC_STATUS_LOCKED":   474867667,
		"OPENCONFIGPLATFORMTYPESFECSTATUSTYPE_FEC_STATUS_UNLOCKED": 500386402,
	}
)

func (x OpenconfigPlatformTypesFECSTATUSTYPE) Enum() *OpenconfigPlatformTypesFECSTATUSTYPE {
	p := new(OpenconfigPlatformTypesFECSTATUSTYPE)
	*p = x
	return p
}

func (x OpenconfigPlatformTypesFECSTATUSTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPlatformTypesFECSTATUSTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[150].Descriptor()
}

func (OpenconfigPlatformTypesFECSTATUSTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[150]
}

func (x OpenconfigPlatformTypesFECSTATUSTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPlatformTypesFECSTATUSTYPE.Descriptor instead.
func (OpenconfigPlatformTypesFECSTATUSTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{150}
}

// OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT represents an enumerated type generated for the YANG identity OPENCONFIG_HARDWARE_COMPONENT.
type OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT int32

const (
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_UNSET              OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 0
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_OPTICAL_CHANNEL    OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 17598998
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FABRIC             OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 72327189
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_POWER_SUPPLY       OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 156519681
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_SENSOR             OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 163406904
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_STORAGE            OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 169410761
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_PORT               OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 208831331
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FAN                OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 248256101
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_BACKPLANE          OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 267672527
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_LINECARD           OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 290488750
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_INTEGRATED_CIRCUIT OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 344879553
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CHASSIS            OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 384589570
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CONTROLLER_CARD    OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 462407431
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CPU                OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 467229440
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_TRANSCEIVER        OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 483792688
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FRU                OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 533475515
)

// Enum value maps for OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT.
var (
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_name = map[int32]string{
		0:         "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_UNSET",
		17598998:  "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_OPTICAL_CHANNEL",
		72327189:  "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FABRIC",
		156519681: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_POWER_SUPPLY",
		163406904: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_SENSOR",
		169410761: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_STORAGE",
		208831331: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_PORT",
		248256101: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FAN",
		267672527: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_BACKPLANE",
		290488750: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_LINECARD",
		344879553: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_INTEGRATED_CIRCUIT",
		384589570: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CHASSIS",
		462407431: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CONTROLLER_CARD",
		467229440: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CPU",
		483792688: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_TRANSCEIVER",
		533475515: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FRU",
	}
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_value = map[string]int32{
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_UNSET":              0,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_OPTICAL_CHANNEL":    17598998,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FABRIC":             72327189,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_POWER_SUPPLY":       156519681,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_SENSOR":             163406904,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_STORAGE":            169410761,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_PORT":               208831331,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FAN":                248256101,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_BACKPLANE":          267672527,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_LINECARD":           290488750,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_INTEGRATED_CIRCUIT": 344879553,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CHASSIS":            384589570,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CONTROLLER_CARD":    462407431,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CPU":                467229440,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_TRANSCEIVER":        483792688,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FRU":                533475515,
	}
)

func (x OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT) Enum() *OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT {
	p := new(OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT)
	*p = x
	return p
}

func (x OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[151].Descriptor()
}

func (OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[151]
}

func (x OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT.Descriptor instead.
func (OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{151}
}

// OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT represents an enumerated type generated for the YANG identity OPENCONFIG_SOFTWARE_COMPONENT.
type OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT int32

const (
	OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_UNSET                   OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT = 0
	OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_OPERATING_SYSTEM        OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT = 9246962
	OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_OPERATING_SYSTEM_UPDATE OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT = 350799246
)

// Enum value maps for OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT.
var (
	OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_name = map[int32]string{
		0:         "OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_UNSET",
		9246962:   "OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_OPERATING_SYSTEM",
		350799246: "OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_OPERATING_SYSTEM_UPDATE",
	}
	OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_value = map[string]int32{
		"OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_UNSET":                   0,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_OPERATING_SYSTEM":        9246962,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_OPERATING_SYSTEM_UPDATE": 350799246,
	}
)

func (x OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT) Enum() *OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT {
	p := new(OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT)
	*p = x
	return p
}

func (x OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[152].Descriptor()
}

func (OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[152]
}

func (x OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT.Descriptor instead.
func (OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{152}
}

// OpenconfigPolicyTypesATTRIBUTECOMPARISON represents an enumerated type generated for the YANG identity ATTRIBUTE_COMPARISON.
type OpenconfigPolicyTypesATTRIBUTECOMPARISON int32

const (
	OpenconfigPolicyTypesATTRIBUTECOMPARISON_OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_UNSET        OpenconfigPolicyTypesATTRIBUTECOMPARISON = 0
	OpenconfigPolicyTypesATTRIBUTECOMPARISON_OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_ATTRIBUTE_EQ OpenconfigPolicyTypesATTRIBUTECOMPARISON = 13041584
	OpenconfigPolicyTypesATTRIBUTECOMPARISON_OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_ATTRIBUTE_LE OpenconfigPolicyTypesATTRIBUTECOMPARISON = 398914035
	OpenconfigPolicyTypesATTRIBUTECOMPARISON_OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_ATTRIBUTE_GE OpenconfigPolicyTypesATTRIBUTECOMPARISON = 516357374
)

// Enum value maps for OpenconfigPolicyTypesATTRIBUTECOMPARISON.
var (
	OpenconfigPolicyTypesATTRIBUTECOMPARISON_name = map[int32]string{
		0:         "OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_UNSET",
		13041584:  "OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_ATTRIBUTE_EQ",
		398914035: "OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_ATTRIBUTE_LE",
		516357374: "OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_ATTRIBUTE_GE",
	}
	OpenconfigPolicyTypesATTRIBUTECOMPARISON_value = map[string]int32{
		"OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_UNSET":        0,
		"OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_ATTRIBUTE_EQ": 13041584,
		"OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_ATTRIBUTE_LE": 398914035,
		"OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_ATTRIBUTE_GE": 516357374,
	}
)

func (x OpenconfigPolicyTypesATTRIBUTECOMPARISON) Enum() *OpenconfigPolicyTypesATTRIBUTECOMPARISON {
	p := new(OpenconfigPolicyTypesATTRIBUTECOMPARISON)
	*p = x
	return p
}

func (x OpenconfigPolicyTypesATTRIBUTECOMPARISON) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPolicyTypesATTRIBUTECOMPARISON) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[153].Descriptor()
}

func (OpenconfigPolicyTypesATTRIBUTECOMPARISON) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[153]
}

func (x OpenconfigPolicyTypesATTRIBUTECOMPARISON) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPolicyTypesATTRIBUTECOMPARISON.Descriptor instead.
func (OpenconfigPolicyTypesATTRIBUTECOMPARISON) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{153}
}

// OpenconfigPolicyTypesINSTALLPROTOCOLTYPE represents an enumerated type generated for the YANG identity INSTALL_PROTOCOL_TYPE.
type OpenconfigPolicyTypesINSTALLPROTOCOLTYPE int32

const (
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET              OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 0
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_STATIC             OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 164198026
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL_AGGREGATE    OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 167243989
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF               OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 187006448
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_PIM                OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 203990878
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_ISIS               OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 308545656
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_IGMP               OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 378946099
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_BGP                OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 436650411
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_DIRECTLY_CONNECTED OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 463126862
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF3              OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 470106339
)

// Enum value maps for OpenconfigPolicyTypesINSTALLPROTOCOLTYPE.
var (
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_name = map[int32]string{
		0:         "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET",
		164198026: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_STATIC",
		167243989: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL_AGGREGATE",
		187006448: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF",
		203990878: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_PIM",
		308545656: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_ISIS",
		378946099: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_IGMP",
		436650411: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_BGP",
		463126862: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_DIRECTLY_CONNECTED",
		470106339: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF3",
	}
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_value = map[string]int32{
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET":              0,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_STATIC":             164198026,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL_AGGREGATE":    167243989,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF":               187006448,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_PIM":                203990878,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_ISIS":               308545656,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_IGMP":               378946099,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_BGP":                436650411,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_DIRECTLY_CONNECTED": 463126862,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF3":              470106339,
	}
)

func (x OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Enum() *OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	p := new(OpenconfigPolicyTypesINSTALLPROTOCOLTYPE)
	*p = x
	return p
}

func (x OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[154].Descriptor()
}

func (OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[154]
}

func (x OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPolicyTypesINSTALLPROTOCOLTYPE.Descriptor instead.
func (OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{154}
}

// OpenconfigProbesTestType represents an enumerated type generated for the YANG enumerated type test-type.
type OpenconfigProbesTestType int32

const (
	OpenconfigProbesTestType_OPENCONFIGPROBESTESTTYPE_UNSET           OpenconfigProbesTestType = 0
	OpenconfigProbesTestType_OPENCONFIGPROBESTESTTYPE_ICMP            OpenconfigProbesTestType = 1
	OpenconfigProbesTestType_OPENCONFIGPROBESTESTTYPE_ICMP6           OpenconfigProbesTestType = 2
	OpenconfigProbesTestType_OPENCONFIGPROBESTESTTYPE_ICMP_TIMESTAMP  OpenconfigProbesTestType = 3
	OpenconfigProbesTestType_OPENCONFIGPROBESTESTTYPE_ICMP6_TIMESTAMP OpenconfigProbesTestType = 4
	OpenconfigProbesTestType_OPENCONFIGPROBESTESTTYPE_TCP             OpenconfigProbesTestType = 5
	OpenconfigProbesTestType_OPENCONFIGPROBESTESTTYPE_UDP             OpenconfigProbesTestType = 6
	OpenconfigProbesTestType_OPENCONFIGPROBESTESTTYPE_UDP_TIMESTAMP   OpenconfigProbesTestType = 7
	OpenconfigProbesTestType_OPENCONFIGPROBESTESTTYPE_HTTP_GET        OpenconfigProbesTestType = 8
	OpenconfigProbesTestType_OPENCONFIGPROBESTESTTYPE_HTTP_GET_META   OpenconfigProbesTestType = 9
)

// Enum value maps for OpenconfigProbesTestType.
var (
	OpenconfigProbesTestType_name = map[int32]string{
		0: "OPENCONFIGPROBESTESTTYPE_UNSET",
		1: "OPENCONFIGPROBESTESTTYPE_ICMP",
		2: "OPENCONFIGPROBESTESTTYPE_ICMP6",
		3: "OPENCONFIGPROBESTESTTYPE_ICMP_TIMESTAMP",
		4: "OPENCONFIGPROBESTESTTYPE_ICMP6_TIMESTAMP",
		5: "OPENCONFIGPROBESTESTTYPE_TCP",
		6: "OPENCONFIGPROBESTESTTYPE_UDP",
		7: "OPENCONFIGPROBESTESTTYPE_UDP_TIMESTAMP",
		8: "OPENCONFIGPROBESTESTTYPE_HTTP_GET",
		9: "OPENCONFIGPROBESTESTTYPE_HTTP_GET_META",
	}
	OpenconfigProbesTestType_value = map[string]int32{
		"OPENCONFIGPROBESTESTTYPE_UNSET":           0,
		"OPENCONFIGPROBESTESTTYPE_ICMP":            1,
		"OPENCONFIGPROBESTESTTYPE_ICMP6":           2,
		"OPENCONFIGPROBESTESTTYPE_ICMP_TIMESTAMP":  3,
		"OPENCONFIGPROBESTESTTYPE_ICMP6_TIMESTAMP": 4,
		"OPENCONFIGPROBESTESTTYPE_TCP":             5,
		"OPENCONFIGPROBESTESTTYPE_UDP":             6,
		"OPENCONFIGPROBESTESTTYPE_UDP_TIMESTAMP":   7,
		"OPENCONFIGPROBESTESTTYPE_HTTP_GET":        8,
		"OPENCONFIGPROBESTESTTYPE_HTTP_GET_META":   9,
	}
)

func (x OpenconfigProbesTestType) Enum() *OpenconfigProbesTestType {
	p := new(OpenconfigProbesTestType)
	*p = x
	return p
}

func (x OpenconfigProbesTestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigProbesTestType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[155].Descriptor()
}

func (OpenconfigProbesTestType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[155]
}

func (x OpenconfigProbesTestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigProbesTestType.Descriptor instead.
func (OpenconfigProbesTestType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{155}
}

// OpenconfigQosQueueBehavior represents an enumerated type generated for the YANG enumerated type queue-behavior.
type OpenconfigQosQueueBehavior int32

const (
	OpenconfigQosQueueBehavior_OPENCONFIGQOSQUEUEBEHAVIOR_UNSET  OpenconfigQosQueueBehavior = 0
	OpenconfigQosQueueBehavior_OPENCONFIGQOSQUEUEBEHAVIOR_SHAPE  OpenconfigQosQueueBehavior = 1
	OpenconfigQosQueueBehavior_OPENCONFIGQOSQUEUEBEHAVIOR_POLICE OpenconfigQosQueueBehavior = 2
)

// Enum value maps for OpenconfigQosQueueBehavior.
var (
	OpenconfigQosQueueBehavior_name = map[int32]string{
		0: "OPENCONFIGQOSQUEUEBEHAVIOR_UNSET",
		1: "OPENCONFIGQOSQUEUEBEHAVIOR_SHAPE",
		2: "OPENCONFIGQOSQUEUEBEHAVIOR_POLICE",
	}
	OpenconfigQosQueueBehavior_value = map[string]int32{
		"OPENCONFIGQOSQUEUEBEHAVIOR_UNSET":  0,
		"OPENCONFIGQOSQUEUEBEHAVIOR_SHAPE":  1,
		"OPENCONFIGQOSQUEUEBEHAVIOR_POLICE": 2,
	}
)

func (x OpenconfigQosQueueBehavior) Enum() *OpenconfigQosQueueBehavior {
	p := new(OpenconfigQosQueueBehavior)
	*p = x
	return p
}

func (x OpenconfigQosQueueBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigQosQueueBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[156].Descriptor()
}

func (OpenconfigQosQueueBehavior) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[156]
}

func (x OpenconfigQosQueueBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigQosQueueBehavior.Descriptor instead.
func (OpenconfigQosQueueBehavior) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{156}
}

// OpenconfigQosTypesQOSQUEUETYPE represents an enumerated type generated for the YANG identity QOS_QUEUE_TYPE.
type OpenconfigQosTypesQOSQUEUETYPE int32

const (
	OpenconfigQosTypesQOSQUEUETYPE_OPENCONFIGQOSTYPESQOSQUEUETYPE_UNSET     OpenconfigQosTypesQOSQUEUETYPE = 0
	OpenconfigQosTypesQOSQUEUETYPE_OPENCONFIGQOSTYPESQOSQUEUETYPE_DROP_TAIL OpenconfigQosTypesQOSQUEUETYPE = 104689505
	OpenconfigQosTypesQOSQUEUETYPE_OPENCONFIGQOSTYPESQOSQUEUETYPE_WRED      OpenconfigQosTypesQOSQUEUETYPE = 127358059
	OpenconfigQosTypesQOSQUEUETYPE_OPENCONFIGQOSTYPESQOSQUEUETYPE_RED       OpenconfigQosTypesQOSQUEUETYPE = 362397024
)

// Enum value maps for OpenconfigQosTypesQOSQUEUETYPE.
var (
	OpenconfigQosTypesQOSQUEUETYPE_name = map[int32]string{
		0:         "OPENCONFIGQOSTYPESQOSQUEUETYPE_UNSET",
		104689505: "OPENCONFIGQOSTYPESQOSQUEUETYPE_DROP_TAIL",
		127358059: "OPENCONFIGQOSTYPESQOSQUEUETYPE_WRED",
		362397024: "OPENCONFIGQOSTYPESQOSQUEUETYPE_RED",
	}
	OpenconfigQosTypesQOSQUEUETYPE_value = map[string]int32{
		"OPENCONFIGQOSTYPESQOSQUEUETYPE_UNSET":     0,
		"OPENCONFIGQOSTYPESQOSQUEUETYPE_DROP_TAIL": 104689505,
		"OPENCONFIGQOSTYPESQOSQUEUETYPE_WRED":      127358059,
		"OPENCONFIGQOSTYPESQOSQUEUETYPE_RED":       362397024,
	}
)

func (x OpenconfigQosTypesQOSQUEUETYPE) Enum() *OpenconfigQosTypesQOSQUEUETYPE {
	p := new(OpenconfigQosTypesQOSQUEUETYPE)
	*p = x
	return p
}

func (x OpenconfigQosTypesQOSQUEUETYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigQosTypesQOSQUEUETYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[157].Descriptor()
}

func (OpenconfigQosTypesQOSQUEUETYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[157]
}

func (x OpenconfigQosTypesQOSQUEUETYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigQosTypesQOSQUEUETYPE.Descriptor instead.
func (OpenconfigQosTypesQOSQUEUETYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{157}
}

// OpenconfigQosTypesQOSSCHEDULERTYPE represents an enumerated type generated for the YANG identity QOS_SCHEDULER_TYPE.
type OpenconfigQosTypesQOSSCHEDULERTYPE int32

const (
	OpenconfigQosTypesQOSSCHEDULERTYPE_OPENCONFIGQOSTYPESQOSSCHEDULERTYPE_UNSET                OpenconfigQosTypesQOSSCHEDULERTYPE = 0
	OpenconfigQosTypesQOSSCHEDULERTYPE_OPENCONFIGQOSTYPESQOSSCHEDULERTYPE_ONE_RATE_TWO_COLOR   OpenconfigQosTypesQOSSCHEDULERTYPE = 322565447
	OpenconfigQosTypesQOSSCHEDULERTYPE_OPENCONFIGQOSTYPESQOSSCHEDULERTYPE_TWO_RATE_THREE_COLOR OpenconfigQosTypesQOSSCHEDULERTYPE = 428754559
)

// Enum value maps for OpenconfigQosTypesQOSSCHEDULERTYPE.
var (
	OpenconfigQosTypesQOSSCHEDULERTYPE_name = map[int32]string{
		0:         "OPENCONFIGQOSTYPESQOSSCHEDULERTYPE_UNSET",
		322565447: "OPENCONFIGQOSTYPESQOSSCHEDULERTYPE_ONE_RATE_TWO_COLOR",
		428754559: "OPENCONFIGQOSTYPESQOSSCHEDULERTYPE_TWO_RATE_THREE_COLOR",
	}
	OpenconfigQosTypesQOSSCHEDULERTYPE_value = map[string]int32{
		"OPENCONFIGQOSTYPESQOSSCHEDULERTYPE_UNSET":                0,
		"OPENCONFIGQOSTYPESQOSSCHEDULERTYPE_ONE_RATE_TWO_COLOR":   322565447,
		"OPENCONFIGQOSTYPESQOSSCHEDULERTYPE_TWO_RATE_THREE_COLOR": 428754559,
	}
)

func (x OpenconfigQosTypesQOSSCHEDULERTYPE) Enum() *OpenconfigQosTypesQOSSCHEDULERTYPE {
	p := new(OpenconfigQosTypesQOSSCHEDULERTYPE)
	*p = x
	return p
}

func (x OpenconfigQosTypesQOSSCHEDULERTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigQosTypesQOSSCHEDULERTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[158].Descriptor()
}

func (OpenconfigQosTypesQOSSCHEDULERTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[158]
}

func (x OpenconfigQosTypesQOSSCHEDULERTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigQosTypesQOSSCHEDULERTYPE.Descriptor instead.
func (OpenconfigQosTypesQOSSCHEDULERTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{158}
}

// OpenconfigRibBgpAsPathSegmentType represents an enumerated type generated for the YANG enumerated type as-path-segment-type.
type OpenconfigRibBgpAsPathSegmentType int32

const (
	OpenconfigRibBgpAsPathSegmentType_OPENCONFIGRIBBGPASPATHSEGMENTTYPE_UNSET              OpenconfigRibBgpAsPathSegmentType = 0
	OpenconfigRibBgpAsPathSegmentType_OPENCONFIGRIBBGPASPATHSEGMENTTYPE_AS_SEQ             OpenconfigRibBgpAsPathSegmentType = 1
	OpenconfigRibBgpAsPathSegmentType_OPENCONFIGRIBBGPASPATHSEGMENTTYPE_AS_SET             OpenconfigRibBgpAsPathSegmentType = 2
	OpenconfigRibBgpAsPathSegmentType_OPENCONFIGRIBBGPASPATHSEGMENTTYPE_AS_CONFED_SEQUENCE OpenconfigRibBgpAsPathSegmentType = 3
	OpenconfigRibBgpAsPathSegmentType_OPENCONFIGRIBBGPASPATHSEGMENTTYPE_AS_CONFED_SET      OpenconfigRibBgpAsPathSegmentType = 4
)

// Enum value maps for OpenconfigRibBgpAsPathSegmentType.
var (
	OpenconfigRibBgpAsPathSegmentType_name = map[int32]string{
		0: "OPENCONFIGRIBBGPASPATHSEGMENTTYPE_UNSET",
		1: "OPENCONFIGRIBBGPASPATHSEGMENTTYPE_AS_SEQ",
		2: "OPENCONFIGRIBBGPASPATHSEGMENTTYPE_AS_SET",
		3: "OPENCONFIGRIBBGPASPATHSEGMENTTYPE_AS_CONFED_SEQUENCE",
		4: "OPENCONFIGRIBBGPASPATHSEGMENTTYPE_AS_CONFED_SET",
	}
	OpenconfigRibBgpAsPathSegmentType_value = map[string]int32{
		"OPENCONFIGRIBBGPASPATHSEGMENTTYPE_UNSET":              0,
		"OPENCONFIGRIBBGPASPATHSEGMENTTYPE_AS_SEQ":             1,
		"OPENCONFIGRIBBGPASPATHSEGMENTTYPE_AS_SET":             2,
		"OPENCONFIGRIBBGPASPATHSEGMENTTYPE_AS_CONFED_SEQUENCE": 3,
		"OPENCONFIGRIBBGPASPATHSEGMENTTYPE_AS_CONFED_SET":      4,
	}
)

func (x OpenconfigRibBgpAsPathSegmentType) Enum() *OpenconfigRibBgpAsPathSegmentType {
	p := new(OpenconfigRibBgpAsPathSegmentType)
	*p = x
	return p
}

func (x OpenconfigRibBgpAsPathSegmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRibBgpAsPathSegmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[159].Descriptor()
}

func (OpenconfigRibBgpAsPathSegmentType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[159]
}

func (x OpenconfigRibBgpAsPathSegmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRibBgpAsPathSegmentType.Descriptor instead.
func (OpenconfigRibBgpAsPathSegmentType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{159}
}

// OpenconfigRibBgpBgpOriginAttrType represents an enumerated type generated for the YANG enumerated type bgp-origin-attr-type.
type OpenconfigRibBgpBgpOriginAttrType int32

const (
	OpenconfigRibBgpBgpOriginAttrType_OPENCONFIGRIBBGPBGPORIGINATTRTYPE_UNSET      OpenconfigRibBgpBgpOriginAttrType = 0
	OpenconfigRibBgpBgpOriginAttrType_OPENCONFIGRIBBGPBGPORIGINATTRTYPE_IGP        OpenconfigRibBgpBgpOriginAttrType = 1
	OpenconfigRibBgpBgpOriginAttrType_OPENCONFIGRIBBGPBGPORIGINATTRTYPE_EGP        OpenconfigRibBgpBgpOriginAttrType = 2
	OpenconfigRibBgpBgpOriginAttrType_OPENCONFIGRIBBGPBGPORIGINATTRTYPE_INCOMPLETE OpenconfigRibBgpBgpOriginAttrType = 3
)

// Enum value maps for OpenconfigRibBgpBgpOriginAttrType.
var (
	OpenconfigRibBgpBgpOriginAttrType_name = map[int32]string{
		0: "OPENCONFIGRIBBGPBGPORIGINATTRTYPE_UNSET",
		1: "OPENCONFIGRIBBGPBGPORIGINATTRTYPE_IGP",
		2: "OPENCONFIGRIBBGPBGPORIGINATTRTYPE_EGP",
		3: "OPENCONFIGRIBBGPBGPORIGINATTRTYPE_INCOMPLETE",
	}
	OpenconfigRibBgpBgpOriginAttrType_value = map[string]int32{
		"OPENCONFIGRIBBGPBGPORIGINATTRTYPE_UNSET":      0,
		"OPENCONFIGRIBBGPBGPORIGINATTRTYPE_IGP":        1,
		"OPENCONFIGRIBBGPBGPORIGINATTRTYPE_EGP":        2,
		"OPENCONFIGRIBBGPBGPORIGINATTRTYPE_INCOMPLETE": 3,
	}
)

func (x OpenconfigRibBgpBgpOriginAttrType) Enum() *OpenconfigRibBgpBgpOriginAttrType {
	p := new(OpenconfigRibBgpBgpOriginAttrType)
	*p = x
	return p
}

func (x OpenconfigRibBgpBgpOriginAttrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRibBgpBgpOriginAttrType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[160].Descriptor()
}

func (OpenconfigRibBgpBgpOriginAttrType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[160]
}

func (x OpenconfigRibBgpBgpOriginAttrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRibBgpBgpOriginAttrType.Descriptor instead.
func (OpenconfigRibBgpBgpOriginAttrType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{160}
}

// OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH represents an enumerated type generated for the YANG identity BGP_NOT_SELECTED_BESTPATH.
type OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH int32

const (
	OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH_OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_UNSET               OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH = 0
	OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH_OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_PREFER_EXTERNAL     OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH = 15224918
	OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH_OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_LOCAL_PREF_LOWER    OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH = 85332267
	OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH_OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_NEXTHOP_COST_HIGHER OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH = 107034192
	OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH_OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_MED_HIGHER          OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH = 155127618
	OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH_OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_AS_PATH_LONGER      OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH = 277673136
	OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH_OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_HIGHER_ROUTER_ID    OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH = 299729859
	OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH_OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_HIGHER_PEER_ADDRESS OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH = 336674391
	OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH_OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_ORIGIN_TYPE_HIGHER  OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH = 340492635
)

// Enum value maps for OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH.
var (
	OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH_name = map[int32]string{
		0:         "OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_UNSET",
		15224918:  "OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_PREFER_EXTERNAL",
		85332267:  "OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_LOCAL_PREF_LOWER",
		107034192: "OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_NEXTHOP_COST_HIGHER",
		155127618: "OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_MED_HIGHER",
		277673136: "OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_AS_PATH_LONGER",
		299729859: "OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_HIGHER_ROUTER_ID",
		336674391: "OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_HIGHER_PEER_ADDRESS",
		340492635: "OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_ORIGIN_TYPE_HIGHER",
	}
	OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH_value = map[string]int32{
		"OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_UNSET":               0,
		"OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_PREFER_EXTERNAL":     15224918,
		"OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_LOCAL_PREF_LOWER":    85332267,
		"OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_NEXTHOP_COST_HIGHER": 107034192,
		"OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_MED_HIGHER":          155127618,
		"OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_AS_PATH_LONGER":      277673136,
		"OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_HIGHER_ROUTER_ID":    299729859,
		"OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_HIGHER_PEER_ADDRESS": 336674391,
		"OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDBESTPATH_ORIGIN_TYPE_HIGHER":  340492635,
	}
)

func (x OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH) Enum() *OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH {
	p := new(OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH)
	*p = x
	return p
}

func (x OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[161].Descriptor()
}

func (OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[161]
}

func (x OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH.Descriptor instead.
func (OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{161}
}

// OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY represents an enumerated type generated for the YANG identity BGP_NOT_SELECTED_POLICY.
type OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY int32

const (
	OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY_OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDPOLICY_UNSET                  OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY = 0
	OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY_OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDPOLICY_REJECTED_IMPORT_POLICY OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY = 279330904
)

// Enum value maps for OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY.
var (
	OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY_name = map[int32]string{
		0:         "OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDPOLICY_UNSET",
		279330904: "OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDPOLICY_REJECTED_IMPORT_POLICY",
	}
	OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY_value = map[string]int32{
		"OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDPOLICY_UNSET":                  0,
		"OPENCONFIGRIBBGPTYPESBGPNOTSELECTEDPOLICY_REJECTED_IMPORT_POLICY": 279330904,
	}
)

func (x OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY) Enum() *OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY {
	p := new(OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY)
	*p = x
	return p
}

func (x OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[162].Descriptor()
}

func (OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[162]
}

func (x OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY.Descriptor instead.
func (OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{162}
}

// OpenconfigRibBgpTypesINVALIDROUTEREASON represents an enumerated type generated for the YANG identity INVALID_ROUTE_REASON.
type OpenconfigRibBgpTypesINVALIDROUTEREASON int32

const (
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET                OpenconfigRibBgpTypesINVALIDROUTEREASON = 0
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_AS_LOOP      OpenconfigRibBgpTypesINVALIDROUTEREASON = 281940072
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_ORIGINATOR   OpenconfigRibBgpTypesINVALIDROUTEREASON = 329543457
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CLUSTER_LOOP OpenconfigRibBgpTypesINVALIDROUTEREASON = 363552896
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CONFED       OpenconfigRibBgpTypesINVALIDROUTEREASON = 404003798
)

// Enum value maps for OpenconfigRibBgpTypesINVALIDROUTEREASON.
var (
	OpenconfigRibBgpTypesINVALIDROUTEREASON_name = map[int32]string{
		0:         "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET",
		281940072: "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_AS_LOOP",
		329543457: "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_ORIGINATOR",
		363552896: "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CLUSTER_LOOP",
		404003798: "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CONFED",
	}
	OpenconfigRibBgpTypesINVALIDROUTEREASON_value = map[string]int32{
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET":                0,
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_AS_LOOP":      281940072,
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_ORIGINATOR":   329543457,
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CLUSTER_LOOP": 363552896,
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CONFED":       404003798,
	}
)

func (x OpenconfigRibBgpTypesINVALIDROUTEREASON) Enum() *OpenconfigRibBgpTypesINVALIDROUTEREASON {
	p := new(OpenconfigRibBgpTypesINVALIDROUTEREASON)
	*p = x
	return p
}

func (x OpenconfigRibBgpTypesINVALIDROUTEREASON) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRibBgpTypesINVALIDROUTEREASON) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[163].Descriptor()
}

func (OpenconfigRibBgpTypesINVALIDROUTEREASON) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[163]
}

func (x OpenconfigRibBgpTypesINVALIDROUTEREASON) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRibBgpTypesINVALIDROUTEREASON.Descriptor instead.
func (OpenconfigRibBgpTypesINVALIDROUTEREASON) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{163}
}

// OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE represents an enumerated type generated for the YANG identity TUNNEL_ENCAPSULATION_SUBTLV_TYPE.
type OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE int32

const (
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_UNSET                  OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE = 0
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_PREFERENCE        OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE = 68217326
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_BINDING_SID       OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE = 365388805
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_TUNNEL_REMOTE_ENDPOINT OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE = 408846061
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_SEGMENT_LIST      OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE = 471686299
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_TUNNEL_COLOR           OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE = 494500102
)

// Enum value maps for OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE.
var (
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_UNSET",
		68217326:  "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_PREFERENCE",
		365388805: "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_BINDING_SID",
		408846061: "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_TUNNEL_REMOTE_ENDPOINT",
		471686299: "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_SEGMENT_LIST",
		494500102: "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_TUNNEL_COLOR",
	}
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_value = map[string]int32{
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_UNSET":                  0,
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_PREFERENCE":        68217326,
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_BINDING_SID":       365388805,
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_TUNNEL_REMOTE_ENDPOINT": 408846061,
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_SEGMENT_LIST":      471686299,
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_TUNNEL_COLOR":           494500102,
	}
)

func (x OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE) Enum() *OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE {
	p := new(OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE)
	*p = x
	return p
}

func (x OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[164].Descriptor()
}

func (OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[164]
}

func (x OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE.Descriptor instead.
func (OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{164}
}

// OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE represents an enumerated type generated for the YANG identity TUNNEL_ENCAPSULATION_TYPE.
type OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE int32

const (
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONTYPE_UNSET              OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE = 0
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONTYPE_SRTE_POLICY_TUNNEL OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE = 189389033
)

// Enum value maps for OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE.
var (
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE_name = map[int32]string{
		0:         "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONTYPE_UNSET",
		189389033: "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONTYPE_SRTE_POLICY_TUNNEL",
	}
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE_value = map[string]int32{
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONTYPE_UNSET":              0,
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONTYPE_SRTE_POLICY_TUNNEL": 189389033,
	}
)

func (x OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE) Enum() *OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE {
	p := new(OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE)
	*p = x
	return p
}

func (x OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[165].Descriptor()
}

func (OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[165]
}

func (x OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE.Descriptor instead.
func (OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{165}
}

// OpenconfigRoutingPolicyDefaultPolicyType represents an enumerated type generated for the YANG enumerated type default-policy-type.
type OpenconfigRoutingPolicyDefaultPolicyType int32

const (
	OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE OpenconfigRoutingPolicyDefaultPolicyType = 0
	OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_ACCEPT_ROUTE OpenconfigRoutingPolicyDefaultPolicyType = 1
)

// Enum value maps for OpenconfigRoutingPolicyDefaultPolicyType.
var (
	OpenconfigRoutingPolicyDefaultPolicyType_name = map[int32]string{
		0: "OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE",
		1: "OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_ACCEPT_ROUTE",
	}
	OpenconfigRoutingPolicyDefaultPolicyType_value = map[string]int32{
		"OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE": 0,
		"OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_ACCEPT_ROUTE": 1,
	}
)

func (x OpenconfigRoutingPolicyDefaultPolicyType) Enum() *OpenconfigRoutingPolicyDefaultPolicyType {
	p := new(OpenconfigRoutingPolicyDefaultPolicyType)
	*p = x
	return p
}

func (x OpenconfigRoutingPolicyDefaultPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRoutingPolicyDefaultPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[166].Descriptor()
}

func (OpenconfigRoutingPolicyDefaultPolicyType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[166]
}

func (x OpenconfigRoutingPolicyDefaultPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRoutingPolicyDefaultPolicyType.Descriptor instead.
func (OpenconfigRoutingPolicyDefaultPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{166}
}

// OpenconfigRoutingPolicyMatchSetOptionsRestrictedType represents an enumerated type generated for the YANG enumerated type match-set-options-restricted-type.
type OpenconfigRoutingPolicyMatchSetOptionsRestrictedType int32

const (
	OpenconfigRoutingPolicyMatchSetOptionsRestrictedType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSRESTRICTEDTYPE_ANY    OpenconfigRoutingPolicyMatchSetOptionsRestrictedType = 0
	OpenconfigRoutingPolicyMatchSetOptionsRestrictedType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSRESTRICTEDTYPE_INVERT OpenconfigRoutingPolicyMatchSetOptionsRestrictedType = 2
)

// Enum value maps for OpenconfigRoutingPolicyMatchSetOptionsRestrictedType.
var (
	OpenconfigRoutingPolicyMatchSetOptionsRestrictedType_name = map[int32]string{
		0: "OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSRESTRICTEDTYPE_ANY",
		2: "OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSRESTRICTEDTYPE_INVERT",
	}
	OpenconfigRoutingPolicyMatchSetOptionsRestrictedType_value = map[string]int32{
		"OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSRESTRICTEDTYPE_ANY":    0,
		"OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSRESTRICTEDTYPE_INVERT": 2,
	}
)

func (x OpenconfigRoutingPolicyMatchSetOptionsRestrictedType) Enum() *OpenconfigRoutingPolicyMatchSetOptionsRestrictedType {
	p := new(OpenconfigRoutingPolicyMatchSetOptionsRestrictedType)
	*p = x
	return p
}

func (x OpenconfigRoutingPolicyMatchSetOptionsRestrictedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRoutingPolicyMatchSetOptionsRestrictedType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[167].Descriptor()
}

func (OpenconfigRoutingPolicyMatchSetOptionsRestrictedType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[167]
}

func (x OpenconfigRoutingPolicyMatchSetOptionsRestrictedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRoutingPolicyMatchSetOptionsRestrictedType.Descriptor instead.
func (OpenconfigRoutingPolicyMatchSetOptionsRestrictedType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{167}
}

// OpenconfigRoutingPolicyMatchSetOptionsType represents an enumerated type generated for the YANG enumerated type match-set-options-type.
type OpenconfigRoutingPolicyMatchSetOptionsType int32

const (
	OpenconfigRoutingPolicyMatchSetOptionsType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_ANY    OpenconfigRoutingPolicyMatchSetOptionsType = 0
	OpenconfigRoutingPolicyMatchSetOptionsType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_ALL    OpenconfigRoutingPolicyMatchSetOptionsType = 2
	OpenconfigRoutingPolicyMatchSetOptionsType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_INVERT OpenconfigRoutingPolicyMatchSetOptionsType = 3
)

// Enum value maps for OpenconfigRoutingPolicyMatchSetOptionsType.
var (
	OpenconfigRoutingPolicyMatchSetOptionsType_name = map[int32]string{
		0: "OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_ANY",
		2: "OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_ALL",
		3: "OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_INVERT",
	}
	OpenconfigRoutingPolicyMatchSetOptionsType_value = map[string]int32{
		"OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_ANY":    0,
		"OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_ALL":    2,
		"OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_INVERT": 3,
	}
)

func (x OpenconfigRoutingPolicyMatchSetOptionsType) Enum() *OpenconfigRoutingPolicyMatchSetOptionsType {
	p := new(OpenconfigRoutingPolicyMatchSetOptionsType)
	*p = x
	return p
}

func (x OpenconfigRoutingPolicyMatchSetOptionsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRoutingPolicyMatchSetOptionsType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[168].Descriptor()
}

func (OpenconfigRoutingPolicyMatchSetOptionsType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[168]
}

func (x OpenconfigRoutingPolicyMatchSetOptionsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRoutingPolicyMatchSetOptionsType.Descriptor instead.
func (OpenconfigRoutingPolicyMatchSetOptionsType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{168}
}

// OpenconfigRoutingPolicyPolicyResultType represents an enumerated type generated for the YANG enumerated type policy-result-type.
type OpenconfigRoutingPolicyPolicyResultType int32

const (
	OpenconfigRoutingPolicyPolicyResultType_OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_UNSET        OpenconfigRoutingPolicyPolicyResultType = 0
	OpenconfigRoutingPolicyPolicyResultType_OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_ACCEPT_ROUTE OpenconfigRoutingPolicyPolicyResultType = 1
	OpenconfigRoutingPolicyPolicyResultType_OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_REJECT_ROUTE OpenconfigRoutingPolicyPolicyResultType = 2
)

// Enum value maps for OpenconfigRoutingPolicyPolicyResultType.
var (
	OpenconfigRoutingPolicyPolicyResultType_name = map[int32]string{
		0: "OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_UNSET",
		1: "OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_ACCEPT_ROUTE",
		2: "OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_REJECT_ROUTE",
	}
	OpenconfigRoutingPolicyPolicyResultType_value = map[string]int32{
		"OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_UNSET":        0,
		"OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_ACCEPT_ROUTE": 1,
		"OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_REJECT_ROUTE": 2,
	}
)

func (x OpenconfigRoutingPolicyPolicyResultType) Enum() *OpenconfigRoutingPolicyPolicyResultType {
	p := new(OpenconfigRoutingPolicyPolicyResultType)
	*p = x
	return p
}

func (x OpenconfigRoutingPolicyPolicyResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRoutingPolicyPolicyResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[169].Descriptor()
}

func (OpenconfigRoutingPolicyPolicyResultType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[169]
}

func (x OpenconfigRoutingPolicyPolicyResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRoutingPolicyPolicyResultType.Descriptor instead.
func (OpenconfigRoutingPolicyPolicyResultType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{169}
}

// OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed represents an enumerated type generated for the YANG enumerated type bgp-set-med-type.
type OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed int32

const (
	OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed_OPENCONFIGROUTINGPOLICY_ROUTINGPOLICY_POLICYDEFINITIONS_POLICYDEFINITION_STATEMENTS_STATEMENT_ACTIONS_BGPACTIONS_CONFIG_SETMED_UNSET OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed = 0
	OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed_OPENCONFIGROUTINGPOLICY_ROUTINGPOLICY_POLICYDEFINITIONS_POLICYDEFINITION_STATEMENTS_STATEMENT_ACTIONS_BGPACTIONS_CONFIG_SETMED_IGP   OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed = 1
)

// Enum value maps for OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed.
var (
	OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed_name = map[int32]string{
		0: "OPENCONFIGROUTINGPOLICY_ROUTINGPOLICY_POLICYDEFINITIONS_POLICYDEFINITION_STATEMENTS_STATEMENT_ACTIONS_BGPACTIONS_CONFIG_SETMED_UNSET",
		1: "OPENCONFIGROUTINGPOLICY_ROUTINGPOLICY_POLICYDEFINITIONS_POLICYDEFINITION_STATEMENTS_STATEMENT_ACTIONS_BGPACTIONS_CONFIG_SETMED_IGP",
	}
	OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed_value = map[string]int32{
		"OPENCONFIGROUTINGPOLICY_ROUTINGPOLICY_POLICYDEFINITIONS_POLICYDEFINITION_STATEMENTS_STATEMENT_ACTIONS_BGPACTIONS_CONFIG_SETMED_UNSET": 0,
		"OPENCONFIGROUTINGPOLICY_ROUTINGPOLICY_POLICYDEFINITIONS_POLICYDEFINITION_STATEMENTS_STATEMENT_ACTIONS_BGPACTIONS_CONFIG_SETMED_IGP":   1,
	}
)

func (x OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed) Enum() *OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed {
	p := new(OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed)
	*p = x
	return p
}

func (x OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[170].Descriptor()
}

func (OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[170]
}

func (x OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed.Descriptor instead.
func (OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{170}
}

// OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop represents an enumerated type generated for the YANG enumerated type bgp-next-hop-type.
type OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop int32

const (
	OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop_OPENCONFIGROUTINGPOLICY_ROUTINGPOLICY_POLICYDEFINITIONS_POLICYDEFINITION_STATEMENTS_STATEMENT_ACTIONS_BGPACTIONS_CONFIG_SETNEXTHOP_UNSET OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop = 0
	OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop_OPENCONFIGROUTINGPOLICY_ROUTINGPOLICY_POLICYDEFINITIONS_POLICYDEFINITION_STATEMENTS_STATEMENT_ACTIONS_BGPACTIONS_CONFIG_SETNEXTHOP_SELF  OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop = 1
)

// Enum value maps for OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop.
var (
	OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop_name = map[int32]string{
		0: "OPENCONFIGROUTINGPOLICY_ROUTINGPOLICY_POLICYDEFINITIONS_POLICYDEFINITION_STATEMENTS_STATEMENT_ACTIONS_BGPACTIONS_CONFIG_SETNEXTHOP_UNSET",
		1: "OPENCONFIGROUTINGPOLICY_ROUTINGPOLICY_POLICYDEFINITIONS_POLICYDEFINITION_STATEMENTS_STATEMENT_ACTIONS_BGPACTIONS_CONFIG_SETNEXTHOP_SELF",
	}
	OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop_value = map[string]int32{
		"OPENCONFIGROUTINGPOLICY_ROUTINGPOLICY_POLICYDEFINITIONS_POLICYDEFINITION_STATEMENTS_STATEMENT_ACTIONS_BGPACTIONS_CONFIG_SETNEXTHOP_UNSET": 0,
		"OPENCONFIGROUTINGPOLICY_ROUTINGPOLICY_POLICYDEFINITIONS_POLICYDEFINITION_STATEMENTS_STATEMENT_ACTIONS_BGPACTIONS_CONFIG_SETNEXTHOP_SELF":  1,
	}
)

func (x OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop) Enum() *OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop {
	p := new(OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop)
	*p = x
	return p
}

func (x OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[171].Descriptor()
}

func (OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[171]
}

func (x OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop.Descriptor instead.
func (OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{171}
}

// OpenconfigSegmentRoutingSrDataplaneType represents an enumerated type generated for the YANG enumerated type sr-dataplane-type.
type OpenconfigSegmentRoutingSrDataplaneType int32

const (
	OpenconfigSegmentRoutingSrDataplaneType_OPENCONFIGSEGMENTROUTINGSRDATAPLANETYPE_UNSET OpenconfigSegmentRoutingSrDataplaneType = 0
	OpenconfigSegmentRoutingSrDataplaneType_OPENCONFIGSEGMENTROUTINGSRDATAPLANETYPE_MPLS  OpenconfigSegmentRoutingSrDataplaneType = 1
	OpenconfigSegmentRoutingSrDataplaneType_OPENCONFIGSEGMENTROUTINGSRDATAPLANETYPE_IPV6  OpenconfigSegmentRoutingSrDataplaneType = 2
)

// Enum value maps for OpenconfigSegmentRoutingSrDataplaneType.
var (
	OpenconfigSegmentRoutingSrDataplaneType_name = map[int32]string{
		0: "OPENCONFIGSEGMENTROUTINGSRDATAPLANETYPE_UNSET",
		1: "OPENCONFIGSEGMENTROUTINGSRDATAPLANETYPE_MPLS",
		2: "OPENCONFIGSEGMENTROUTINGSRDATAPLANETYPE_IPV6",
	}
	OpenconfigSegmentRoutingSrDataplaneType_value = map[string]int32{
		"OPENCONFIGSEGMENTROUTINGSRDATAPLANETYPE_UNSET": 0,
		"OPENCONFIGSEGMENTROUTINGSRDATAPLANETYPE_MPLS":  1,
		"OPENCONFIGSEGMENTROUTINGSRDATAPLANETYPE_IPV6":  2,
	}
)

func (x OpenconfigSegmentRoutingSrDataplaneType) Enum() *OpenconfigSegmentRoutingSrDataplaneType {
	p := new(OpenconfigSegmentRoutingSrDataplaneType)
	*p = x
	return p
}

func (x OpenconfigSegmentRoutingSrDataplaneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSegmentRoutingSrDataplaneType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[172].Descriptor()
}

func (OpenconfigSegmentRoutingSrDataplaneType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[172]
}

func (x OpenconfigSegmentRoutingSrDataplaneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSegmentRoutingSrDataplaneType.Descriptor instead.
func (OpenconfigSegmentRoutingSrDataplaneType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{172}
}

// OpenconfigSpanningTreeStpGuardType represents an enumerated type generated for the YANG enumerated type stp-guard-type.
type OpenconfigSpanningTreeStpGuardType int32

const (
	OpenconfigSpanningTreeStpGuardType_OPENCONFIGSPANNINGTREESTPGUARDTYPE_UNSET OpenconfigSpanningTreeStpGuardType = 0
	OpenconfigSpanningTreeStpGuardType_OPENCONFIGSPANNINGTREESTPGUARDTYPE_ROOT  OpenconfigSpanningTreeStpGuardType = 1
	OpenconfigSpanningTreeStpGuardType_OPENCONFIGSPANNINGTREESTPGUARDTYPE_LOOP  OpenconfigSpanningTreeStpGuardType = 2
	OpenconfigSpanningTreeStpGuardType_OPENCONFIGSPANNINGTREESTPGUARDTYPE_NONE  OpenconfigSpanningTreeStpGuardType = 3
)

// Enum value maps for OpenconfigSpanningTreeStpGuardType.
var (
	OpenconfigSpanningTreeStpGuardType_name = map[int32]string{
		0: "OPENCONFIGSPANNINGTREESTPGUARDTYPE_UNSET",
		1: "OPENCONFIGSPANNINGTREESTPGUARDTYPE_ROOT",
		2: "OPENCONFIGSPANNINGTREESTPGUARDTYPE_LOOP",
		3: "OPENCONFIGSPANNINGTREESTPGUARDTYPE_NONE",
	}
	OpenconfigSpanningTreeStpGuardType_value = map[string]int32{
		"OPENCONFIGSPANNINGTREESTPGUARDTYPE_UNSET": 0,
		"OPENCONFIGSPANNINGTREESTPGUARDTYPE_ROOT":  1,
		"OPENCONFIGSPANNINGTREESTPGUARDTYPE_LOOP":  2,
		"OPENCONFIGSPANNINGTREESTPGUARDTYPE_NONE":  3,
	}
)

func (x OpenconfigSpanningTreeStpGuardType) Enum() *OpenconfigSpanningTreeStpGuardType {
	p := new(OpenconfigSpanningTreeStpGuardType)
	*p = x
	return p
}

func (x OpenconfigSpanningTreeStpGuardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSpanningTreeStpGuardType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[173].Descriptor()
}

func (OpenconfigSpanningTreeStpGuardType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[173]
}

func (x OpenconfigSpanningTreeStpGuardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSpanningTreeStpGuardType.Descriptor instead.
func (OpenconfigSpanningTreeStpGuardType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{173}
}

// OpenconfigSpanningTreeStpLinkType represents an enumerated type generated for the YANG enumerated type stp-link-type.
type OpenconfigSpanningTreeStpLinkType int32

const (
	OpenconfigSpanningTreeStpLinkType_OPENCONFIGSPANNINGTREESTPLINKTYPE_UNSET  OpenconfigSpanningTreeStpLinkType = 0
	OpenconfigSpanningTreeStpLinkType_OPENCONFIGSPANNINGTREESTPLINKTYPE_P2P    OpenconfigSpanningTreeStpLinkType = 1
	OpenconfigSpanningTreeStpLinkType_OPENCONFIGSPANNINGTREESTPLINKTYPE_SHARED OpenconfigSpanningTreeStpLinkType = 2
)

// Enum value maps for OpenconfigSpanningTreeStpLinkType.
var (
	OpenconfigSpanningTreeStpLinkType_name = map[int32]string{
		0: "OPENCONFIGSPANNINGTREESTPLINKTYPE_UNSET",
		1: "OPENCONFIGSPANNINGTREESTPLINKTYPE_P2P",
		2: "OPENCONFIGSPANNINGTREESTPLINKTYPE_SHARED",
	}
	OpenconfigSpanningTreeStpLinkType_value = map[string]int32{
		"OPENCONFIGSPANNINGTREESTPLINKTYPE_UNSET":  0,
		"OPENCONFIGSPANNINGTREESTPLINKTYPE_P2P":    1,
		"OPENCONFIGSPANNINGTREESTPLINKTYPE_SHARED": 2,
	}
)

func (x OpenconfigSpanningTreeStpLinkType) Enum() *OpenconfigSpanningTreeStpLinkType {
	p := new(OpenconfigSpanningTreeStpLinkType)
	*p = x
	return p
}

func (x OpenconfigSpanningTreeStpLinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSpanningTreeStpLinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[174].Descriptor()
}

func (OpenconfigSpanningTreeStpLinkType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[174]
}

func (x OpenconfigSpanningTreeStpLinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSpanningTreeStpLinkType.Descriptor instead.
func (OpenconfigSpanningTreeStpLinkType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{174}
}

// OpenconfigSpanningTreeTypesSTPEDGEPORT represents an enumerated type generated for the YANG identity STP_EDGE_PORT.
type OpenconfigSpanningTreeTypesSTPEDGEPORT int32

const (
	OpenconfigSpanningTreeTypesSTPEDGEPORT_OPENCONFIGSPANNINGTREETYPESSTPEDGEPORT_UNSET        OpenconfigSpanningTreeTypesSTPEDGEPORT = 0
	OpenconfigSpanningTreeTypesSTPEDGEPORT_OPENCONFIGSPANNINGTREETYPESSTPEDGEPORT_EDGE_ENABLE  OpenconfigSpanningTreeTypesSTPEDGEPORT = 263445833
	OpenconfigSpanningTreeTypesSTPEDGEPORT_OPENCONFIGSPANNINGTREETYPESSTPEDGEPORT_EDGE_AUTO    OpenconfigSpanningTreeTypesSTPEDGEPORT = 416354649
	OpenconfigSpanningTreeTypesSTPEDGEPORT_OPENCONFIGSPANNINGTREETYPESSTPEDGEPORT_EDGE_DISABLE OpenconfigSpanningTreeTypesSTPEDGEPORT = 454202920
)

// Enum value maps for OpenconfigSpanningTreeTypesSTPEDGEPORT.
var (
	OpenconfigSpanningTreeTypesSTPEDGEPORT_name = map[int32]string{
		0:         "OPENCONFIGSPANNINGTREETYPESSTPEDGEPORT_UNSET",
		263445833: "OPENCONFIGSPANNINGTREETYPESSTPEDGEPORT_EDGE_ENABLE",
		416354649: "OPENCONFIGSPANNINGTREETYPESSTPEDGEPORT_EDGE_AUTO",
		454202920: "OPENCONFIGSPANNINGTREETYPESSTPEDGEPORT_EDGE_DISABLE",
	}
	OpenconfigSpanningTreeTypesSTPEDGEPORT_value = map[string]int32{
		"OPENCONFIGSPANNINGTREETYPESSTPEDGEPORT_UNSET":        0,
		"OPENCONFIGSPANNINGTREETYPESSTPEDGEPORT_EDGE_ENABLE":  263445833,
		"OPENCONFIGSPANNINGTREETYPESSTPEDGEPORT_EDGE_AUTO":    416354649,
		"OPENCONFIGSPANNINGTREETYPESSTPEDGEPORT_EDGE_DISABLE": 454202920,
	}
)

func (x OpenconfigSpanningTreeTypesSTPEDGEPORT) Enum() *OpenconfigSpanningTreeTypesSTPEDGEPORT {
	p := new(OpenconfigSpanningTreeTypesSTPEDGEPORT)
	*p = x
	return p
}

func (x OpenconfigSpanningTreeTypesSTPEDGEPORT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSpanningTreeTypesSTPEDGEPORT) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[175].Descriptor()
}

func (OpenconfigSpanningTreeTypesSTPEDGEPORT) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[175]
}

func (x OpenconfigSpanningTreeTypesSTPEDGEPORT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSpanningTreeTypesSTPEDGEPORT.Descriptor instead.
func (OpenconfigSpanningTreeTypesSTPEDGEPORT) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{175}
}

// OpenconfigSpanningTreeTypesSTPPORTROLE represents an enumerated type generated for the YANG identity STP_PORT_ROLE.
type OpenconfigSpanningTreeTypesSTPPORTROLE int32

const (
	OpenconfigSpanningTreeTypesSTPPORTROLE_OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_UNSET      OpenconfigSpanningTreeTypesSTPPORTROLE = 0
	OpenconfigSpanningTreeTypesSTPPORTROLE_OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_DESIGNATED OpenconfigSpanningTreeTypesSTPPORTROLE = 63773171
	OpenconfigSpanningTreeTypesSTPPORTROLE_OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_ROOT       OpenconfigSpanningTreeTypesSTPPORTROLE = 196719225
	OpenconfigSpanningTreeTypesSTPPORTROLE_OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_BACKUP     OpenconfigSpanningTreeTypesSTPPORTROLE = 241319231
	OpenconfigSpanningTreeTypesSTPPORTROLE_OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_ALTERNATE  OpenconfigSpanningTreeTypesSTPPORTROLE = 519797233
)

// Enum value maps for OpenconfigSpanningTreeTypesSTPPORTROLE.
var (
	OpenconfigSpanningTreeTypesSTPPORTROLE_name = map[int32]string{
		0:         "OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_UNSET",
		63773171:  "OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_DESIGNATED",
		196719225: "OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_ROOT",
		241319231: "OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_BACKUP",
		519797233: "OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_ALTERNATE",
	}
	OpenconfigSpanningTreeTypesSTPPORTROLE_value = map[string]int32{
		"OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_UNSET":      0,
		"OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_DESIGNATED": 63773171,
		"OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_ROOT":       196719225,
		"OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_BACKUP":     241319231,
		"OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_ALTERNATE":  519797233,
	}
)

func (x OpenconfigSpanningTreeTypesSTPPORTROLE) Enum() *OpenconfigSpanningTreeTypesSTPPORTROLE {
	p := new(OpenconfigSpanningTreeTypesSTPPORTROLE)
	*p = x
	return p
}

func (x OpenconfigSpanningTreeTypesSTPPORTROLE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSpanningTreeTypesSTPPORTROLE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[176].Descriptor()
}

func (OpenconfigSpanningTreeTypesSTPPORTROLE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[176]
}

func (x OpenconfigSpanningTreeTypesSTPPORTROLE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSpanningTreeTypesSTPPORTROLE.Descriptor instead.
func (OpenconfigSpanningTreeTypesSTPPORTROLE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{176}
}

// OpenconfigSpanningTreeTypesSTPPORTSTATE represents an enumerated type generated for the YANG identity STP_PORT_STATE.
type OpenconfigSpanningTreeTypesSTPPORTSTATE int32

const (
	OpenconfigSpanningTreeTypesSTPPORTSTATE_OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_UNSET      OpenconfigSpanningTreeTypesSTPPORTSTATE = 0
	OpenconfigSpanningTreeTypesSTPPORTSTATE_OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_LISTENING  OpenconfigSpanningTreeTypesSTPPORTSTATE = 74634915
	OpenconfigSpanningTreeTypesSTPPORTSTATE_OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_DISABLED   OpenconfigSpanningTreeTypesSTPPORTSTATE = 122461572
	OpenconfigSpanningTreeTypesSTPPORTSTATE_OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_LEARNING   OpenconfigSpanningTreeTypesSTPPORTSTATE = 339423026
	OpenconfigSpanningTreeTypesSTPPORTSTATE_OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_FORWARDING OpenconfigSpanningTreeTypesSTPPORTSTATE = 420964493
	OpenconfigSpanningTreeTypesSTPPORTSTATE_OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_BLOCKING   OpenconfigSpanningTreeTypesSTPPORTSTATE = 443083057
)

// Enum value maps for OpenconfigSpanningTreeTypesSTPPORTSTATE.
var (
	OpenconfigSpanningTreeTypesSTPPORTSTATE_name = map[int32]string{
		0:         "OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_UNSET",
		74634915:  "OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_LISTENING",
		122461572: "OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_DISABLED",
		339423026: "OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_LEARNING",
		420964493: "OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_FORWARDING",
		443083057: "OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_BLOCKING",
	}
	OpenconfigSpanningTreeTypesSTPPORTSTATE_value = map[string]int32{
		"OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_UNSET":      0,
		"OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_LISTENING":  74634915,
		"OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_DISABLED":   122461572,
		"OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_LEARNING":   339423026,
		"OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_FORWARDING": 420964493,
		"OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_BLOCKING":   443083057,
	}
)

func (x OpenconfigSpanningTreeTypesSTPPORTSTATE) Enum() *OpenconfigSpanningTreeTypesSTPPORTSTATE {
	p := new(OpenconfigSpanningTreeTypesSTPPORTSTATE)
	*p = x
	return p
}

func (x OpenconfigSpanningTreeTypesSTPPORTSTATE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSpanningTreeTypesSTPPORTSTATE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[177].Descriptor()
}

func (OpenconfigSpanningTreeTypesSTPPORTSTATE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[177]
}

func (x OpenconfigSpanningTreeTypesSTPPORTSTATE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSpanningTreeTypesSTPPORTSTATE.Descriptor instead.
func (OpenconfigSpanningTreeTypesSTPPORTSTATE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{177}
}

// OpenconfigSpanningTreeTypesSTPPROTOCOL represents an enumerated type generated for the YANG identity STP_PROTOCOL.
type OpenconfigSpanningTreeTypesSTPPROTOCOL int32

const (
	OpenconfigSpanningTreeTypesSTPPROTOCOL_OPENCONFIGSPANNINGTREETYPESSTPPROTOCOL_UNSET      OpenconfigSpanningTreeTypesSTPPROTOCOL = 0
	OpenconfigSpanningTreeTypesSTPPROTOCOL_OPENCONFIGSPANNINGTREETYPESSTPPROTOCOL_MSTP       OpenconfigSpanningTreeTypesSTPPROTOCOL = 10309415
	OpenconfigSpanningTreeTypesSTPPROTOCOL_OPENCONFIGSPANNINGTREETYPESSTPPROTOCOL_RSTP       OpenconfigSpanningTreeTypesSTPPROTOCOL = 363977194
	OpenconfigSpanningTreeTypesSTPPROTOCOL_OPENCONFIGSPANNINGTREETYPESSTPPROTOCOL_RAPID_PVST OpenconfigSpanningTreeTypesSTPPROTOCOL = 473891845
)

// Enum value maps for OpenconfigSpanningTreeTypesSTPPROTOCOL.
var (
	OpenconfigSpanningTreeTypesSTPPROTOCOL_name = map[int32]string{
		0:         "OPENCONFIGSPANNINGTREETYPESSTPPROTOCOL_UNSET",
		10309415:  "OPENCONFIGSPANNINGTREETYPESSTPPROTOCOL_MSTP",
		363977194: "OPENCONFIGSPANNINGTREETYPESSTPPROTOCOL_RSTP",
		473891845: "OPENCONFIGSPANNINGTREETYPESSTPPROTOCOL_RAPID_PVST",
	}
	OpenconfigSpanningTreeTypesSTPPROTOCOL_value = map[string]int32{
		"OPENCONFIGSPANNINGTREETYPESSTPPROTOCOL_UNSET":      0,
		"OPENCONFIGSPANNINGTREETYPESSTPPROTOCOL_MSTP":       10309415,
		"OPENCONFIGSPANNINGTREETYPESSTPPROTOCOL_RSTP":       363977194,
		"OPENCONFIGSPANNINGTREETYPESSTPPROTOCOL_RAPID_PVST": 473891845,
	}
)

func (x OpenconfigSpanningTreeTypesSTPPROTOCOL) Enum() *OpenconfigSpanningTreeTypesSTPPROTOCOL {
	p := new(OpenconfigSpanningTreeTypesSTPPROTOCOL)
	*p = x
	return p
}

func (x OpenconfigSpanningTreeTypesSTPPROTOCOL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSpanningTreeTypesSTPPROTOCOL) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[178].Descriptor()
}

func (OpenconfigSpanningTreeTypesSTPPROTOCOL) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[178]
}

func (x OpenconfigSpanningTreeTypesSTPPROTOCOL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSpanningTreeTypesSTPPROTOCOL.Descriptor instead.
func (OpenconfigSpanningTreeTypesSTPPROTOCOL) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{178}
}

// OpenconfigSrtePolicyEnlpType represents an enumerated type generated for the YANG enumerated type enlp-type.
type OpenconfigSrtePolicyEnlpType int32

const (
	OpenconfigSrtePolicyEnlpType_OPENCONFIGSRTEPOLICYENLPTYPE_UNSET                    OpenconfigSrtePolicyEnlpType = 0
	OpenconfigSrtePolicyEnlpType_OPENCONFIGSRTEPOLICYENLPTYPE_PUSH_IPV4_EXPLICIT_NULL  OpenconfigSrtePolicyEnlpType = 1
	OpenconfigSrtePolicyEnlpType_OPENCONFIGSRTEPOLICYENLPTYPE_PUSH_IPV6_EXPLICIT_NULL  OpenconfigSrtePolicyEnlpType = 2
	OpenconfigSrtePolicyEnlpType_OPENCONFIGSRTEPOLICYENLPTYPE_PUSH_IPV46_EXPLICIT_NULL OpenconfigSrtePolicyEnlpType = 3
	OpenconfigSrtePolicyEnlpType_OPENCONFIGSRTEPOLICYENLPTYPE_NO_EXPLICIT_NULL         OpenconfigSrtePolicyEnlpType = 4
)

// Enum value maps for OpenconfigSrtePolicyEnlpType.
var (
	OpenconfigSrtePolicyEnlpType_name = map[int32]string{
		0: "OPENCONFIGSRTEPOLICYENLPTYPE_UNSET",
		1: "OPENCONFIGSRTEPOLICYENLPTYPE_PUSH_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGSRTEPOLICYENLPTYPE_PUSH_IPV6_EXPLICIT_NULL",
		3: "OPENCONFIGSRTEPOLICYENLPTYPE_PUSH_IPV46_EXPLICIT_NULL",
		4: "OPENCONFIGSRTEPOLICYENLPTYPE_NO_EXPLICIT_NULL",
	}
	OpenconfigSrtePolicyEnlpType_value = map[string]int32{
		"OPENCONFIGSRTEPOLICYENLPTYPE_UNSET":                    0,
		"OPENCONFIGSRTEPOLICYENLPTYPE_PUSH_IPV4_EXPLICIT_NULL":  1,
		"OPENCONFIGSRTEPOLICYENLPTYPE_PUSH_IPV6_EXPLICIT_NULL":  2,
		"OPENCONFIGSRTEPOLICYENLPTYPE_PUSH_IPV46_EXPLICIT_NULL": 3,
		"OPENCONFIGSRTEPOLICYENLPTYPE_NO_EXPLICIT_NULL":         4,
	}
)

func (x OpenconfigSrtePolicyEnlpType) Enum() *OpenconfigSrtePolicyEnlpType {
	p := new(OpenconfigSrtePolicyEnlpType)
	*p = x
	return p
}

func (x OpenconfigSrtePolicyEnlpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSrtePolicyEnlpType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[179].Descriptor()
}

func (OpenconfigSrtePolicyEnlpType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[179]
}

func (x OpenconfigSrtePolicyEnlpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSrtePolicyEnlpType.Descriptor instead.
func (OpenconfigSrtePolicyEnlpType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{179}
}

// OpenconfigSrtePolicySrteInvalidSlReason represents an enumerated type generated for the YANG enumerated type srte-invalid-sl-reason.
type OpenconfigSrtePolicySrteInvalidSlReason int32

const (
	OpenconfigSrtePolicySrteInvalidSlReason_OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_UNSET                  OpenconfigSrtePolicySrteInvalidSlReason = 0
	OpenconfigSrtePolicySrteInvalidSlReason_OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_EMPTY_SL               OpenconfigSrtePolicySrteInvalidSlReason = 1
	OpenconfigSrtePolicySrteInvalidSlReason_OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_ZERO_WEIGHT            OpenconfigSrtePolicySrteInvalidSlReason = 2
	OpenconfigSrtePolicySrteInvalidSlReason_OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_FIRST_SID_UNRESOLVABLE OpenconfigSrtePolicySrteInvalidSlReason = 3
	OpenconfigSrtePolicySrteInvalidSlReason_OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_OTHER_SID_UNRESOLVABLE OpenconfigSrtePolicySrteInvalidSlReason = 4
	OpenconfigSrtePolicySrteInvalidSlReason_OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_VERIFICATION_FAIL      OpenconfigSrtePolicySrteInvalidSlReason = 5
)

// Enum value maps for OpenconfigSrtePolicySrteInvalidSlReason.
var (
	OpenconfigSrtePolicySrteInvalidSlReason_name = map[int32]string{
		0: "OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_UNSET",
		1: "OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_EMPTY_SL",
		2: "OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_ZERO_WEIGHT",
		3: "OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_FIRST_SID_UNRESOLVABLE",
		4: "OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_OTHER_SID_UNRESOLVABLE",
		5: "OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_VERIFICATION_FAIL",
	}
	OpenconfigSrtePolicySrteInvalidSlReason_value = map[string]int32{
		"OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_UNSET":                  0,
		"OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_EMPTY_SL":               1,
		"OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_ZERO_WEIGHT":            2,
		"OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_FIRST_SID_UNRESOLVABLE": 3,
		"OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_OTHER_SID_UNRESOLVABLE": 4,
		"OPENCONFIGSRTEPOLICYSRTEINVALIDSLREASON_VERIFICATION_FAIL":      5,
	}
)

func (x OpenconfigSrtePolicySrteInvalidSlReason) Enum() *OpenconfigSrtePolicySrteInvalidSlReason {
	p := new(OpenconfigSrtePolicySrteInvalidSlReason)
	*p = x
	return p
}

func (x OpenconfigSrtePolicySrteInvalidSlReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSrtePolicySrteInvalidSlReason) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[180].Descriptor()
}

func (OpenconfigSrtePolicySrteInvalidSlReason) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[180]
}

func (x OpenconfigSrtePolicySrteInvalidSlReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSrtePolicySrteInvalidSlReason.Descriptor instead.
func (OpenconfigSrtePolicySrteInvalidSlReason) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{180}
}

// OpenconfigSrtePolicySrteProtocolType represents an enumerated type generated for the YANG enumerated type srte-protocol-type.
type OpenconfigSrtePolicySrteProtocolType int32

const (
	OpenconfigSrtePolicySrteProtocolType_OPENCONFIGSRTEPOLICYSRTEPROTOCOLTYPE_UNSET  OpenconfigSrtePolicySrteProtocolType = 0
	OpenconfigSrtePolicySrteProtocolType_OPENCONFIGSRTEPOLICYSRTEPROTOCOLTYPE_PCEP   OpenconfigSrtePolicySrteProtocolType = 11
	OpenconfigSrtePolicySrteProtocolType_OPENCONFIGSRTEPOLICYSRTEPROTOCOLTYPE_BGP    OpenconfigSrtePolicySrteProtocolType = 21
	OpenconfigSrtePolicySrteProtocolType_OPENCONFIGSRTEPOLICYSRTEPROTOCOLTYPE_CONFIG OpenconfigSrtePolicySrteProtocolType = 31
)

// Enum value maps for OpenconfigSrtePolicySrteProtocolType.
var (
	OpenconfigSrtePolicySrteProtocolType_name = map[int32]string{
		0:  "OPENCONFIGSRTEPOLICYSRTEPROTOCOLTYPE_UNSET",
		11: "OPENCONFIGSRTEPOLICYSRTEPROTOCOLTYPE_PCEP",
		21: "OPENCONFIGSRTEPOLICYSRTEPROTOCOLTYPE_BGP",
		31: "OPENCONFIGSRTEPOLICYSRTEPROTOCOLTYPE_CONFIG",
	}
	OpenconfigSrtePolicySrteProtocolType_value = map[string]int32{
		"OPENCONFIGSRTEPOLICYSRTEPROTOCOLTYPE_UNSET":  0,
		"OPENCONFIGSRTEPOLICYSRTEPROTOCOLTYPE_PCEP":   11,
		"OPENCONFIGSRTEPOLICYSRTEPROTOCOLTYPE_BGP":    21,
		"OPENCONFIGSRTEPOLICYSRTEPROTOCOLTYPE_CONFIG": 31,
	}
)

func (x OpenconfigSrtePolicySrteProtocolType) Enum() *OpenconfigSrtePolicySrteProtocolType {
	p := new(OpenconfigSrtePolicySrteProtocolType)
	*p = x
	return p
}

func (x OpenconfigSrtePolicySrteProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSrtePolicySrteProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[181].Descriptor()
}

func (OpenconfigSrtePolicySrteProtocolType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[181]
}

func (x OpenconfigSrtePolicySrteProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSrtePolicySrteProtocolType.Descriptor instead.
func (OpenconfigSrtePolicySrteProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{181}
}

// OpenconfigSystemLoggingSYSLOGFACILITY represents an enumerated type generated for the YANG identity SYSLOG_FACILITY.
type OpenconfigSystemLoggingSYSLOGFACILITY int32

const (
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET         OpenconfigSystemLoggingSYSLOGFACILITY = 0
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUTHPRIV      OpenconfigSystemLoggingSYSLOGFACILITY = 1992095
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_MAIL          OpenconfigSystemLoggingSYSLOGFACILITY = 110300463
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL5        OpenconfigSystemLoggingSYSLOGFACILITY = 196925136
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL4        OpenconfigSystemLoggingSYSLOGFACILITY = 196925137
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL7        OpenconfigSystemLoggingSYSLOGFACILITY = 196925138
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL6        OpenconfigSystemLoggingSYSLOGFACILITY = 196925139
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL1        OpenconfigSystemLoggingSYSLOGFACILITY = 196925140
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL0        OpenconfigSystemLoggingSYSLOGFACILITY = 196925141
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL3        OpenconfigSystemLoggingSYSLOGFACILITY = 196925142
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL2        OpenconfigSystemLoggingSYSLOGFACILITY = 196925143
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_ALL           OpenconfigSystemLoggingSYSLOGFACILITY = 252252703
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_CONSOLE       OpenconfigSystemLoggingSYSLOGFACILITY = 336452861
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_NTP           OpenconfigSystemLoggingSYSLOGFACILITY = 350428412
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_KERNEL        OpenconfigSystemLoggingSYSLOGFACILITY = 398004525
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUDIT         OpenconfigSystemLoggingSYSLOGFACILITY = 477963459
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUTH          OpenconfigSystemLoggingSYSLOGFACILITY = 478239772
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_SYSTEM_DAEMON OpenconfigSystemLoggingSYSLOGFACILITY = 499486404
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_SYSLOG        OpenconfigSystemLoggingSYSLOGFACILITY = 508909033
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_USER          OpenconfigSystemLoggingSYSLOGFACILITY = 523894347
)

// Enum value maps for OpenconfigSystemLoggingSYSLOGFACILITY.
var (
	OpenconfigSystemLoggingSYSLOGFACILITY_name = map[int32]string{
		0:         "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET",
		1992095:   "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUTHPRIV",
		110300463: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_MAIL",
		196925136: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL5",
		196925137: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL4",
		196925138: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL7",
		196925139: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL6",
		196925140: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL1",
		196925141: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL0",
		196925142: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL3",
		196925143: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL2",
		252252703: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_ALL",
		336452861: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_CONSOLE",
		350428412: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_NTP",
		398004525: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_KERNEL",
		477963459: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUDIT",
		478239772: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUTH",
		499486404: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_SYSTEM_DAEMON",
		508909033: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_SYSLOG",
		523894347: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_USER",
	}
	OpenconfigSystemLoggingSYSLOGFACILITY_value = map[string]int32{
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET":         0,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUTHPRIV":      1992095,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_MAIL":          110300463,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL5":        196925136,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL4":        196925137,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL7":        196925138,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL6":        196925139,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL1":        196925140,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL0":        196925141,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL3":        196925142,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL2":        196925143,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_ALL":           252252703,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_CONSOLE":       336452861,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_NTP":           350428412,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_KERNEL":        398004525,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUDIT":         477963459,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUTH":          478239772,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_SYSTEM_DAEMON": 499486404,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_SYSLOG":        508909033,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_USER":          523894347,
	}
)

func (x OpenconfigSystemLoggingSYSLOGFACILITY) Enum() *OpenconfigSystemLoggingSYSLOGFACILITY {
	p := new(OpenconfigSystemLoggingSYSLOGFACILITY)
	*p = x
	return p
}

func (x OpenconfigSystemLoggingSYSLOGFACILITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSystemLoggingSYSLOGFACILITY) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[182].Descriptor()
}

func (OpenconfigSystemLoggingSYSLOGFACILITY) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[182]
}

func (x OpenconfigSystemLoggingSYSLOGFACILITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSystemLoggingSYSLOGFACILITY.Descriptor instead.
func (OpenconfigSystemLoggingSYSLOGFACILITY) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{182}
}

// OpenconfigSystemLoggingSyslogSeverity represents an enumerated type generated for the YANG enumerated type syslog-severity.
type OpenconfigSystemLoggingSyslogSeverity int32

const (
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET         OpenconfigSystemLoggingSyslogSeverity = 0
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_EMERGENCY     OpenconfigSystemLoggingSyslogSeverity = 1
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_ALERT         OpenconfigSystemLoggingSyslogSeverity = 2
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_CRITICAL      OpenconfigSystemLoggingSyslogSeverity = 3
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_ERROR         OpenconfigSystemLoggingSyslogSeverity = 4
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_WARNING       OpenconfigSystemLoggingSyslogSeverity = 5
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_NOTICE        OpenconfigSystemLoggingSyslogSeverity = 6
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_INFORMATIONAL OpenconfigSystemLoggingSyslogSeverity = 7
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_DEBUG         OpenconfigSystemLoggingSyslogSeverity = 8
)

// Enum value maps for OpenconfigSystemLoggingSyslogSeverity.
var (
	OpenconfigSystemLoggingSyslogSeverity_name = map[int32]string{
		0: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET",
		1: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_EMERGENCY",
		2: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_ALERT",
		3: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_CRITICAL",
		4: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_ERROR",
		5: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_WARNING",
		6: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_NOTICE",
		7: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_INFORMATIONAL",
		8: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_DEBUG",
	}
	OpenconfigSystemLoggingSyslogSeverity_value = map[string]int32{
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET":         0,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_EMERGENCY":     1,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_ALERT":         2,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_CRITICAL":      3,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_ERROR":         4,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_WARNING":       5,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_NOTICE":        6,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_INFORMATIONAL": 7,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_DEBUG":         8,
	}
)

func (x OpenconfigSystemLoggingSyslogSeverity) Enum() *OpenconfigSystemLoggingSyslogSeverity {
	p := new(OpenconfigSystemLoggingSyslogSeverity)
	*p = x
	return p
}

func (x OpenconfigSystemLoggingSyslogSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSystemLoggingSyslogSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[183].Descriptor()
}

func (OpenconfigSystemLoggingSyslogSeverity) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[183]
}

func (x OpenconfigSystemLoggingSyslogSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSystemLoggingSyslogSeverity.Descriptor instead.
func (OpenconfigSystemLoggingSyslogSeverity) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{183}
}

// OpenconfigSystemNTPAUTHTYPE represents an enumerated type generated for the YANG identity NTP_AUTH_TYPE.
type OpenconfigSystemNTPAUTHTYPE int32

const (
	OpenconfigSystemNTPAUTHTYPE_OPENCONFIGSYSTEMNTPAUTHTYPE_UNSET        OpenconfigSystemNTPAUTHTYPE = 0
	OpenconfigSystemNTPAUTHTYPE_OPENCONFIGSYSTEMNTPAUTHTYPE_NTP_AUTH_MD5 OpenconfigSystemNTPAUTHTYPE = 142463499
)

// Enum value maps for OpenconfigSystemNTPAUTHTYPE.
var (
	OpenconfigSystemNTPAUTHTYPE_name = map[int32]string{
		0:         "OPENCONFIGSYSTEMNTPAUTHTYPE_UNSET",
		142463499: "OPENCONFIGSYSTEMNTPAUTHTYPE_NTP_AUTH_MD5",
	}
	OpenconfigSystemNTPAUTHTYPE_value = map[string]int32{
		"OPENCONFIGSYSTEMNTPAUTHTYPE_UNSET":        0,
		"OPENCONFIGSYSTEMNTPAUTHTYPE_NTP_AUTH_MD5": 142463499,
	}
)

func (x OpenconfigSystemNTPAUTHTYPE) Enum() *OpenconfigSystemNTPAUTHTYPE {
	p := new(OpenconfigSystemNTPAUTHTYPE)
	*p = x
	return p
}

func (x OpenconfigSystemNTPAUTHTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSystemNTPAUTHTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[184].Descriptor()
}

func (OpenconfigSystemNTPAUTHTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[184]
}

func (x OpenconfigSystemNTPAUTHTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSystemNTPAUTHTYPE.Descriptor instead.
func (OpenconfigSystemNTPAUTHTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{184}
}

// OpenconfigTelemetryTypesDATAENCODINGMETHOD represents an enumerated type generated for the YANG identity DATA_ENCODING_METHOD.
type OpenconfigTelemetryTypesDATAENCODINGMETHOD int32

const (
	OpenconfigTelemetryTypesDATAENCODINGMETHOD_OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_UNSET         OpenconfigTelemetryTypesDATAENCODINGMETHOD = 0
	OpenconfigTelemetryTypesDATAENCODINGMETHOD_OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_ENC_XML       OpenconfigTelemetryTypesDATAENCODINGMETHOD = 204407329
	OpenconfigTelemetryTypesDATAENCODINGMETHOD_OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_ENC_PROTO3    OpenconfigTelemetryTypesDATAENCODINGMETHOD = 215360919
	OpenconfigTelemetryTypesDATAENCODINGMETHOD_OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_ENC_JSON_IETF OpenconfigTelemetryTypesDATAENCODINGMETHOD = 437483571
)

// Enum value maps for OpenconfigTelemetryTypesDATAENCODINGMETHOD.
var (
	OpenconfigTelemetryTypesDATAENCODINGMETHOD_name = map[int32]string{
		0:         "OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_UNSET",
		204407329: "OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_ENC_XML",
		215360919: "OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_ENC_PROTO3",
		437483571: "OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_ENC_JSON_IETF",
	}
	OpenconfigTelemetryTypesDATAENCODINGMETHOD_value = map[string]int32{
		"OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_UNSET":         0,
		"OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_ENC_XML":       204407329,
		"OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_ENC_PROTO3":    215360919,
		"OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_ENC_JSON_IETF": 437483571,
	}
)

func (x OpenconfigTelemetryTypesDATAENCODINGMETHOD) Enum() *OpenconfigTelemetryTypesDATAENCODINGMETHOD {
	p := new(OpenconfigTelemetryTypesDATAENCODINGMETHOD)
	*p = x
	return p
}

func (x OpenconfigTelemetryTypesDATAENCODINGMETHOD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTelemetryTypesDATAENCODINGMETHOD) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[185].Descriptor()
}

func (OpenconfigTelemetryTypesDATAENCODINGMETHOD) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[185]
}

func (x OpenconfigTelemetryTypesDATAENCODINGMETHOD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTelemetryTypesDATAENCODINGMETHOD.Descriptor instead.
func (OpenconfigTelemetryTypesDATAENCODINGMETHOD) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{185}
}

// OpenconfigTelemetryTypesSTREAMPROTOCOL represents an enumerated type generated for the YANG identity STREAM_PROTOCOL.
type OpenconfigTelemetryTypesSTREAMPROTOCOL int32

const (
	OpenconfigTelemetryTypesSTREAMPROTOCOL_OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_UNSET                OpenconfigTelemetryTypesSTREAMPROTOCOL = 0
	OpenconfigTelemetryTypesSTREAMPROTOCOL_OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_WEBSOCKET_RPC OpenconfigTelemetryTypesSTREAMPROTOCOL = 30081208
	OpenconfigTelemetryTypesSTREAMPROTOCOL_OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_SSH           OpenconfigTelemetryTypesSTREAMPROTOCOL = 351617103
	OpenconfigTelemetryTypesSTREAMPROTOCOL_OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_JSON_RPC      OpenconfigTelemetryTypesSTREAMPROTOCOL = 398987529
	OpenconfigTelemetryTypesSTREAMPROTOCOL_OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_THRIFT_RPC    OpenconfigTelemetryTypesSTREAMPROTOCOL = 412665066
	OpenconfigTelemetryTypesSTREAMPROTOCOL_OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_GRPC          OpenconfigTelemetryTypesSTREAMPROTOCOL = 494836683
)

// Enum value maps for OpenconfigTelemetryTypesSTREAMPROTOCOL.
var (
	OpenconfigTelemetryTypesSTREAMPROTOCOL_name = map[int32]string{
		0:         "OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_UNSET",
		30081208:  "OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_WEBSOCKET_RPC",
		351617103: "OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_SSH",
		398987529: "OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_JSON_RPC",
		412665066: "OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_THRIFT_RPC",
		494836683: "OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_GRPC",
	}
	OpenconfigTelemetryTypesSTREAMPROTOCOL_value = map[string]int32{
		"OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_UNSET":                0,
		"OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_WEBSOCKET_RPC": 30081208,
		"OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_SSH":           351617103,
		"OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_JSON_RPC":      398987529,
		"OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_THRIFT_RPC":    412665066,
		"OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STREAM_GRPC":          494836683,
	}
)

func (x OpenconfigTelemetryTypesSTREAMPROTOCOL) Enum() *OpenconfigTelemetryTypesSTREAMPROTOCOL {
	p := new(OpenconfigTelemetryTypesSTREAMPROTOCOL)
	*p = x
	return p
}

func (x OpenconfigTelemetryTypesSTREAMPROTOCOL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTelemetryTypesSTREAMPROTOCOL) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[186].Descriptor()
}

func (OpenconfigTelemetryTypesSTREAMPROTOCOL) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[186]
}

func (x OpenconfigTelemetryTypesSTREAMPROTOCOL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTelemetryTypesSTREAMPROTOCOL.Descriptor instead.
func (OpenconfigTelemetryTypesSTREAMPROTOCOL) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{186}
}

// OpenconfigTerminalDeviceAdminStateType represents an enumerated type generated for the YANG enumerated type admin-state-type.
type OpenconfigTerminalDeviceAdminStateType int32

const (
	OpenconfigTerminalDeviceAdminStateType_OPENCONFIGTERMINALDEVICEADMINSTATETYPE_UNSET    OpenconfigTerminalDeviceAdminStateType = 0
	OpenconfigTerminalDeviceAdminStateType_OPENCONFIGTERMINALDEVICEADMINSTATETYPE_ENABLED  OpenconfigTerminalDeviceAdminStateType = 1
	OpenconfigTerminalDeviceAdminStateType_OPENCONFIGTERMINALDEVICEADMINSTATETYPE_DISABLED OpenconfigTerminalDeviceAdminStateType = 2
	OpenconfigTerminalDeviceAdminStateType_OPENCONFIGTERMINALDEVICEADMINSTATETYPE_MAINT    OpenconfigTerminalDeviceAdminStateType = 3
)

// Enum value maps for OpenconfigTerminalDeviceAdminStateType.
var (
	OpenconfigTerminalDeviceAdminStateType_name = map[int32]string{
		0: "OPENCONFIGTERMINALDEVICEADMINSTATETYPE_UNSET",
		1: "OPENCONFIGTERMINALDEVICEADMINSTATETYPE_ENABLED",
		2: "OPENCONFIGTERMINALDEVICEADMINSTATETYPE_DISABLED",
		3: "OPENCONFIGTERMINALDEVICEADMINSTATETYPE_MAINT",
	}
	OpenconfigTerminalDeviceAdminStateType_value = map[string]int32{
		"OPENCONFIGTERMINALDEVICEADMINSTATETYPE_UNSET":    0,
		"OPENCONFIGTERMINALDEVICEADMINSTATETYPE_ENABLED":  1,
		"OPENCONFIGTERMINALDEVICEADMINSTATETYPE_DISABLED": 2,
		"OPENCONFIGTERMINALDEVICEADMINSTATETYPE_MAINT":    3,
	}
)

func (x OpenconfigTerminalDeviceAdminStateType) Enum() *OpenconfigTerminalDeviceAdminStateType {
	p := new(OpenconfigTerminalDeviceAdminStateType)
	*p = x
	return p
}

func (x OpenconfigTerminalDeviceAdminStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTerminalDeviceAdminStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[187].Descriptor()
}

func (OpenconfigTerminalDeviceAdminStateType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[187]
}

func (x OpenconfigTerminalDeviceAdminStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTerminalDeviceAdminStateType.Descriptor instead.
func (OpenconfigTerminalDeviceAdminStateType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{187}
}

// OpenconfigTerminalDeviceLoopbackModeType represents an enumerated type generated for the YANG enumerated type loopback-mode-type.
type OpenconfigTerminalDeviceLoopbackModeType int32

const (
	OpenconfigTerminalDeviceLoopbackModeType_OPENCONFIGTERMINALDEVICELOOPBACKMODETYPE_NONE     OpenconfigTerminalDeviceLoopbackModeType = 0
	OpenconfigTerminalDeviceLoopbackModeType_OPENCONFIGTERMINALDEVICELOOPBACKMODETYPE_FACILITY OpenconfigTerminalDeviceLoopbackModeType = 2
	OpenconfigTerminalDeviceLoopbackModeType_OPENCONFIGTERMINALDEVICELOOPBACKMODETYPE_TERMINAL OpenconfigTerminalDeviceLoopbackModeType = 3
)

// Enum value maps for OpenconfigTerminalDeviceLoopbackModeType.
var (
	OpenconfigTerminalDeviceLoopbackModeType_name = map[int32]string{
		0: "OPENCONFIGTERMINALDEVICELOOPBACKMODETYPE_NONE",
		2: "OPENCONFIGTERMINALDEVICELOOPBACKMODETYPE_FACILITY",
		3: "OPENCONFIGTERMINALDEVICELOOPBACKMODETYPE_TERMINAL",
	}
	OpenconfigTerminalDeviceLoopbackModeType_value = map[string]int32{
		"OPENCONFIGTERMINALDEVICELOOPBACKMODETYPE_NONE":     0,
		"OPENCONFIGTERMINALDEVICELOOPBACKMODETYPE_FACILITY": 2,
		"OPENCONFIGTERMINALDEVICELOOPBACKMODETYPE_TERMINAL": 3,
	}
)

func (x OpenconfigTerminalDeviceLoopbackModeType) Enum() *OpenconfigTerminalDeviceLoopbackModeType {
	p := new(OpenconfigTerminalDeviceLoopbackModeType)
	*p = x
	return p
}

func (x OpenconfigTerminalDeviceLoopbackModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTerminalDeviceLoopbackModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[188].Descriptor()
}

func (OpenconfigTerminalDeviceLoopbackModeType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[188]
}

func (x OpenconfigTerminalDeviceLoopbackModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTerminalDeviceLoopbackModeType.Descriptor instead.
func (OpenconfigTerminalDeviceLoopbackModeType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{188}
}

// OpenconfigTransportLineCommonAdminStateType represents an enumerated type generated for the YANG enumerated type admin-state-type.
type OpenconfigTransportLineCommonAdminStateType int32

const (
	OpenconfigTransportLineCommonAdminStateType_OPENCONFIGTRANSPORTLINECOMMONADMINSTATETYPE_UNSET    OpenconfigTransportLineCommonAdminStateType = 0
	OpenconfigTransportLineCommonAdminStateType_OPENCONFIGTRANSPORTLINECOMMONADMINSTATETYPE_ENABLED  OpenconfigTransportLineCommonAdminStateType = 1
	OpenconfigTransportLineCommonAdminStateType_OPENCONFIGTRANSPORTLINECOMMONADMINSTATETYPE_DISABLED OpenconfigTransportLineCommonAdminStateType = 2
	OpenconfigTransportLineCommonAdminStateType_OPENCONFIGTRANSPORTLINECOMMONADMINSTATETYPE_MAINT    OpenconfigTransportLineCommonAdminStateType = 3
)

// Enum value maps for OpenconfigTransportLineCommonAdminStateType.
var (
	OpenconfigTransportLineCommonAdminStateType_name = map[int32]string{
		0: "OPENCONFIGTRANSPORTLINECOMMONADMINSTATETYPE_UNSET",
		1: "OPENCONFIGTRANSPORTLINECOMMONADMINSTATETYPE_ENABLED",
		2: "OPENCONFIGTRANSPORTLINECOMMONADMINSTATETYPE_DISABLED",
		3: "OPENCONFIGTRANSPORTLINECOMMONADMINSTATETYPE_MAINT",
	}
	OpenconfigTransportLineCommonAdminStateType_value = map[string]int32{
		"OPENCONFIGTRANSPORTLINECOMMONADMINSTATETYPE_UNSET":    0,
		"OPENCONFIGTRANSPORTLINECOMMONADMINSTATETYPE_ENABLED":  1,
		"OPENCONFIGTRANSPORTLINECOMMONADMINSTATETYPE_DISABLED": 2,
		"OPENCONFIGTRANSPORTLINECOMMONADMINSTATETYPE_MAINT":    3,
	}
)

func (x OpenconfigTransportLineCommonAdminStateType) Enum() *OpenconfigTransportLineCommonAdminStateType {
	p := new(OpenconfigTransportLineCommonAdminStateType)
	*p = x
	return p
}

func (x OpenconfigTransportLineCommonAdminStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportLineCommonAdminStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[189].Descriptor()
}

func (OpenconfigTransportLineCommonAdminStateType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[189]
}

func (x OpenconfigTransportLineCommonAdminStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportLineCommonAdminStateType.Descriptor instead.
func (OpenconfigTransportLineCommonAdminStateType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{189}
}

// OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE represents an enumerated type generated for the YANG identity PORT_CONNECTION_TYPE.
type OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE int32

const (
	OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE_OPENCONFIGTRANSPORTLINECONNECTIVITYPORTCONNECTIONTYPE_UNSET    OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE = 0
	OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE_OPENCONFIGTRANSPORTLINECONNECTIVITYPORTCONNECTIONTYPE_EXTERNAL OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE = 486411779
)

// Enum value maps for OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE.
var (
	OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE_name = map[int32]string{
		0:         "OPENCONFIGTRANSPORTLINECONNECTIVITYPORTCONNECTIONTYPE_UNSET",
		486411779: "OPENCONFIGTRANSPORTLINECONNECTIVITYPORTCONNECTIONTYPE_EXTERNAL",
	}
	OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE_value = map[string]int32{
		"OPENCONFIGTRANSPORTLINECONNECTIVITYPORTCONNECTIONTYPE_UNSET":    0,
		"OPENCONFIGTRANSPORTLINECONNECTIVITYPORTCONNECTIONTYPE_EXTERNAL": 486411779,
	}
)

func (x OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE) Enum() *OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE {
	p := new(OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE)
	*p = x
	return p
}

func (x OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[190].Descriptor()
}

func (OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[190]
}

func (x OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE.Descriptor instead.
func (OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{190}
}

// OpenconfigTransportLineProtectionAPSPATHS represents an enumerated type generated for the YANG identity APS_PATHS.
type OpenconfigTransportLineProtectionAPSPATHS int32

const (
	OpenconfigTransportLineProtectionAPSPATHS_OPENCONFIGTRANSPORTLINEPROTECTIONAPSPATHS_UNSET     OpenconfigTransportLineProtectionAPSPATHS = 0
	OpenconfigTransportLineProtectionAPSPATHS_OPENCONFIGTRANSPORTLINEPROTECTIONAPSPATHS_PRIMARY   OpenconfigTransportLineProtectionAPSPATHS = 87909830
	OpenconfigTransportLineProtectionAPSPATHS_OPENCONFIGTRANSPORTLINEPROTECTIONAPSPATHS_SECONDARY OpenconfigTransportLineProtectionAPSPATHS = 289818058
)

// Enum value maps for OpenconfigTransportLineProtectionAPSPATHS.
var (
	OpenconfigTransportLineProtectionAPSPATHS_name = map[int32]string{
		0:         "OPENCONFIGTRANSPORTLINEPROTECTIONAPSPATHS_UNSET",
		87909830:  "OPENCONFIGTRANSPORTLINEPROTECTIONAPSPATHS_PRIMARY",
		289818058: "OPENCONFIGTRANSPORTLINEPROTECTIONAPSPATHS_SECONDARY",
	}
	OpenconfigTransportLineProtectionAPSPATHS_value = map[string]int32{
		"OPENCONFIGTRANSPORTLINEPROTECTIONAPSPATHS_UNSET":     0,
		"OPENCONFIGTRANSPORTLINEPROTECTIONAPSPATHS_PRIMARY":   87909830,
		"OPENCONFIGTRANSPORTLINEPROTECTIONAPSPATHS_SECONDARY": 289818058,
	}
)

func (x OpenconfigTransportLineProtectionAPSPATHS) Enum() *OpenconfigTransportLineProtectionAPSPATHS {
	p := new(OpenconfigTransportLineProtectionAPSPATHS)
	*p = x
	return p
}

func (x OpenconfigTransportLineProtectionAPSPATHS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportLineProtectionAPSPATHS) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[191].Descriptor()
}

func (OpenconfigTransportLineProtectionAPSPATHS) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[191]
}

func (x OpenconfigTransportLineProtectionAPSPATHS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportLineProtectionAPSPATHS.Descriptor instead.
func (OpenconfigTransportLineProtectionAPSPATHS) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{191}
}

// OpenconfigTransportTypesETHERNETPMDTYPE represents an enumerated type generated for the YANG identity ETHERNET_PMD_TYPE.
type OpenconfigTransportTypesETHERNETPMDTYPE int32

const (
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_UNSET              OpenconfigTransportTypesETHERNETPMDTYPE = 0
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100G_AOC       OpenconfigTransportTypesETHERNETPMDTYPE = 53257267
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_CWDM4 OpenconfigTransportTypesETHERNETPMDTYPE = 55024014
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_SR     OpenconfigTransportTypesETHERNETPMDTYPE = 65679294
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_CLR4  OpenconfigTransportTypesETHERNETPMDTYPE = 79394438
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_4X10GBASE_LR   OpenconfigTransportTypesETHERNETPMDTYPE = 107546431
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_4X10GBASE_SR   OpenconfigTransportTypesETHERNETPMDTYPE = 124311282
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_ER4    OpenconfigTransportTypesETHERNETPMDTYPE = 209786485
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_ZR     OpenconfigTransportTypesETHERNETPMDTYPE = 216677957
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100G_ACC       OpenconfigTransportTypesETHERNETPMDTYPE = 254588695
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_UNDEFINED      OpenconfigTransportTypesETHERNETPMDTYPE = 264053939
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_LRM    OpenconfigTransportTypesETHERNETPMDTYPE = 300085572
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_ER     OpenconfigTransportTypesETHERNETPMDTYPE = 300565924
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_LR4    OpenconfigTransportTypesETHERNETPMDTYPE = 311584992
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_PSM4  OpenconfigTransportTypesETHERNETPMDTYPE = 331446205
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_SR4    OpenconfigTransportTypesETHERNETPMDTYPE = 341664355
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_CR4    OpenconfigTransportTypesETHERNETPMDTYPE = 344327411
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_PSM4   OpenconfigTransportTypesETHERNETPMDTYPE = 388488590
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_LR4   OpenconfigTransportTypesETHERNETPMDTYPE = 396712729
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_SR10  OpenconfigTransportTypesETHERNETPMDTYPE = 446413941
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_LR     OpenconfigTransportTypesETHERNETPMDTYPE = 451564659
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_SR4   OpenconfigTransportTypesETHERNETPMDTYPE = 492392898
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_CR4   OpenconfigTransportTypesETHERNETPMDTYPE = 494926994
	OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_ER4   OpenconfigTransportTypesETHERNETPMDTYPE = 495912708
)

// Enum value maps for OpenconfigTransportTypesETHERNETPMDTYPE.
var (
	OpenconfigTransportTypesETHERNETPMDTYPE_name = map[int32]string{
		0:         "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_UNSET",
		53257267:  "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100G_AOC",
		55024014:  "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_CWDM4",
		65679294:  "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_SR",
		79394438:  "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_CLR4",
		107546431: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_4X10GBASE_LR",
		124311282: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_4X10GBASE_SR",
		209786485: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_ER4",
		216677957: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_ZR",
		254588695: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100G_ACC",
		264053939: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_UNDEFINED",
		300085572: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_LRM",
		300565924: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_ER",
		311584992: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_LR4",
		331446205: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_PSM4",
		341664355: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_SR4",
		344327411: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_CR4",
		388488590: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_PSM4",
		396712729: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_LR4",
		446413941: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_SR10",
		451564659: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_LR",
		492392898: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_SR4",
		494926994: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_CR4",
		495912708: "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_ER4",
	}
	OpenconfigTransportTypesETHERNETPMDTYPE_value = map[string]int32{
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_UNSET":              0,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100G_AOC":       53257267,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_CWDM4": 55024014,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_SR":     65679294,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_CLR4":  79394438,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_4X10GBASE_LR":   107546431,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_4X10GBASE_SR":   124311282,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_ER4":    209786485,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_ZR":     216677957,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100G_ACC":       254588695,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_UNDEFINED":      264053939,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_LRM":    300085572,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_ER":     300565924,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_LR4":    311584992,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_PSM4":  331446205,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_SR4":    341664355,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_CR4":    344327411,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBASE_PSM4":   388488590,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_LR4":   396712729,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_SR10":  446413941,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_LR":     451564659,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_SR4":   492392898,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_CR4":   494926994,
		"OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_ER4":   495912708,
	}
)

func (x OpenconfigTransportTypesETHERNETPMDTYPE) Enum() *OpenconfigTransportTypesETHERNETPMDTYPE {
	p := new(OpenconfigTransportTypesETHERNETPMDTYPE)
	*p = x
	return p
}

func (x OpenconfigTransportTypesETHERNETPMDTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportTypesETHERNETPMDTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[192].Descriptor()
}

func (OpenconfigTransportTypesETHERNETPMDTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[192]
}

func (x OpenconfigTransportTypesETHERNETPMDTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportTypesETHERNETPMDTYPE.Descriptor instead.
func (OpenconfigTransportTypesETHERNETPMDTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{192}
}

// OpenconfigTransportTypesFIBERCONNECTORTYPE represents an enumerated type generated for the YANG identity FIBER_CONNECTOR_TYPE.
type OpenconfigTransportTypesFIBERCONNECTORTYPE int32

const (
	OpenconfigTransportTypesFIBERCONNECTORTYPE_OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_UNSET         OpenconfigTransportTypesFIBERCONNECTORTYPE = 0
	OpenconfigTransportTypesFIBERCONNECTORTYPE_OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_DAC_CONNECTOR OpenconfigTransportTypesFIBERCONNECTORTYPE = 283753084
	OpenconfigTransportTypesFIBERCONNECTORTYPE_OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_MPO_CONNECTOR OpenconfigTransportTypesFIBERCONNECTORTYPE = 299077970
	OpenconfigTransportTypesFIBERCONNECTORTYPE_OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_SC_CONNECTOR  OpenconfigTransportTypesFIBERCONNECTORTYPE = 300083266
	OpenconfigTransportTypesFIBERCONNECTORTYPE_OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_LC_CONNECTOR  OpenconfigTransportTypesFIBERCONNECTORTYPE = 416622211
	OpenconfigTransportTypesFIBERCONNECTORTYPE_OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_AOC_CONNECTOR OpenconfigTransportTypesFIBERCONNECTORTYPE = 453528387
)

// Enum value maps for OpenconfigTransportTypesFIBERCONNECTORTYPE.
var (
	OpenconfigTransportTypesFIBERCONNECTORTYPE_name = map[int32]string{
		0:         "OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_UNSET",
		283753084: "OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_DAC_CONNECTOR",
		299077970: "OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_MPO_CONNECTOR",
		300083266: "OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_SC_CONNECTOR",
		416622211: "OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_LC_CONNECTOR",
		453528387: "OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_AOC_CONNECTOR",
	}
	OpenconfigTransportTypesFIBERCONNECTORTYPE_value = map[string]int32{
		"OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_UNSET":         0,
		"OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_DAC_CONNECTOR": 283753084,
		"OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_MPO_CONNECTOR": 299077970,
		"OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_SC_CONNECTOR":  300083266,
		"OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_LC_CONNECTOR":  416622211,
		"OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_AOC_CONNECTOR": 453528387,
	}
)

func (x OpenconfigTransportTypesFIBERCONNECTORTYPE) Enum() *OpenconfigTransportTypesFIBERCONNECTORTYPE {
	p := new(OpenconfigTransportTypesFIBERCONNECTORTYPE)
	*p = x
	return p
}

func (x OpenconfigTransportTypesFIBERCONNECTORTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportTypesFIBERCONNECTORTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[193].Descriptor()
}

func (OpenconfigTransportTypesFIBERCONNECTORTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[193]
}

func (x OpenconfigTransportTypesFIBERCONNECTORTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportTypesFIBERCONNECTORTYPE.Descriptor instead.
func (OpenconfigTransportTypesFIBERCONNECTORTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{193}
}

// OpenconfigTransportTypesFIBERJUMPERTYPE represents an enumerated type generated for the YANG identity FIBER_JUMPER_TYPE.
type OpenconfigTransportTypesFIBERJUMPERTYPE int32

const (
	OpenconfigTransportTypesFIBERJUMPERTYPE_OPENCONFIGTRANSPORTTYPESFIBERJUMPERTYPE_UNSET                           OpenconfigTransportTypesFIBERJUMPERTYPE = 0
	OpenconfigTransportTypesFIBERJUMPERTYPE_OPENCONFIGTRANSPORTTYPESFIBERJUMPERTYPE_FIBER_JUMPER_SIMPLEX            OpenconfigTransportTypesFIBERJUMPERTYPE = 32242871
	OpenconfigTransportTypesFIBERJUMPERTYPE_OPENCONFIGTRANSPORTTYPESFIBERJUMPERTYPE_FIBER_JUMPER_MULTI_FIBER_STRAND OpenconfigTransportTypesFIBERJUMPERTYPE = 278072076
)

// Enum value maps for OpenconfigTransportTypesFIBERJUMPERTYPE.
var (
	OpenconfigTransportTypesFIBERJUMPERTYPE_name = map[int32]string{
		0:         "OPENCONFIGTRANSPORTTYPESFIBERJUMPERTYPE_UNSET",
		32242871:  "OPENCONFIGTRANSPORTTYPESFIBERJUMPERTYPE_FIBER_JUMPER_SIMPLEX",
		278072076: "OPENCONFIGTRANSPORTTYPESFIBERJUMPERTYPE_FIBER_JUMPER_MULTI_FIBER_STRAND",
	}
	OpenconfigTransportTypesFIBERJUMPERTYPE_value = map[string]int32{
		"OPENCONFIGTRANSPORTTYPESFIBERJUMPERTYPE_UNSET":                           0,
		"OPENCONFIGTRANSPORTTYPESFIBERJUMPERTYPE_FIBER_JUMPER_SIMPLEX":            32242871,
		"OPENCONFIGTRANSPORTTYPESFIBERJUMPERTYPE_FIBER_JUMPER_MULTI_FIBER_STRAND": 278072076,
	}
)

func (x OpenconfigTransportTypesFIBERJUMPERTYPE) Enum() *OpenconfigTransportTypesFIBERJUMPERTYPE {
	p := new(OpenconfigTransportTypesFIBERJUMPERTYPE)
	*p = x
	return p
}

func (x OpenconfigTransportTypesFIBERJUMPERTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportTypesFIBERJUMPERTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[194].Descriptor()
}

func (OpenconfigTransportTypesFIBERJUMPERTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[194]
}

func (x OpenconfigTransportTypesFIBERJUMPERTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportTypesFIBERJUMPERTYPE.Descriptor instead.
func (OpenconfigTransportTypesFIBERJUMPERTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{194}
}

// OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL represents an enumerated type generated for the YANG identity FRAME_MAPPING_PROTOCOL.
type OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL int32

const (
	OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL_OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_UNSET OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL = 0
	OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL_OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_BMP   OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL = 127319791
	OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL_OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_AMP   OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL = 127864276
	OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL_OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_GMP   OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL = 195243118
	OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL_OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_GFP_T OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL = 215536774
	OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL_OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_GFP_F OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL = 215536788
	OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL_OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_CBR   OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL = 244923113
)

// Enum value maps for OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL.
var (
	OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL_name = map[int32]string{
		0:         "OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_UNSET",
		127319791: "OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_BMP",
		127864276: "OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_AMP",
		195243118: "OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_GMP",
		215536774: "OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_GFP_T",
		215536788: "OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_GFP_F",
		244923113: "OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_CBR",
	}
	OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL_value = map[string]int32{
		"OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_UNSET": 0,
		"OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_BMP":   127319791,
		"OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_AMP":   127864276,
		"OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_GMP":   195243118,
		"OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_GFP_T": 215536774,
		"OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_GFP_F": 215536788,
		"OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_CBR":   244923113,
	}
)

func (x OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL) Enum() *OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL {
	p := new(OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL)
	*p = x
	return p
}

func (x OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[195].Descriptor()
}

func (OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[195]
}

func (x OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL.Descriptor instead.
func (OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{195}
}

// OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE represents an enumerated type generated for the YANG identity LOGICAL_ELEMENT_PROTOCOL_TYPE.
type OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE int32

const (
	OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESLOGICALELEMENTPROTOCOLTYPE_UNSET         OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE = 0
	OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESLOGICALELEMENTPROTOCOLTYPE_PROT_OTN      OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE = 76371778
	OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESLOGICALELEMENTPROTOCOLTYPE_PROT_ETHERNET OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE = 461892616
)

// Enum value maps for OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE.
var (
	OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE_name = map[int32]string{
		0:         "OPENCONFIGTRANSPORTTYPESLOGICALELEMENTPROTOCOLTYPE_UNSET",
		76371778:  "OPENCONFIGTRANSPORTTYPESLOGICALELEMENTPROTOCOLTYPE_PROT_OTN",
		461892616: "OPENCONFIGTRANSPORTTYPESLOGICALELEMENTPROTOCOLTYPE_PROT_ETHERNET",
	}
	OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE_value = map[string]int32{
		"OPENCONFIGTRANSPORTTYPESLOGICALELEMENTPROTOCOLTYPE_UNSET":         0,
		"OPENCONFIGTRANSPORTTYPESLOGICALELEMENTPROTOCOLTYPE_PROT_OTN":      76371778,
		"OPENCONFIGTRANSPORTTYPESLOGICALELEMENTPROTOCOLTYPE_PROT_ETHERNET": 461892616,
	}
)

func (x OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE) Enum() *OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE {
	p := new(OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE)
	*p = x
	return p
}

func (x OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[196].Descriptor()
}

func (OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[196]
}

func (x OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE.Descriptor instead.
func (OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{196}
}

// OpenconfigTransportTypesOPTICALPORTTYPE represents an enumerated type generated for the YANG identity OPTICAL_PORT_TYPE.
type OpenconfigTransportTypesOPTICALPORTTYPE int32

const (
	OpenconfigTransportTypesOPTICALPORTTYPE_OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_UNSET           OpenconfigTransportTypesOPTICALPORTTYPE = 0
	OpenconfigTransportTypesOPTICALPORTTYPE_OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_DROP            OpenconfigTransportTypesOPTICALPORTTYPE = 19788121
	OpenconfigTransportTypesOPTICALPORTTYPE_OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_TERMINAL_LINE   OpenconfigTransportTypesOPTICALPORTTYPE = 66734731
	OpenconfigTransportTypesOPTICALPORTTYPE_OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_MONITOR         OpenconfigTransportTypesOPTICALPORTTYPE = 157001144
	OpenconfigTransportTypesOPTICALPORTTYPE_OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_EGRESS          OpenconfigTransportTypesOPTICALPORTTYPE = 249136879
	OpenconfigTransportTypesOPTICALPORTTYPE_OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_INGRESS         OpenconfigTransportTypesOPTICALPORTTYPE = 325170367
	OpenconfigTransportTypesOPTICALPORTTYPE_OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_TERMINAL_CLIENT OpenconfigTransportTypesOPTICALPORTTYPE = 335545588
	OpenconfigTransportTypesOPTICALPORTTYPE_OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_ADD             OpenconfigTransportTypesOPTICALPORTTYPE = 358535735
)

// Enum value maps for OpenconfigTransportTypesOPTICALPORTTYPE.
var (
	OpenconfigTransportTypesOPTICALPORTTYPE_name = map[int32]string{
		0:         "OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_UNSET",
		19788121:  "OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_DROP",
		66734731:  "OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_TERMINAL_LINE",
		157001144: "OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_MONITOR",
		249136879: "OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_EGRESS",
		325170367: "OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_INGRESS",
		335545588: "OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_TERMINAL_CLIENT",
		358535735: "OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_ADD",
	}
	OpenconfigTransportTypesOPTICALPORTTYPE_value = map[string]int32{
		"OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_UNSET":           0,
		"OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_DROP":            19788121,
		"OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_TERMINAL_LINE":   66734731,
		"OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_MONITOR":         157001144,
		"OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_EGRESS":          249136879,
		"OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_INGRESS":         325170367,
		"OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_TERMINAL_CLIENT": 335545588,
		"OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_ADD":             358535735,
	}
)

func (x OpenconfigTransportTypesOPTICALPORTTYPE) Enum() *OpenconfigTransportTypesOPTICALPORTTYPE {
	p := new(OpenconfigTransportTypesOPTICALPORTTYPE)
	*p = x
	return p
}

func (x OpenconfigTransportTypesOPTICALPORTTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportTypesOPTICALPORTTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[197].Descriptor()
}

func (OpenconfigTransportTypesOPTICALPORTTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[197]
}

func (x OpenconfigTransportTypesOPTICALPORTTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportTypesOPTICALPORTTYPE.Descriptor instead.
func (OpenconfigTransportTypesOPTICALPORTTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{197}
}

// OpenconfigTransportTypesOTNAPPLICATIONCODE represents an enumerated type generated for the YANG identity OTN_APPLICATION_CODE.
type OpenconfigTransportTypesOTNAPPLICATIONCODE int32

const (
	OpenconfigTransportTypesOTNAPPLICATIONCODE_OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_UNSET         OpenconfigTransportTypesOTNAPPLICATIONCODE = 0
	OpenconfigTransportTypesOTNAPPLICATIONCODE_OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_P1S1_2D2      OpenconfigTransportTypesOTNAPPLICATIONCODE = 36897107
	OpenconfigTransportTypesOTNAPPLICATIONCODE_OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_P1L1_2D1      OpenconfigTransportTypesOTNAPPLICATIONCODE = 312342241
	OpenconfigTransportTypesOTNAPPLICATIONCODE_OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_P1L1_2D2      OpenconfigTransportTypesOTNAPPLICATIONCODE = 312342242
	OpenconfigTransportTypesOTNAPPLICATIONCODE_OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_OTN_UNDEFINED OpenconfigTransportTypesOTNAPPLICATIONCODE = 483351549
)

// Enum value maps for OpenconfigTransportTypesOTNAPPLICATIONCODE.
var (
	OpenconfigTransportTypesOTNAPPLICATIONCODE_name = map[int32]string{
		0:         "OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_UNSET",
		36897107:  "OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_P1S1_2D2",
		312342241: "OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_P1L1_2D1",
		312342242: "OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_P1L1_2D2",
		483351549: "OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_OTN_UNDEFINED",
	}
	OpenconfigTransportTypesOTNAPPLICATIONCODE_value = map[string]int32{
		"OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_UNSET":         0,
		"OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_P1S1_2D2":      36897107,
		"OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_P1L1_2D1":      312342241,
		"OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_P1L1_2D2":      312342242,
		"OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_OTN_UNDEFINED": 483351549,
	}
)

func (x OpenconfigTransportTypesOTNAPPLICATIONCODE) Enum() *OpenconfigTransportTypesOTNAPPLICATIONCODE {
	p := new(OpenconfigTransportTypesOTNAPPLICATIONCODE)
	*p = x
	return p
}

func (x OpenconfigTransportTypesOTNAPPLICATIONCODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportTypesOTNAPPLICATIONCODE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[198].Descriptor()
}

func (OpenconfigTransportTypesOTNAPPLICATIONCODE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[198]
}

func (x OpenconfigTransportTypesOTNAPPLICATIONCODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportTypesOTNAPPLICATIONCODE.Descriptor instead.
func (OpenconfigTransportTypesOTNAPPLICATIONCODE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{198}
}

// OpenconfigTransportTypesSONETAPPLICATIONCODE represents an enumerated type generated for the YANG identity SONET_APPLICATION_CODE.
type OpenconfigTransportTypesSONETAPPLICATIONCODE int32

const (
	OpenconfigTransportTypesSONETAPPLICATIONCODE_OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_UNSET           OpenconfigTransportTypesSONETAPPLICATIONCODE = 0
	OpenconfigTransportTypesSONETAPPLICATIONCODE_OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_VSR2000_3R5     OpenconfigTransportTypesSONETAPPLICATIONCODE = 34006129
	OpenconfigTransportTypesSONETAPPLICATIONCODE_OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_VSR2000_3R2     OpenconfigTransportTypesSONETAPPLICATIONCODE = 34006134
	OpenconfigTransportTypesSONETAPPLICATIONCODE_OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_VSR2000_3R3     OpenconfigTransportTypesSONETAPPLICATIONCODE = 34006135
	OpenconfigTransportTypesSONETAPPLICATIONCODE_OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_SONET_UNDEFINED OpenconfigTransportTypesSONETAPPLICATIONCODE = 453962205
)

// Enum value maps for OpenconfigTransportTypesSONETAPPLICATIONCODE.
var (
	OpenconfigTransportTypesSONETAPPLICATIONCODE_name = map[int32]string{
		0:         "OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_UNSET",
		34006129:  "OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_VSR2000_3R5",
		34006134:  "OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_VSR2000_3R2",
		34006135:  "OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_VSR2000_3R3",
		453962205: "OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_SONET_UNDEFINED",
	}
	OpenconfigTransportTypesSONETAPPLICATIONCODE_value = map[string]int32{
		"OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_UNSET":           0,
		"OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_VSR2000_3R5":     34006129,
		"OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_VSR2000_3R2":     34006134,
		"OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_VSR2000_3R3":     34006135,
		"OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_SONET_UNDEFINED": 453962205,
	}
)

func (x OpenconfigTransportTypesSONETAPPLICATIONCODE) Enum() *OpenconfigTransportTypesSONETAPPLICATIONCODE {
	p := new(OpenconfigTransportTypesSONETAPPLICATIONCODE)
	*p = x
	return p
}

func (x OpenconfigTransportTypesSONETAPPLICATIONCODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportTypesSONETAPPLICATIONCODE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[199].Descriptor()
}

func (OpenconfigTransportTypesSONETAPPLICATIONCODE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[199]
}

func (x OpenconfigTransportTypesSONETAPPLICATIONCODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportTypesSONETAPPLICATIONCODE.Descriptor instead.
func (OpenconfigTransportTypesSONETAPPLICATIONCODE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{199}
}

// OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE represents an enumerated type generated for the YANG identity TRANSCEIVER_FORM_FACTOR_TYPE.
type OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE int32

const (
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_UNSET         OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 0
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_NON_PLUGGABLE OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 122026302
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CFP4          OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 173799280
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CFP2          OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 173799286
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_QSFP          OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 248871057
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CPAK          OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 254820462
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_QSFP_PLUS     OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 262580700
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_X2            OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 323305909
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_OTHER         OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 336705815
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CFP           OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 348964396
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_SFP           OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 351614684
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_QSFP28        OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 371578331
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_XFP           OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 386302595
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_SFP_PLUS      OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 428513243
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CFP2_ACO      OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE = 479072844
)

// Enum value maps for OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE.
var (
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_name = map[int32]string{
		0:         "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_UNSET",
		122026302: "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_NON_PLUGGABLE",
		173799280: "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CFP4",
		173799286: "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CFP2",
		248871057: "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_QSFP",
		254820462: "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CPAK",
		262580700: "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_QSFP_PLUS",
		323305909: "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_X2",
		336705815: "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_OTHER",
		348964396: "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CFP",
		351614684: "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_SFP",
		371578331: "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_QSFP28",
		386302595: "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_XFP",
		428513243: "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_SFP_PLUS",
		479072844: "OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CFP2_ACO",
	}
	OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_value = map[string]int32{
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_UNSET":         0,
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_NON_PLUGGABLE": 122026302,
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CFP4":          173799280,
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CFP2":          173799286,
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_QSFP":          248871057,
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CPAK":          254820462,
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_QSFP_PLUS":     262580700,
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_X2":            323305909,
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_OTHER":         336705815,
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CFP":           348964396,
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_SFP":           351614684,
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_QSFP28":        371578331,
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_XFP":           386302595,
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_SFP_PLUS":      428513243,
		"OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_CFP2_ACO":      479072844,
	}
)

func (x OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE) Enum() *OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE {
	p := new(OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE)
	*p = x
	return p
}

func (x OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[200].Descriptor()
}

func (OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[200]
}

func (x OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE.Descriptor instead.
func (OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{200}
}

// OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE represents an enumerated type generated for the YANG identity TRIBUTARY_PROTOCOL_TYPE.
type OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE int32

const (
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_UNSET         OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 0
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OC768    OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 16859078
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU1E    OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 92500889
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU4     OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 124622385
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU3     OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 124622390
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU2     OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 124622391
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODUCN    OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 125467980
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODU4     OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 127285313
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODU3     OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 127285318
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODU2     OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 127285319
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU2E    OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 142833872
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OC48     OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 143211405
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_STM16    OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 244881710
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_400GE    OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 246703853
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_1GE      OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 257542584
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_100G_MLG OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 279056864
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_100GE    OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 310019448
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_STM64    OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 362325033
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_40GE     OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 366888211
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_10GE_WAN OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 368604491
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_STM256   OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 390106586
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTUCN    OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 394498172
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODU2E    OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 410687360
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_10GE_LAN OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 506556672
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OC192    OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE = 536658191
)

// Enum value maps for OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE.
var (
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_name = map[int32]string{
		0:         "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_UNSET",
		16859078:  "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OC768",
		92500889:  "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU1E",
		124622385: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU4",
		124622390: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU3",
		124622391: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU2",
		125467980: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODUCN",
		127285313: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODU4",
		127285318: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODU3",
		127285319: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODU2",
		142833872: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU2E",
		143211405: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OC48",
		244881710: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_STM16",
		246703853: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_400GE",
		257542584: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_1GE",
		279056864: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_100G_MLG",
		310019448: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_100GE",
		362325033: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_STM64",
		366888211: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_40GE",
		368604491: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_10GE_WAN",
		390106586: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_STM256",
		394498172: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTUCN",
		410687360: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODU2E",
		506556672: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_10GE_LAN",
		536658191: "OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OC192",
	}
	OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_value = map[string]int32{
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_UNSET":         0,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OC768":    16859078,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU1E":    92500889,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU4":     124622385,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU3":     124622390,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU2":     124622391,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODUCN":    125467980,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODU4":     127285313,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODU3":     127285318,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODU2":     127285319,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU2E":    142833872,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OC48":     143211405,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_STM16":    244881710,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_400GE":    246703853,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_1GE":      257542584,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_100G_MLG": 279056864,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_100GE":    310019448,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_STM64":    362325033,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_40GE":     366888211,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_10GE_WAN": 368604491,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_STM256":   390106586,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTUCN":    394498172,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODU2E":    410687360,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_10GE_LAN": 506556672,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_OC192":    536658191,
	}
)

func (x OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE) Enum() *OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE {
	p := new(OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE)
	*p = x
	return p
}

func (x OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[201].Descriptor()
}

func (OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[201]
}

func (x OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE.Descriptor instead.
func (OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{201}
}

// OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE represents an enumerated type generated for the YANG identity TRIBUTARY_RATE_CLASS_TYPE.
type OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE int32

const (
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_UNSET           OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 0
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_550G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 21412988
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_950G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 59530368
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_40G   OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 63565836
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_450G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 65863835
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_800G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 68601730
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_900G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 92246973
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_650G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 92301473
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_850G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 101369919
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_1G    OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 114060885
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_1100G OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 209760038
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_150G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 212183688
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_1000G OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 233392497
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_100G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 244952005
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_200G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 252980176
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_300G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 276612395
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_250G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 285696653
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_400G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 300257766
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_750G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 317624042
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_500G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 323889969
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_600G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 326695404
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_700G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 350327751
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_10G   OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 366043073
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_1050G OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 467786172
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_2_5G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 504977349
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_350G  OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE = 511006326
)

// Enum value maps for OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE.
var (
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_name = map[int32]string{
		0:         "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_UNSET",
		21412988:  "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_550G",
		59530368:  "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_950G",
		63565836:  "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_40G",
		65863835:  "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_450G",
		68601730:  "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_800G",
		92246973:  "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_900G",
		92301473:  "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_650G",
		101369919: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_850G",
		114060885: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_1G",
		209760038: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_1100G",
		212183688: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_150G",
		233392497: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_1000G",
		244952005: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_100G",
		252980176: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_200G",
		276612395: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_300G",
		285696653: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_250G",
		300257766: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_400G",
		317624042: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_750G",
		323889969: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_500G",
		326695404: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_600G",
		350327751: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_700G",
		366043073: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_10G",
		467786172: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_1050G",
		504977349: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_2_5G",
		511006326: "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_350G",
	}
	OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_value = map[string]int32{
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_UNSET":           0,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_550G":  21412988,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_950G":  59530368,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_40G":   63565836,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_450G":  65863835,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_800G":  68601730,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_900G":  92246973,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_650G":  92301473,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_850G":  101369919,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_1G":    114060885,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_1100G": 209760038,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_150G":  212183688,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_1000G": 233392497,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_100G":  244952005,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_200G":  252980176,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_300G":  276612395,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_250G":  285696653,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_400G":  300257766,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_750G":  317624042,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_500G":  323889969,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_600G":  326695404,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_700G":  350327751,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_10G":   366043073,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_1050G": 467786172,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_2_5G":  504977349,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_350G":  511006326,
	}
)

func (x OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE) Enum() *OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE {
	p := new(OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE)
	*p = x
	return p
}

func (x OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[202].Descriptor()
}

func (OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[202]
}

func (x OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE.Descriptor instead.
func (OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{202}
}

// OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY represents an enumerated type generated for the YANG identity TRIBUTARY_SLOT_GRANULARITY.
type OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY int32

const (
	OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY_OPENCONFIGTRANSPORTTYPESTRIBUTARYSLOTGRANULARITY_UNSET           OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY = 0
	OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY_OPENCONFIGTRANSPORTTYPESTRIBUTARYSLOTGRANULARITY_TRIB_SLOT_1_25G OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY = 63959905
	OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY_OPENCONFIGTRANSPORTTYPESTRIBUTARYSLOTGRANULARITY_TRIB_SLOT_2_5G  OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY = 175742904
	OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY_OPENCONFIGTRANSPORTTYPESTRIBUTARYSLOTGRANULARITY_TRIB_SLOT_5G    OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY = 521948752
)

// Enum value maps for OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY.
var (
	OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY_name = map[int32]string{
		0:         "OPENCONFIGTRANSPORTTYPESTRIBUTARYSLOTGRANULARITY_UNSET",
		63959905:  "OPENCONFIGTRANSPORTTYPESTRIBUTARYSLOTGRANULARITY_TRIB_SLOT_1_25G",
		175742904: "OPENCONFIGTRANSPORTTYPESTRIBUTARYSLOTGRANULARITY_TRIB_SLOT_2_5G",
		521948752: "OPENCONFIGTRANSPORTTYPESTRIBUTARYSLOTGRANULARITY_TRIB_SLOT_5G",
	}
	OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY_value = map[string]int32{
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYSLOTGRANULARITY_UNSET":           0,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYSLOTGRANULARITY_TRIB_SLOT_1_25G": 63959905,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYSLOTGRANULARITY_TRIB_SLOT_2_5G":  175742904,
		"OPENCONFIGTRANSPORTTYPESTRIBUTARYSLOTGRANULARITY_TRIB_SLOT_5G":    521948752,
	}
)

func (x OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY) Enum() *OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY {
	p := new(OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY)
	*p = x
	return p
}

func (x OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[203].Descriptor()
}

func (OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[203]
}

func (x OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY.Descriptor instead.
func (OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{203}
}

// OpenconfigTypesADDRESSFAMILY represents an enumerated type generated for the YANG identity ADDRESS_FAMILY.
type OpenconfigTypesADDRESSFAMILY int32

const (
	OpenconfigTypesADDRESSFAMILY_OPENCONFIGTYPESADDRESSFAMILY_UNSET       OpenconfigTypesADDRESSFAMILY = 0
	OpenconfigTypesADDRESSFAMILY_OPENCONFIGTYPESADDRESSFAMILY_IPV6        OpenconfigTypesADDRESSFAMILY = 235337305
	OpenconfigTypesADDRESSFAMILY_OPENCONFIGTYPESADDRESSFAMILY_IPV4        OpenconfigTypesADDRESSFAMILY = 235337307
	OpenconfigTypesADDRESSFAMILY_OPENCONFIGTYPESADDRESSFAMILY_MPLS        OpenconfigTypesADDRESSFAMILY = 442843842
	OpenconfigTypesADDRESSFAMILY_OPENCONFIGTYPESADDRESSFAMILY_L2_ETHERNET OpenconfigTypesADDRESSFAMILY = 505593594
)

// Enum value maps for OpenconfigTypesADDRESSFAMILY.
var (
	OpenconfigTypesADDRESSFAMILY_name = map[int32]string{
		0:         "OPENCONFIGTYPESADDRESSFAMILY_UNSET",
		235337305: "OPENCONFIGTYPESADDRESSFAMILY_IPV6",
		235337307: "OPENCONFIGTYPESADDRESSFAMILY_IPV4",
		442843842: "OPENCONFIGTYPESADDRESSFAMILY_MPLS",
		505593594: "OPENCONFIGTYPESADDRESSFAMILY_L2_ETHERNET",
	}
	OpenconfigTypesADDRESSFAMILY_value = map[string]int32{
		"OPENCONFIGTYPESADDRESSFAMILY_UNSET":       0,
		"OPENCONFIGTYPESADDRESSFAMILY_IPV6":        235337305,
		"OPENCONFIGTYPESADDRESSFAMILY_IPV4":        235337307,
		"OPENCONFIGTYPESADDRESSFAMILY_MPLS":        442843842,
		"OPENCONFIGTYPESADDRESSFAMILY_L2_ETHERNET": 505593594,
	}
)

func (x OpenconfigTypesADDRESSFAMILY) Enum() *OpenconfigTypesADDRESSFAMILY {
	p := new(OpenconfigTypesADDRESSFAMILY)
	*p = x
	return p
}

func (x OpenconfigTypesADDRESSFAMILY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTypesADDRESSFAMILY) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[204].Descriptor()
}

func (OpenconfigTypesADDRESSFAMILY) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[204]
}

func (x OpenconfigTypesADDRESSFAMILY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTypesADDRESSFAMILY.Descriptor instead.
func (OpenconfigTypesADDRESSFAMILY) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{204}
}

// OpenconfigVlanTypesTPIDTYPES represents an enumerated type generated for the YANG identity TPID_TYPES.
type OpenconfigVlanTypesTPIDTYPES int32

const (
	OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_UNSET       OpenconfigVlanTypesTPIDTYPES = 0
	OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X9100 OpenconfigVlanTypesTPIDTYPES = 43366784
	OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X88A8 OpenconfigVlanTypesTPIDTYPES = 167692657
	OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X8100 OpenconfigVlanTypesTPIDTYPES = 253072231
	OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_TPID_ANY    OpenconfigVlanTypesTPIDTYPES = 287549508
	OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X9200 OpenconfigVlanTypesTPIDTYPES = 345856891
)

// Enum value maps for OpenconfigVlanTypesTPIDTYPES.
var (
	OpenconfigVlanTypesTPIDTYPES_name = map[int32]string{
		0:         "OPENCONFIGVLANTYPESTPIDTYPES_UNSET",
		43366784:  "OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X9100",
		167692657: "OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X88A8",
		253072231: "OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X8100",
		287549508: "OPENCONFIGVLANTYPESTPIDTYPES_TPID_ANY",
		345856891: "OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X9200",
	}
	OpenconfigVlanTypesTPIDTYPES_value = map[string]int32{
		"OPENCONFIGVLANTYPESTPIDTYPES_UNSET":       0,
		"OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X9100": 43366784,
		"OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X88A8": 167692657,
		"OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X8100": 253072231,
		"OPENCONFIGVLANTYPESTPIDTYPES_TPID_ANY":    287549508,
		"OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X9200": 345856891,
	}
)

func (x OpenconfigVlanTypesTPIDTYPES) Enum() *OpenconfigVlanTypesTPIDTYPES {
	p := new(OpenconfigVlanTypesTPIDTYPES)
	*p = x
	return p
}

func (x OpenconfigVlanTypesTPIDTYPES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigVlanTypesTPIDTYPES) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[205].Descriptor()
}

func (OpenconfigVlanTypesTPIDTYPES) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[205]
}

func (x OpenconfigVlanTypesTPIDTYPES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigVlanTypesTPIDTYPES.Descriptor instead.
func (OpenconfigVlanTypesTPIDTYPES) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{205}
}

// OpenconfigVlanVlanModeType represents an enumerated type generated for the YANG enumerated type vlan-mode-type.
type OpenconfigVlanVlanModeType int32

const (
	OpenconfigVlanVlanModeType_OPENCONFIGVLANVLANMODETYPE_UNSET  OpenconfigVlanVlanModeType = 0
	OpenconfigVlanVlanModeType_OPENCONFIGVLANVLANMODETYPE_ACCESS OpenconfigVlanVlanModeType = 1
	OpenconfigVlanVlanModeType_OPENCONFIGVLANVLANMODETYPE_TRUNK  OpenconfigVlanVlanModeType = 2
)

// Enum value maps for OpenconfigVlanVlanModeType.
var (
	OpenconfigVlanVlanModeType_name = map[int32]string{
		0: "OPENCONFIGVLANVLANMODETYPE_UNSET",
		1: "OPENCONFIGVLANVLANMODETYPE_ACCESS",
		2: "OPENCONFIGVLANVLANMODETYPE_TRUNK",
	}
	OpenconfigVlanVlanModeType_value = map[string]int32{
		"OPENCONFIGVLANVLANMODETYPE_UNSET":  0,
		"OPENCONFIGVLANVLANMODETYPE_ACCESS": 1,
		"OPENCONFIGVLANVLANMODETYPE_TRUNK":  2,
	}
)

func (x OpenconfigVlanVlanModeType) Enum() *OpenconfigVlanVlanModeType {
	p := new(OpenconfigVlanVlanModeType)
	*p = x
	return p
}

func (x OpenconfigVlanVlanModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigVlanVlanModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[206].Descriptor()
}

func (OpenconfigVlanVlanModeType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[206]
}

func (x OpenconfigVlanVlanModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigVlanVlanModeType.Descriptor instead.
func (OpenconfigVlanVlanModeType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{206}
}

// OpenconfigVlanVlanStackAction represents an enumerated type generated for the YANG enumerated type vlan-stack-action.
type OpenconfigVlanVlanStackAction int32

const (
	OpenconfigVlanVlanStackAction_OPENCONFIGVLANVLANSTACKACTION_UNSET OpenconfigVlanVlanStackAction = 0
	OpenconfigVlanVlanStackAction_OPENCONFIGVLANVLANSTACKACTION_PUSH  OpenconfigVlanVlanStackAction = 1
	OpenconfigVlanVlanStackAction_OPENCONFIGVLANVLANSTACKACTION_POP   OpenconfigVlanVlanStackAction = 2
	OpenconfigVlanVlanStackAction_OPENCONFIGVLANVLANSTACKACTION_SWAP  OpenconfigVlanVlanStackAction = 3
)

// Enum value maps for OpenconfigVlanVlanStackAction.
var (
	OpenconfigVlanVlanStackAction_name = map[int32]string{
		0: "OPENCONFIGVLANVLANSTACKACTION_UNSET",
		1: "OPENCONFIGVLANVLANSTACKACTION_PUSH",
		2: "OPENCONFIGVLANVLANSTACKACTION_POP",
		3: "OPENCONFIGVLANVLANSTACKACTION_SWAP",
	}
	OpenconfigVlanVlanStackAction_value = map[string]int32{
		"OPENCONFIGVLANVLANSTACKACTION_UNSET": 0,
		"OPENCONFIGVLANVLANSTACKACTION_PUSH":  1,
		"OPENCONFIGVLANVLANSTACKACTION_POP":   2,
		"OPENCONFIGVLANVLANSTACKACTION_SWAP":  3,
	}
)

func (x OpenconfigVlanVlanStackAction) Enum() *OpenconfigVlanVlanStackAction {
	p := new(OpenconfigVlanVlanStackAction)
	*p = x
	return p
}

func (x OpenconfigVlanVlanStackAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigVlanVlanStackAction) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[207].Descriptor()
}

func (OpenconfigVlanVlanStackAction) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[207]
}

func (x OpenconfigVlanVlanStackAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigVlanVlanStackAction.Descriptor instead.
func (OpenconfigVlanVlanStackAction) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{207}
}

// OpenconfigWavelengthRouterASECONTROLMODE represents an enumerated type generated for the YANG identity ASE_CONTROL_MODE.
type OpenconfigWavelengthRouterASECONTROLMODE int32

const (
	OpenconfigWavelengthRouterASECONTROLMODE_OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_UNSET                        OpenconfigWavelengthRouterASECONTROLMODE = 0
	OpenconfigWavelengthRouterASECONTROLMODE_OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_AUTO_ASE_ON_FAILURE          OpenconfigWavelengthRouterASECONTROLMODE = 137056694
	OpenconfigWavelengthRouterASECONTROLMODE_OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_AUTO_ASE_FAILURE_AND_RESTORE OpenconfigWavelengthRouterASECONTROLMODE = 412621205
	OpenconfigWavelengthRouterASECONTROLMODE_OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_ASE_ENABLED                  OpenconfigWavelengthRouterASECONTROLMODE = 464167093
	OpenconfigWavelengthRouterASECONTROLMODE_OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_ASE_DISABLED                 OpenconfigWavelengthRouterASECONTROLMODE = 516262014
)

// Enum value maps for OpenconfigWavelengthRouterASECONTROLMODE.
var (
	OpenconfigWavelengthRouterASECONTROLMODE_name = map[int32]string{
		0:         "OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_UNSET",
		137056694: "OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_AUTO_ASE_ON_FAILURE",
		412621205: "OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_AUTO_ASE_FAILURE_AND_RESTORE",
		464167093: "OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_ASE_ENABLED",
		516262014: "OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_ASE_DISABLED",
	}
	OpenconfigWavelengthRouterASECONTROLMODE_value = map[string]int32{
		"OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_UNSET":                        0,
		"OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_AUTO_ASE_ON_FAILURE":          137056694,
		"OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_AUTO_ASE_FAILURE_AND_RESTORE": 412621205,
		"OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_ASE_ENABLED":                  464167093,
		"OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_ASE_DISABLED":                 516262014,
	}
)

func (x OpenconfigWavelengthRouterASECONTROLMODE) Enum() *OpenconfigWavelengthRouterASECONTROLMODE {
	p := new(OpenconfigWavelengthRouterASECONTROLMODE)
	*p = x
	return p
}

func (x OpenconfigWavelengthRouterASECONTROLMODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigWavelengthRouterASECONTROLMODE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[208].Descriptor()
}

func (OpenconfigWavelengthRouterASECONTROLMODE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[208]
}

func (x OpenconfigWavelengthRouterASECONTROLMODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigWavelengthRouterASECONTROLMODE.Descriptor instead.
func (OpenconfigWavelengthRouterASECONTROLMODE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{208}
}

// OpenconfigWavelengthRouterATTENUATIONCONTROLMODE represents an enumerated type generated for the YANG identity ATTENUATION_CONTROL_MODE.
type OpenconfigWavelengthRouterATTENUATIONCONTROLMODE int32

const (
	OpenconfigWavelengthRouterATTENUATIONCONTROLMODE_OPENCONFIGWAVELENGTHROUTERATTENUATIONCONTROLMODE_UNSET                    OpenconfigWavelengthRouterATTENUATIONCONTROLMODE = 0
	OpenconfigWavelengthRouterATTENUATIONCONTROLMODE_OPENCONFIGWAVELENGTHROUTERATTENUATIONCONTROLMODE_ATTENUATION_FIXED_LOSS   OpenconfigWavelengthRouterATTENUATIONCONTROLMODE = 393365798
	OpenconfigWavelengthRouterATTENUATIONCONTROLMODE_OPENCONFIGWAVELENGTHROUTERATTENUATIONCONTROLMODE_ATTENUATION_DYNAMIC_LOSS OpenconfigWavelengthRouterATTENUATIONCONTROLMODE = 529050609
)

// Enum value maps for OpenconfigWavelengthRouterATTENUATIONCONTROLMODE.
var (
	OpenconfigWavelengthRouterATTENUATIONCONTROLMODE_name = map[int32]string{
		0:         "OPENCONFIGWAVELENGTHROUTERATTENUATIONCONTROLMODE_UNSET",
		393365798: "OPENCONFIGWAVELENGTHROUTERATTENUATIONCONTROLMODE_ATTENUATION_FIXED_LOSS",
		529050609: "OPENCONFIGWAVELENGTHROUTERATTENUATIONCONTROLMODE_ATTENUATION_DYNAMIC_LOSS",
	}
	OpenconfigWavelengthRouterATTENUATIONCONTROLMODE_value = map[string]int32{
		"OPENCONFIGWAVELENGTHROUTERATTENUATIONCONTROLMODE_UNSET":                    0,
		"OPENCONFIGWAVELENGTHROUTERATTENUATIONCONTROLMODE_ATTENUATION_FIXED_LOSS":   393365798,
		"OPENCONFIGWAVELENGTHROUTERATTENUATIONCONTROLMODE_ATTENUATION_DYNAMIC_LOSS": 529050609,
	}
)

func (x OpenconfigWavelengthRouterATTENUATIONCONTROLMODE) Enum() *OpenconfigWavelengthRouterATTENUATIONCONTROLMODE {
	p := new(OpenconfigWavelengthRouterATTENUATIONCONTROLMODE)
	*p = x
	return p
}

func (x OpenconfigWavelengthRouterATTENUATIONCONTROLMODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigWavelengthRouterATTENUATIONCONTROLMODE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[209].Descriptor()
}

func (OpenconfigWavelengthRouterATTENUATIONCONTROLMODE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[209]
}

func (x OpenconfigWavelengthRouterATTENUATIONCONTROLMODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigWavelengthRouterATTENUATIONCONTROLMODE.Descriptor instead.
func (OpenconfigWavelengthRouterATTENUATIONCONTROLMODE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{209}
}

// OpenconfigWavelengthRouterAdminStateType represents an enumerated type generated for the YANG enumerated type admin-state-type.
type OpenconfigWavelengthRouterAdminStateType int32

const (
	OpenconfigWavelengthRouterAdminStateType_OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE_UNSET    OpenconfigWavelengthRouterAdminStateType = 0
	OpenconfigWavelengthRouterAdminStateType_OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE_ENABLED  OpenconfigWavelengthRouterAdminStateType = 1
	OpenconfigWavelengthRouterAdminStateType_OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE_DISABLED OpenconfigWavelengthRouterAdminStateType = 2
	OpenconfigWavelengthRouterAdminStateType_OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE_MAINT    OpenconfigWavelengthRouterAdminStateType = 3
)

// Enum value maps for OpenconfigWavelengthRouterAdminStateType.
var (
	OpenconfigWavelengthRouterAdminStateType_name = map[int32]string{
		0: "OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE_UNSET",
		1: "OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE_ENABLED",
		2: "OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE_DISABLED",
		3: "OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE_MAINT",
	}
	OpenconfigWavelengthRouterAdminStateType_value = map[string]int32{
		"OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE_UNSET":    0,
		"OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE_ENABLED":  1,
		"OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE_DISABLED": 2,
		"OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE_MAINT":    3,
	}
)

func (x OpenconfigWavelengthRouterAdminStateType) Enum() *OpenconfigWavelengthRouterAdminStateType {
	p := new(OpenconfigWavelengthRouterAdminStateType)
	*p = x
	return p
}

func (x OpenconfigWavelengthRouterAdminStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigWavelengthRouterAdminStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[210].Descriptor()
}

func (OpenconfigWavelengthRouterAdminStateType) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[210]
}

func (x OpenconfigWavelengthRouterAdminStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigWavelengthRouterAdminStateType.Descriptor instead.
func (OpenconfigWavelengthRouterAdminStateType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{210}
}

// OpenconfigWifiTypesAPSTATE represents an enumerated type generated for the YANG identity AP_STATE.
type OpenconfigWifiTypesAPSTATE int32

const (
	OpenconfigWifiTypesAPSTATE_OPENCONFIGWIFITYPESAPSTATE_UNSET     OpenconfigWifiTypesAPSTATE = 0
	OpenconfigWifiTypesAPSTATE_OPENCONFIGWIFITYPESAPSTATE_UPGRADING OpenconfigWifiTypesAPSTATE = 349995057
	OpenconfigWifiTypesAPSTATE_OPENCONFIGWIFITYPESAPSTATE_UP        OpenconfigWifiTypesAPSTATE = 473784083
	OpenconfigWifiTypesAPSTATE_OPENCONFIGWIFITYPESAPSTATE_DOWN      OpenconfigWifiTypesAPSTATE = 529095792
)

// Enum value maps for OpenconfigWifiTypesAPSTATE.
var (
	OpenconfigWifiTypesAPSTATE_name = map[int32]string{
		0:         "OPENCONFIGWIFITYPESAPSTATE_UNSET",
		349995057: "OPENCONFIGWIFITYPESAPSTATE_UPGRADING",
		473784083: "OPENCONFIGWIFITYPESAPSTATE_UP",
		529095792: "OPENCONFIGWIFITYPESAPSTATE_DOWN",
	}
	OpenconfigWifiTypesAPSTATE_value = map[string]int32{
		"OPENCONFIGWIFITYPESAPSTATE_UNSET":     0,
		"OPENCONFIGWIFITYPESAPSTATE_UPGRADING": 349995057,
		"OPENCONFIGWIFITYPESAPSTATE_UP":        473784083,
		"OPENCONFIGWIFITYPESAPSTATE_DOWN":      529095792,
	}
)

func (x OpenconfigWifiTypesAPSTATE) Enum() *OpenconfigWifiTypesAPSTATE {
	p := new(OpenconfigWifiTypesAPSTATE)
	*p = x
	return p
}

func (x OpenconfigWifiTypesAPSTATE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigWifiTypesAPSTATE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[211].Descriptor()
}

func (OpenconfigWifiTypesAPSTATE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[211]
}

func (x OpenconfigWifiTypesAPSTATE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigWifiTypesAPSTATE.Descriptor instead.
func (OpenconfigWifiTypesAPSTATE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{211}
}

// OpenconfigWifiTypesCHANGEREASONTYPE represents an enumerated type generated for the YANG identity CHANGE_REASON_TYPE.
type OpenconfigWifiTypesCHANGEREASONTYPE int32

const (
	OpenconfigWifiTypesCHANGEREASONTYPE_OPENCONFIGWIFITYPESCHANGEREASONTYPE_UNSET          OpenconfigWifiTypesCHANGEREASONTYPE = 0
	OpenconfigWifiTypesCHANGEREASONTYPE_OPENCONFIGWIFITYPESCHANGEREASONTYPE_BETTER_CHANNEL OpenconfigWifiTypesCHANGEREASONTYPE = 114391929
	OpenconfigWifiTypesCHANGEREASONTYPE_OPENCONFIGWIFITYPESCHANGEREASONTYPE_DFS            OpenconfigWifiTypesCHANGEREASONTYPE = 214232444
	OpenconfigWifiTypesCHANGEREASONTYPE_OPENCONFIGWIFITYPESCHANGEREASONTYPE_NOISE          OpenconfigWifiTypesCHANGEREASONTYPE = 335803595
	OpenconfigWifiTypesCHANGEREASONTYPE_OPENCONFIGWIFITYPESCHANGEREASONTYPE_ERRORS         OpenconfigWifiTypesCHANGEREASONTYPE = 478307970
)

// Enum value maps for OpenconfigWifiTypesCHANGEREASONTYPE.
var (
	OpenconfigWifiTypesCHANGEREASONTYPE_name = map[int32]string{
		0:         "OPENCONFIGWIFITYPESCHANGEREASONTYPE_UNSET",
		114391929: "OPENCONFIGWIFITYPESCHANGEREASONTYPE_BETTER_CHANNEL",
		214232444: "OPENCONFIGWIFITYPESCHANGEREASONTYPE_DFS",
		335803595: "OPENCONFIGWIFITYPESCHANGEREASONTYPE_NOISE",
		478307970: "OPENCONFIGWIFITYPESCHANGEREASONTYPE_ERRORS",
	}
	OpenconfigWifiTypesCHANGEREASONTYPE_value = map[string]int32{
		"OPENCONFIGWIFITYPESCHANGEREASONTYPE_UNSET":          0,
		"OPENCONFIGWIFITYPESCHANGEREASONTYPE_BETTER_CHANNEL": 114391929,
		"OPENCONFIGWIFITYPESCHANGEREASONTYPE_DFS":            214232444,
		"OPENCONFIGWIFITYPESCHANGEREASONTYPE_NOISE":          335803595,
		"OPENCONFIGWIFITYPESCHANGEREASONTYPE_ERRORS":         478307970,
	}
)

func (x OpenconfigWifiTypesCHANGEREASONTYPE) Enum() *OpenconfigWifiTypesCHANGEREASONTYPE {
	p := new(OpenconfigWifiTypesCHANGEREASONTYPE)
	*p = x
	return p
}

func (x OpenconfigWifiTypesCHANGEREASONTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigWifiTypesCHANGEREASONTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[212].Descriptor()
}

func (OpenconfigWifiTypesCHANGEREASONTYPE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[212]
}

func (x OpenconfigWifiTypesCHANGEREASONTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigWifiTypesCHANGEREASONTYPE.Descriptor instead.
func (OpenconfigWifiTypesCHANGEREASONTYPE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{212}
}

// OpenconfigWifiTypesCLIENTCAPABILITIES represents an enumerated type generated for the YANG identity CLIENT_CAPABILITIES.
type OpenconfigWifiTypesCLIENTCAPABILITIES int32

const (
	OpenconfigWifiTypesCLIENTCAPABILITIES_OPENCONFIGWIFITYPESCLIENTCAPABILITIES_UNSET         OpenconfigWifiTypesCLIENTCAPABILITIES = 0
	OpenconfigWifiTypesCLIENTCAPABILITIES_OPENCONFIGWIFITYPESCLIENTCAPABILITIES_DOT_11R       OpenconfigWifiTypesCLIENTCAPABILITIES = 25636203
	OpenconfigWifiTypesCLIENTCAPABILITIES_OPENCONFIGWIFITYPESCLIENTCAPABILITIES_DOT_11V       OpenconfigWifiTypesCLIENTCAPABILITIES = 25636207
	OpenconfigWifiTypesCLIENTCAPABILITIES_OPENCONFIGWIFITYPESCLIENTCAPABILITIES_MU_BEAMFORMEE OpenconfigWifiTypesCLIENTCAPABILITIES = 91046411
	OpenconfigWifiTypesCLIENTCAPABILITIES_OPENCONFIGWIFITYPESCLIENTCAPABILITIES_MU_BEAMFORMER OpenconfigWifiTypesCLIENTCAPABILITIES = 91046428
)

// Enum value maps for OpenconfigWifiTypesCLIENTCAPABILITIES.
var (
	OpenconfigWifiTypesCLIENTCAPABILITIES_name = map[int32]string{
		0:        "OPENCONFIGWIFITYPESCLIENTCAPABILITIES_UNSET",
		25636203: "OPENCONFIGWIFITYPESCLIENTCAPABILITIES_DOT_11R",
		25636207: "OPENCONFIGWIFITYPESCLIENTCAPABILITIES_DOT_11V",
		91046411: "OPENCONFIGWIFITYPESCLIENTCAPABILITIES_MU_BEAMFORMEE",
		91046428: "OPENCONFIGWIFITYPESCLIENTCAPABILITIES_MU_BEAMFORMER",
	}
	OpenconfigWifiTypesCLIENTCAPABILITIES_value = map[string]int32{
		"OPENCONFIGWIFITYPESCLIENTCAPABILITIES_UNSET":         0,
		"OPENCONFIGWIFITYPESCLIENTCAPABILITIES_DOT_11R":       25636203,
		"OPENCONFIGWIFITYPESCLIENTCAPABILITIES_DOT_11V":       25636207,
		"OPENCONFIGWIFITYPESCLIENTCAPABILITIES_MU_BEAMFORMEE": 91046411,
		"OPENCONFIGWIFITYPESCLIENTCAPABILITIES_MU_BEAMFORMER": 91046428,
	}
)

func (x OpenconfigWifiTypesCLIENTCAPABILITIES) Enum() *OpenconfigWifiTypesCLIENTCAPABILITIES {
	p := new(OpenconfigWifiTypesCLIENTCAPABILITIES)
	*p = x
	return p
}

func (x OpenconfigWifiTypesCLIENTCAPABILITIES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigWifiTypesCLIENTCAPABILITIES) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[213].Descriptor()
}

func (OpenconfigWifiTypesCLIENTCAPABILITIES) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[213]
}

func (x OpenconfigWifiTypesCLIENTCAPABILITIES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigWifiTypesCLIENTCAPABILITIES.Descriptor instead.
func (OpenconfigWifiTypesCLIENTCAPABILITIES) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{213}
}

// OpenconfigWifiTypesCLIENTSTATE represents an enumerated type generated for the YANG identity CLIENT_STATE.
type OpenconfigWifiTypesCLIENTSTATE int32

const (
	OpenconfigWifiTypesCLIENTSTATE_OPENCONFIGWIFITYPESCLIENTSTATE_UNSET                  OpenconfigWifiTypesCLIENTSTATE = 0
	OpenconfigWifiTypesCLIENTSTATE_OPENCONFIGWIFITYPESCLIENTSTATE_BLACKLISTED            OpenconfigWifiTypesCLIENTSTATE = 15955476
	OpenconfigWifiTypesCLIENTSTATE_OPENCONFIGWIFITYPESCLIENTSTATE_DHCP_FAILURE           OpenconfigWifiTypesCLIENTSTATE = 102600160
	OpenconfigWifiTypesCLIENTSTATE_OPENCONFIGWIFITYPESCLIENTSTATE_L2AUTH_REQD            OpenconfigWifiTypesCLIENTSTATE = 172626369
	OpenconfigWifiTypesCLIENTSTATE_OPENCONFIGWIFITYPESCLIENTSTATE_POWERSAVE              OpenconfigWifiTypesCLIENTSTATE = 237538718
	OpenconfigWifiTypesCLIENTSTATE_OPENCONFIGWIFITYPESCLIENTSTATE_AUTHENTICATED          OpenconfigWifiTypesCLIENTSTATE = 250384215
	OpenconfigWifiTypesCLIENTSTATE_OPENCONFIGWIFITYPESCLIENTSTATE_L2AUTH_FAILURE_REJECT  OpenconfigWifiTypesCLIENTSTATE = 254800713
	OpenconfigWifiTypesCLIENTSTATE_OPENCONFIGWIFITYPESCLIENTSTATE_L2AUTH_FAILURE_TIMEOUT OpenconfigWifiTypesCLIENTSTATE = 317830585
	OpenconfigWifiTypesCLIENTSTATE_OPENCONFIGWIFITYPESCLIENTSTATE_L3AUTH_REQD            OpenconfigWifiTypesCLIENTSTATE = 360142606
	OpenconfigWifiTypesCLIENTSTATE_OPENCONFIGWIFITYPESCLIENTSTATE_ASSOCIATED             OpenconfigWifiTypesCLIENTSTATE = 422077472
	OpenconfigWifiTypesCLIENTSTATE_OPENCONFIGWIFITYPESCLIENTSTATE_L3AUTH_FAILURE         OpenconfigWifiTypesCLIENTSTATE = 454415440
	OpenconfigWifiTypesCLIENTSTATE_OPENCONFIGWIFITYPESCLIENTSTATE_DHCP_REQD              OpenconfigWifiTypesCLIENTSTATE = 487220542
)

// Enum value maps for OpenconfigWifiTypesCLIENTSTATE.
var (
	OpenconfigWifiTypesCLIENTSTATE_name = map[int32]string{
		0:         "OPENCONFIGWIFITYPESCLIENTSTATE_UNSET",
		15955476:  "OPENCONFIGWIFITYPESCLIENTSTATE_BLACKLISTED",
		102600160: "OPENCONFIGWIFITYPESCLIENTSTATE_DHCP_FAILURE",
		172626369: "OPENCONFIGWIFITYPESCLIENTSTATE_L2AUTH_REQD",
		237538718: "OPENCONFIGWIFITYPESCLIENTSTATE_POWERSAVE",
		250384215: "OPENCONFIGWIFITYPESCLIENTSTATE_AUTHENTICATED",
		254800713: "OPENCONFIGWIFITYPESCLIENTSTATE_L2AUTH_FAILURE_REJECT",
		317830585: "OPENCONFIGWIFITYPESCLIENTSTATE_L2AUTH_FAILURE_TIMEOUT",
		360142606: "OPENCONFIGWIFITYPESCLIENTSTATE_L3AUTH_REQD",
		422077472: "OPENCONFIGWIFITYPESCLIENTSTATE_ASSOCIATED",
		454415440: "OPENCONFIGWIFITYPESCLIENTSTATE_L3AUTH_FAILURE",
		487220542: "OPENCONFIGWIFITYPESCLIENTSTATE_DHCP_REQD",
	}
	OpenconfigWifiTypesCLIENTSTATE_value = map[string]int32{
		"OPENCONFIGWIFITYPESCLIENTSTATE_UNSET":                  0,
		"OPENCONFIGWIFITYPESCLIENTSTATE_BLACKLISTED":            15955476,
		"OPENCONFIGWIFITYPESCLIENTSTATE_DHCP_FAILURE":           102600160,
		"OPENCONFIGWIFITYPESCLIENTSTATE_L2AUTH_REQD":            172626369,
		"OPENCONFIGWIFITYPESCLIENTSTATE_POWERSAVE":              237538718,
		"OPENCONFIGWIFITYPESCLIENTSTATE_AUTHENTICATED":          250384215,
		"OPENCONFIGWIFITYPESCLIENTSTATE_L2AUTH_FAILURE_REJECT":  254800713,
		"OPENCONFIGWIFITYPESCLIENTSTATE_L2AUTH_FAILURE_TIMEOUT": 317830585,
		"OPENCONFIGWIFITYPESCLIENTSTATE_L3AUTH_REQD":            360142606,
		"OPENCONFIGWIFITYPESCLIENTSTATE_ASSOCIATED":             422077472,
		"OPENCONFIGWIFITYPESCLIENTSTATE_L3AUTH_FAILURE":         454415440,
		"OPENCONFIGWIFITYPESCLIENTSTATE_DHCP_REQD":              487220542,
	}
)

func (x OpenconfigWifiTypesCLIENTSTATE) Enum() *OpenconfigWifiTypesCLIENTSTATE {
	p := new(OpenconfigWifiTypesCLIENTSTATE)
	*p = x
	return p
}

func (x OpenconfigWifiTypesCLIENTSTATE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigWifiTypesCLIENTSTATE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[214].Descriptor()
}

func (OpenconfigWifiTypesCLIENTSTATE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[214]
}

func (x OpenconfigWifiTypesCLIENTSTATE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigWifiTypesCLIENTSTATE.Descriptor instead.
func (OpenconfigWifiTypesCLIENTSTATE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{214}
}

// OpenconfigWifiTypesDATARATE represents an enumerated type generated for the YANG identity DATA_RATE.
type OpenconfigWifiTypesDATARATE int32

const (
	OpenconfigWifiTypesDATARATE_OPENCONFIGWIFITYPESDATARATE_UNSET      OpenconfigWifiTypesDATARATE = 0
	OpenconfigWifiTypesDATARATE_OPENCONFIGWIFITYPESDATARATE_RATE_36MB  OpenconfigWifiTypesDATARATE = 22775585
	OpenconfigWifiTypesDATARATE_OPENCONFIGWIFITYPESDATARATE_RATE_48MB  OpenconfigWifiTypesDATARATE = 25614470
	OpenconfigWifiTypesDATARATE_OPENCONFIGWIFITYPESDATARATE_RATE_18MB  OpenconfigWifiTypesDATARATE = 119882321
	OpenconfigWifiTypesDATARATE_OPENCONFIGWIFITYPESDATARATE_RATE_11MB  OpenconfigWifiTypesDATARATE = 188458380
	OpenconfigWifiTypesDATARATE_OPENCONFIGWIFITYPESDATARATE_RATE_12MB  OpenconfigWifiTypesDATARATE = 188669959
	OpenconfigWifiTypesDATARATE_OPENCONFIGWIFITYPESDATARATE_RATE_24MB  OpenconfigWifiTypesDATARATE = 300116088
	OpenconfigWifiTypesDATARATE_OPENCONFIGWIFITYPESDATARATE_RATE_54MB  OpenconfigWifiTypesDATARATE = 329841425
	OpenconfigWifiTypesDATARATE_OPENCONFIGWIFITYPESDATARATE_RATE_6MB   OpenconfigWifiTypesDATARATE = 414074926
	OpenconfigWifiTypesDATARATE_OPENCONFIGWIFITYPESDATARATE_RATE_1MB   OpenconfigWifiTypesDATARATE = 414234913
	OpenconfigWifiTypesDATARATE_OPENCONFIGWIFITYPESDATARATE_RATE_2MB   OpenconfigWifiTypesDATARATE = 414676330
	OpenconfigWifiTypesDATARATE_OPENCONFIGWIFITYPESDATARATE_RATE_9MB   OpenconfigWifiTypesDATARATE = 415489049
	OpenconfigWifiTypesDATARATE_OPENCONFIGWIFITYPESDATARATE_RATE_5_5MB OpenconfigWifiTypesDATARATE = 461601010
)

// Enum value maps for OpenconfigWifiTypesDATARATE.
var (
	OpenconfigWifiTypesDATARATE_name = map[int32]string{
		0:         "OPENCONFIGWIFITYPESDATARATE_UNSET",
		22775585:  "OPENCONFIGWIFITYPESDATARATE_RATE_36MB",
		25614470:  "OPENCONFIGWIFITYPESDATARATE_RATE_48MB",
		119882321: "OPENCONFIGWIFITYPESDATARATE_RATE_18MB",
		188458380: "OPENCONFIGWIFITYPESDATARATE_RATE_11MB",
		188669959: "OPENCONFIGWIFITYPESDATARATE_RATE_12MB",
		300116088: "OPENCONFIGWIFITYPESDATARATE_RATE_24MB",
		329841425: "OPENCONFIGWIFITYPESDATARATE_RATE_54MB",
		414074926: "OPENCONFIGWIFITYPESDATARATE_RATE_6MB",
		414234913: "OPENCONFIGWIFITYPESDATARATE_RATE_1MB",
		414676330: "OPENCONFIGWIFITYPESDATARATE_RATE_2MB",
		415489049: "OPENCONFIGWIFITYPESDATARATE_RATE_9MB",
		461601010: "OPENCONFIGWIFITYPESDATARATE_RATE_5_5MB",
	}
	OpenconfigWifiTypesDATARATE_value = map[string]int32{
		"OPENCONFIGWIFITYPESDATARATE_UNSET":      0,
		"OPENCONFIGWIFITYPESDATARATE_RATE_36MB":  22775585,
		"OPENCONFIGWIFITYPESDATARATE_RATE_48MB":  25614470,
		"OPENCONFIGWIFITYPESDATARATE_RATE_18MB":  119882321,
		"OPENCONFIGWIFITYPESDATARATE_RATE_11MB":  188458380,
		"OPENCONFIGWIFITYPESDATARATE_RATE_12MB":  188669959,
		"OPENCONFIGWIFITYPESDATARATE_RATE_24MB":  300116088,
		"OPENCONFIGWIFITYPESDATARATE_RATE_54MB":  329841425,
		"OPENCONFIGWIFITYPESDATARATE_RATE_6MB":   414074926,
		"OPENCONFIGWIFITYPESDATARATE_RATE_1MB":   414234913,
		"OPENCONFIGWIFITYPESDATARATE_RATE_2MB":   414676330,
		"OPENCONFIGWIFITYPESDATARATE_RATE_9MB":   415489049,
		"OPENCONFIGWIFITYPESDATARATE_RATE_5_5MB": 461601010,
	}
)

func (x OpenconfigWifiTypesDATARATE) Enum() *OpenconfigWifiTypesDATARATE {
	p := new(OpenconfigWifiTypesDATARATE)
	*p = x
	return p
}

func (x OpenconfigWifiTypesDATARATE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigWifiTypesDATARATE) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[215].Descriptor()
}

func (OpenconfigWifiTypesDATARATE) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[215]
}

func (x OpenconfigWifiTypesDATARATE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigWifiTypesDATARATE.Descriptor instead.
func (OpenconfigWifiTypesDATARATE) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{215}
}

// OpenconfigWifiTypesOPERATINGFREQUENCY represents an enumerated type generated for the YANG identity OPERATING_FREQUENCY.
type OpenconfigWifiTypesOPERATINGFREQUENCY int32

const (
	OpenconfigWifiTypesOPERATINGFREQUENCY_OPENCONFIGWIFITYPESOPERATINGFREQUENCY_UNSET        OpenconfigWifiTypesOPERATINGFREQUENCY = 0
	OpenconfigWifiTypesOPERATINGFREQUENCY_OPENCONFIGWIFITYPESOPERATINGFREQUENCY_FREQ_5GHZ    OpenconfigWifiTypesOPERATINGFREQUENCY = 327040220
	OpenconfigWifiTypesOPERATINGFREQUENCY_OPENCONFIGWIFITYPESOPERATINGFREQUENCY_FREQ_2_5_GHZ OpenconfigWifiTypesOPERATINGFREQUENCY = 383787092
	OpenconfigWifiTypesOPERATINGFREQUENCY_OPENCONFIGWIFITYPESOPERATINGFREQUENCY_FREQ_2GHZ    OpenconfigWifiTypesOPERATINGFREQUENCY = 508963537
)

// Enum value maps for OpenconfigWifiTypesOPERATINGFREQUENCY.
var (
	OpenconfigWifiTypesOPERATINGFREQUENCY_name = map[int32]string{
		0:         "OPENCONFIGWIFITYPESOPERATINGFREQUENCY_UNSET",
		327040220: "OPENCONFIGWIFITYPESOPERATINGFREQUENCY_FREQ_5GHZ",
		383787092: "OPENCONFIGWIFITYPESOPERATINGFREQUENCY_FREQ_2_5_GHZ",
		508963537: "OPENCONFIGWIFITYPESOPERATINGFREQUENCY_FREQ_2GHZ",
	}
	OpenconfigWifiTypesOPERATINGFREQUENCY_value = map[string]int32{
		"OPENCONFIGWIFITYPESOPERATINGFREQUENCY_UNSET":        0,
		"OPENCONFIGWIFITYPESOPERATINGFREQUENCY_FREQ_5GHZ":    327040220,
		"OPENCONFIGWIFITYPESOPERATINGFREQUENCY_FREQ_2_5_GHZ": 383787092,
		"OPENCONFIGWIFITYPESOPERATINGFREQUENCY_FREQ_2GHZ":    508963537,
	}
)

func (x OpenconfigWifiTypesOPERATINGFREQUENCY) Enum() *OpenconfigWifiTypesOPERATINGFREQUENCY {
	p := new(OpenconfigWifiTypesOPERATINGFREQUENCY)
	*p = x
	return p
}

func (x OpenconfigWifiTypesOPERATINGFREQUENCY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigWifiTypesOPERATINGFREQUENCY) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_enums_proto_enumTypes[216].Descriptor()
}

func (OpenconfigWifiTypesOPERATINGFREQUENCY) Type() protoreflect.EnumType {
	return &file_openconfig_enums_proto_enumTypes[216]
}

func (x OpenconfigWifiTypesOPERATINGFREQUENCY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigWifiTypesOPERATINGFREQUENCY.Descriptor instead.
func (OpenconfigWifiTypesOPERATINGFREQUENCY) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_enums_proto_rawDescGZIP(), []int{216}
}

var File_openconfig_enums_proto protoreflect.FileDescriptor

var file_openconfig_enums_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2a, 0xbf, 0x89, 0x01, 0x0a, 0x1b, 0x49, 0x45, 0x54, 0x46, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x47, 0x0a, 0x2c, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x56, 0x49,
	0x52, 0x54, 0x55, 0x41, 0x4c, 0x4e, 0x49, 0x43, 0x10, 0xce, 0xc2, 0x5f, 0x1a, 0x13, 0x82, 0x41,
	0x10, 0x76, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x69,
	0x63, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x44, 0x53, 0x4c, 0x10, 0xf3, 0xac, 0x8d, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x73,
	0x64, 0x73, 0x6c, 0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x53, 0x4c, 0x10, 0xa9, 0xb7, 0x9b, 0x03, 0x1a, 0x08, 0x82,
	0x41, 0x05, 0x72, 0x61, 0x64, 0x73, 0x6c, 0x12, 0x36, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x38, 0x36, 0x4c, 0x41, 0x50, 0x53, 0x10, 0x91,
	0xa7, 0xa0, 0x03, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x78, 0x38, 0x36, 0x4c, 0x61, 0x70, 0x73, 0x12,
	0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x54, 0x41, 0x4c, 0x4b, 0x10, 0xa6, 0x86, 0x8b, 0x04, 0x1a, 0x0c, 0x82,
	0x41, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x30, 0x0a, 0x20, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4c, 0x53, 0x57, 0x10,
	0xb9, 0xf1, 0xe0, 0x04, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x64, 0x6c, 0x73, 0x77, 0x12, 0x30, 0x0a,
	0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x53,
	0x4c, 0x10, 0xa9, 0xc6, 0xc5, 0x05, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x69, 0x64, 0x73, 0x6c, 0x12,
	0x30, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x46, 0x41, 0x53, 0x10, 0xb3, 0xfd, 0xc5, 0x07, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x6e, 0x66, 0x61,
	0x73, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0xdc, 0xfa, 0xe0, 0x07, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x32, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53, 0x43, 0x41, 0x42, 0x4c, 0x45,
	0x53, 0x43, 0x54, 0x45, 0x35, 0x35, 0x44, 0x32, 0x55, 0x53, 0x4f, 0x4f, 0x42, 0x10, 0xc6, 0xaa,
	0xc9, 0x0c, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x74, 0x65, 0x35, 0x35, 0x64, 0x32, 0x55, 0x73, 0x4f, 0x6f, 0x62, 0x12, 0x42, 0x0a,
	0x29, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x45, 0x45,
	0x45, 0x38, 0x30, 0x32, 0x31, 0x36, 0x57, 0x4d, 0x41, 0x4e, 0x10, 0xcb, 0xe1, 0xf8, 0x0c, 0x1a,
	0x10, 0x82, 0x41, 0x0d, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x36, 0x57, 0x4d, 0x41,
	0x4e, 0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x30, 0x30, 0x38, 0x10, 0xc7, 0xe2, 0xa5, 0x0e, 0x1a, 0x08, 0x82, 0x41, 0x05,
	0x74, 0x72, 0x30, 0x30, 0x38, 0x12, 0x44, 0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x56, 0x42, 0x52, 0x43, 0x43, 0x55, 0x50, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x10, 0xe4, 0x8f, 0xcf, 0x0f, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x64, 0x76, 0x62,
	0x52, 0x63, 0x63, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x5c, 0x0a, 0x36, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x44,
	0x4f, 0x43, 0x53, 0x57, 0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x44, 0x4f, 0x57, 0x4e, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0xc1, 0xe2, 0xe0, 0x0f, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x70,
	0x72, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x73, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x44,
	0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x44, 0x0a, 0x2a, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x46, 0x31, 0x36, 0x4d, 0x46,
	0x52, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0xa3, 0xcd, 0xfa, 0x0f, 0x1a, 0x11, 0x82, 0x41,
	0x0e, 0x66, 0x72, 0x66, 0x31, 0x36, 0x4d, 0x66, 0x72, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x46, 0x0a, 0x2b, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x87,
	0xd5, 0x93, 0x10, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x61, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x4c, 0x4f, 0x4f, 0x50, 0x12, 0x48, 0x0a, 0x2c, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x49, 0x50,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x85, 0xa5, 0xce, 0x10, 0x1a, 0x13, 0x82, 0x41,
	0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x44, 0x53, 0x4c, 0x32, 0x10, 0xc0, 0x8a, 0xea, 0x10, 0x1a, 0x08, 0x82, 0x41, 0x05,
	0x68, 0x64, 0x73, 0x6c, 0x32, 0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x54, 0x47, 0x10, 0xbb,
	0x92, 0xb4, 0x11, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54,
	0x67, 0x12, 0x42, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x44, 0x4e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4c, 0x4f, 0x4f, 0x50, 0x31, 0x10, 0x9c,
	0xc6, 0xf0, 0x12, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x70, 0x64, 0x6e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x4c, 0x6f, 0x6f, 0x70, 0x31, 0x12, 0x42, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x44, 0x4e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4c, 0x4f, 0x4f,
	0x50, 0x32, 0x10, 0x9f, 0xc6, 0xf0, 0x12, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x70, 0x64, 0x6e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x32, 0x12, 0x4a, 0x0a, 0x2d, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53, 0x43, 0x41, 0x42,
	0x4c, 0x45, 0x55, 0x50, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x92, 0xe6, 0x9c, 0x13, 0x1a,
	0x14, 0x82, 0x41, 0x11, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x53, 0x44, 0x53, 0x4c, 0x10, 0xbc, 0x88, 0x95, 0x14, 0x1a,
	0x08, 0x82, 0x41, 0x05, 0x6d, 0x73, 0x64, 0x73, 0x6c, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x44, 0x44, 0x49, 0x10, 0x9c, 0xee,
	0xdb, 0x15, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x66, 0x64, 0x64, 0x69, 0x12, 0x2e, 0x0a, 0x1f, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x46, 0x50, 0x10, 0x8c,
	0x90, 0xad, 0x16, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x67, 0x66, 0x70, 0x12, 0x46, 0x0a, 0x2b, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x57,
	0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x50, 0x32, 0x50, 0x10, 0xea, 0xa6, 0xc5, 0x16, 0x1a,
	0x12, 0x82, 0x41, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x50, 0x32, 0x50, 0x12, 0x40, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x49, 0x42, 0x52, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10,
	0xca, 0x82, 0x8e, 0x17, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x66, 0x69, 0x62, 0x72, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x27, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x42, 0x57, 0x41, 0x50, 0x32, 0x4d, 0x50,
	0x10, 0xa3, 0xe0, 0xba, 0x19, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x42, 0x57,
	0x41, 0x70, 0x32, 0x4d, 0x70, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0xc3, 0xad, 0xb5, 0x1c, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0xb9, 0xe9, 0xf6, 0x1d,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x66, 0x61, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x23, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x45, 0x4d,
	0x10, 0xbd, 0xd5, 0xd5, 0x20, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45,
	0x4d, 0x12, 0x36, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x46, 0x43, 0x31, 0x34, 0x38, 0x33, 0x10, 0xd6, 0xb5, 0xa7, 0x22, 0x1a, 0x0a, 0x82,
	0x41, 0x07, 0x72, 0x66, 0x63, 0x31, 0x34, 0x38, 0x33, 0x12, 0x48, 0x0a, 0x2c, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xe4, 0xb1, 0xb3, 0x22, 0x1a, 0x13,
	0x82, 0x41, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0xcc, 0x8c, 0xf6, 0x23,
	0x1a, 0x0b, 0x82, 0x41, 0x08, 0x69, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x4a, 0x0a,
	0x2d, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0xf2,
	0xce, 0xc3, 0x24, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x2f, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53, 0x43, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0xf5, 0x89, 0x92,
	0x27, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x36, 0x0a, 0x23, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x44, 0x53, 0x44, 0x58, 0x49,
	0x10, 0x81, 0xa5, 0xc6, 0x27, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x73, 0x6d, 0x64, 0x73, 0x44, 0x78,
	0x69, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x58, 0x32, 0x31, 0x33, 0x10, 0xbd, 0xb0, 0xb9, 0x29, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x78,
	0x32, 0x31, 0x33, 0x12, 0x3c, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x56, 0x42, 0x52, 0x43, 0x53, 0x54, 0x44, 0x4d, 0x41, 0x10, 0xf5, 0xb6,
	0xcb, 0x29, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x64, 0x76, 0x62, 0x52, 0x63, 0x73, 0x54, 0x64, 0x6d,
	0x61, 0x12, 0x38, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x44, 0x53, 0x4c, 0x10, 0xd5, 0xc0, 0xa2, 0x2d, 0x1a, 0x0b,
	0x82, 0x41, 0x08, 0x72, 0x65, 0x61, 0x63, 0x68, 0x44, 0x53, 0x4c, 0x12, 0x42, 0x0a, 0x29, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x4f, 0x38, 0x38,
	0x30, 0x32, 0x35, 0x46, 0x49, 0x42, 0x45, 0x52, 0x10, 0xad, 0x87, 0xd8, 0x2d, 0x1a, 0x10, 0x82,
	0x41, 0x0d, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x46, 0x69, 0x62, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x45, 0x53, 0x10, 0x8a, 0xc0, 0x88, 0x2e, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x63, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x53, 0x44, 0x4e, 0x53, 0x10, 0xc0, 0x96, 0xeb, 0x2e, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x69, 0x73,
	0x64, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x53, 0x44, 0x4e, 0x55, 0x10, 0xc6, 0x96, 0xeb, 0x2e, 0x1a, 0x08, 0x82,
	0x41, 0x05, 0x69, 0x73, 0x64, 0x6e, 0x75, 0x12, 0x40, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x53, 0x43, 0x4f, 0x49, 0x53, 0x4c, 0x56,
	0x4c, 0x41, 0x4e, 0x10, 0xa7, 0xe5, 0x82, 0x2f, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x49, 0x53, 0x4c, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x1e, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x31, 0x10, 0xfd, 0xa0, 0x97, 0x2f,
	0x1a, 0x05, 0x82, 0x41, 0x02, 0x65, 0x31, 0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xdb, 0xd8, 0x87,
	0x31, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x2b, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x58, 0x4f, 0x52, 0x10, 0xa7, 0xf8, 0x80, 0x32, 0x1a,
	0x12, 0x82, 0x41, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x78, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x2b, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x53, 0x4f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x43, 0x52, 0x46, 0x50, 0x49,
	0x4e, 0x54, 0x10, 0xcb, 0xc7, 0x9b, 0x33, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x69, 0x73, 0x6f, 0x38,
	0x38, 0x30, 0x32, 0x35, 0x43, 0x52, 0x46, 0x50, 0x49, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x2f, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xcb,
	0xfd, 0x9c, 0x36, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x1f, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x54, 0x4d, 0x10, 0xdc,
	0xa0, 0xa4, 0x36, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x64, 0x74, 0x6d, 0x12, 0x54, 0x0a, 0x32, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x52, 0x45, 0x4c, 0x41, 0x59, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x10, 0xe5, 0x93, 0xc6, 0x36, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x44, 0x53, 0x4c, 0x32, 0x10, 0xc6, 0xe7, 0xcd, 0x36, 0x1a, 0x08, 0x82, 0x41, 0x05,
	0x76, 0x64, 0x73, 0x6c, 0x32, 0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x53, 0x43, 0x4f, 0x4e, 0x10, 0xd1, 0xb9, 0xee, 0x36, 0x1a,
	0x08, 0x82, 0x41, 0x05, 0x65, 0x73, 0x63, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x46, 0x43, 0x38, 0x37, 0x37, 0x58,
	0x32, 0x35, 0x10, 0xaf, 0xb2, 0x9f, 0x37, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x72, 0x66, 0x63, 0x38,
	0x37, 0x37, 0x78, 0x32, 0x35, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x32, 0x35, 0x4d, 0x4c, 0x50, 0x10, 0x8b, 0xef, 0xe5, 0x3a,
	0x1a, 0x09, 0x82, 0x41, 0x06, 0x78, 0x32, 0x35, 0x6d, 0x6c, 0x70, 0x12, 0x4a, 0x0a, 0x2d, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53, 0x43,
	0x41, 0x42, 0x4c, 0x45, 0x4d, 0x41, 0x43, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0xc9, 0xbb, 0xea,
	0x3a, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x63, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x2f, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x47, 0x50, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x10, 0xc3, 0x8d, 0x8f, 0x3b, 0x1a,
	0x16, 0x82, 0x41, 0x13, 0x62, 0x67, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x31, 0x32, 0x4d, 0x50, 0x50, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x10, 0xb6, 0xf1, 0xaf, 0x3b, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x61, 0x31, 0x32,
	0x4d, 0x70, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x53, 0x32, 0x33, 0x32, 0x10, 0x97,
	0x95, 0xec, 0x3b, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x72, 0x73, 0x32, 0x33, 0x32, 0x12, 0x3a, 0x0a,
	0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x46, 0x56,
	0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x10, 0xf7, 0xeb, 0xf1, 0x3b, 0x1a, 0x0c, 0x82, 0x41, 0x09,
	0x69, 0x66, 0x56, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x26, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x4d, 0x56, 0x49, 0x52, 0x54,
	0x55, 0x41, 0x4c, 0x10, 0xf2, 0x99, 0xc3, 0x3c, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x61, 0x74, 0x6d,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x53, 0x30, 0x10, 0xf4, 0xa3, 0xa4, 0x3e, 0x1a,
	0x06, 0x82, 0x41, 0x03, 0x64, 0x73, 0x30, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x53, 0x31, 0x10, 0xf5, 0xa3, 0xa4, 0x3e, 0x1a,
	0x06, 0x82, 0x41, 0x03, 0x64, 0x73, 0x31, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x53, 0x33, 0x10, 0xf7, 0xa3, 0xa4, 0x3e, 0x1a,
	0x06, 0x82, 0x41, 0x03, 0x64, 0x73, 0x33, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x42, 0x10, 0xff, 0xc5, 0xb7, 0x3f, 0x1a,
	0x06, 0x82, 0x41, 0x03, 0x75, 0x73, 0x62, 0x12, 0x40, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x42, 0x4f, 0x58, 0x57, 0x49, 0x52, 0x45, 0x4c,
	0x45, 0x53, 0x53, 0x10, 0xec, 0xc8, 0xf9, 0x3f, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x78, 0x62, 0x6f,
	0x78, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x56, 0x4c, 0x41, 0x4e, 0x10,
	0xa2, 0x83, 0xa3, 0x41, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x6c, 0x32, 0x76, 0x6c, 0x61, 0x6e, 0x12,
	0x3c, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4c, 0x55, 0x47, 0x50, 0x4f, 0x4e, 0x4f, 0x4e, 0x55, 0x10, 0x9d, 0x98, 0x8e, 0x44, 0x1a, 0x0d,
	0x82, 0x41, 0x0a, 0x61, 0x6c, 0x75, 0x47, 0x70, 0x6f, 0x6e, 0x4f, 0x6e, 0x75, 0x12, 0x42, 0x0a,
	0x29, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x42, 0x4d,
	0x33, 0x37, 0x30, 0x50, 0x41, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x10, 0x94, 0xa8, 0xe6, 0x44, 0x1a,
	0x10, 0x82, 0x41, 0x0d, 0x69, 0x62, 0x6d, 0x33, 0x37, 0x30, 0x70, 0x61, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x46, 0x5f, 0x47, 0x53, 0x4e, 0x10, 0xf1, 0xe7, 0xfd, 0x44, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x69, 0x66, 0x2d, 0x67, 0x73, 0x6e, 0x12, 0x3e, 0x0a, 0x27, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x56, 0x49, 0x52, 0x54, 0x55,
	0x41, 0x4c, 0x10, 0xf5, 0xe0, 0x93, 0x48, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x70, 0x72, 0x6f, 0x70,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x33, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53, 0x43, 0x41, 0x42, 0x4c, 0x45,
	0x55, 0x50, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x52, 0x46, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xc3,
	0xe1, 0xc6, 0x48, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x38, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x52, 0x33, 0x30, 0x33, 0x49, 0x44, 0x54, 0x10, 0xd1, 0xa1, 0xe1, 0x48, 0x1a, 0x0b, 0x82, 0x41,
	0x08, 0x67, 0x72, 0x33, 0x30, 0x33, 0x49, 0x44, 0x54, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x56, 0x42, 0x54, 0x44, 0x4d, 0x10,
	0xe6, 0xac, 0xc0, 0x49, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x64, 0x76, 0x62, 0x54, 0x64, 0x6d, 0x12,
	0x40, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48,
	0x59, 0x50, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0xac, 0xfe, 0xc7, 0x49,
	0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x58, 0x32, 0x35, 0x50, 0x4c, 0x45, 0x10, 0x93, 0xce, 0xe4, 0x49, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x78, 0x32, 0x35, 0x70, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x8b, 0xb6, 0xec, 0x49, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x66, 0x61, 0x73, 0x74, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x44, 0x53, 0x4c, 0x10, 0xa1, 0xe3, 0xec, 0x4b, 0x1a, 0x07, 0x82, 0x41,
	0x04, 0x61, 0x64, 0x73, 0x6c, 0x12, 0x40, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x54, 0x4f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x10, 0xe2, 0xd2, 0x95, 0x4c, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x6f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x53, 0x4c, 0x32, 0x50, 0x4c, 0x55, 0x53,
	0x10, 0xdd, 0x8d, 0xff, 0x4c, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x61, 0x64, 0x73, 0x6c, 0x32, 0x70,
	0x6c, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0xc7, 0xfd, 0xb1,
	0x4e, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x69, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4d, 0x54, 0x10, 0xdb, 0xc7, 0xc5, 0x4e, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x69, 0x6d, 0x74, 0x12,
	0x2c, 0x0a, 0x1e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x10, 0xe8, 0xad, 0x97, 0x4f, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x69, 0x70, 0x12, 0x2e, 0x0a,
	0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x50,
	0x10, 0xee, 0xef, 0x9b, 0x4f, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x70, 0x69, 0x70, 0x12, 0x40, 0x0a,
	0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x32, 0x35,
	0x48, 0x55, 0x4e, 0x54, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xce, 0xad, 0x84, 0x50, 0x1a, 0x0f,
	0x82, 0x41, 0x0c, 0x78, 0x32, 0x35, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x36, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4c, 0x55, 0x45, 0x50, 0x4f, 0x4e, 0x10, 0xa5, 0xdb, 0xa3, 0x50, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x2e, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x55, 0x45, 0x50, 0x4f, 0x4e, 0x50, 0x48,
	0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x55, 0x4e, 0x49, 0x10, 0xc0, 0xc9, 0xc4, 0x52, 0x1a, 0x15,
	0x82, 0x41, 0x12, 0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f, 0x6e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x55, 0x6e, 0x69, 0x12, 0x38, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x43, 0x4e, 0x4c, 0x53, 0x10, 0xbc, 0xe3,
	0xdf, 0x53, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x43, 0x6e, 0x6c, 0x73, 0x12,
	0x4c, 0x0a, 0x2e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x41, 0x50, 0x57, 0x41, 0x50, 0x44, 0x4f, 0x54, 0x31, 0x31, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0xe5, 0xc7, 0x9c, 0x55, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x63, 0x61, 0x70, 0x77, 0x61,
	0x70, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a,
	0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x44, 0x49, 0x44, 0x10, 0xba, 0x83, 0xe9, 0x55, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x44, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4e, 0x52, 0x10, 0xaa, 0xd0, 0x88, 0x56, 0x1a,
	0x06, 0x82, 0x41, 0x03, 0x63, 0x6e, 0x72, 0x12, 0x36, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x44, 0x48, 0x31, 0x38, 0x32, 0x32, 0x10, 0x8e,
	0x8e, 0xd0, 0x56, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x68, 0x64, 0x68, 0x31, 0x38, 0x32, 0x32, 0x12,
	0x34, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x54, 0x4d, 0x44, 0x58, 0x49, 0x10, 0xce, 0xc7, 0xa5, 0x58, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x61,
	0x74, 0x6d, 0x44, 0x78, 0x69, 0x12, 0x3c, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x43, 0x4e, 0x45, 0x54, 0x50, 0x4c, 0x55, 0x53, 0x10,
	0xf2, 0xee, 0xc8, 0x58, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x61, 0x72, 0x63, 0x6e, 0x65, 0x74, 0x50,
	0x6c, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x4f, 0x56, 0x45, 0x52, 0x43, 0x44, 0x4c, 0x43, 0x10, 0xa8, 0xdb,
	0xc0, 0x59, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x69, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x64, 0x6c,
	0x63, 0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xa6, 0xd4, 0xf9, 0x59, 0x1a,
	0x0c, 0x82, 0x41, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x44, 0x0a,
	0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x56, 0x42,
	0x52, 0x43, 0x43, 0x4d, 0x41, 0x43, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0xab, 0xdb, 0xda, 0x5a,
	0x1a, 0x11, 0x82, 0x41, 0x0e, 0x64, 0x76, 0x62, 0x52, 0x63, 0x63, 0x4d, 0x61, 0x63, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0xc1, 0xb1,
	0xdf, 0x5b, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x53, 0x44, 0x4e, 0x10, 0xe1, 0xa7, 0x9a, 0x5c, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x69,
	0x73, 0x64, 0x6e, 0x12, 0x44, 0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x43, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0xc4, 0x94, 0xa1, 0x5c, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x41, 0x50, 0x10, 0xc5, 0x8e,
	0xf7, 0x5c, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x61, 0x72, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x1f, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4f, 0x4e, 0x10, 0xf7,
	0xce, 0x9a, 0x5e, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x65, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x30, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x4e, 0x45, 0x54,
	0x4f, 0x56, 0x45, 0x52, 0x48, 0x45, 0x41, 0x44, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10,
	0x8b, 0xe7, 0xd8, 0x5e, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x4f, 0x76,
	0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3a, 0x0a,
	0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x58,
	0x54, 0x4f, 0x46, 0x4f, 0x55, 0x52, 0x10, 0xbe, 0xee, 0xd8, 0x5e, 0x1a, 0x0c, 0x82, 0x41, 0x09,
	0x73, 0x69, 0x78, 0x54, 0x6f, 0x46, 0x6f, 0x75, 0x72, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0xb7, 0xf5, 0x9b,
	0x5f, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x44, 0x0a, 0x2a, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x43, 0x53, 0x4d, 0x41, 0x43, 0x44, 0x10, 0x9f, 0x93, 0xd6, 0x5f, 0x1a, 0x11, 0x82, 0x41,
	0x0e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x73, 0x6d, 0x61, 0x63, 0x64, 0x12,
	0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x53, 0x30, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0xc4, 0xe0, 0x8e, 0x60, 0x1a, 0x0c, 0x82,
	0x41, 0x09, 0x64, 0x73, 0x30, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x26, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x4d, 0x4c, 0x4f,
	0x47, 0x49, 0x43, 0x41, 0x4c, 0x10, 0xde, 0xd2, 0xea, 0x63, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x61,
	0x74, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x24, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x4d, 0x41,
	0x43, 0x10, 0xc9, 0x92, 0xcb, 0x64, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x4d, 0x41, 0x43, 0x12, 0x58, 0x0a, 0x34, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x44, 0x4f, 0x43, 0x53, 0x57, 0x49, 0x52, 0x45, 0x4c,
	0x45, 0x53, 0x53, 0x4d, 0x41, 0x43, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x85, 0xdd, 0xa0, 0x65,
	0x1a, 0x1b, 0x82, 0x41, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x73, 0x57, 0x69, 0x72,
	0x65, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x63, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4e,
	0x36, 0x32, 0x32, 0x10, 0xcc, 0x9a, 0x93, 0x66, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x70, 0x6f, 0x6e,
	0x36, 0x32, 0x32, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x53, 0x49, 0x50, 0x10, 0x89, 0xfb, 0xc4, 0x66, 0x1a, 0x07, 0x82, 0x41,
	0x04, 0x6e, 0x73, 0x69, 0x70, 0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x10, 0xd3, 0x96, 0xa3, 0x69, 0x1a,
	0x08, 0x82, 0x41, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x4e, 0x4f, 0x44, 0x55, 0x10,
	0x82, 0xa8, 0xdb, 0x69, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x6f, 0x74, 0x6e, 0x4f, 0x64, 0x75, 0x12,
	0x48, 0x0a, 0x2c, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x53, 0x4f, 0x38, 0x38, 0x30, 0x32, 0x34, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x42, 0x55, 0x53, 0x10,
	0xc3, 0xaf, 0x8a, 0x6c, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32,
	0x34, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x46, 0x46, 0x45, 0x45, 0x10,
	0xb7, 0x9f, 0x83, 0x6d, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x12,
	0x58, 0x0a, 0x34, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x4f, 0x43, 0x53, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x55, 0x50, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0xcb, 0xec, 0x84, 0x6e, 0x1a, 0x1b, 0x82, 0x41,
	0x18, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x23, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x4d, 0x46, 0x55, 0x4e, 0x49,
	0x10, 0xd9, 0xf8, 0x9d, 0x6e, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x61, 0x74, 0x6d, 0x46, 0x75, 0x6e,
	0x69, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4d, 0x50, 0x10, 0x9e, 0xc5, 0xf2, 0x6e, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x6c, 0x6d,
	0x70, 0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x44, 0x53, 0x4c, 0x32, 0x10, 0xc1, 0xc0, 0xbc, 0x6f, 0x1a, 0x08, 0x82, 0x41, 0x05,
	0x61, 0x64, 0x73, 0x6c, 0x32, 0x12, 0x52, 0x0a, 0x31, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x4f, 0x57, 0x4e, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x52, 0x46, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xd7, 0x99, 0x89, 0x70, 0x1a,
	0x18, 0x82, 0x41, 0x15, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x2c, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x56, 0x42, 0x52, 0x43, 0x43, 0x44,
	0x4f, 0x57, 0x4e, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0xa3, 0xdf, 0x8c, 0x71, 0x1a, 0x13,
	0x82, 0x41, 0x10, 0x64, 0x76, 0x62, 0x52, 0x63, 0x63, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x46, 0x0a, 0x2b, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4d, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52,
	0x49, 0x50, 0x10, 0xd1, 0xd9, 0x93, 0x71, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x4d, 0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x3a, 0x0a, 0x25, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43,
	0x49, 0x53, 0x44, 0x4e, 0x10, 0xe1, 0x94, 0xe9, 0x72, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x53, 0x44, 0x4e, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x43, 0x10, 0x9e, 0xfe, 0x9b, 0x77, 0x1a,
	0x06, 0x82, 0x41, 0x03, 0x70, 0x6c, 0x63, 0x12, 0x58, 0x0a, 0x34, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x44, 0x4f, 0x43, 0x53, 0x57,
	0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x55, 0x50, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10,
	0xf6, 0xf0, 0xf9, 0x7b, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x44, 0x6f, 0x63,
	0x73, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x92, 0xc1, 0xd6, 0x7d, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4e, 0x31, 0x35, 0x35, 0x10, 0xed, 0xb6,
	0xd8, 0x7e, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x70, 0x6f, 0x6e, 0x31, 0x35, 0x35, 0x12, 0x3c, 0x0a,
	0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x48, 0x44, 0x4c, 0x43, 0x10, 0xce, 0xf0, 0xf7, 0x7e, 0x1a, 0x0d, 0x82, 0x41,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x48, 0x64, 0x6c, 0x63, 0x12, 0x37, 0x0a, 0x23, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x4e, 0x45, 0x54,
	0x56, 0x54, 0x10, 0xcc, 0xf4, 0xa5, 0x80, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x73, 0x6f, 0x6e,
	0x65, 0x74, 0x56, 0x54, 0x12, 0x63, 0x0a, 0x39, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x57, 0x52, 0x41, 0x50, 0x50,
	0x45, 0x52, 0x4f, 0x56, 0x45, 0x52, 0x48, 0x45, 0x41, 0x44, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x10, 0xe3, 0x97, 0xd5, 0x80, 0x01, 0x1a, 0x20, 0x82, 0x41, 0x1d, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x41, 0x0a, 0x28, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x46, 0x47,
	0x44, 0x45, 0x41, 0x4e, 0x41, 0x10, 0xcf, 0xcc, 0xb3, 0x81, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x47, 0x44, 0x45, 0x41, 0x4e, 0x41, 0x12, 0x3f, 0x0a, 0x27,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d,
	0x41, 0x52, 0x59, 0x49, 0x53, 0x44, 0x4e, 0x10, 0xad, 0xbb, 0xff, 0x82, 0x01, 0x1a, 0x0e, 0x82,
	0x41, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x53, 0x44, 0x4e, 0x12, 0x31, 0x0a,
	0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x44, 0x43,
	0x49, 0x10, 0xa6, 0xde, 0x8d, 0x83, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x73, 0x64, 0x63, 0x69,
	0x12, 0x3f, 0x0a, 0x27, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x31, 0x38, 0x32, 0x32, 0x10, 0x82, 0x90, 0x9f, 0x83,
	0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x31, 0x38, 0x32,
	0x32, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x41, 0x4c, 0x35, 0x10, 0xb8, 0x82, 0xd2, 0x83, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x61, 0x61, 0x6c, 0x35, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x41, 0x4c, 0x32, 0x10, 0xbf, 0x82, 0xd2, 0x83, 0x01, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x61, 0x61, 0x6c, 0x32, 0x12, 0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x4e, 0x45, 0x54, 0x50, 0x41, 0x54, 0x48,
	0x10, 0xb7, 0xde, 0xe9, 0x84, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x73, 0x6f, 0x6e, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0xe9,
	0xb0, 0xda, 0x85, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x54, 0x4d, 0x10, 0xf1, 0xe9, 0xf6, 0x85, 0x01, 0x1a, 0x06, 0x82, 0x41,
	0x03, 0x61, 0x74, 0x6d, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x4e, 0x45, 0x54, 0x10, 0xea, 0x84, 0xaa, 0x86, 0x01, 0x1a,
	0x08, 0x82, 0x41, 0x05, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x45, 0x54, 0x10,
	0xc3, 0xab, 0xed, 0x86, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x74,
	0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x33, 0x49, 0x50, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0xdc, 0x9d, 0x8f, 0x87, 0x01, 0x1a, 0x0b,
	0x82, 0x41, 0x08, 0x6c, 0x33, 0x69, 0x70, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x3f, 0x0a, 0x27, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x4f, 0x38, 0x38,
	0x30, 0x32, 0x36, 0x4d, 0x41, 0x4e, 0x10, 0x8e, 0xf7, 0xd6, 0x87, 0x01, 0x1a, 0x0e, 0x82, 0x41,
	0x0b, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x36, 0x4d, 0x61, 0x6e, 0x12, 0x33, 0x0a, 0x21,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x46, 0x41, 0x53,
	0x54, 0x10, 0xc8, 0xd9, 0xe2, 0x87, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x67, 0x66, 0x61, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x41, 0x50, 0x57, 0x41, 0x50, 0x44, 0x4f, 0x54, 0x31, 0x31, 0x42, 0x53, 0x53, 0x10,
	0xba, 0xae, 0xf4, 0x88, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70,
	0x44, 0x6f, 0x74, 0x31, 0x31, 0x42, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xf9, 0xb9,
	0xc7, 0x89, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x49, 0x0a,
	0x2c, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x47,
	0x49, 0x54, 0x41, 0x4c, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x9e, 0x8f,
	0xbc, 0x8a, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x33, 0x4d, 0x42, 0x49, 0x54, 0x10, 0xbf, 0xb1, 0x95, 0x8c, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x33, 0x4d, 0x62, 0x69, 0x74, 0x12, 0x3b, 0x0a,
	0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x37, 0x30,
	0x33, 0x41, 0x54, 0x36, 0x34, 0x4b, 0x10, 0xc6, 0xf8, 0xe2, 0x8c, 0x01, 0x1a, 0x0c, 0x82, 0x41,
	0x09, 0x67, 0x37, 0x30, 0x33, 0x61, 0x74, 0x36, 0x34, 0x6b, 0x12, 0x4d, 0x0a, 0x2e, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x55, 0x47, 0x50, 0x4f,
	0x4e, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x55, 0x4e, 0x49, 0x10, 0x92, 0xcd, 0xd4,
	0x8e, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x61, 0x6c, 0x75, 0x47, 0x70, 0x6f, 0x6e, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x50, 0x4e, 0x41,
	0x10, 0xc9, 0xb7, 0xfe, 0x8e, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x68, 0x6f, 0x6d, 0x65, 0x70,
	0x6e, 0x61, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x49, 0x50, 0x10, 0xdd, 0xea, 0xa5, 0x8f, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03,
	0x73, 0x69, 0x70, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x50, 0x4c, 0x52, 0x53, 0x10, 0xbd, 0xc3, 0xc7, 0x8f, 0x01, 0x1a, 0x08,
	0x82, 0x41, 0x05, 0x65, 0x70, 0x6c, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x41, 0x54, 0x4d, 0x10,
	0xa4, 0xed, 0xe7, 0x8f, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x41, 0x74,
	0x6d, 0x12, 0x43, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x4f, 0x4e, 0x31, 0x30, 0x4d, 0x42, 0x49, 0x54, 0x10, 0xf7,
	0x82, 0xa0, 0x90, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x6f, 0x6e,
	0x31, 0x30, 0x4d, 0x62, 0x69, 0x74, 0x12, 0x57, 0x0a, 0x33, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x53,
	0x43, 0x54, 0x45, 0x35, 0x35, 0x44, 0x31, 0x46, 0x57, 0x44, 0x4f, 0x4f, 0x42, 0x10, 0x88, 0xdd,
	0xcb, 0x90, 0x01, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x63, 0x74, 0x65, 0x35, 0x35, 0x64, 0x31, 0x46, 0x77, 0x64, 0x4f, 0x6f, 0x62, 0x12,
	0x3f, 0x0a, 0x27, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x53, 0x4f, 0x38, 0x38, 0x30, 0x32, 0x32, 0x4c, 0x4c, 0x43, 0x10, 0xf1, 0xca, 0xd8, 0x90, 0x01,
	0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x32, 0x6c, 0x6c, 0x63,
	0x12, 0x3f, 0x0a, 0x27, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x41, 0x53, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x46, 0x58, 0x10, 0xed, 0xf4, 0xdb, 0x91,
	0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x66, 0x61, 0x73, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x46,
	0x58, 0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x54, 0x4d, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x10, 0xb2, 0xfd, 0xe9, 0x91, 0x01, 0x1a,
	0x0b, 0x82, 0x41, 0x08, 0x61, 0x74, 0x6d, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x12, 0x41, 0x0a, 0x28,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x42, 0x4c, 0x56,
	0x45, 0x43, 0x54, 0x41, 0x53, 0x54, 0x41, 0x52, 0x10, 0x8f, 0xd1, 0xc9, 0x92, 0x01, 0x1a, 0x0f,
	0x82, 0x41, 0x0c, 0x63, 0x62, 0x6c, 0x56, 0x65, 0x63, 0x74, 0x61, 0x53, 0x74, 0x61, 0x72, 0x12,
	0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x10, 0xfd, 0xcf, 0x92, 0x94, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x70, 0x61,
	0x72, 0x61, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x91, 0xd6, 0x9b, 0x94, 0x01, 0x1a, 0x09,
	0x82, 0x41, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x27, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x4f, 0x56,
	0x45, 0x52, 0x49, 0x50, 0x10, 0xf2, 0xcc, 0xb7, 0x94, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x45, 0x0a, 0x2a, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0xca, 0xe0, 0xde, 0x95, 0x01, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x51, 0x32, 0x39, 0x33, 0x31, 0x10, 0xeb, 0xb7, 0xbb, 0x96, 0x01, 0x1a, 0x08, 0x82, 0x41,
	0x05, 0x71, 0x32, 0x39, 0x33, 0x31, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x56, 0x4c, 0x10, 0xba, 0xf3, 0xe8, 0x96, 0x01, 0x1a,
	0x06, 0x82, 0x41, 0x03, 0x6d, 0x76, 0x6c, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x50, 0x50, 0x10, 0xb9, 0x8b, 0x9c, 0x97, 0x01,
	0x1a, 0x06, 0x82, 0x41, 0x03, 0x70, 0x70, 0x70, 0x12, 0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x8e, 0xa6, 0xba, 0x97, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x66, 0x72, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x45, 0x45, 0x45, 0x31, 0x33, 0x39, 0x34, 0x10, 0x8c, 0xc4,
	0xdf, 0x97, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x69, 0x65, 0x65, 0x65, 0x31, 0x33, 0x39, 0x34,
	0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x46, 0x4c, 0x41, 0x4e, 0x45, 0x38, 0x30, 0x32, 0x35, 0x10, 0xc3, 0xbc, 0xa4, 0x98, 0x01,
	0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x61, 0x66, 0x6c, 0x61, 0x6e, 0x65, 0x38, 0x30, 0x32, 0x35, 0x12,
	0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x46, 0x4c, 0x41, 0x4e, 0x45, 0x38, 0x30, 0x32, 0x33, 0x10, 0xc5, 0xbc, 0xa4, 0x98, 0x01, 0x1a,
	0x0d, 0x82, 0x41, 0x0a, 0x61, 0x66, 0x6c, 0x61, 0x6e, 0x65, 0x38, 0x30, 0x32, 0x33, 0x12, 0x35,
	0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52,
	0x43, 0x4e, 0x45, 0x54, 0x10, 0x96, 0xf9, 0xb7, 0x98, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x61,
	0x72, 0x63, 0x6e, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x10,
	0xfe, 0xbd, 0xd0, 0x98, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45,
	0x6e, 0x63, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x27, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x4d, 0x56, 0x43, 0x49, 0x45, 0x4e, 0x44, 0x50, 0x54, 0x10,
	0xc8, 0xc7, 0xab, 0x99, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x61, 0x74, 0x6d, 0x56, 0x63, 0x69,
	0x45, 0x6e, 0x64, 0x50, 0x74, 0x12, 0x45, 0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x4f, 0x38, 0x38, 0x30, 0x32, 0x33, 0x43, 0x53, 0x4d,
	0x41, 0x43, 0x44, 0x10, 0xb2, 0xff, 0x88, 0x9a, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x69, 0x73,
	0x6f, 0x38, 0x38, 0x30, 0x32, 0x33, 0x43, 0x73, 0x6d, 0x61, 0x63, 0x64, 0x12, 0x59, 0x0a, 0x34,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53,
	0x43, 0x41, 0x42, 0x4c, 0x45, 0x4d, 0x43, 0x4d, 0x54, 0x53, 0x44, 0x4f, 0x57, 0x4e, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x10, 0xc5, 0x83, 0xc3, 0x9a, 0x01, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x64,
	0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x43, 0x6d, 0x74, 0x73, 0x44, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x44, 0x53, 0x4c, 0x10, 0xb6,
	0xeb, 0x84, 0x9c, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x66, 0x61, 0x73, 0x74, 0x64, 0x73, 0x6c,
	0x12, 0x3f, 0x0a, 0x27, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x52, 0x44, 0x4c, 0x43, 0x49, 0x45, 0x4e, 0x44, 0x50, 0x54, 0x10, 0xce, 0x86, 0x9f, 0x9e,
	0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x66, 0x72, 0x44, 0x6c, 0x63, 0x69, 0x45, 0x6e, 0x64, 0x50,
	0x74, 0x12, 0x4d, 0x0a, 0x2e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x4c, 0x55, 0x45, 0x50, 0x4f, 0x4e, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x4c,
	0x49, 0x4e, 0x4b, 0x10, 0xd2, 0xfd, 0xe2, 0x9f, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x61, 0x6c,
	0x75, 0x45, 0x70, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x41, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x4f, 0x43, 0x41, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x31, 0x10, 0x96, 0xc5, 0x9d,
	0xa0, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x6d, 0x6f, 0x63, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x31, 0x12, 0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x46, 0x53, 0x49, 0x47, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xd1, 0x8e, 0xfb,
	0xa0, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x6d, 0x66, 0x53, 0x69, 0x67, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x39, 0x39, 0x38, 0x31, 0x10, 0xf1, 0xfe, 0xb3, 0xa5, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05,
	0x67, 0x39, 0x39, 0x38, 0x31, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x39, 0x39, 0x38, 0x32, 0x10, 0xf2, 0xfe, 0xb3, 0xa5, 0x01,
	0x1a, 0x08, 0x82, 0x41, 0x05, 0x67, 0x39, 0x39, 0x38, 0x32, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x39, 0x39, 0x38, 0x33, 0x10,
	0xf3, 0xfe, 0xb3, 0xa5, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x67, 0x39, 0x39, 0x38, 0x33, 0x12,
	0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x54, 0x50, 0x10, 0x82, 0xe4, 0xac, 0xa6, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x67, 0x74, 0x70,
	0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x50, 0x43, 0x10, 0x9f, 0xf9, 0xe8, 0xa6, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x6d, 0x70,
	0x63, 0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x56, 0x42, 0x41, 0x53, 0x49, 0x49, 0x4e, 0x10, 0xa7, 0x94, 0x94, 0xa8, 0x01, 0x1a,
	0x0b, 0x82, 0x41, 0x08, 0x64, 0x76, 0x62, 0x41, 0x73, 0x69, 0x49, 0x6e, 0x12, 0x3b, 0x0a, 0x25,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x50, 0x45,
	0x52, 0x4c, 0x41, 0x4e, 0x32, 0x10, 0xb2, 0xd3, 0xb8, 0xa8, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09,
	0x68, 0x69, 0x70, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x32, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x53, 0x53, 0x49, 0x10, 0xc8, 0xc2,
	0xc1, 0xa8, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x68, 0x73, 0x73, 0x69, 0x12, 0x3d, 0x0a, 0x26,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x45, 0x4d, 0x46, 0x47, 0x44, 0x10, 0xb8, 0x89, 0x97, 0xaa, 0x01, 0x1a, 0x0d, 0x82, 0x41,
	0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x4d, 0x46, 0x47, 0x44, 0x12, 0x31, 0x0a, 0x20, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x44, 0x4c, 0x43, 0x10,
	0xcd, 0xee, 0x8d, 0xab, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x73, 0x64, 0x6c, 0x63, 0x12, 0x43,
	0x0a, 0x29, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x4d, 0x50, 0x49, 0x10, 0x97, 0xce, 0xb9, 0xac,
	0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x4d, 0x50, 0x49, 0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x46, 0x50, 0x57, 0x54, 0x59, 0x50, 0x45, 0x10, 0xc1, 0xcc, 0xb5, 0xad,
	0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x69, 0x66, 0x50, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37,
	0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x98, 0x94, 0xae, 0xae, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x4f, 0x4e, 0x38, 0x30,
	0x4d, 0x42, 0x49, 0x54, 0x10, 0xe8, 0xc3, 0xd0, 0xaf, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x6f, 0x6e, 0x38, 0x30, 0x4d, 0x62, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x1f,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x31, 0x31, 0x10,
	0xfd, 0xe0, 0xd6, 0xaf, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x76, 0x31, 0x31, 0x12, 0x3d, 0x0a,
	0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x90, 0xf4, 0xe8, 0xb0, 0x01, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x4f, 0x0a, 0x2f,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10,
	0x87, 0x88, 0xf1, 0xb0, 0x01, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x41, 0x0a,
	0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43,
	0x53, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x52, 0x10, 0xeb, 0x94, 0xf7, 0xb0, 0x01, 0x1a,
	0x0f, 0x82, 0x41, 0x0c, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x64, 0x72,
	0x12, 0x41, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x4f, 0x43, 0x53, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x46, 0x10, 0xff, 0x94, 0xf7,
	0xb0, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x64, 0x66, 0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x4f, 0x56, 0x45, 0x52, 0x43, 0x4c, 0x41, 0x57, 0x10, 0xc3, 0xf2,
	0x8f, 0xb2, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x69, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x6c,
	0x61, 0x77, 0x12, 0x4b, 0x0a, 0x2d, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x53, 0x4f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0xbe, 0xbe, 0xb0, 0xb2, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x69, 0x73,
	0x6f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x69, 0x6e, 0x67, 0x12,
	0x53, 0x0a, 0x31, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x41, 0x50, 0x57, 0x41, 0x50, 0x57, 0x54, 0x50, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x52,
	0x41, 0x44, 0x49, 0x4f, 0x10, 0xac, 0x8e, 0x98, 0xb4, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x63,
	0x61, 0x70, 0x77, 0x61, 0x70, 0x57, 0x74, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52,
	0x61, 0x64, 0x69, 0x6f, 0x12, 0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x45, 0x45, 0x45, 0x38, 0x30, 0x32, 0x31, 0x31, 0x10, 0x91, 0xc8,
	0x91, 0xb5, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31,
	0x31, 0x12, 0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x45, 0x45, 0x45, 0x38, 0x30, 0x32, 0x31, 0x32, 0x10, 0x92, 0xc8, 0x91, 0xb5, 0x01,
	0x1a, 0x0c, 0x82, 0x41, 0x09, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x32, 0x12, 0x37,
	0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x50, 0x41, 0x44, 0x10, 0xf4, 0xc6, 0xc6, 0xb6, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x44, 0x53, 0x49, 0x43, 0x49, 0x50, 0x10,
	0xff, 0x88, 0x88, 0xb7, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x73, 0x6d, 0x64, 0x73, 0x49, 0x63,
	0x69, 0x70, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x54, 0x4d, 0x10, 0xf8, 0x98, 0x9c, 0xb7, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03,
	0x70, 0x74, 0x6d, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x52, 0x50, 0x10, 0xdc, 0x95, 0xa5, 0xb7, 0x01, 0x1a, 0x06, 0x82, 0x41,
	0x03, 0x73, 0x72, 0x70, 0x12, 0x47, 0x0a, 0x2b, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x47, 0x41, 0x42, 0x49, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x10, 0xbd, 0xae, 0xad, 0xb7, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x67, 0x69,
	0x67, 0x61, 0x62, 0x69, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x3b, 0x0a,
	0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x56, 0x42,
	0x41, 0x53, 0x49, 0x4f, 0x55, 0x54, 0x10, 0x9a, 0xbf, 0xce, 0xb7, 0x01, 0x1a, 0x0c, 0x82, 0x41,
	0x09, 0x64, 0x76, 0x62, 0x41, 0x73, 0x69, 0x4f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x2e, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x49, 0x46, 0x10, 0xc0, 0xba, 0xe3,
	0xb7, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x6d, 0x61, 0x63, 0x53, 0x65, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x46, 0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x33, 0x30, 0x33, 0x52, 0x44,
	0x54, 0x10, 0xda, 0xe9, 0x9e, 0xb8, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x67, 0x72, 0x33, 0x30,
	0x33, 0x52, 0x44, 0x54, 0x12, 0x4d, 0x0a, 0x2e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x50, 0x50, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4c, 0x49, 0x4e, 0x4b,
	0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x94, 0x85, 0xf0, 0xb9, 0x01, 0x1a, 0x15, 0x82, 0x41,
	0x12, 0x70, 0x70, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x4c, 0x41, 0x4e, 0x10, 0xc0, 0xc8, 0xf8, 0xba, 0x01,
	0x1a, 0x0a, 0x82, 0x41, 0x07, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x61, 0x6e, 0x12, 0x39, 0x0a, 0x24,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x46, 0x58, 0x4f, 0x10, 0xac, 0xf0, 0xfc, 0xbd, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x46, 0x58, 0x4f, 0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x46, 0x58, 0x53, 0x10,
	0xb0, 0xf0, 0xfc, 0xbd, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46,
	0x58, 0x53, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x43, 0x4e, 0x10, 0x9a, 0xd5, 0xa4, 0xbe, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03,
	0x64, 0x63, 0x6e, 0x12, 0x55, 0x0a, 0x32, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x43, 0x54, 0x45,
	0x35, 0x35, 0x44, 0x32, 0x44, 0x53, 0x4f, 0x4f, 0x42, 0x10, 0xcf, 0xe4, 0x9e, 0xbf, 0x01, 0x1a,
	0x19, 0x82, 0x41, 0x16, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x74,
	0x65, 0x35, 0x35, 0x64, 0x32, 0x44, 0x73, 0x4f, 0x6f, 0x62, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x33, 0x36, 0x10, 0xc4, 0xe6,
	0xd6, 0xbf, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x76, 0x33, 0x36, 0x12, 0x2f, 0x0a, 0x1f, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x33, 0x37, 0x10, 0xc5,
	0xe6, 0xd6, 0xbf, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x76, 0x33, 0x37, 0x12, 0x2f, 0x0a, 0x1f,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x33, 0x35, 0x10,
	0xc7, 0xe6, 0xd6, 0xbf, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x76, 0x33, 0x35, 0x12, 0x3d, 0x0a,
	0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x46, 0x47, 0x44, 0x4f, 0x53, 0x10, 0xac, 0xaa, 0xa0, 0xc0, 0x01, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x47, 0x44, 0x4f, 0x53, 0x12, 0x35, 0x0a, 0x22,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x53, 0x31, 0x46,
	0x44, 0x4c, 0x10, 0xd1, 0xde, 0x8f, 0xc1, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x64, 0x73, 0x31,
	0x46, 0x44, 0x4c, 0x12, 0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x33, 0x32, 0x33, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0xab, 0xf2, 0xa2,
	0xc1, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x68, 0x33, 0x32, 0x33, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x49, 0x0a, 0x2c, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b,
	0x10, 0xb3, 0xe9, 0xb4, 0xc1, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x20, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x50, 0x46, 0x10,
	0xf0, 0xbd, 0xab, 0xc2, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x6c, 0x61, 0x70, 0x66, 0x12, 0x31,
	0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41,
	0x50, 0x44, 0x10, 0xf2, 0xbd, 0xab, 0xc2, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x6c, 0x61, 0x70,
	0x64, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x41, 0x50, 0x42, 0x10, 0xf4, 0xbd, 0xab, 0xc2, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x6c, 0x61, 0x70, 0x62, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x51, 0x4c, 0x4c, 0x43, 0x10, 0xcb, 0xd9, 0xef, 0xc2, 0x01, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x71, 0x6c, 0x6c, 0x63, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x50, 0x41, 0x44, 0x10, 0x84,
	0x94, 0xfe, 0xc2, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x50, 0x61, 0x64,
	0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x49, 0x54, 0x53, 0x10, 0xbf, 0x92, 0xc1, 0xc3, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x62,
	0x69, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x44, 0x4e, 0x58, 0x32, 0x35, 0x10, 0xe2, 0xf5, 0x86, 0xc4, 0x01, 0x1a,
	0x09, 0x82, 0x41, 0x06, 0x64, 0x64, 0x6e, 0x58, 0x32, 0x35, 0x12, 0x43, 0x0a, 0x29, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x45, 0x45, 0x45, 0x38, 0x30,
	0x32, 0x33, 0x41, 0x44, 0x4c, 0x41, 0x47, 0x10, 0xe3, 0xac, 0x81, 0xc5, 0x01, 0x1a, 0x10, 0x82,
	0x41, 0x0d, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x33, 0x61, 0x64, 0x4c, 0x61, 0x67, 0x12,
	0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x37, 0x30, 0x33, 0x41, 0x54, 0x32, 0x4d, 0x42, 0x10, 0xac, 0xcc, 0x88, 0xc5, 0x01, 0x1a, 0x0c,
	0x82, 0x41, 0x09, 0x67, 0x37, 0x30, 0x33, 0x61, 0x74, 0x32, 0x6d, 0x62, 0x12, 0x31, 0x0a, 0x20,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x50, 0x4f, 0x4e,
	0x10, 0x85, 0xed, 0xda, 0xc6, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x67, 0x70, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x27, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x53, 0x4f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x44, 0x54, 0x52, 0x10, 0xd1, 0xc5, 0xb2, 0xc8, 0x01,
	0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x44, 0x74, 0x72,
	0x12, 0x47, 0x0a, 0x2b, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x54, 0x4d, 0x53, 0x55, 0x42, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10,
	0xd2, 0xa5, 0xca, 0xc8, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x61, 0x74, 0x6d, 0x53, 0x75, 0x62,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x44, 0x53, 0x4c, 0x10, 0xbc, 0x89,
	0x90, 0xcc, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x76, 0x64, 0x73, 0x6c, 0x12, 0x4b, 0x0a, 0x2d,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53,
	0x4f, 0x46, 0x44, 0x4d, 0x41, 0x55, 0x50, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x96, 0xeb,
	0x99, 0xcc, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x64, 0x6f, 0x63, 0x73, 0x4f, 0x66, 0x64, 0x6d,
	0x61, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x43, 0x0a, 0x29, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x4e,
	0x49, 0x43, 0x54, 0x45, 0x41, 0x4d, 0x10, 0xd0, 0xd9, 0x97, 0xcd, 0x01, 0x1a, 0x10, 0x82, 0x41,
	0x0d, 0x76, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x69, 0x63, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x3d,
	0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x45,
	0x45, 0x45, 0x38, 0x30, 0x32, 0x31, 0x35, 0x34, 0x10, 0xbb, 0x9a, 0xa6, 0xce, 0x01, 0x1a, 0x0d,
	0x82, 0x41, 0x0a, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x35, 0x34, 0x12, 0x3b, 0x0a,
	0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x49,
	0x50, 0x58, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0xc2, 0xe9, 0xa5, 0xcf, 0x01, 0x1a, 0x0c, 0x82, 0x41,
	0x09, 0x6c, 0x33, 0x69, 0x70, 0x78, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x4d, 0x49, 0x4d, 0x41,
	0x10, 0xe8, 0x94, 0xc7, 0xd0, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x61, 0x74, 0x6d, 0x49, 0x6d,
	0x61, 0x12, 0x51, 0x0a, 0x30, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x4c, 0x45, 0x44, 0x49, 0x46, 0x10, 0xc1, 0x8d, 0xfe, 0xd0, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14,
	0x6d, 0x61, 0x63, 0x53, 0x65, 0x63, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x64, 0x49, 0x46, 0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x43, 0x49, 0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xdd, 0xb3, 0xbe,
	0xd2, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x66, 0x63, 0x69, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x4c, 0x49, 0x50, 0x10, 0x95, 0xa8, 0xdb, 0xd3, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x73, 0x6c,
	0x69, 0x70, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x49, 0x50, 0x53, 0x49, 0x47, 0x10, 0x88, 0x91, 0x93, 0xd4, 0x01, 0x1a, 0x09,
	0x82, 0x41, 0x06, 0x73, 0x69, 0x70, 0x53, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x29, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x45, 0x47, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x9b, 0x95, 0x93, 0xd4, 0x01, 0x1a, 0x10, 0x82, 0x41,
	0x0d, 0x6d, 0x70, 0x65, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31,
	0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53,
	0x55, 0x50, 0x10, 0xbc, 0xf1, 0x99, 0xd4, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x69, 0x73, 0x75,
	0x70, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x43, 0x54, 0x45, 0x4d, 0x55, 0x4c, 0x10, 0x8e, 0xfe, 0xf0, 0xd5, 0x01, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x63, 0x63, 0x74, 0x45, 0x6d, 0x75, 0x6c, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x10,
	0xbb, 0xf6, 0x8e, 0xd7, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x12,
	0x4f, 0x0a, 0x2f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x41, 0x4e, 0x41, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0xa5, 0xbf, 0x8d, 0xd9, 0x01, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x69, 0x61, 0x6e,
	0x61, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x44, 0x4c, 0x43, 0x10, 0xc4, 0x91, 0xd0, 0xda, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x74,
	0x64, 0x6c, 0x63, 0x12, 0x41, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x54, 0x4d, 0x10,
	0xc7, 0xd9, 0xd5, 0xdb, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x41, 0x74, 0x6d, 0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x55, 0x45, 0x50, 0x4f, 0x4e, 0x4f, 0x4e, 0x55,
	0x10, 0xef, 0xa0, 0xfd, 0xdb, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x61, 0x6c, 0x75, 0x45, 0x70,
	0x6f, 0x6e, 0x4f, 0x6e, 0x75, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x53, 0x52, 0x42, 0x10, 0xf6, 0xc2, 0xfb, 0xde, 0x01, 0x1a,
	0x07, 0x82, 0x41, 0x04, 0x72, 0x73, 0x72, 0x62, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x44, 0x53, 0x4c, 0x10, 0xe7, 0xa4,
	0x8d, 0xe0, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x73, 0x68, 0x64, 0x73, 0x6c, 0x12, 0x55, 0x0a,
	0x32, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x54, 0x4f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x45, 0x52,
	0x49, 0x41, 0x4c, 0x10, 0x91, 0xa6, 0x8d, 0xe0, 0x01, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x70, 0x72,
	0x6f, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x57, 0x0a, 0x33, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x43, 0x54,
	0x45, 0x35, 0x35, 0x44, 0x31, 0x52, 0x45, 0x54, 0x4f, 0x4f, 0x42, 0x10, 0xba, 0xb1, 0xdd, 0xe3,
	0x01, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x63, 0x74, 0x65, 0x35, 0x35, 0x64, 0x31, 0x52, 0x65, 0x74, 0x4f, 0x6f, 0x62, 0x12, 0x37, 0x0a,
	0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x59, 0x52,
	0x49, 0x4e, 0x45, 0x54, 0x10, 0xb7, 0xa7, 0xec, 0xe3, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x6d,
	0x79, 0x72, 0x69, 0x6e, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x33, 0x32, 0x33, 0x47, 0x41, 0x54, 0x45, 0x4b, 0x45,
	0x45, 0x50, 0x45, 0x52, 0x10, 0xae, 0xff, 0x9c, 0xe8, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x68,
	0x33, 0x32, 0x33, 0x47, 0x61, 0x74, 0x65, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x12, 0x3b, 0x0a,
	0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x4f,
	0x56, 0x45, 0x52, 0x41, 0x54, 0x4d, 0x10, 0xaa, 0xc3, 0xbf, 0xe8, 0x01, 0x1a, 0x0c, 0x82, 0x41,
	0x09, 0x69, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x41, 0x74, 0x6d, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x4e, 0x4f, 0x54, 0x55,
	0x10, 0xd2, 0xdb, 0xdb, 0xe9, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x6f, 0x74, 0x6e, 0x4f, 0x74,
	0x75, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x4c, 0x55, 0x45, 0x4c, 0x50, 0x10, 0xea, 0xbe, 0x97, 0xea, 0x01, 0x1a, 0x09, 0x82,
	0x41, 0x06, 0x61, 0x6c, 0x75, 0x45, 0x4c, 0x50, 0x12, 0x43, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x90, 0x8b, 0x8e, 0xee, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2f, 0x0a,
	0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x41, 0x4d,
	0x10, 0xee, 0xb1, 0x93, 0xef, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x71, 0x61, 0x6d, 0x12, 0x3d,
	0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x49, 0x4e, 0x49, 0x42, 0x41, 0x4e, 0x44, 0x10, 0xf7, 0xc8, 0xbb, 0xef, 0x01, 0x1a, 0x0d,
	0x82, 0x41, 0x0a, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a,
	0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x50,
	0x50, 0x49, 0x10, 0xff, 0x98, 0xca, 0xf0, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x12, 0x45, 0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x56, 0x42, 0x52, 0x43, 0x53, 0x4d, 0x41, 0x43, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x10, 0xbb, 0xc7, 0xee, 0xf0, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x64, 0x76, 0x62, 0x52, 0x63,
	0x73, 0x4d, 0x61, 0x63, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x4d, 0x42, 0x4f, 0x4e, 0x44,
	0x10, 0xca, 0xc2, 0x80, 0xf2, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x61, 0x74, 0x6d, 0x62, 0x6f,
	0x6e, 0x64, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4c, 0x41, 0x4e, 0x10, 0xa9, 0x95, 0xf8, 0xf4, 0x01, 0x1a, 0x07, 0x82, 0x41,
	0x04, 0x69, 0x6c, 0x61, 0x6e, 0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x53, 0x37, 0x53, 0x49, 0x47, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0xfb, 0xd0, 0x80, 0xf5, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x73, 0x73, 0x37, 0x53, 0x69, 0x67,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x4d, 0x0a, 0x2e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53, 0x4f, 0x46, 0x44, 0x4d, 0x44, 0x4f, 0x57, 0x4e,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0xe0, 0xae, 0x86, 0xf6, 0x01, 0x1a, 0x15, 0x82, 0x41,
	0x12, 0x64, 0x6f, 0x63, 0x73, 0x4f, 0x66, 0x64, 0x6d, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x4b, 0x0a, 0x2d, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x56, 0x49, 0x43, 0x49, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x10, 0xcb, 0xe5, 0x8a, 0xf6, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x61,
	0x76, 0x69, 0x63, 0x69, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x50, 0x52, 0x10, 0xa9, 0xab, 0xae, 0xf7, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x72, 0x70,
	0x72, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x49, 0x50, 0x54, 0x47, 0x10, 0xae, 0xc6, 0xa4, 0xfb, 0x01, 0x1a, 0x08, 0x82, 0x41,
	0x05, 0x73, 0x69, 0x70, 0x54, 0x67, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x57, 0x41, 0x4e, 0x50, 0x50, 0x10, 0xc4, 0xee, 0xbb,
	0xfb, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x77, 0x77, 0x61, 0x6e, 0x50, 0x50, 0x12, 0x45, 0x0a,
	0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x50,
	0x50, 0x49, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0xf8, 0xd7, 0xd2, 0xfc,
	0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x68, 0x69, 0x70, 0x70, 0x69, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x57, 0x41, 0x4e, 0x50, 0x50, 0x32, 0x10, 0xbe, 0x80, 0xbd, 0xfd,
	0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x77, 0x77, 0x61, 0x6e, 0x50, 0x50, 0x32, 0x12, 0x39, 0x0a,
	0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x45, 0x42, 0x53, 0x10, 0xe5, 0xec, 0xdb, 0xfd, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x42, 0x53, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x53, 0x43, 0x10, 0x9d, 0x8f, 0x92, 0xfe,
	0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x62, 0x73, 0x63, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4f, 0x58, 0x32, 0x35, 0x10,
	0xb3, 0xe4, 0xb9, 0xff, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x6d, 0x69, 0x6f, 0x78, 0x32, 0x35,
	0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x44, 0x4c, 0x43, 0x10, 0xc0, 0xb2, 0xe4, 0xff, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x68,
	0x64, 0x6c, 0x63, 0x2a, 0xb8, 0x02, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x49, 0x4e, 0x47, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x69, 0x0a, 0x43, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x41, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x82, 0x88, 0xb0, 0x0f,
	0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x41, 0x41, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x12,
	0x6d, 0x0a, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49,
	0x4e, 0x47, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x41, 0x41, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0xea, 0xab, 0xa1, 0x14, 0x1a, 0x1f, 0x82,
	0x41, 0x1c, 0x41, 0x41, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x2a, 0xd4,
	0x02, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x12, 0x35,
	0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x77, 0x0a, 0x4b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x41, 0x41, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x10, 0xec, 0xda, 0xf2, 0x82, 0x01, 0x1a, 0x22, 0x82, 0x41, 0x1f, 0x41,
	0x41, 0x41, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x12, 0x75,
	0x0a, 0x4a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x41,
	0x41, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0xb7, 0xbb, 0xa2,
	0xe0, 0x01, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x41, 0x41, 0x41, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x2a, 0x8b, 0x02, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41,
	0x41, 0x41, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x43, 0x41, 0x43, 0x53, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0xe4, 0xe2, 0xef, 0xc7, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x54, 0x41, 0x43,
	0x41, 0x43, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x12, 0x41, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x55,
	0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0xcd, 0xf1, 0xd3, 0xea, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a,
	0x52, 0x41, 0x44, 0x49, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x12, 0x37, 0x0a, 0x25, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x41, 0x41, 0x41, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x10, 0xe0, 0xd1, 0xe3, 0xfa, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x2a, 0xc0, 0x01, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x38, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x43, 0x41, 0x43, 0x53, 0x10, 0x8a, 0xbe, 0xea,
	0x02, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x54, 0x41, 0x43, 0x41, 0x43, 0x53, 0x12, 0x38, 0x0a, 0x26,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x41, 0x41, 0x41, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x41, 0x44, 0x49, 0x55, 0x53, 0x10, 0xd7, 0xdb, 0x90, 0x09, 0x1a, 0x09, 0x82, 0x41, 0x06,
	0x52, 0x41, 0x44, 0x49, 0x55, 0x53, 0x2a, 0xac, 0x01, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x12,
	0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x54, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xb8, 0xbb, 0xad, 0xba, 0x01, 0x1a,
	0x14, 0x82, 0x41, 0x11, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x2a, 0xfa, 0x01, 0x0a, 0x44, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x70, 0x75,
	0x73, 0x43, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x55,
	0x0a, 0x51, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x50, 0x55, 0x53, 0x5f, 0x43, 0x50,
	0x55, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5b, 0x0a, 0x4f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x43, 0x50, 0x55, 0x53, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41,
	0x4c, 0x4c, 0x2a, 0xa2, 0x02, 0x0a, 0x52, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x5e, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x68, 0x0a,
	0x5c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x1a,
	0x06, 0x82, 0x41, 0x03, 0x41, 0x4e, 0x59, 0x2a, 0xbe, 0x02, 0x0a, 0x21, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c, 0x41, 0x43, 0x4c, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x2b, 0x0a,
	0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x41, 0x43,
	0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x4a, 0x0a, 0x30, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0xfd,
	0x9a, 0xa5, 0x2f, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x12, 0x54, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10,
	0x88, 0xdd, 0xad, 0x3f, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x12, 0x4a, 0x0a, 0x30,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x85, 0xe8, 0x88, 0x7f, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47,
	0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x2a, 0x83, 0x02, 0x0a, 0x14, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41,
	0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x2d, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41,
	0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4c, 0x32,
	0x10, 0xd3, 0x87, 0x92, 0x3f, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x41, 0x43, 0x4c, 0x5f, 0x4c, 0x32,
	0x12, 0x32, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43,
	0x4c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x56,
	0x34, 0x10, 0xcc, 0xae, 0xff, 0xc3, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x41, 0x43, 0x4c, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x12, 0x32, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x4c,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0xce, 0xae, 0xff, 0xc3, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x12, 0x34, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0xc2, 0xc9, 0x82, 0xe0, 0x01,
	0x1a, 0x0c, 0x82, 0x41, 0x09, 0x41, 0x43, 0x4c, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x2a, 0x97,
	0x02, 0x0a, 0x4d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c,
	0x41, 0x63, 0x6c, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74,
	0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x5f, 0x0a, 0x5b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43,
	0x4c, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x4c, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x41, 0x43,
	0x4c, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x45, 0x53, 0x5f,
	0x41, 0x43, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x65, 0x0a, 0x59, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41,
	0x43, 0x4c, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x4c, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x41,
	0x43, 0x4c, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x45, 0x53,
	0x5f, 0x41, 0x43, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01,
	0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4e, 0x59, 0x2a, 0x88, 0x02, 0x0a, 0x48, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x6c,
	0x53, 0x65, 0x74, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x5a, 0x0a, 0x56, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x4c, 0x53, 0x45,
	0x54, 0x53, 0x5f, 0x41, 0x43, 0x4c, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x4c, 0x45, 0x4e, 0x54,
	0x52, 0x49, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x60, 0x0a, 0x54, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41,
	0x43, 0x4c, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x4c, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x41,
	0x43, 0x4c, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x45, 0x53,
	0x5f, 0x41, 0x43, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03,
	0x41, 0x4e, 0x59, 0x2a, 0xee, 0x01, 0x0a, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x41, 0x63, 0x6c, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x36,
	0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x46,
	0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x90, 0xbd, 0xe3, 0x27, 0x1a, 0x09, 0x82, 0x41, 0x06,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x12, 0x33, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e,
	0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0xa6, 0xdb, 0xcd,
	0x90, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x52, 0x4f, 0x50, 0x12, 0x37, 0x0a, 0x24, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x46, 0x4f, 0x52, 0x57,
	0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x50, 0x54, 0x10, 0x95, 0xd2, 0xda, 0xdd, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x41, 0x43,
	0x43, 0x45, 0x50, 0x54, 0x2a, 0xa9, 0x01, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x41, 0x63, 0x6c, 0x4c, 0x4f, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12,
	0x20, 0x0a, 0x1c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c,
	0x4c, 0x4f, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x33, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41,
	0x43, 0x4c, 0x4c, 0x4f, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0xe1, 0xe3, 0x95, 0x58, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4c, 0x4f,
	0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x12, 0x38, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x4c, 0x4f, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x10, 0xbc, 0xf0, 0xdf, 0xf4,
	0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47,
	0x2a, 0xb4, 0x02, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41,
	0x66, 0x74, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x46, 0x54, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53,
	0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x28, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x46, 0x54, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53,
	0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x52, 0x45, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x47, 0x52, 0x45, 0x12,
	0x36, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x46, 0x54,
	0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x02, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12, 0x36, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x46, 0x54, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x12,
	0x36, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x46, 0x54,
	0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x04, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x2a, 0xc8, 0x03, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x12, 0x35, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x46,
	0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x41, 0x4c, 0x41, 0x52, 0x4d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xad, 0xc6, 0xce, 0x21, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x12, 0x48, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x9a,
	0xe5, 0xff, 0x3a, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x12, 0x42, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c,
	0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x84, 0xd3, 0xff, 0x4a, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4d,
	0x41, 0x4a, 0x4f, 0x52, 0x12, 0x43, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0xc0, 0x94, 0x93, 0x83, 0x01, 0x1a,
	0x08, 0x82, 0x41, 0x05, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x12, 0x47, 0x0a, 0x33, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0xb3, 0xb2, 0xb4, 0xb5, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x2a, 0xdd, 0x02, 0x0a, 0x29, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x49, 0x44,
	0x12, 0x33, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c,
	0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3e, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x49, 0x44, 0x5f, 0x45, 0x51, 0x50, 0x54, 0x10, 0xa2, 0xd0, 0x99, 0x1a, 0x1a, 0x07, 0x82, 0x41,
	0x04, 0x45, 0x51, 0x50, 0x54, 0x12, 0x3d, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x49, 0x44, 0x5f, 0x41, 0x49, 0x53, 0x10, 0xe5, 0x8f, 0xfa, 0xa9, 0x01, 0x1a, 0x06, 0x82, 0x41,
	0x03, 0x41, 0x49, 0x53, 0x12, 0x3d, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x53, 0x10, 0xfa, 0xda, 0xcb, 0xb9, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03,
	0x4c, 0x4f, 0x53, 0x12, 0x3d, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x53, 0x10, 0xc0, 0x83, 0xe6, 0xf1, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x4f,
	0x54, 0x53, 0x2a, 0x9a, 0x05, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x66, 0x64, 0x42, 0x66, 0x64, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53,
	0x54, 0x49, 0x43, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x42, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44,
	0x42, 0x46, 0x44, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x10,
	0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53,
	0x54, 0x49, 0x43, 0x12, 0x4a, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49,
	0x43, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x12,
	0x3e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44,
	0x42, 0x46, 0x44, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x1a,
	0x0e, 0x82, 0x41, 0x0b, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x12,
	0x48, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44,
	0x42, 0x46, 0x44, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x10, 0x04, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x12, 0x3a, 0x0a, 0x28, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x44, 0x49, 0x41,
	0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x50, 0x41, 0x54, 0x48,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x54, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53,
	0x54, 0x49, 0x43, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x4e,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x06,
	0x1a, 0x19, 0x82, 0x41, 0x16, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x4e, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x3c, 0x0a, 0x29, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x44,
	0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x64, 0x0a, 0x3d, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x44, 0x49, 0x41,
	0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x45,
	0x52, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x4e, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x1a, 0x21, 0x82, 0x41,
	0x1e, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x45,
	0x4e, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x2a,
	0x8e, 0x02, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x66,
	0x64, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46,
	0x44, 0x42, 0x46, 0x44, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x1a, 0x05, 0x82,
	0x41, 0x02, 0x55, 0x50, 0x12, 0x2e, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x44, 0x4f, 0x57, 0x4e, 0x12, 0x3a, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x03, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x12, 0x2e, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46,
	0x44, 0x42, 0x46, 0x44, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x04, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x4e, 0x49, 0x54,
	0x2a, 0xed, 0x0a, 0x0a, 0x7d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x67, 0x70, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x53, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x64, 0x12, 0x97, 0x01, 0x0a, 0x92, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x47, 0x50, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x5f, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0xbb, 0x01, 0x0a,
	0x9f, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x5f,
	0x42, 0x47, 0x50, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x53,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45,
	0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x54,
	0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xaf, 0x01, 0x0a, 0x99, 0x01,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x5f, 0x42, 0x47,
	0x50, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43,
	0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x53, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0xbb, 0x01, 0x0a,
	0x9f, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x5f,
	0x42, 0x47, 0x50, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x53,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45,
	0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x54,
	0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xb1, 0x01, 0x0a, 0x9a, 0x01,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x5f, 0x42, 0x47,
	0x50, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43,
	0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x53, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41,
	0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xc5,
	0x01, 0x0a, 0xa4, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47,
	0x50, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45,
	0x54, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x55,
	0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53,
	0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49,
	0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45,
	0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0xa7, 0x01, 0x0a, 0x95, 0x01, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x49,
	0x42, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55,
	0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54,
	0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x2a, 0xd2, 0x08, 0x0a, 0x5e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x67, 0x70, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x53, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x69, 0x64, 0x12, 0x73, 0x0a, 0x6f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x7c, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x52,
	0x49, 0x42, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53,
	0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x5f,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53,
	0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x53, 0x49, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c,
	0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12,
	0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x12, 0x8b, 0x01, 0x0a, 0x76, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x44,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a,
	0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x12, 0x97, 0x01, 0x0a, 0x7c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53,
	0x45, 0x54, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53,
	0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x44, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x8d, 0x01, 0x0a, 0x77, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x5f, 0x42, 0x47, 0x50,
	0x5f, 0x52, 0x49, 0x42, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41,
	0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x53, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53,
	0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xa2, 0x01, 0x0a, 0x81, 0x01,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x5f, 0x42, 0x47,
	0x50, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43,
	0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x53, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50,
	0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f,
	0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12,
	0x83, 0x01, 0x0a, 0x72, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47,
	0x50, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45,
	0x54, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x55,
	0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x44, 0x5f, 0x4e, 0x4f,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0xe4, 0x01, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x47, 0x50, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x12, 0x34, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x12, 0x34, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49,
	0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x02, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x12, 0x2c,
	0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x43,
	0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x54,
	0x48, 0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x2a, 0x9a, 0x01, 0x0a,
	0x15, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x50, 0x65,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x50, 0x45, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x50, 0x45, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12, 0x2f, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x50, 0x45, 0x45, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x0b, 0x82, 0x41,
	0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x2a, 0x86, 0x02, 0x0a, 0x24, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x42, 0x67, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x42, 0x47, 0x50, 0x4f, 0x52, 0x49, 0x47,
	0x49, 0x4e, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x34, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x42, 0x47, 0x50, 0x4f, 0x52, 0x49, 0x47,
	0x49, 0x4e, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x47, 0x50, 0x10, 0x01,
	0x1a, 0x06, 0x82, 0x41, 0x03, 0x49, 0x47, 0x50, 0x12, 0x34, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x42,
	0x47, 0x50, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x47, 0x50, 0x10, 0x02, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x45, 0x47, 0x50, 0x12, 0x42,
	0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x42, 0x47, 0x50, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x03, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x2a, 0xae, 0x02, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x67, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x67, 0x70, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x42, 0x47, 0x50, 0x53, 0x45, 0x54,
	0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3c, 0x0a, 0x30, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x42, 0x47, 0x50, 0x53, 0x45, 0x54, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54,
	0x59, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10,
	0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x44, 0x44, 0x12, 0x42, 0x0a, 0x33, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x42, 0x47, 0x50, 0x53, 0x45, 0x54, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x10, 0x02, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x12, 0x44, 0x0a,
	0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x42, 0x47, 0x50, 0x53, 0x45, 0x54, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e,
	0x49, 0x54, 0x59, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x03, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x2a, 0x8c, 0x02, 0x0a, 0x22, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x67, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x41, 0x53, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5c, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x41, 0x53, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0xe5, 0x9a, 0xac, 0xe9, 0x01, 0x1a, 0x19, 0x82, 0x41, 0x16,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41,
	0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x12, 0x5a, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x41, 0x53, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x97, 0xfe, 0x9f, 0xf7, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x2a, 0xba, 0x0a, 0x0a, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46,
	0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x52, 0x0a,
	0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x10, 0x9c, 0xcb, 0xc7, 0x19, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4c, 0x33, 0x56,
	0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x12, 0x4a, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x52, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x10, 0x91, 0xa2, 0xfc, 0x1a, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x53, 0x52, 0x54,
	0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x12, 0x4a, 0x0a,
	0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x52, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10,
	0x93, 0xa2, 0xfc, 0x1a, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x53, 0x52, 0x54, 0x45, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x12, 0x44, 0x0a, 0x2b, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41,
	0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x50, 0x4e, 0x10, 0x80, 0xd6, 0x9d, 0x29, 0x1a, 0x10, 0x82,
	0x41, 0x0d, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x50, 0x4e, 0x12,
	0x52, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xbe, 0xe3, 0xea, 0x51, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4c,
	0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x12, 0x42, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x10, 0xed, 0xb2, 0xf2, 0x5d, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x49, 0x50, 0x56, 0x34, 0x5f,
	0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x3e, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49,
	0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x56, 0x50, 0x4e, 0x5f, 0x45,
	0x56, 0x50, 0x4e, 0x10, 0x98, 0x87, 0xe8, 0x65, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4c, 0x32, 0x56,
	0x50, 0x4e, 0x5f, 0x45, 0x56, 0x50, 0x4e, 0x12, 0x43, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49,
	0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x55, 0x4e,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xd3, 0xb6, 0xf4, 0x80, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c,
	0x49, 0x50, 0x56, 0x36, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x53, 0x0a, 0x32,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50,
	0x56, 0x34, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41,
	0x53, 0x54, 0x10, 0x9d, 0xb5, 0x8b, 0x85, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x49, 0x50, 0x56,
	0x34, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x12, 0x45, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x50, 0x46,
	0x10, 0xf5, 0xa6, 0x82, 0x99, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x4c, 0x49, 0x4e, 0x4b, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x50, 0x46, 0x12, 0x47, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46,
	0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x50, 0x4e, 0x56, 0x34, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x10, 0xfe, 0xe9, 0xd3, 0xa1, 0x01, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x56, 0x50, 0x4e, 0x56, 0x34, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45,
	0x43, 0x12, 0x4f, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x55, 0x4e,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x95, 0xb1, 0xfb, 0xaa, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12,
	0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41,
	0x53, 0x54, 0x12, 0x53, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xb3, 0xaf, 0xcd, 0xc8, 0x01, 0x1a, 0x17,
	0x82, 0x41, 0x14, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x4f, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49,
	0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xbb, 0x92, 0x96, 0xc9,
	0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x45, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46,
	0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x46,
	0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x10, 0xf3, 0xcf, 0xe9, 0xcd, 0x01, 0x1a, 0x10, 0x82,
	0x41, 0x0d, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x12,
	0x3d, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x8d, 0xc3, 0xa2, 0xf4, 0x01,
	0x1a, 0x0c, 0x82, 0x41, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x12, 0x3f,
	0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x32, 0x56, 0x50, 0x4e, 0x5f, 0x56, 0x50, 0x4c, 0x53, 0x10, 0xa6, 0xbb, 0xac, 0xfe, 0x01,
	0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4c, 0x32, 0x56, 0x50, 0x4e, 0x5f, 0x56, 0x50, 0x4c, 0x53, 0x2a,
	0xf5, 0x03, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x43, 0x41, 0x50, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x36,
	0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x53, 0x4e, 0x33, 0x32, 0x10, 0xf6, 0xbb, 0xd9, 0x0f, 0x1a, 0x08, 0x82, 0x41,
	0x05, 0x41, 0x53, 0x4e, 0x33, 0x32, 0x12, 0x36, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x50, 0x42, 0x47, 0x50, 0x10,
	0xe5, 0xfa, 0xb4, 0x21, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4d, 0x50, 0x42, 0x47, 0x50, 0x12, 0x3e,
	0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x10, 0xeb, 0xf7, 0xc6, 0x6f,
	0x1a, 0x0c, 0x82, 0x41, 0x09, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x12, 0x5f,
	0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48,
	0x4f, 0x50, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xb9, 0xca, 0xe4, 0x86,
	0x01, 0x1a, 0x1c, 0x82, 0x41, 0x19, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4e,
	0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x12,
	0x47, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48,
	0x10, 0x90, 0xd2, 0xac, 0xbb, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x12, 0x4d, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47,
	0x50, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x41, 0x43,
	0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0xec, 0xfe, 0xe6,
	0xe1, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x47, 0x52, 0x41, 0x43, 0x45, 0x46, 0x55, 0x4c, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x2a, 0x95, 0x05, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47,
	0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x45, 0x41, 0x53, 0x45, 0x10, 0xfa, 0xe2, 0x97,
	0x28, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x43, 0x45, 0x41, 0x53, 0x45, 0x12, 0x4f, 0x0a, 0x31, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4f,
	0x4c, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x10, 0xfe, 0xc7, 0xeb, 0x29, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x12, 0x53, 0x0a, 0x33,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x95, 0x88, 0xd8, 0x7b, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x12, 0x60, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x93,
	0xbf, 0x98, 0xb3, 0x01, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x12, 0x54, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x9d, 0xdb, 0x97, 0xc9, 0x01,
	0x1a, 0x17, 0x82, 0x41, 0x14, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x62, 0x0a, 0x3a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42,
	0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x9f, 0xc4, 0xb3, 0xdb, 0x01, 0x1a, 0x1e, 0x82,
	0x41, 0x1b, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x50, 0x0a,
	0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x96, 0xc9, 0xeb, 0xdb, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x4f, 0x50, 0x45,
	0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x2a,
	0xc0, 0x1c, 0x0a, 0x21, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55,
	0x42, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x5a, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa8,
	0x94, 0xc3, 0x03, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x5a,
	0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xcf, 0xab, 0x82, 0x0a, 0x1a,
	0x19, 0x82, 0x41, 0x16, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x5a, 0x0a, 0x38, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xd5, 0xb6, 0xee, 0x0c, 0x1a, 0x19, 0x82, 0x41, 0x16,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x58, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x10, 0xe6, 0xba, 0xf9, 0x2a, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x12, 0x52, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55,
	0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0xd3, 0x97, 0x9d, 0x2b, 0x1a, 0x15, 0x82,
	0x41, 0x12, 0x42, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x12, 0x56, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49,
	0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0xd5,
	0xa8, 0x91, 0x30, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x12, 0x5e, 0x0a, 0x3a,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa9, 0xbe, 0x8e, 0x3b, 0x1a,
	0x1b, 0x82, 0x41, 0x18, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x66, 0x0a, 0x3e,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0xd9,
	0xf1, 0xe9, 0x3c, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x45, 0x12, 0x66, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xc6, 0xf8, 0xd6, 0x44, 0x1a, 0x1f, 0x82, 0x41, 0x1c,
	0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x43,
	0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x5e, 0x0a, 0x3a,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58,
	0x45, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x9a, 0xa6, 0xfa, 0x45, 0x1a,
	0x1b, 0x82, 0x41, 0x18, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x49, 0x58, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x12, 0x52, 0x0a, 0x34,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x45, 0x44, 0x10, 0x8a, 0xa2, 0x80, 0x4a, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x50, 0x45,
	0x45, 0x52, 0x5f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44,
	0x12, 0x6a, 0x0a, 0x40, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55,
	0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x45, 0x54, 0x45, 0x52, 0x10, 0xaf, 0xd9, 0x9f, 0x4e, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x55, 0x4e,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x12, 0x74, 0x0a, 0x45,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0xdd, 0x88, 0xb5, 0x4e, 0x1a, 0x26, 0x82, 0x41, 0x23, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x45,
	0x4e, 0x54, 0x12, 0x5e, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45,
	0x10, 0xe8, 0xb0, 0xda, 0x51, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x45, 0x12, 0x4e, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xc3, 0xbe, 0xf6, 0x5a, 0x1a, 0x13, 0x82,
	0x41, 0x10, 0x42, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x5a, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xf2,
	0x8c, 0xba, 0x5d, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x55, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x12, 0x60,
	0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xe5, 0xde,
	0x8e, 0x5f, 0x1a, 0x1c, 0x82, 0x41, 0x19, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x12, 0x5c, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55,
	0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0xbe, 0x86,
	0x9b, 0x65, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x44,
	0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x10,
	0xfa, 0xaf, 0xee, 0x73, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x45, 0x45,
	0x52, 0x5f, 0x41, 0x53, 0x12, 0x58, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0xaa, 0xbf, 0xb2, 0x78, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x49,
	0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44,
	0x45, 0x10, 0xac, 0x99, 0xd3, 0x85, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x43, 0x45, 0x41, 0x53,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x7b, 0x0a, 0x48, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42,
	0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0xe3, 0xe0, 0xd8, 0x8d, 0x01, 0x1a, 0x29, 0x82, 0x41, 0x26,
	0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x12, 0x57, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0xa7, 0x84, 0xf0, 0x93, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4f, 0x50, 0x45, 0x4e, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x12,
	0x59, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x86, 0xd6, 0x89, 0x98, 0x01,
	0x1a, 0x18, 0x82, 0x41, 0x15, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x65, 0x0a, 0x3d, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x10, 0xaa, 0xa2, 0xd5, 0x98,
	0x01, 0x1a, 0x1e, 0x82, 0x41, 0x1b, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x49, 0x5a, 0x45,
	0x44, 0x12, 0x55, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53,
	0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xef, 0xca, 0xe3, 0x9e, 0x01,
	0x1a, 0x16, 0x82, 0x41, 0x13, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x12, 0x5f, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47,
	0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41,
	0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x92, 0xe7, 0xae, 0xad, 0x01, 0x1a, 0x1b, 0x82, 0x41,
	0x18, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x51, 0x0a, 0x33, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42,
	0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d,
	0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x50, 0x41, 0x54, 0x48,
	0x10, 0xc5, 0x9f, 0x9f, 0xae, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x4d, 0x41, 0x4c, 0x46, 0x4f,
	0x52, 0x4d, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x12, 0x71, 0x0a, 0x43,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x57,
	0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x45, 0x10, 0xf4, 0xd2, 0xf8, 0xb0, 0x01, 0x1a, 0x24, 0x82, 0x41, 0x21, 0x55, 0x4e,
	0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x5f,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x12,
	0x63, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0xeb, 0xfa, 0xa1, 0xb1, 0x01, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x12, 0x43, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x43, 0x10, 0xf6, 0xd2, 0xe8, 0xbd, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x12, 0x5b, 0x0a, 0x38, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42,
	0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xec, 0xcb, 0xba, 0xc3, 0x01, 0x1a, 0x19, 0x82, 0x41, 0x16,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x53, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f,
	0x42, 0x47, 0x50, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0xb4,
	0xbd, 0xea, 0xc4, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x42, 0x41, 0x44, 0x5f, 0x42, 0x47, 0x50,
	0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x12, 0x5b, 0x0a, 0x38, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x8b, 0xfb, 0x87, 0xeb, 0x01, 0x1a, 0x19, 0x82,
	0x41, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x12, 0x63, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47,
	0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x9d, 0xd4, 0xde, 0xed, 0x01, 0x1a, 0x1d,
	0x82, 0x41, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x48, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x12, 0x7b, 0x0a,
	0x48, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0xed, 0xed, 0xd8, 0xf7, 0x01, 0x1a,
	0x29, 0x82, 0x41, 0x26, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58,
	0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x12, 0x4f, 0x0a, 0x32, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53,
	0x10, 0xb1, 0xa7, 0xf4, 0xfc, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x4f, 0x55, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x12, 0x55, 0x0a, 0x35, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0xf0, 0x87, 0xe3, 0xfd, 0x01, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x2a, 0xa2, 0x03, 0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54,
	0x59, 0x12, 0x34, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x49, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50,
	0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d,
	0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0xcb, 0x9f, 0xc5, 0x03, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4f,
	0x52, 0x54, 0x12, 0x5d, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59,
	0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f,
	0x4e, 0x46, 0x45, 0x44, 0x10, 0xe5, 0xc4, 0xef, 0x23, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x4e, 0x4f,
	0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x4e, 0x46, 0x45,
	0x44, 0x12, 0x43, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f,
	0x4e, 0x4f, 0x50, 0x45, 0x45, 0x52, 0x10, 0xf2, 0xe7, 0xf8, 0x24, 0x1a, 0x09, 0x82, 0x41, 0x06,
	0x4e, 0x4f, 0x50, 0x45, 0x45, 0x52, 0x12, 0x4f, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x57,
	0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53,
	0x45, 0x10, 0xb4, 0x8e, 0xbb, 0x3c, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x4e, 0x4f, 0x5f, 0x41, 0x44,
	0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x2a, 0xc2, 0x02, 0x0a, 0x27, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x41, 0x54,
	0x41, 0x4c, 0x4f, 0x47, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x50, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45,
	0x10, 0xcf, 0x8e, 0xde, 0x44, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x12, 0x50, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x42, 0x55, 0x4e, 0x44,
	0x4c, 0x45, 0x10, 0xb0, 0x8e, 0xa4, 0x52, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x52, 0x45, 0x4c, 0x45,
	0x41, 0x53, 0x45, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x12, 0x40, 0x0a, 0x2e, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0xae, 0xd9, 0x83,
	0x67, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x2a, 0xa1, 0x03, 0x0a,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x38, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54,
	0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x49, 0x0a, 0x36, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e,
	0x4e, 0x45, 0x44, 0x10, 0xef, 0xa7, 0xdd, 0x17, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x50, 0x4c, 0x41,
	0x4e, 0x4e, 0x45, 0x44, 0x12, 0x49, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4d,
	0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0xb6,
	0xdf, 0xdf, 0x70, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x12,
	0x4b, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54,
	0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xae, 0x83, 0xb8, 0x7d, 0x1a,
	0x0b, 0x82, 0x41, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x52, 0x0a, 0x3a,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f,
	0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0xbc, 0xff, 0x96, 0xfa, 0x01,
	0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x2a, 0xf5, 0x02, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x42, 0x41, 0x53, 0x45, 0x12, 0x32, 0x0a,
	0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c,
	0x4f, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x55, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43,
	0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x45,
	0x54, 0x46, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0xa0,
	0xd0, 0xd2, 0x2d, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x49, 0x45, 0x54, 0x46, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x12, 0x5e, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x45, 0x54, 0x46, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x92, 0xa0, 0x87, 0xb5, 0x01, 0x1a,
	0x17, 0x82, 0x41, 0x14, 0x49, 0x45, 0x54, 0x46, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x12, 0x5e, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x45, 0x54, 0x46, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0xf7, 0xfc, 0xcb, 0xbf, 0x01, 0x1a,
	0x17, 0x82, 0x41, 0x14, 0x49, 0x45, 0x54, 0x46, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x2a, 0xf1, 0x01, 0x0a, 0x26, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x4b, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x9f, 0xb0, 0xae,
	0x2d, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54,
	0x41, 0x4c, 0x12, 0x48, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x9c, 0xb2, 0xed, 0xd5, 0x01, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x2a, 0xcd, 0x03, 0x0a,
	0x2b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x55, 0x42,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x42, 0x41, 0x53, 0x45, 0x12, 0x35, 0x0a, 0x31,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f,
	0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x55, 0x42, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x54, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x53, 0x55, 0x42, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x49, 0x45, 0x54, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0xfd, 0xe4, 0xe1, 0x40, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x49, 0x45, 0x54, 0x46, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x12, 0x5d, 0x0a, 0x3e, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x55, 0x42, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x45, 0x54, 0x46, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0xf3, 0xc3, 0xe9, 0x97,
	0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x45, 0x54, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x12, 0x57, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x55, 0x42, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x45, 0x54, 0x46, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xcf, 0x94, 0xe0, 0xcc, 0x01, 0x1a, 0x12, 0x82,
	0x41, 0x0f, 0x49, 0x45, 0x54, 0x46, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x59, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43,
	0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x53, 0x55, 0x42, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x49, 0x45, 0x54, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f,
	0x52, 0x10, 0xa6, 0xd5, 0x84, 0xfb, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x49, 0x45, 0x54, 0x46,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x2a, 0xf9, 0x02, 0x0a,
	0x26, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x47, 0x0a, 0x31, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x52, 0x43, 0x49, 0x41, 0x4c, 0x10, 0xd1,
	0xa0, 0xa5, 0x1a, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x52, 0x43, 0x49,
	0x41, 0x4c, 0x12, 0x45, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x52, 0x47, 0x41,
	0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x53, 0x10, 0xbb, 0x96, 0x84, 0x38, 0x1a, 0x0c, 0x82, 0x41, 0x09,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x53, 0x12, 0x43, 0x0a, 0x2f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x55, 0x53, 0x54, 0x52, 0x59, 0x10, 0x85, 0x8d, 0x97,
	0x45, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x49, 0x4e, 0x44, 0x55, 0x53, 0x54, 0x52, 0x59, 0x12, 0x48,
	0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x43, 0x41, 0x54, 0x41,
	0x4c, 0x4f, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x56, 0x49, 0x44,
	0x55, 0x41, 0x4c, 0x10, 0xc2, 0x98, 0xb6, 0xa4, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x49, 0x4e,
	0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x2a, 0xc6, 0x01, 0x0a, 0x1d, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x41,
	0x53, 0x45, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x42,
	0x41, 0x53, 0x45, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x3d, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x42, 0x41, 0x53, 0x45, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x42, 0x10, 0xbd,
	0xd9, 0xb4, 0x8b, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44,
	0x5f, 0x42, 0x12, 0x3d, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x42, 0x41, 0x53, 0x45, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x41, 0x10, 0xbe, 0xd9,
	0xb4, 0x8b, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f,
	0x41, 0x2a, 0xca, 0x01, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x66, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47,
	0x41, 0x54, 0x45, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x29, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47,
	0x41, 0x54, 0x45, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x41, 0x43, 0x50, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4c, 0x41,
	0x43, 0x50, 0x12, 0x3a, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x46, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x43, 0x10, 0x02, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x2a, 0xe4,
	0x08, 0x0a, 0x21, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x44, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x36, 0x30, 0x30,
	0x47, 0x42, 0x10, 0xc9, 0x80, 0xe4, 0x0f, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x53, 0x50, 0x45, 0x45,
	0x44, 0x5f, 0x36, 0x30, 0x30, 0x47, 0x42, 0x12, 0x48, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xaa, 0xc4, 0xbd, 0x1e, 0x1a,
	0x10, 0x82, 0x41, 0x0d, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x12, 0x46, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x35, 0x30,
	0x30, 0x4d, 0x42, 0x10, 0x8a, 0xdc, 0xef, 0x3d, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x5f, 0x32, 0x35, 0x30, 0x30, 0x4d, 0x42, 0x12, 0x44, 0x0a, 0x2d, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x38, 0x30, 0x30, 0x47, 0x42, 0x10, 0xf3, 0xdf, 0xa1, 0x43, 0x1a,
	0x0e, 0x82, 0x41, 0x0b, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x38, 0x30, 0x30, 0x47, 0x42, 0x12,
	0x40, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x47, 0x42, 0x10, 0xb2,
	0xfb, 0xb3, 0x4b, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x47,
	0x42, 0x12, 0x42, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x35, 0x47,
	0x42, 0x10, 0xfc, 0x8d, 0xc6, 0x4e, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x32, 0x35, 0x47, 0x42, 0x12, 0x44, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x31, 0x30, 0x30, 0x4d, 0x42, 0x10, 0xe4, 0xe1, 0xf6, 0x53, 0x1a, 0x0e, 0x82, 0x41, 0x0b,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x4d, 0x42, 0x12, 0x42, 0x0a, 0x2c, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x10, 0xc4, 0xf9, 0xb6, 0x69,
	0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x12,
	0x44, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x42,
	0x10, 0xc5, 0xbf, 0xce, 0x6e, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f,
	0x32, 0x30, 0x30, 0x47, 0x42, 0x12, 0x45, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x10, 0xda, 0xf4, 0xf6, 0x83, 0x01, 0x1a, 0x0e, 0x82, 0x41,
	0x0b, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x12, 0x43, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45,
	0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x4d, 0x42, 0x10, 0xba, 0x8b, 0xb7,
	0x99, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x4d,
	0x42, 0x12, 0x45, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x34, 0x30, 0x30,
	0x47, 0x42, 0x10, 0xef, 0x9e, 0x8c, 0xa2, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x42, 0x12, 0x41, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50,
	0x45, 0x45, 0x44, 0x5f, 0x35, 0x47, 0x42, 0x10, 0xa6, 0xae, 0x89, 0xcb, 0x01, 0x1a, 0x0c, 0x82,
	0x41, 0x09, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x35, 0x47, 0x42, 0x12, 0x43, 0x0a, 0x2c, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x35, 0x30, 0x47, 0x42, 0x10, 0xd0, 0xa5, 0x8c, 0xcf,
	0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x35, 0x30, 0x47, 0x42,
	0x12, 0x43, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x34, 0x30, 0x47, 0x42,
	0x10, 0xcf, 0xf6, 0xb9, 0xe0, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x34, 0x30, 0x47, 0x42, 0x2a, 0xd3, 0x02, 0x0a, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49, 0x70, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x49, 0x50, 0x49, 0x50, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x31, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46,
	0x49, 0x50, 0x49, 0x50, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x12, 0x33, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x46, 0x49, 0x50, 0x49, 0x50, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x4f, 0x52,
	0x49, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x1a, 0x09, 0x82,
	0x41, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x12, 0x2f, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x49, 0x50, 0x49, 0x50, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x10, 0x03,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x48, 0x43, 0x50, 0x12, 0x3b, 0x0a, 0x28, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x49, 0x50, 0x49, 0x50, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x12, 0x33, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x49, 0x50, 0x49, 0x50, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x05,
	0x1a, 0x09, 0x82, 0x41, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x2a, 0xe2, 0x01, 0x0a, 0x1c,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x22,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x49, 0x50, 0x4e, 0x45,
	0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x46, 0x49, 0x50, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x4f, 0x52,
	0x49, 0x47, 0x49, 0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x1a, 0x08, 0x82, 0x41,
	0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x12, 0x32, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x49, 0x50, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52,
	0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x1a,
	0x09, 0x82, 0x41, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x12, 0x34, 0x0a, 0x24, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x49, 0x50, 0x4e, 0x45, 0x49, 0x47,
	0x48, 0x42, 0x4f, 0x52, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d,
	0x49, 0x43, 0x10, 0x03, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43,
	0x2a, 0xc4, 0x01, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x73, 0x69, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x54, 0x49,
	0x4d, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x35, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49,
	0x53, 0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06,
	0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x12, 0x3f, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45,
	0x54, 0x49, 0x4d, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x45, 0x58, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x2a, 0xb8, 0x01, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x28, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x43, 0x49, 0x52, 0x43,
	0x55, 0x49, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x4f,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x12, 0x35, 0x0a, 0x23, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x43, 0x49, 0x52,
	0x43, 0x55, 0x49, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41,
	0x53, 0x54, 0x10, 0x02, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41,
	0x53, 0x54, 0x2a, 0xa6, 0x02, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x73, 0x69, 0x73, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x50, 0x41, 0x44, 0x44,
	0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x34, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49,
	0x53, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x12, 0x32, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x50, 0x41, 0x44, 0x44,
	0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x1a,
	0x08, 0x82, 0x41, 0x05, 0x4c, 0x4f, 0x4f, 0x53, 0x45, 0x12, 0x38, 0x0a, 0x27, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x4f,
	0x50, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x49, 0x56, 0x45, 0x12, 0x36, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4e,
	0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x1a,
	0x0a, 0x82, 0x41, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x2a, 0xb0, 0x02, 0x0a, 0x23,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x49, 0x73,
	0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x41, 0x44, 0x4a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x31, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x41, 0x44, 0x4a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x1a, 0x05,
	0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x35, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x41, 0x44, 0x4a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x35, 0x0a, 0x28,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x49, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x41, 0x44, 0x4a, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49,
	0x4e, 0x49, 0x54, 0x12, 0x39, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x41, 0x44, 0x4a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x04, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x2a, 0xc0,
	0x01, 0x0a, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69,
	0x73, 0x49, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53,
	0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x46, 0x4c, 0x41, 0x47,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x26, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x12, 0x3d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x46, 0x4c,
	0x41, 0x47, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x2a, 0xb0, 0x01, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x73, 0x69, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a,
	0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31,
	0x5f, 0x32, 0x10, 0x00, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31,
	0x5f, 0x32, 0x12, 0x2f, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x53, 0x49, 0x53, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x31, 0x10, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x31, 0x12, 0x2f, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x32, 0x10, 0x02, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x32, 0x2a, 0x8d, 0x20, 0x0a, 0x25, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2f,
	0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53,
	0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x6a, 0x0a, 0x42, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49,
	0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55,
	0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xbf, 0x89, 0x80, 0x04, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x49,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x68, 0x0a, 0x41, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0xc3, 0x80, 0xd5, 0x0e, 0x1a, 0x1e, 0x82, 0x41, 0x1b, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41,
	0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x12, 0x7c, 0x0a, 0x4b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x10, 0xf7, 0xc2, 0xec, 0x1d, 0x1a, 0x28, 0x82, 0x41, 0x25, 0x49, 0x53,
	0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x12, 0x74, 0x0a, 0x47, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53,
	0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x84,
	0xe4, 0xa4, 0x28, 0x1a, 0x24, 0x82, 0x41, 0x21, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x12, 0x6a, 0x0a, 0x42, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x10,
	0xb9, 0xce, 0xcb, 0x39, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x53, 0x12, 0x76, 0x0a, 0x48, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54,
	0x48, 0x10, 0xf5, 0xa3, 0xde, 0x3b, 0x1a, 0x25, 0x82, 0x41, 0x22, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x44,
	0x55, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x12, 0x6e, 0x0a,
	0x44, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c,
	0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0xa4, 0xbf, 0xfa, 0x45, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x49,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x12, 0x7e, 0x0a,
	0x4c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c,
	0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x9a, 0x83,
	0x85, 0x48, 0x1a, 0x29, 0x82, 0x41, 0x26, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x7a, 0x0a,
	0x4a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c,
	0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc4, 0xd4, 0xc7, 0x48,
	0x1a, 0x27, 0x82, 0x41, 0x24, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f,
	0x56, 0x41, 0x52, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x78, 0x0a, 0x49, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x4e,
	0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0xf5, 0x9f, 0xd8, 0x4d, 0x1a, 0x26, 0x82, 0x41, 0x23,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49,
	0x44, 0x54, 0x48, 0x12, 0x76, 0x0a, 0x48, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53,
	0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x54, 0x49,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10,
	0xee, 0x81, 0xa5, 0x5f, 0x1a, 0x25, 0x82, 0x41, 0x22, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x12, 0x64, 0x0a, 0x3f, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0xe4,
	0x95, 0xa7, 0x61, 0x1a, 0x1c, 0x82, 0x41, 0x19, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4c, 0x4f, 0x53,
	0x53, 0x12, 0x76, 0x0a, 0x48, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0xa8, 0xf6,
	0xce, 0x6b, 0x1a, 0x25, 0x82, 0x41, 0x22, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x12, 0x6e, 0x0a, 0x44, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x10, 0x8d, 0xa8, 0xf5, 0x71, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x52, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x12, 0x70, 0x0a, 0x45, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x53, 0x10, 0x82, 0xaf, 0xc6, 0x77, 0x1a, 0x22, 0x82, 0x41, 0x1f, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x12, 0x7a, 0x0a, 0x4a, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x8b, 0xad, 0xaa, 0x7d, 0x1a, 0x27,
	0x82, 0x41, 0x24, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x6e, 0x0a, 0x44, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10,
	0xca, 0x86, 0x8a, 0x7f, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x12, 0x71, 0x0a, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x10, 0xd0, 0x8c, 0xee, 0x8d, 0x01, 0x1a, 0x22, 0x82, 0x41, 0x1f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x52, 0x5f,
	0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x7d, 0x0a, 0x4b, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f,
	0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0xfd, 0xb0, 0xa1, 0x90, 0x01, 0x1a,
	0x28, 0x82, 0x41, 0x25, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f,
	0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x77, 0x0a, 0x48, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x42, 0x41, 0x4e, 0x44,
	0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0xd9, 0xb8, 0xc3, 0x91, 0x01, 0x1a, 0x25, 0x82, 0x41, 0x22,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44,
	0x54, 0x48, 0x12, 0x67, 0x0a, 0x40, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49,
	0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x49, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x10, 0xbc, 0xe6, 0xb0, 0x94, 0x01, 0x1a, 0x1d, 0x82, 0x41,
	0x1a, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x3d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x44, 0x10, 0xc2, 0xb0, 0xd6,
	0x97, 0x01, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x44, 0x12, 0x83,
	0x01, 0x0a, 0x4e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49,
	0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55,
	0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54,
	0x48, 0x10, 0xa2, 0xc4, 0xa1, 0xa0, 0x01, 0x1a, 0x2b, 0x82, 0x41, 0x28, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57,
	0x49, 0x44, 0x54, 0x48, 0x12, 0x7b, 0x0a, 0x4a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49,
	0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53,
	0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44,
	0x54, 0x48, 0x10, 0xa5, 0x82, 0xd5, 0xa5, 0x01, 0x1a, 0x27, 0x82, 0x41, 0x24, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54,
	0x48, 0x12, 0x6b, 0x0a, 0x42, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c,
	0x56, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xc0, 0xd0, 0xe2, 0xab, 0x01, 0x1a, 0x1f, 0x82,
	0x41, 0x1c, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x7d,
	0x0a, 0x4b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53,
	0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54,
	0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x53, 0x10, 0xb4, 0xba,
	0xc8, 0xb1, 0x01, 0x1a, 0x28, 0x82, 0x41, 0x25, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54,
	0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x53, 0x12, 0x67, 0x0a,
	0x40, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c,
	0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x10, 0x8e, 0xd3, 0xa3, 0xc2, 0x01, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x12, 0x5d, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x41, 0x47, 0x36, 0x34, 0x10, 0xf1, 0x8f, 0xb9, 0xcc, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15,
	0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x41, 0x47, 0x36, 0x34, 0x12, 0x7f, 0x0a, 0x4c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0xd4, 0x98, 0xa7, 0xd5, 0x01, 0x1a, 0x29, 0x82, 0x41, 0x26,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x75, 0x0a, 0x47, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x4c, 0x53,
	0x50, 0x10, 0xa1, 0xf7, 0xc2, 0xdc, 0x01, 0x1a, 0x24, 0x82, 0x41, 0x21, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x4c, 0x53, 0x50, 0x12, 0x69, 0x0a,
	0x41, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c,
	0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x4c, 0x41, 0x4e, 0x5f, 0x53,
	0x49, 0x44, 0x10, 0xd4, 0xd7, 0xd0, 0xe3, 0x01, 0x1a, 0x1e, 0x82, 0x41, 0x1b, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x4a,
	0x5f, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x53, 0x49, 0x44, 0x10, 0xd0, 0xe2, 0x8f, 0xe9, 0x01, 0x1a,
	0x1a, 0x82, 0x41, 0x17, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x53, 0x49, 0x44, 0x12, 0x6f, 0x0a, 0x44, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0xda, 0xb2, 0xef, 0xeb, 0x01, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x59, 0x0a, 0x39,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53,
	0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c,
	0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x10, 0xeb, 0xc0, 0xb9, 0xef, 0x01, 0x1a,
	0x16, 0x82, 0x41, 0x13, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x12, 0x7b, 0x0a, 0x4a, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xe5, 0xea, 0xbd, 0xfe, 0x01, 0x1a, 0x27, 0x82, 0x41, 0x24,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x2a, 0x86, 0x12, 0x0a, 0x22, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2c, 0x0a, 0x28, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3b, 0x0a, 0x29, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x54, 0x5f, 0x49, 0x53, 0x4e, 0x10, 0xb9, 0xd8, 0xcf, 0x05, 0x1a, 0x09, 0x82, 0x41, 0x06,
	0x4d, 0x54, 0x5f, 0x49, 0x53, 0x4e, 0x12, 0x41, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x53, 0x52, 0x4c, 0x47, 0x10, 0xdd, 0xb7, 0xca, 0x10, 0x1a, 0x0c, 0x82, 0x41, 0x09,
	0x49, 0x50, 0x56, 0x36, 0x5f, 0x53, 0x52, 0x4c, 0x47, 0x12, 0x3f, 0x0a, 0x2b, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x55, 0x52, 0x47, 0x45, 0x5f, 0x4f, 0x49, 0x10, 0xb1, 0xac, 0xee, 0x27, 0x1a, 0x0b, 0x82,
	0x41, 0x08, 0x50, 0x55, 0x52, 0x47, 0x45, 0x5f, 0x4f, 0x49, 0x12, 0x39, 0x0a, 0x28, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4c, 0x50, 0x49, 0x44, 0x10, 0xe6, 0x83, 0xd8, 0x2e, 0x1a, 0x08, 0x82, 0x41, 0x05,
	0x4e, 0x4c, 0x50, 0x49, 0x44, 0x12, 0x51, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xb4, 0xe3,
	0x83, 0x3b, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x57, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x54, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x10, 0xd0, 0x84, 0xac, 0x4c, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4d, 0x54, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x12, 0x63, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x10, 0x98, 0x87, 0x84, 0x52, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x4d, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x53, 0x50,
	0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x8d, 0x90, 0x95,
	0x53, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x4c, 0x53, 0x50, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52,
	0x5f, 0x53, 0x49, 0x5a, 0x45, 0x12, 0x45, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x9c, 0xd5, 0x81, 0x5b, 0x1a, 0x0e, 0x82, 0x41,
	0x0b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x31,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53,
	0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47,
	0x59, 0x10, 0xe4, 0xc8, 0xd7, 0x63, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x12, 0x57, 0x0a, 0x37, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x10, 0xc2, 0xa4, 0xdc, 0x65, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4d, 0x54,
	0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x12, 0x63, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49,
	0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x10, 0xc6, 0xd1, 0xe1, 0x66, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x49, 0x50, 0x56,
	0x34, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x4b, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x99, 0xed, 0x82,
	0x6c, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x12, 0x5f, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49,
	0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x45, 0x53, 0x10, 0xaf, 0x8d, 0xf4, 0x7d, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x45, 0x53, 0x12, 0x52, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x82, 0xfd,
	0xc8, 0x84, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x54, 0x45, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x12, 0x60, 0x0a, 0x3b, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0xff, 0x9d, 0x8c, 0x8e, 0x01, 0x1a, 0x1b,
	0x82, 0x41, 0x18, 0x4d, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f,
	0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x12, 0x60, 0x0a, 0x3b, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x10, 0xa5, 0xdb, 0x92, 0x90, 0x01,
	0x1a, 0x1b, 0x82, 0x41, 0x18, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x12, 0x52, 0x0a,
	0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c,
	0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xe3, 0x8c, 0xa7, 0xa5, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x12, 0x48, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0xc6, 0x86, 0xeb, 0xa7, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x44,
	0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x64, 0x0a, 0x3d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xea, 0xe4, 0xf0,
	0xb2, 0x01, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x12, 0x4a, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x49,
	0x41, 0x53, 0x5f, 0x49, 0x44, 0x10, 0xd4, 0xfc, 0xab, 0xb5, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d,
	0x49, 0x53, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x4c, 0x0a,
	0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c,
	0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x45, 0x53, 0x10, 0x8b, 0xd3, 0xf1, 0xbf, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x41, 0x52, 0x45,
	0x41, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x12, 0x42, 0x0a, 0x2c, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x53, 0x52, 0x4c, 0x47, 0x10, 0xe7, 0xa1, 0xa0, 0xc4,
	0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x53, 0x52, 0x4c, 0x47, 0x12,
	0x4a, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49,
	0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c,
	0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x49, 0x53, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42,
	0x4f, 0x52, 0x53, 0x10, 0xee, 0x9b, 0xba, 0xde, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x49,
	0x53, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x12, 0x52, 0x0a, 0x34, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x10, 0xe0, 0xa7, 0xf8, 0xe9, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x12,
	0x60, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49,
	0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c,
	0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xcd,
	0x8f, 0x9d, 0xf4, 0x01, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x12, 0x5a, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48,
	0x42, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0xcb, 0xe0,
	0xe4, 0xf5, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x49, 0x53, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48,
	0x42, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x2a, 0xba, 0x01,
	0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x3d, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53,
	0x49, 0x53, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4e, 0x41,
	0x52, 0x52, 0x4f, 0x57, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x01, 0x1a, 0x10, 0x82,
	0x41, 0x0d, 0x4e, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x12,
	0x39, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49,
	0x53, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x57, 0x49, 0x44,
	0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x57,
	0x49, 0x44, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x2a, 0xe7, 0x02, 0x0a, 0x1e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x12, 0x28, 0x0a,
	0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x47, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46,
	0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x86, 0xc8, 0x8f, 0x13, 0x1a, 0x11, 0x82,
	0x41, 0x0e, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54,
	0x12, 0x47, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53,
	0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x10, 0xa4, 0x95, 0xfe, 0x4c, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x49, 0x50, 0x56, 0x34, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x43, 0x0a, 0x2b, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xed, 0xb2, 0xf2, 0x5d, 0x1a, 0x0f, 0x82,
	0x41, 0x0c, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x44,
	0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xd3, 0xb6,
	0xf4, 0x80, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x55, 0x4e, 0x49,
	0x43, 0x41, 0x53, 0x54, 0x2a, 0xa4, 0x01, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x1f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x81, 0xca, 0x88,
	0x7a, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12, 0x2f, 0x0a, 0x1f, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x83, 0xca,
	0x88, 0x7a, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x2a, 0x8f, 0x02, 0x0a, 0x2b,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x12, 0x35, 0x0a, 0x31, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x52, 0x45, 0x53, 0x45, 0x54, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x56, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41,
	0x44, 0x52, 0x45, 0x53, 0x45, 0x54, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x10, 0xba, 0x95, 0xee, 0x0d, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x12, 0x51, 0x0a, 0x38, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x52, 0x45, 0x53, 0x45, 0x54, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x46,
	0x4f, 0x52, 0x5f, 0x42, 0x47, 0x50, 0x10, 0xe0, 0xf8, 0xb6, 0xec, 0x01, 0x1a, 0x0f, 0x82, 0x41,
	0x0c, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x42, 0x47, 0x50, 0x2a, 0xb9, 0x01,
	0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x12, 0x25, 0x0a,
	0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x41, 0x46, 0x49, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xb8, 0xc3, 0xa0, 0x27,
	0x1a, 0x0a, 0x82, 0x41, 0x07, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x3b, 0x0a, 0x25,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x89, 0x9a, 0xe4, 0x83, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x2a, 0x8e, 0x01, 0x0a, 0x1e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x63, 0x70, 0x4c, 0x61, 0x63, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x25,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x41, 0x43, 0x50, 0x4c, 0x41,
	0x43, 0x50, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x12, 0x36, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4c, 0x41, 0x43, 0x50, 0x4c, 0x41, 0x43, 0x50, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x2a, 0x7e, 0x0a, 0x1c, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x63, 0x70, 0x4c, 0x61, 0x63, 0x70,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x21, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x41, 0x43, 0x50, 0x4c, 0x41, 0x43, 0x50,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x10,
	0x00, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x53, 0x4c, 0x4f, 0x57, 0x12, 0x2e, 0x0a, 0x21, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x41, 0x43, 0x50, 0x4c, 0x41, 0x43, 0x50,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10,
	0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x46, 0x41, 0x53, 0x54, 0x2a, 0xd8, 0x01, 0x0a, 0x25, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x63, 0x70, 0x4c, 0x61, 0x63,
	0x70, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4c, 0x41, 0x43, 0x50, 0x4c, 0x41, 0x43, 0x50, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52,
	0x4f, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3d, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4c, 0x41, 0x43, 0x50, 0x4c, 0x41, 0x43, 0x50, 0x53, 0x59, 0x4e, 0x43, 0x48,
	0x52, 0x4f, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x4e, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x12, 0x3f, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4c, 0x41, 0x43, 0x50, 0x4c, 0x41, 0x43, 0x50, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52,
	0x4f, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4f, 0x55, 0x54,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x2a, 0xac, 0x01, 0x0a, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x63, 0x70, 0x4c, 0x61, 0x63, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x41, 0x43, 0x50, 0x4c, 0x41, 0x43, 0x50, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x2f, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x41,
	0x43, 0x50, 0x4c, 0x41, 0x43, 0x50, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4c, 0x4f, 0x4e,
	0x47, 0x12, 0x31, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c,
	0x41, 0x43, 0x50, 0x4c, 0x41, 0x43, 0x50, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x53,
	0x48, 0x4f, 0x52, 0x54, 0x2a, 0x8b, 0x04, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4c, 0x6c, 0x64, 0x70, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x47, 0x0a, 0x2d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x43, 0x48, 0x41,
	0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53,
	0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x14,
	0x82, 0x41, 0x11, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x12, 0x43, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x4c,
	0x49, 0x41, 0x53, 0x10, 0x02, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x12, 0x41, 0x0a, 0x2a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x43, 0x48, 0x41, 0x53, 0x53,
	0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x12, 0x3b, 0x0a, 0x27,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x43, 0x48,
	0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4d, 0x41,
	0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x43, 0x0a, 0x2b, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x43, 0x48, 0x41, 0x53, 0x53,
	0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x41,
	0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50,
	0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x12, 0x2f, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c,
	0x4c, 0x44, 0x50, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x07, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x2a, 0xee, 0x03, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x6c, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x40, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4c, 0x4c, 0x44, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10,
	0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x41, 0x4c, 0x49, 0x41, 0x53, 0x12, 0x3e, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x12, 0x38, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x1a,
	0x0e, 0x82, 0x41, 0x0b, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12,
	0x40, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x1a, 0x12, 0x82,
	0x41, 0x0f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x12, 0x3e, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c,
	0x4c, 0x44, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x12, 0x42, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c,
	0x4c, 0x44, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x06,
	0x1a, 0x13, 0x82, 0x41, 0x10, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55,
	0x49, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x07, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x2a, 0x9c, 0x07, 0x0a, 0x27, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4c, 0x6c, 0x64, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x4c, 0x44, 0x50, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12,
	0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44, 0x50, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x40, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44, 0x50, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x10, 0xb3, 0xb5, 0xa6, 0x05, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x12, 0x40, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44, 0x50, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0xe1, 0x94, 0x8d, 0x2e, 0x1a, 0x09, 0x82, 0x41, 0x06,
	0x53, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x12, 0x48, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44,
	0x50, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0xe7, 0xb2, 0xe6,
	0x2e, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4d, 0x41, 0x43, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45,
	0x12, 0x4c, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c,
	0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44, 0x50, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0xc5, 0x84, 0x8d, 0x33, 0x1a, 0x0f, 0x82,
	0x41, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x12, 0x5a,
	0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44, 0x50, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x4f, 0x43, 0x53, 0x49, 0x53,
	0x5f, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0xd4, 0xac,
	0xe4, 0x6e, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x44, 0x4f, 0x43, 0x53, 0x49, 0x53, 0x5f, 0x43, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x12, 0x45, 0x0a, 0x30, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4c, 0x4c, 0x44, 0x50, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x43, 0x41, 0x50, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0xd0,
	0xa5, 0x85, 0x89, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45,
	0x52, 0x12, 0x57, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c,
	0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44, 0x50, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x4c, 0x41,
	0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x92,
	0x93, 0x85, 0x9e, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x57, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x12, 0x47, 0x0a, 0x31, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4c, 0x4c, 0x44, 0x50, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x43, 0x41, 0x50, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10,
	0xa8, 0xde, 0xd2, 0xa5, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x54, 0x45, 0x4c, 0x45, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x12, 0x41, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44, 0x50, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0xd1, 0xb8, 0x8d, 0xb1, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06,
	0x43, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x12, 0x3f, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44,
	0x50, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xfa, 0xe8, 0xf1, 0xe4, 0x01, 0x1a, 0x08, 0x82,
	0x41, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x12, 0x59, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c,
	0x44, 0x50, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x41, 0x43, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0xe2, 0xd4, 0xe2, 0xef, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12,
	0x54, 0x57, 0x4f, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x59, 0x2a, 0xaa, 0x04, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x6c, 0x64, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x4c,
	0x56, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c,
	0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x4c, 0x56, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x47, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c,
	0x44, 0x50, 0x54, 0x4c, 0x56, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x94, 0xbe, 0xa7, 0x07, 0x1a, 0x13, 0x82, 0x41, 0x10,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x12, 0x4d, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c,
	0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x4c, 0x56, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49,
	0x45, 0x53, 0x10, 0x8a, 0x92, 0xd1, 0x0d, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x12,
	0x4b, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x4c, 0x56, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x10, 0xaa, 0xb6, 0x91, 0x24, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x35, 0x0a, 0x22,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x4c, 0x56, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x49, 0x44, 0x10, 0xcd, 0xa6, 0xf1, 0x5a, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x4c,
	0x56, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc6, 0xff, 0x90, 0x83, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x12, 0x3e, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c,
	0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x4c, 0x56, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xb9, 0xae, 0xfd, 0x8b,
	0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x12, 0x3c, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c,
	0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x4c, 0x56, 0x5f,
	0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x44, 0x10, 0x9a, 0xea, 0xb9, 0xc2, 0x01,
	0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x44, 0x2a,
	0xee, 0x01, 0x0a, 0x29, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x12, 0x33, 0x0a,
	0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x4b, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xa8, 0xf4, 0xe0, 0x9f, 0x01,
	0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x12,
	0x3f, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x10, 0xc3, 0xb2, 0xca, 0xe7, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x52, 0x4f, 0x50,
	0x2a, 0xe8, 0x01, 0x0a, 0x25, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x2d, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x4f, 0x46, 0x46,
	0x53, 0x45, 0x54, 0x5f, 0x30, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x00, 0x1a, 0x0a, 0x82,
	0x41, 0x07, 0x30, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x12, 0x3f, 0x0a, 0x2e, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x4f, 0x46, 0x46, 0x53,
	0x45, 0x54, 0x5f, 0x33, 0x30, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x1a, 0x0b, 0x82,
	0x41, 0x08, 0x33, 0x30, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x12, 0x3f, 0x0a, 0x2e, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x4f, 0x46, 0x46,
	0x53, 0x45, 0x54, 0x5f, 0x35, 0x30, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x03, 0x1a, 0x0b,
	0x82, 0x41, 0x08, 0x35, 0x30, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x2a, 0xec, 0x02, 0x0a, 0x21,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d,
	0x41, 0x43, 0x53, 0x45, 0x43, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x43, 0x49, 0x50, 0x48, 0x45,
	0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x41,
	0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x41, 0x43, 0x53,
	0x45, 0x43, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x53, 0x55,
	0x49, 0x54, 0x45, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x10,
	0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x47, 0x43, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32,
	0x38, 0x12, 0x41, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d,
	0x41, 0x43, 0x53, 0x45, 0x43, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x43, 0x49, 0x50, 0x48, 0x45,
	0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32,
	0x35, 0x36, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x47, 0x43, 0x4d, 0x5f, 0x41, 0x45, 0x53,
	0x5f, 0x32, 0x35, 0x36, 0x12, 0x49, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x43, 0x49,
	0x50, 0x48, 0x45, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x41, 0x45,
	0x53, 0x5f, 0x58, 0x50, 0x4e, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x03, 0x1a, 0x12, 0x82, 0x41, 0x0f,
	0x47, 0x43, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x58, 0x50, 0x4e, 0x5f, 0x31, 0x32, 0x38, 0x12,
	0x49, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x41, 0x43,
	0x53, 0x45, 0x43, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x53,
	0x55, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x58, 0x50, 0x4e,
	0x5f, 0x32, 0x35, 0x36, 0x10, 0x04, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x47, 0x43, 0x4d, 0x5f, 0x41,
	0x45, 0x53, 0x5f, 0x58, 0x50, 0x4e, 0x5f, 0x32, 0x35, 0x36, 0x2a, 0xb1, 0x02, 0x0a, 0x4f, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x73,
	0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x61,
	0x0a, 0x5d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x41, 0x43, 0x53,
	0x45, 0x43, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x4d, 0x4b, 0x41, 0x5f, 0x4b, 0x45,
	0x59, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x5f, 0x4d, 0x4b, 0x41, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x4d, 0x4b, 0x41, 0x4b, 0x45, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x7b, 0x0a, 0x65, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d,
	0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x4d, 0x4b, 0x41,
	0x5f, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x43, 0x48,
	0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x4b, 0x41, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x4d, 0x4b, 0x41, 0x4b,
	0x45, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x10, 0x82, 0x41,
	0x0d, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x2a, 0xaa,
	0x02, 0x0a, 0x4a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x6b, 0x61,
	0x4b, 0x65, 0x79, 0x73, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5c, 0x0a,
	0x58, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x41, 0x43, 0x53, 0x45,
	0x43, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x4d, 0x4b, 0x41, 0x5f, 0x4b, 0x45, 0x59,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f,
	0x4d, 0x4b, 0x41, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x4d, 0x4b, 0x41, 0x4b, 0x45, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x44, 0x41, 0x54, 0x45, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x7e, 0x0a, 0x64, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x4d, 0x4b, 0x41, 0x5f, 0x4b, 0x45, 0x59, 0x43, 0x48,
	0x41, 0x49, 0x4e, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x4b,
	0x41, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x4d, 0x4b, 0x41, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54,
	0x45, 0x4c, 0x59, 0x10, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x4c, 0x59, 0x2a, 0x4a, 0x0a, 0x1e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x44, 0x45, 0x42, 0x55, 0x47, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x12, 0x28, 0x0a,
	0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x53, 0x44, 0x45, 0x42, 0x55, 0x47, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x2a, 0xa2, 0x04, 0x0a, 0x20, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x26,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x53, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3c, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x53, 0x59,
	0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x4d, 0x45,
	0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x45, 0x4d, 0x45,
	0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x12, 0x34, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x53, 0x59, 0x53, 0x4c,
	0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x10, 0x02, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0x3a, 0x0a, 0x29,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x53, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x12, 0x34, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x53, 0x59,
	0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x04, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x38,
	0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x53, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x1a, 0x0a, 0x82, 0x41,
	0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x12, 0x36, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x53, 0x59,
	0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54,
	0x49, 0x43, 0x45, 0x10, 0x06, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45,
	0x12, 0x44, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x10, 0x07, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x12, 0x34, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x53, 0x59, 0x53, 0x4c,
	0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47,
	0x10, 0x08, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x2a, 0xcc, 0x01, 0x0a,
	0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x43,
	0x73, 0x70, 0x66, 0x54, 0x69, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x33,
	0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53,
	0x43, 0x53, 0x50, 0x46, 0x54, 0x49, 0x45, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x00, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x12, 0x3b, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4d, 0x50, 0x4c, 0x53, 0x43, 0x53, 0x50, 0x46, 0x54, 0x49, 0x45, 0x42, 0x52, 0x45, 0x41,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x10,
	0x02, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x4c,
	0x12, 0x39, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50,
	0x4c, 0x53, 0x43, 0x53, 0x50, 0x46, 0x54, 0x49, 0x45, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x4d, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x0c, 0x82,
	0x41, 0x09, 0x4d, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x2a, 0xd2, 0x01, 0x0a, 0x25,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x64,
	0x70, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x64, 0x70, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44,
	0x50, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x4d, 0x50, 0x4c, 0x53, 0x4c,
	0x44, 0x50, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4c, 0x49, 0x4e, 0x4b, 0x12,
	0x3f, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c,
	0x53, 0x4c, 0x44, 0x50, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x41, 0x44, 0x4a, 0x41, 0x43,
	0x45, 0x4e, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x45, 0x44,
	0x2a, 0xa2, 0x01, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x70, 0x6c, 0x73, 0x4c, 0x64, 0x70, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x64, 0x70, 0x41, 0x66, 0x69,
	0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50,
	0x4c, 0x53, 0x4c, 0x44, 0x50, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x41, 0x46, 0x49, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x4d, 0x50, 0x4c, 0x53,
	0x4c, 0x44, 0x50, 0x41, 0x46, 0x49, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12, 0x2d, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x4d, 0x50, 0x4c, 0x53, 0x4c,
	0x44, 0x50, 0x41, 0x46, 0x49, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41,
	0x04, 0x49, 0x50, 0x56, 0x36, 0x2a, 0xa0, 0x01, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x48, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4d, 0x50, 0x4c, 0x53, 0x48, 0x4f, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4d, 0x50, 0x4c, 0x53, 0x48, 0x4f,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x53, 0x45, 0x10, 0x01, 0x1a, 0x08, 0x82,
	0x41, 0x05, 0x4c, 0x4f, 0x4f, 0x53, 0x45, 0x12, 0x2f, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4d, 0x50, 0x4c, 0x53, 0x48, 0x4f, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x02, 0x1a, 0x09, 0x82,
	0x41, 0x06, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x2a, 0xae, 0x01, 0x0a, 0x22, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x53,
	0x72, 0x6c, 0x67, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x44, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c,
	0x53, 0x4d, 0x50, 0x4c, 0x53, 0x53, 0x52, 0x4c, 0x47, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x49, 0x4e,
	0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x45, 0x44, 0x5f, 0x53, 0x52,
	0x4c, 0x47, 0x10, 0x00, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x45, 0x44,
	0x5f, 0x53, 0x52, 0x4c, 0x47, 0x12, 0x42, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4d, 0x50, 0x4c, 0x53, 0x53, 0x52, 0x4c, 0x47, 0x46,
	0x4c, 0x4f, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x43, 0x5f, 0x53, 0x52, 0x4c, 0x47, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x52, 0x4c, 0x47, 0x2a, 0x8b, 0x01, 0x0a, 0x1d, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x27, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x45, 0x42,
	0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x12, 0x2f, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x45, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49,
	0x44, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x2a, 0xd0, 0x02, 0x0a, 0x20, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c,
	0x53, 0x50, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2a, 0x0a, 0x26,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4c, 0x53, 0x50, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x55, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c,
	0x53, 0x50, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x53, 0x50,
	0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x48, 0x45, 0x52, 0x49, 0x54, 0x45,
	0x44, 0x10, 0xdb, 0x94, 0xc5, 0x36, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4c, 0x53, 0x50, 0x5f, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x48, 0x45, 0x52, 0x49, 0x54, 0x45, 0x44, 0x12,
	0x53, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c,
	0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x53, 0x50, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x53, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x41,
	0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x10, 0x94, 0xdb, 0x90, 0x72, 0x1a, 0x16, 0x82, 0x41,
	0x13, 0x4c, 0x53, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x41, 0x42, 0x53, 0x4f,
	0x4c, 0x55, 0x54, 0x45, 0x12, 0x54, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x53, 0x50, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x53, 0x50, 0x5f, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0xcf, 0xa4, 0xd6,
	0xc5, 0x01, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x4c, 0x53, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x2a, 0xb9, 0x01, 0x0a, 0x20, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x4c, 0x53, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12,
	0x2a, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c,
	0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x53, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x23, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4c, 0x53, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x50, 0x10, 0xad, 0xeb, 0xf5, 0x7d, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x36,
	0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x53, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x86, 0xaf, 0x81, 0xa0, 0x01, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x2a, 0xe7, 0x01, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x53,
	0x50, 0x52, 0x4f, 0x4c, 0x45, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x53, 0x50, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x22, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4c, 0x53, 0x50, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49,
	0x54, 0x10, 0xae, 0xe5, 0xd1, 0x69, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x49, 0x54, 0x12, 0x36, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x53, 0x50, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0xc2, 0xd1, 0xd6, 0xa0, 0x01, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x12, 0x34, 0x0a, 0x21, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4c, 0x53, 0x50, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0xd4, 0x8a, 0x8d, 0xb3, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x2a, 0xcd, 0x01, 0x0a, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4e, 0x55, 0x4c, 0x4c, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4e, 0x55, 0x4c, 0x4c,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x3d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d,
	0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4e, 0x55, 0x4c, 0x4c, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0xdd,
	0xd4, 0xdd, 0x0c, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x12, 0x3e, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50,
	0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4e, 0x55, 0x4c, 0x4c, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x9c, 0xd1,
	0xf9, 0xd1, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x2a, 0xee, 0x02, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x41, 0x54, 0x48, 0x43, 0x4f, 0x4d, 0x50,
	0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x12, 0x32, 0x0a,
	0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x54, 0x48, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x5a, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d,
	0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x54, 0x48, 0x43, 0x4f, 0x4d, 0x50,
	0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x44,
	0x10, 0xbe, 0xb1, 0x85, 0xc7, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x44, 0x12, 0x5a, 0x0a,
	0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x54, 0x48, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x4c, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0xe3, 0xd7, 0xe0,
	0xc9, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x4c,
	0x59, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x12, 0x56, 0x0a, 0x39, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x50, 0x41, 0x54, 0x48, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x55, 0x54, 0x45, 0x44, 0x10, 0x8a, 0x96, 0xc7, 0xd4, 0x01, 0x1a, 0x13, 0x82, 0x41,
	0x10, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45,
	0x44, 0x2a, 0xc4, 0x02, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x54,
	0x55, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x54, 0x55, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x4f, 0x0a, 0x34, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x54, 0x55, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x52, 0x53,
	0x56, 0x50, 0x10, 0xea, 0x8b, 0xbf, 0x0f, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x50, 0x41, 0x54, 0x48,
	0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x12, 0x4b, 0x0a, 0x32, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x54, 0x55, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x53,
	0x52, 0x10, 0xea, 0xb9, 0xc9, 0x7b, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x50, 0x41, 0x54, 0x48, 0x5f,
	0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x53, 0x52, 0x12, 0x4e, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50,
	0x41, 0x54, 0x48, 0x53, 0x45, 0x54, 0x55, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x4c, 0x44, 0x50, 0x10,
	0x93, 0xed, 0xb2, 0xf9, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53,
	0x45, 0x54, 0x55, 0x50, 0x5f, 0x4c, 0x44, 0x50, 0x2a, 0xe4, 0x02, 0x0a, 0x21, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2b,
	0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x44, 0x0a, 0x2d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0xc0, 0xa1, 0xeb,
	0x19, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x12, 0x6b, 0x0a, 0x40, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d,
	0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0xfd, 0xd8, 0xa2, 0x8e, 0x01, 0x1a, 0x21, 0x82, 0x41, 0x1e,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x12, 0x5f,
	0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x81, 0x94, 0xff,
	0xb9, 0x01, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x2a,
	0xb0, 0x02, 0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70,
	0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x53, 0x45, 0x55, 0x44, 0x4f, 0x57, 0x49, 0x52,
	0x45, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x34,
	0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x53, 0x45, 0x55, 0x44, 0x4f, 0x57, 0x49, 0x52, 0x45, 0x45,
	0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x62, 0x0a, 0x40, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x53, 0x45, 0x55, 0x44,
	0x4f, 0x57, 0x49, 0x52, 0x45, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x57, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f,
	0x52, 0x41, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xf6, 0xa9, 0xbc, 0xd1, 0x01, 0x1a, 0x18,
	0x82, 0x41, 0x15, 0x50, 0x57, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f,
	0x52, 0x41, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x68, 0x0a, 0x43, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50,
	0x53, 0x45, 0x55, 0x44, 0x4f, 0x57, 0x49, 0x52, 0x45, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x57, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0xb8, 0xd1, 0x97, 0xdc, 0x01, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x50, 0x57, 0x45, 0x5f, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x2a, 0xe0, 0x01, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x2e, 0x0a, 0x2a, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x2d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x55, 0x50, 0x10, 0xc3, 0x86, 0xbc,
	0x23, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x55, 0x50, 0x12, 0x45,
	0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x80, 0x90, 0xb5, 0x43, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x2a, 0xaf, 0x01, 0x0a, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x30, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50,
	0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x32, 0x50, 0x10, 0xa4, 0x86, 0xe2, 0x6f, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x50,
	0x32, 0x50, 0x12, 0x33, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x4d, 0x50, 0x10, 0xeb, 0xa5, 0xda, 0xb9, 0x01, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x50, 0x32, 0x4d, 0x50, 0x2a, 0xeb, 0x07, 0x0a, 0x55, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x74, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x66, 0x0a, 0x62, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x6f, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a,
	0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x7e, 0x0a, 0x69, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0x8a, 0x01, 0x0a, 0x6f, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41,
	0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x12, 0x80, 0x01, 0x0a, 0x6a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x94, 0x01, 0x0a, 0x74, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10,
	0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x76, 0x0a,
	0x65, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4e, 0x4f,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0xde, 0x08, 0x0a, 0x63, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x66, 0x74, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4d,
	0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x74, 0x0a,
	0x70, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x4d, 0x50, 0x4c,
	0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x7d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x8c,
	0x01, 0x0a, 0x77, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46,
	0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x4d,
	0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41,
	0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0x98, 0x01,
	0x0a, 0x7d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54,
	0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x4d, 0x50,
	0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x8e, 0x01, 0x0a, 0x78, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c,
	0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c,
	0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xa3, 0x01, 0x0a, 0x82, 0x01, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50,
	0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f,
	0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12,
	0x84, 0x01, 0x0a, 0x73, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41,
	0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4e,
	0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0xe6, 0x08, 0x0a, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x66, 0x74, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x75, 0x73, 0x68, 0x65,
	0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12,
	0x75, 0x0a, 0x71, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46,
	0x54, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54,
	0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x44,
	0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x7e, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48,
	0x4f, 0x50, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c,
	0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12,
	0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x12, 0x8d, 0x01, 0x0a, 0x78, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x53, 0x5f,
	0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x55,
	0x53, 0x48, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10,
	0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x12, 0x99, 0x01, 0x0a, 0x7e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x53, 0x5f,
	0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x55,
	0x53, 0x48, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x8f,
	0x01, 0x0a, 0x79, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46,
	0x54, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54,
	0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x44,
	0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49,
	0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10,
	0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x12, 0xa4, 0x01, 0x0a, 0x83, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x53, 0x5f, 0x4e,
	0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x55, 0x53,
	0x48, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17,
	0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x85, 0x01, 0x0a, 0x74, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54,
	0x48, 0x4f, 0x50, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a,
	0xcc, 0x09, 0x0a, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x74, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x81, 0x01, 0x0a, 0x7d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46,
	0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0xa6, 0x01, 0x0a, 0x8a, 0x01, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x12, 0x9a, 0x01, 0x0a, 0x84, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52,
	0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f,
	0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82,
	0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0xa6,
	0x01, 0x0a, 0x8a, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41,
	0x46, 0x54, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41,
	0x52, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03,
	0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x9c, 0x01, 0x0a, 0x85, 0x01, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xb0, 0x01, 0x0a, 0x8f, 0x01, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82,
	0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x92, 0x01, 0x0a, 0x80, 0x01, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c,
	0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10,
	0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0x8c,
	0x0a, 0x0a, 0x77, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x70, 0x6c, 0x73, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x85, 0x01,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f,
	0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0xae, 0x01, 0x0a, 0x92, 0x01, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x49, 0x50, 0x56,
	0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xa2, 0x01, 0x0a, 0x8c, 0x01, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x47, 0x4c,
	0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41,
	0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0xae, 0x01,
	0x0a, 0x92, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xa4,
	0x01, 0x0a, 0x8d, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xb8, 0x01, 0x0a, 0x97, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41,
	0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x4c, 0x4f, 0x57, 0x45, 0x52, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f,
	0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52,
	0x12, 0x9a, 0x01, 0x0a, 0x88, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09,
	0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0x8c, 0x0a,
	0x0a, 0x77, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x70, 0x6c, 0x73, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55,
	0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x85, 0x01, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0xae, 0x01, 0x0a, 0x92, 0x01, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42,
	0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01,
	0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xa2, 0x01, 0x0a, 0x8c, 0x01, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0xae, 0x01, 0x0a,
	0x92, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c,
	0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xa4, 0x01,
	0x0a, 0x8d, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xb8, 0x01, 0x0a, 0x97, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55,
	0x50, 0x50, 0x45, 0x52, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50,
	0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f,
	0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12,
	0x9a, 0x01, 0x0a, 0x88, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a,
	0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0xb8, 0x09, 0x0a,
	0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x73, 0x70,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x73, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x4c, 0x73, 0x70, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x7f, 0x0a,
	0x7b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x5f, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e,
	0x47, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0xa4,
	0x01, 0x0a, 0x88, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c,
	0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x5f, 0x45, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x49, 0x4e, 0x43, 0x4f,
	0x4d, 0x49, 0x4e, 0x47, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15,
	0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x98, 0x01, 0x0a, 0x82, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x53, 0x50, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x43, 0x4c, 0x53, 0x50, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a,
	0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x12, 0xa4, 0x01, 0x0a, 0x88, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x43, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x5f,
	0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x49, 0x4e,
	0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03,
	0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x9a, 0x01, 0x0a, 0x83, 0x01, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x53, 0x50,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xae, 0x01, 0x0a, 0x8d, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43,
	0x4c, 0x53, 0x50, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e,
	0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49,
	0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x8f, 0x01, 0x0a, 0x7e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43,
	0x4c, 0x53, 0x50, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e,
	0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0x96, 0x09, 0x0a, 0x68, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x73, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x4c, 0x73, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x73, 0x70, 0x45,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x75, 0x73, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x7b, 0x0a, 0x77, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53,
	0x50, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x50, 0x55, 0x53, 0x48, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0xa0, 0x01, 0x0a, 0x84, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x43, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50,
	0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x50,
	0x55, 0x53, 0x48, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58,
	0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82,
	0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x93, 0x01, 0x0a, 0x7e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c,
	0x53, 0x50, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x50, 0x55, 0x53, 0x48, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0xa0, 0x01, 0x0a, 0x84, 0x01,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f,
	0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x95, 0x01,
	0x0a, 0x7f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c,
	0x53, 0x5f, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x5f, 0x45, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xaa, 0x01, 0x0a, 0x89, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x53, 0x50, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x43, 0x4c, 0x53, 0x50, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x54,
	0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43,
	0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f,
	0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x4f, 0x52, 0x12, 0x8b, 0x01, 0x0a, 0x7a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x43, 0x4c, 0x53, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x4c, 0x53, 0x50,
	0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x50,
	0x55, 0x53, 0x48, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x2a, 0xad, 0x04, 0x0a, 0xa6, 0x01, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x70,
	0x6c, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0xbc, 0x01, 0x0a,
	0xb7, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c,
	0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49,
	0x44, 0x54, 0x48, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0xc2, 0x01, 0x0a, 0xb5,
	0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44,
	0x54, 0x48, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x42,
	0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4c, 0x4c,
	0x2a, 0x8a, 0x0c, 0x0a, 0x94, 0x01, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x70,
	0x6c, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0xaa, 0x01, 0x0a, 0xa5, 0x01,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0xce, 0x01, 0x0a, 0xb2, 0x01, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f,
	0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56,
	0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xc2, 0x01, 0x0a, 0xac, 0x01, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53,
	0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x45, 0x58,
	0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41,
	0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0xce, 0x01,
	0x0a, 0xb2, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58,
	0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xc4,
	0x01, 0x0a, 0xad, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xd8, 0x01, 0x0a, 0xb7, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53,
	0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f,
	0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52,
	0x12, 0xba, 0x01, 0x0a, 0xa8, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09,
	0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0xaa, 0x0c,
	0x0a, 0x98, 0x01, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x70, 0x6c, 0x73, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0xae, 0x01, 0x0a, 0xa9,
	0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0xd2, 0x01, 0x0a,
	0xb6, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c,
	0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x12, 0xc6, 0x01, 0x0a, 0xb0, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0xd2, 0x01, 0x0a, 0xb6, 0x01,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12,
	0xc8, 0x01, 0x0a, 0xb1, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xdc, 0x01, 0x0a, 0xbb, 0x01,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82,
	0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0xbe, 0x01, 0x0a, 0xac, 0x01, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82,
	0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0xd2, 0x09, 0x0a, 0x6f, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x70, 0x6c, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x52, 0x73, 0x76,
	0x70, 0x54, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x12, 0x82,
	0x01, 0x0a, 0x7e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0xa7, 0x01, 0x0a, 0x8b, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49,
	0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50,
	0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x49,
	0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x9b, 0x01,
	0x0a, 0x85, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0xa7, 0x01, 0x0a, 0x8b,
	0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x49, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15,
	0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x9d, 0x01, 0x0a, 0x86, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53,
	0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x49, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xb1, 0x01, 0x0a, 0x90, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53,
	0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x49, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82,
	0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x93, 0x01, 0x0a, 0x81, 0x01, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a,
	0xda, 0x09, 0x0a, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x70, 0x6c, 0x73,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4f, 0x75, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x7f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49,
	0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50,
	0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x4f,
	0x55, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x8c, 0x01,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x4f, 0x55, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15,
	0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x9c, 0x01, 0x0a, 0x86, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53,
	0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x12, 0xa8, 0x01, 0x0a, 0x8c, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c,
	0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56,
	0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x4f, 0x55, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12,
	0x9e, 0x01, 0x0a, 0x87, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x4f, 0x55, 0x54, 0x5f, 0x49,
	0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10,
	0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x12, 0xb2, 0x01, 0x0a, 0x91, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x54, 0x45, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x4f, 0x55, 0x54, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e,
	0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49,
	0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x94, 0x01, 0x0a, 0x82, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x52, 0x53,
	0x56, 0x50, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x4f, 0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a,
	0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0xe4, 0x0b, 0x0a,
	0x91, 0x01, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x70, 0x6c, 0x73, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0xa5, 0x01, 0x0a, 0xa0, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49,
	0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x53, 0x49, 0x44, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x53, 0x49, 0x44, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0xc9, 0x01, 0x0a, 0xad,
	0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x53, 0x49, 0x44, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x53, 0x49, 0x44, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01,
	0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xbd, 0x01, 0x0a, 0xa7, 0x01, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x53, 0x49, 0x44, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x53, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x53, 0x49, 0x44,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0xc9, 0x01, 0x0a, 0xad, 0x01, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x53, 0x49, 0x44, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x53, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x53, 0x49, 0x44,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41,
	0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x12, 0xbf, 0x01, 0x0a, 0xa8, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49,
	0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x53, 0x49, 0x44, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x53, 0x49, 0x44, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xd3, 0x01, 0x0a, 0xb2, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x47, 0x47,
	0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x53, 0x49, 0x44, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52,
	0x53, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x53, 0x49, 0x44, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a,
	0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0xb5, 0x01, 0x0a, 0xa3,
	0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x53, 0x49, 0x44, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x53, 0x49, 0x44, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x2a, 0xef, 0x0b, 0x0a, 0x8e, 0x01, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x64, 0x73, 0x53, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0xa2, 0x01, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f,
	0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45,
	0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0xcb, 0x01, 0x0a, 0xaf, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54,
	0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x49,
	0x44, 0x53, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56,
	0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12,
	0xbf, 0x01, 0x0a, 0xa9, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x53,
	0x5f, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02,
	0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x12, 0xcb, 0x01, 0x0a, 0xaf, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54,
	0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x49,
	0x44, 0x53, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12,
	0xc1, 0x01, 0x0a, 0xaa, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x53,
	0x5f, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x12, 0xd5, 0x01, 0x0a, 0xb4, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49,
	0x53, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x53, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a,
	0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0xb7, 0x01, 0x0a, 0xa5,
	0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c,
	0x45, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x49, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4e, 0x4f,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0xea, 0x09, 0x0a, 0x71, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x72, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x42, 0x73, 0x69, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x81,
	0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c,
	0x45, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x52, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x42, 0x53, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x8e, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41,
	0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x53, 0x52, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c,
	0x53, 0x42, 0x53, 0x49, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x12, 0x9e, 0x01, 0x0a, 0x88, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x52,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x42, 0x53,
	0x49, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10,
	0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x12, 0xaa, 0x01, 0x0a, 0x8e, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53,
	0x52, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x42,
	0x53, 0x49, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12,
	0xa0, 0x01, 0x0a, 0x89, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x52, 0x54, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x42, 0x53, 0x49, 0x44,
	0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04,
	0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x12, 0xb4, 0x01, 0x0a, 0x93, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53,
	0x52, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x42,
	0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82,
	0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x96, 0x01, 0x0a, 0x84, 0x01, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x49, 0x45, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53,
	0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x52, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x42, 0x53, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x2a, 0xbd, 0x0d, 0x0a, 0xa6, 0x01, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x41, 0x66, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x73, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x69, 0x64, 0x49, 0x64, 0x12, 0xc1,
	0x01, 0x0a, 0xbc, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49,
	0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x53,
	0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x49, 0x44, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0xe5, 0x01, 0x0a, 0xc9, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49,
	0x53, 0x41, 0x46, 0x49, 0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52,
	0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59,
	0x53, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x49, 0x44, 0x49, 0x44, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xd9, 0x01, 0x0a, 0xc3, 0x01,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53,
	0x49, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x41, 0x46, 0x5f,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x44, 0x4a,
	0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x49, 0x44, 0x49, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0xe5, 0x01, 0x0a, 0xc9, 0x01, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43,
	0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e,
	0x43, 0x59, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x49, 0x44,
	0x49, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xdb,
	0x01, 0x0a, 0xc4, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49,
	0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x53,
	0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x49, 0x44, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49,
	0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xef, 0x01, 0x0a,
	0xce, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x49, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x41,
	0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x41,
	0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x49, 0x44, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52,
	0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0xd1,
	0x01, 0x0a, 0xbf, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49,
	0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x53,
	0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x49, 0x44, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x2a, 0xb5, 0x0e, 0x0a, 0xb5, 0x01, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x41, 0x66, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x73, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0xd0, 0x01,
	0x0a, 0xcb, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x5f,
	0x41, 0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x53, 0x5f,
	0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x44, 0x59, 0x4e, 0x41,
	0x4d, 0x49, 0x43, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0xf4, 0x01, 0x0a, 0xd8, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41,
	0x46, 0x49, 0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49,
	0x44, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x44,
	0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01,
	0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xe8, 0x01, 0x0a, 0xd2, 0x01, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x44, 0x4a, 0x41,
	0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45,
	0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10,
	0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x12, 0xf4, 0x01, 0x0a, 0xd8, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49,
	0x53, 0x41, 0x46, 0x49, 0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52,
	0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59,
	0x53, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c,
	0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xea, 0x01, 0x0a, 0xd3, 0x01, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49,
	0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x41, 0x46, 0x5f, 0x53,
	0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x44,
	0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x41,
	0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xfe, 0x01, 0x0a, 0xdd, 0x01, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43,
	0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e,
	0x43, 0x59, 0x53, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17,
	0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0xe0, 0x01, 0x0a, 0xce, 0x01, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x44, 0x4a, 0x41,
	0x43, 0x45, 0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45,
	0x4e, 0x43, 0x59, 0x53, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82,
	0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0x8d, 0x0d, 0x0a, 0xa0, 0x01,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x41, 0x66, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x69, 0x64, 0x73, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x53, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x69, 0x64, 0x49, 0x64,
	0x12, 0xbb, 0x01, 0x0a, 0xb6, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41,
	0x46, 0x49, 0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x53, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x49, 0x44, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0xdf,
	0x01, 0x0a, 0xc3, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49,
	0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x52,
	0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x49, 0x44, 0x49, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50,
	0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x12, 0xd3, 0x01, 0x0a, 0xbd, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41,
	0x46, 0x49, 0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x53, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x49, 0x44, 0x49, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0xdf, 0x01, 0x0a, 0xc3, 0x01, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x49, 0x44, 0x49, 0x44, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xd5, 0x01, 0x0a, 0xbe, 0x01, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45,
	0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x49, 0x44, 0x49, 0x44, 0x5f, 0x49,
	0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10,
	0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x12, 0xe9, 0x01, 0x0a, 0xc8, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41,
	0x46, 0x49, 0x5f, 0x41, 0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x53, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x49, 0x44, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08,
	0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0xcb, 0x01, 0x0a,
	0xb9, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x49, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x41,
	0x46, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x49, 0x58, 0x53, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x49, 0x44,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82,
	0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0x81, 0x11, 0x0a, 0xdb, 0x01,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x73, 0x70, 0x54, 0x6c, 0x76, 0x73,
	0x54, 0x6c, 0x76, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x72, 0x67, 0x62, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x73, 0x53, 0x72, 0x67, 0x62, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0xfa, 0x01, 0x0a, 0xf5,
	0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49,
	0x53, 0x49, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x4c, 0x53, 0x50, 0x5f, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x4c, 0x56, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49,
	0x45, 0x53, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x55,
	0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x43, 0x41, 0x50, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x52, 0x47, 0x42, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x4f, 0x52, 0x53, 0x5f, 0x53, 0x52, 0x47, 0x42, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x9e, 0x02, 0x0a, 0x82, 0x02, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x4c, 0x53, 0x50, 0x5f, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x4c, 0x56, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f,
	0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c,
	0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x52, 0x47, 0x42, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f,
	0x52, 0x53, 0x5f, 0x53, 0x52, 0x47, 0x42, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50,
	0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c,
	0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x92, 0x02, 0x0a, 0xfc, 0x01, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49,
	0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x4c, 0x53, 0x50, 0x5f, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x4c, 0x56, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53,
	0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54,
	0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x52, 0x47, 0x42, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x4f, 0x52, 0x53, 0x5f, 0x53, 0x52, 0x47, 0x42, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82,
	0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0x9e,
	0x02, 0x0a, 0x82, 0x02, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x44, 0x41, 0x54,
	0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x53, 0x50, 0x5f, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54,
	0x4c, 0x56, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x43, 0x41,
	0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x52, 0x47, 0x42, 0x44, 0x45, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x53, 0x5f, 0x53, 0x52, 0x47, 0x42, 0x44, 0x45, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12,
	0x94, 0x02, 0x0a, 0xfd, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x53, 0x50, 0x5f, 0x54, 0x4c, 0x56, 0x53, 0x5f,
	0x54, 0x4c, 0x56, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x52, 0x47, 0x42, 0x44, 0x45,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x53, 0x5f, 0x53, 0x52, 0x47, 0x42, 0x44, 0x45,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xa8, 0x02, 0x0a, 0x87, 0x02, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x53,
	0x50, 0x5f, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x4c, 0x56, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x43, 0x41,
	0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53,
	0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52,
	0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x52, 0x47, 0x42, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x53,
	0x5f, 0x53, 0x52, 0x47, 0x42, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50,
	0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f,
	0x52, 0x12, 0x8a, 0x02, 0x0a, 0xf8, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x53, 0x50, 0x5f, 0x54, 0x4c, 0x56,
	0x53, 0x5f, 0x54, 0x4c, 0x56, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x43, 0x41, 0x50, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54,
	0x4c, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x52, 0x47, 0x42,
	0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x53, 0x5f, 0x53, 0x52, 0x47, 0x42,
	0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10,
	0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0x91,
	0x05, 0x0a, 0xbe, 0x01, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x73, 0x70,
	0x66, 0x76, 0x32, 0x41, 0x72, 0x65, 0x61, 0x73, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x73, 0x64, 0x62,
	0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x73, 0x61, 0x73, 0x4c, 0x73, 0x61, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4c, 0x73, 0x61, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6c, 0x76, 0x73, 0x54, 0x6c, 0x76, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x6c, 0x76, 0x73, 0x54, 0x6c, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0xde, 0x01, 0x0a, 0xd9, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x41, 0x52, 0x45,
	0x41, 0x53, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4c, 0x53, 0x44, 0x42, 0x5f, 0x4c, 0x53, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x53,
	0x41, 0x53, 0x5f, 0x4c, 0x53, 0x41, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53, 0x41,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x44, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x4c, 0x56,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0xec, 0x01, 0x0a, 0xdb, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x41, 0x52,
	0x45, 0x41, 0x53, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4c, 0x53, 0x44, 0x42, 0x5f, 0x4c, 0x53,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x53, 0x41, 0x53, 0x5f, 0x4c, 0x53, 0x41, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53,
	0x41, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x44, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x4c,
	0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x2a, 0xa5, 0x04, 0x0a, 0x9c, 0x01, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x4f, 0x73, 0x70, 0x66, 0x76, 0x32, 0x41, 0x72, 0x65, 0x61, 0x73, 0x41, 0x72, 0x65, 0x61,
	0x4c, 0x73, 0x64, 0x62, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x73, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x4c, 0x73, 0x61, 0x73, 0x4c, 0x73, 0x61, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x4c, 0x73, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6c, 0x76, 0x73, 0x54, 0x6c, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0xb4, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x53, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4c, 0x53, 0x44, 0x42, 0x5f, 0x4c,
	0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x53, 0x41, 0x53, 0x5f, 0x4c, 0x53, 0x41, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c,
	0x53, 0x41, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0xc7, 0x01, 0x0a, 0xb6, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x53,
	0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4c, 0x53, 0x44, 0x42, 0x5f, 0x4c, 0x53, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x5f, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x53, 0x41, 0x53,
	0x5f, 0x4c, 0x53, 0x41, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53, 0x41, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x2a, 0xe1, 0x04, 0x0a, 0xae, 0x01,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x73, 0x70, 0x66, 0x76, 0x32, 0x41,
	0x72, 0x65, 0x61, 0x73, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x73, 0x64, 0x62, 0x4c, 0x73, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x73, 0x61, 0x73, 0x4c,
	0x73, 0x61, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4c, 0x73, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6c, 0x76,
	0x73, 0x54, 0x6c, 0x76, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x73, 0x53,
	0x75, 0x62, 0x54, 0x6c, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0xce,
	0x01, 0x0a, 0xc9, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x53, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x5f, 0x4c, 0x53, 0x44, 0x42, 0x5f, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x5f, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x53, 0x41, 0x53, 0x5f, 0x4c,
	0x53, 0x41, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53, 0x41, 0x5f, 0x54, 0x52, 0x41,
	0x46, 0x46, 0x49, 0x43, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x4c, 0x56, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x55,
	0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0xdc, 0x01, 0x0a, 0xcb, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x53, 0x5f,
	0x41, 0x52, 0x45, 0x41, 0x5f, 0x4c, 0x53, 0x44, 0x42, 0x5f, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x5f, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x53, 0x41, 0x53, 0x5f,
	0x4c, 0x53, 0x41, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53, 0x41, 0x5f, 0x54, 0x52,
	0x41, 0x46, 0x46, 0x49, 0x43, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x45, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x4c, 0x56, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53,
	0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x2a, 0xfc,
	0x04, 0x0a, 0xb7, 0x01, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x73, 0x70,
	0x66, 0x76, 0x32, 0x41, 0x72, 0x65, 0x61, 0x73, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x73, 0x64, 0x62,
	0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x73, 0x61, 0x73, 0x4c, 0x73, 0x61, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4c, 0x73, 0x61, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6c, 0x76, 0x73, 0x54, 0x6c, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x73, 0x53, 0x75, 0x62, 0x54,
	0x6c, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0xd7, 0x01, 0x0a, 0xd2,
	0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f,
	0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x53, 0x5f, 0x41, 0x52, 0x45, 0x41,
	0x5f, 0x4c, 0x53, 0x44, 0x42, 0x5f, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x4c,
	0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x53, 0x41, 0x53, 0x5f, 0x4c, 0x53, 0x41, 0x5f,
	0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53, 0x41, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49,
	0x43, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4c, 0x56,
	0x53, 0x5f, 0x54, 0x4c, 0x56, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54,
	0x4c, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0xe5, 0x01, 0x0a, 0xd4, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f,
	0x41, 0x52, 0x45, 0x41, 0x53, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4c, 0x53, 0x44, 0x42, 0x5f,
	0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x53, 0x41, 0x53, 0x5f, 0x4c, 0x53, 0x41, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45,
	0x4c, 0x53, 0x41, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x45, 0x4e, 0x47, 0x49, 0x4e,
	0x45, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x4c, 0x56, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x2a, 0xd0, 0x0c,
	0x0a, 0x9b, 0x01, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x54, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x64,
	0x73, 0x53, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xb3,
	0x01, 0x0a, 0xae, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x50, 0x41, 0x54, 0x48, 0x53,
	0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53,
	0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x49, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0xd7, 0x01, 0x0a, 0xbb, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x54,
	0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54,
	0x45, 0x50, 0x41, 0x54, 0x48, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45,
	0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54,
	0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x49,
	0x44, 0x53, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xcb,
	0x01, 0x0a, 0xb5, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x50, 0x41, 0x54, 0x48, 0x53,
	0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53,
	0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x49, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0xd7, 0x01, 0x0a,
	0xbb, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x50, 0x41, 0x54, 0x48, 0x53, 0x5f, 0x43,
	0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a,
	0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xcd, 0x01, 0x0a, 0xb6, 0x01, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53,
	0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44,
	0x41, 0x54, 0x45, 0x50, 0x41, 0x54, 0x48, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41,
	0x54, 0x45, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49,
	0x53, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x53, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xe1, 0x01, 0x0a, 0xc0, 0x01, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53,
	0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44,
	0x41, 0x54, 0x45, 0x50, 0x41, 0x54, 0x48, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41,
	0x54, 0x45, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49,
	0x53, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x53, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a,
	0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0xc3, 0x01, 0x0a, 0xb1, 0x01,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x49, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x41,
	0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x50, 0x41, 0x54, 0x48, 0x53, 0x5f, 0x43, 0x41, 0x4e,
	0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x2a, 0xce, 0x08, 0x0a, 0x61, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x54, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x73, 0x69, 0x64, 0x12, 0x72, 0x0a, 0x6e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x54,
	0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x53,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x7b, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x49, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x42, 0x53, 0x49, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41,
	0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x12, 0x8a, 0x01, 0x0a, 0x75, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x53, 0x49, 0x44,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a,
	0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x12, 0x96, 0x01, 0x0a, 0x7b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x53, 0x49, 0x44, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c,
	0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x8c, 0x01, 0x0a, 0x76, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49,
	0x45, 0x53, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x42, 0x53, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0xa1, 0x01, 0x0a, 0x80, 0x01, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x49,
	0x45, 0x53, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x42, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08,
	0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x82, 0x01, 0x0a,
	0x71, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x53, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x2a, 0xec, 0x01, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x12, 0x35, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53,
	0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0xf7, 0x91, 0xbe,
	0xae, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x12, 0x43, 0x0a, 0x31, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x43,
	0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e,
	0x10, 0x82, 0xd8, 0x91, 0xf7, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x56, 0x58, 0x4c, 0x41, 0x4e,
	0x2a, 0xec, 0x01, 0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x34, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x44, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0xdf, 0x8f, 0xa8, 0x96, 0x01,
	0x1a, 0x09, 0x82, 0x41, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x12, 0x42, 0x0a, 0x30, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x44,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10,
	0xaa, 0xd9, 0xd5, 0xe1, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x2a,
	0xf6, 0x02, 0x0a, 0x31, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x3b, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x41, 0x4c, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x54, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54,
	0x48, 0x4f, 0x50, 0x10, 0xe8, 0x8e, 0x96, 0x14, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x50, 0x45, 0x52,
	0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x12, 0x52, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x41,
	0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x45,
	0x52, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x88, 0xfa, 0xae, 0x46, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x12, 0x5a, 0x0a, 0x40,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x10, 0xca, 0x81, 0x83, 0x7c, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0xf8, 0x03, 0x0a, 0x31, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x12, 0x3b,
	0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x48, 0x0a, 0x37, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x32, 0x50, 0x32, 0x50, 0x10, 0xc0, 0xf7, 0xdd, 0x17, 0x1a, 0x08, 0x82, 0x41, 0x05,
	0x4c, 0x32, 0x50, 0x32, 0x50, 0x12, 0x48, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x56, 0x53, 0x49,
	0x10, 0xb0, 0xc9, 0xa2, 0x1f, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x32, 0x56, 0x53, 0x49, 0x12,
	0x48, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x56, 0x52, 0x46, 0x10, 0xbb, 0xf9, 0xf3, 0x4c, 0x1a,
	0x08, 0x82, 0x41, 0x05, 0x4c, 0x33, 0x56, 0x52, 0x46, 0x12, 0x47, 0x0a, 0x36, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x32, 0x4c, 0x33, 0x10, 0xad, 0xfa, 0xa7, 0xc3, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4c, 0x32,
	0x4c, 0x33, 0x12, 0x5f, 0x0a, 0x42, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0xb7, 0xc3, 0x9a, 0xe3, 0x01, 0x1a, 0x13,
	0x82, 0x41, 0x10, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x2a, 0xba, 0x01, 0x0a, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4f, 0x50, 0x45, 0x4e, 0x46, 0x4c, 0x4f, 0x57, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x33,
	0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x45, 0x4e,
	0x46, 0x4c, 0x4f, 0x57, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x45, 0x12, 0x3b, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x50, 0x45, 0x4e, 0x46, 0x4c, 0x4f, 0x57, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x10,
	0x02, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x4c, 0x4f, 0x4e, 0x45,
	0x2a, 0x77, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70,
	0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x2b, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x45,
	0x4e, 0x46, 0x4c, 0x4f, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54,
	0x43, 0x50, 0x10, 0x00, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x54, 0x43, 0x50, 0x12, 0x2b, 0x0a, 0x1f,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x45, 0x4e, 0x46, 0x4c,
	0x4f, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x4c, 0x53, 0x10,
	0x02, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x54, 0x4c, 0x53, 0x2a, 0xa3, 0x03, 0x0a, 0x2a, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x46, 0x49, 0x42, 0x45, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x12, 0x34, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50,
	0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x46, 0x49, 0x42, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3f,
	0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x46, 0x49, 0x42, 0x45,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x57, 0x52,
	0x53, 0x10, 0xf4, 0x9e, 0xe1, 0x0d, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x54, 0x57, 0x52, 0x53, 0x12,
	0x3f, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x46, 0x49, 0x42,
	0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x53,
	0x4d, 0x46, 0x10, 0xe1, 0xdd, 0x9f, 0x11, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x53, 0x53, 0x4d, 0x46,
	0x12, 0x3f, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x46, 0x49,
	0x42, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c,
	0x45, 0x41, 0x46, 0x10, 0xb2, 0xed, 0x8a, 0x31, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4c, 0x45, 0x41,
	0x46, 0x12, 0x3d, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x46,
	0x49, 0x42, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x44, 0x53, 0x46, 0x10, 0xd5, 0xc0, 0xe6, 0x51, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x44, 0x53, 0x46,
	0x12, 0x3d, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x46, 0x49,
	0x42, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54,
	0x57, 0x43, 0x10, 0x8c, 0x91, 0x89, 0x73, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x54, 0x57, 0x43, 0x2a,
	0x94, 0x03, 0x0a, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x47, 0x41,
	0x49, 0x4e, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c,
	0x49, 0x46, 0x49, 0x45, 0x52, 0x47, 0x41, 0x49, 0x4e, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x4c, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49,
	0x46, 0x49, 0x45, 0x52, 0x47, 0x41, 0x49, 0x4e, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x49,
	0x44, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x98, 0xd8, 0xc9,
	0x53, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x4d, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x12, 0x4e, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49,
	0x45, 0x52, 0x47, 0x41, 0x49, 0x4e, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x5f, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xb6, 0x9b, 0xd8, 0x72,
	0x1a, 0x12, 0x82, 0x41, 0x0f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x12, 0x4d, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49,
	0x45, 0x52, 0x47, 0x41, 0x49, 0x4e, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x5f,
	0x47, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x88, 0xbf, 0xd4, 0x8b, 0x01,
	0x1a, 0x11, 0x82, 0x41, 0x0e, 0x4c, 0x4f, 0x57, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x12, 0x51, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x47, 0x41, 0x49, 0x4e, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44,
	0x5f, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xf4, 0xef, 0xb6, 0xee,
	0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x47, 0x41, 0x49, 0x4e,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x2a, 0xf0, 0x02, 0x0a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c,
	0x49, 0x46, 0x49, 0x45, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x38, 0x0a, 0x34, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d,
	0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d,
	0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x57, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x10, 0xc5, 0xfd, 0xea, 0x1b, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x12, 0x53, 0x0a, 0x3b,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44,
	0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x94, 0xc5, 0x92, 0x1f,
	0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x47, 0x41, 0x49,
	0x4e, 0x12, 0x56, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x4f,
	0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x49,
	0x4e, 0x10, 0xbb, 0xcb, 0xcd, 0xe0, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x2a, 0xaa, 0x03, 0x0a, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41,
	0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x12, 0x38, 0x0a, 0x34,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x43, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49,
	0x46, 0x49, 0x45, 0x52, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49,
	0x46, 0x49, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x44, 0x46, 0x41, 0x10, 0xba, 0xd0,
	0xf7, 0x38, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x45, 0x44, 0x46, 0x41, 0x12, 0x57, 0x0a, 0x3d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x41, 0x4d, 0x41, 0x4e, 0x10, 0xa1, 0x98, 0xd6,
	0x58, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x42, 0x41, 0x43, 0x4b, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x52,
	0x41, 0x4d, 0x41, 0x4e, 0x12, 0x48, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49,
	0x45, 0x52, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49,
	0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x10, 0xec, 0x94,
	0xe3, 0xf6, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x12, 0x56,
	0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x4f, 0x50, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x41, 0x4d, 0x41, 0x4e, 0x10, 0xf9,
	0xbc, 0x8e, 0xfb, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44,
	0x5f, 0x52, 0x41, 0x4d, 0x41, 0x4e, 0x2a, 0xb1, 0x02, 0x0a, 0x30, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x54, 0x54,
	0x45, 0x4e, 0x55, 0x41, 0x54, 0x4f, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x3a, 0x0a, 0x36, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x41, 0x54, 0x54, 0x45, 0x4e, 0x55, 0x41, 0x54, 0x4f, 0x52, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x55, 0x41, 0x54, 0x4f, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x65, 0x0a, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x54, 0x54, 0x45,
	0x4e, 0x55, 0x41, 0x54, 0x4f, 0x52, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x54, 0x54,
	0x45, 0x4e, 0x55, 0x41, 0x54, 0x4f, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0xbe, 0xda, 0xa8, 0x53, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x5a,
	0x0a, 0x3f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x50, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x55, 0x41, 0x54, 0x4f, 0x52, 0x4f, 0x50, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x55, 0x41, 0x54, 0x4f, 0x52, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x10, 0x91, 0x97, 0xb2, 0x8f, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x2a, 0xde, 0x02, 0x0a, 0x23, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x47, 0x52, 0x41, 0x43, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x47, 0x52, 0x41, 0x43, 0x45, 0x4c, 0x53,
	0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x58, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x47, 0x52, 0x41, 0x43, 0x45, 0x4c, 0x53, 0x41,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0xbc, 0xe9,
	0xa3, 0x22, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x47, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x12, 0x64, 0x0a, 0x3e, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x47, 0x52, 0x41, 0x43, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0xaa, 0xa5,
	0xc5, 0x48, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x47, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x50, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x12, 0x48, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x47, 0x52, 0x41, 0x43, 0x45, 0x4c, 0x53, 0x41,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0xa7, 0xf2, 0xa6, 0x74, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x47,
	0x52, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x2a, 0xa8, 0x02, 0x0a, 0x23,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x4d, 0x41, 0x58, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x43, 0x4c,
	0x55, 0x44, 0x45, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x41, 0x58, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x5e, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x41, 0x58, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x55,
	0x42, 0x10, 0xb4, 0xf3, 0xb0, 0x17, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x4d, 0x41, 0x58, 0x5f, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x53, 0x54,
	0x55, 0x42, 0x12, 0x72, 0x0a, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x41, 0x58, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x32, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0xc0, 0x88, 0xfe, 0x52,
	0x1a, 0x24, 0x82, 0x41, 0x21, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x32, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x2a, 0xb9, 0x01, 0x0a, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4d, 0x41,
	0x58, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x12, 0x2d,
	0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x41, 0x58, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x63, 0x0a,
	0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4d, 0x41, 0x58, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54, 0x52, 0x49,
	0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x8f,
	0xa5, 0x8b, 0xcc, 0x01, 0x1a, 0x1c, 0x82, 0x41, 0x19, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x42, 0x4f,
	0x4f, 0x54, 0x2a, 0xc2, 0x06, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46,
	0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x4b, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x53, 0x42, 0x52, 0x5f, 0x4c,
	0x53, 0x41, 0x10, 0x9d, 0xd5, 0xcf, 0x3b, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x53, 0x55, 0x4d, 0x4d,
	0x41, 0x52, 0x59, 0x5f, 0x41, 0x53, 0x42, 0x52, 0x5f, 0x4c, 0x53, 0x41, 0x12, 0x63, 0x0a, 0x3b,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45,
	0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x5f, 0x4c, 0x53, 0x41, 0x10, 0x9e, 0xb2, 0xbc, 0x41,
	0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x5f, 0x4c, 0x53,
	0x41, 0x12, 0x5f, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x41, 0x53, 0x5f, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x5f, 0x4c, 0x53, 0x41, 0x10, 0x8a,
	0xbc, 0x8e, 0x59, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x41,
	0x53, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x5f, 0x4c,
	0x53, 0x41, 0x12, 0x57, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x50, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x53, 0x41, 0x10, 0xe1, 0xdd, 0xf6, 0x59,
	0x1a, 0x19, 0x82, 0x41, 0x16, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x50, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x53, 0x41, 0x12, 0x63, 0x0a, 0x3b, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53,
	0x50, 0x46, 0x56, 0x32, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f,
	0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x5f, 0x4c, 0x53, 0x41, 0x10, 0xcf, 0xae, 0xd4, 0x66, 0x1a,
	0x1f, 0x82, 0x41, 0x1c, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x5f, 0x4c, 0x53, 0x41,
	0x12, 0x3f, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53,
	0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53, 0x41, 0x10, 0xb9, 0xfb,
	0xff, 0x7b, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53,
	0x41, 0x12, 0x42, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x53, 0x41, 0x10,
	0x8a, 0xc3, 0xae, 0xa7, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x4c, 0x53, 0x41, 0x12, 0x54, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46,
	0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x53, 0x53, 0x41, 0x5f, 0x41, 0x53, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x53, 0x41, 0x10, 0x84, 0xe8, 0x87,
	0xd4, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4e, 0x53, 0x53, 0x41, 0x5f, 0x41, 0x53, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x53, 0x41, 0x12, 0x4a, 0x0a, 0x2e, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x53, 0x41, 0x10, 0xb2, 0xbf,
	0xce, 0xea, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x41, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x53, 0x41, 0x2a, 0xd2, 0x04, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f,
	0x53, 0x50, 0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53,
	0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x49, 0x47, 0x48,
	0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x39, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53,
	0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x49, 0x47, 0x48,
	0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0xce, 0x92,
	0xe8, 0x11, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x4e, 0x49, 0x54, 0x12, 0x39, 0x0a, 0x29, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0xaf, 0xf2, 0xeb, 0x1f, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x12, 0x3f, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50,
	0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x10, 0xbb, 0x82, 0xfd, 0x36, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x12, 0x3f, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53,
	0x50, 0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x57, 0x4f, 0x5f, 0x57, 0x41, 0x59, 0x10, 0x8a, 0xd4, 0xc1, 0x44, 0x1a, 0x0a, 0x82, 0x41,
	0x07, 0x54, 0x57, 0x4f, 0x5f, 0x57, 0x41, 0x59, 0x12, 0x3a, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x53, 0x50, 0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0xec, 0xb1, 0xe6, 0x9a, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x44, 0x4f, 0x57, 0x4e, 0x12, 0x40, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e,
	0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x8c, 0xdf, 0xbc, 0xb5, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x4c,
	0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x12, 0x42, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50,
	0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xe7, 0xd5, 0x97, 0xb7, 0x01, 0x1a, 0x0b, 0x82,
	0x41, 0x08, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x12, 0x40, 0x0a, 0x2c, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x58, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0xed, 0x9b, 0x96, 0xcc, 0x01,
	0x1a, 0x0a, 0x82, 0x41, 0x07, 0x45, 0x58, 0x53, 0x54, 0x41, 0x52, 0x54, 0x2a, 0xdf, 0x02, 0x0a,
	0x22, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x5b, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x4f,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0xd7,
	0x97, 0xfd, 0x0f, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x4f,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x12, 0x52,
	0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0xed, 0x8b, 0xc8, 0x9d, 0x01, 0x1a, 0x14, 0x82, 0x41,
	0x11, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x12, 0x5a, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x42, 0x52, 0x4f,
	0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x99,
	0xa7, 0xbd, 0xd6, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x4e, 0x4f, 0x4e, 0x5f, 0x42, 0x52, 0x4f,
	0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x2a, 0x85,
	0x04, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x53, 0x50, 0x46, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45,
	0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53,
	0x50, 0x46, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5d, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53,
	0x50, 0x46, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x90, 0xdb, 0x88, 0x09, 0x1a, 0x19, 0x82, 0x41, 0x16,
	0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x12, 0x43, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50,
	0x46, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x53, 0x41, 0x10, 0xf0, 0xdc, 0xdd, 0x5d, 0x1a, 0x0c, 0x82,
	0x41, 0x09, 0x47, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x53, 0x41, 0x12, 0x57, 0x0a, 0x38, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x45, 0x4e, 0x47, 0x49,
	0x4e, 0x45, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x86, 0xfa, 0xdc, 0x5e, 0x1a, 0x16, 0x82, 0x41,
	0x13, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x45,
	0x52, 0x49, 0x4e, 0x47, 0x12, 0x59, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4f,
	0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53, 0x50,
	0x46, 0x56, 0x32, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x10, 0x8c, 0xb8, 0xed, 0x65, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4f, 0x53, 0x50, 0x46, 0x56,
	0x32, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x12,
	0x55, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45,
	0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xd3, 0xf7, 0xc4, 0x75, 0x1a,
	0x15, 0x82, 0x41, 0x12, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x2a, 0xbf, 0x01, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x53,
	0x50, 0x46, 0x52, 0x49, 0x53, 0x52, 0x53, 0x49, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x54, 0x4c,
	0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x12, 0x35, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50,
	0x46, 0x52, 0x49, 0x53, 0x52, 0x53, 0x49, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x59, 0x0a,
	0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x52, 0x49, 0x53, 0x52, 0x53, 0x49, 0x44, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x53, 0x52, 0x5f,
	0x53, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x54, 0x4c, 0x56, 0x10, 0xfc, 0x8c,
	0x97, 0xc4, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x53, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x54, 0x4c, 0x56, 0x2a, 0x89, 0x07, 0x0a, 0x24, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x49,
	0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x57, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x49,
	0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xde, 0xb8,
	0xf0, 0x13, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x12, 0x79, 0x0a, 0x49, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d,
	0x55, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x41,
	0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0xc5, 0xee, 0xdf, 0x26, 0x1a, 0x27, 0x82, 0x41,
	0x24, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44,
	0x57, 0x49, 0x44, 0x54, 0x48, 0x12, 0x69, 0x0a, 0x41, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46,
	0x54, 0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44,
	0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0xda, 0xf0, 0xb2, 0x71, 0x1a,
	0x1f, 0x82, 0x41, 0x1c, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x55, 0x4e, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48,
	0x12, 0x4e, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53,
	0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x49, 0x4e,
	0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0xf1, 0x8c, 0x96, 0x83, 0x01, 0x1a, 0x11, 0x82,
	0x41, 0x0e, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x12, 0x64, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53,
	0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x49, 0x4e,
	0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44,
	0x54, 0x48, 0x10, 0xc3, 0xb0, 0xad, 0xaa, 0x01, 0x1a, 0x1c, 0x82, 0x41, 0x19, 0x54, 0x45, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x42, 0x41, 0x4e,
	0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x12, 0x52, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x50, 0x10,
	0xbe, 0x8d, 0xd0, 0xbe, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x50, 0x12, 0x46, 0x0a, 0x2f, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x44, 0x10, 0xa6, 0x8e,
	0xab, 0xdd, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x49, 0x44, 0x12, 0x54, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c,
	0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x49, 0x50, 0x10, 0xdd, 0x8c, 0xf9,
	0xdf, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x49, 0x50, 0x12, 0x4a, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xdd, 0xab,
	0xca, 0xeb, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x2a, 0xca, 0x04, 0x0a, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x53, 0x50, 0x46,
	0x54, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2d, 0x0a, 0x29,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5c, 0x0a, 0x3a, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0xbe, 0xe2, 0xc7, 0x16, 0x1a, 0x19,
	0x82, 0x41, 0x16, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x52, 0x0a, 0x35, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x45, 0x10, 0xc7, 0xb8, 0xed, 0x1c, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x54, 0x45, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x12, 0x3e, 0x0a,
	0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xd2, 0xa4, 0xc0,
	0x32, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x12, 0x60, 0x0a,
	0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x10, 0xef, 0xef,
	0x83, 0x71, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x12,
	0x4b, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x53, 0x41, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x10, 0x9e, 0xc4, 0xaf, 0xa6, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x54,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x12, 0x53, 0x0a, 0x35,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0xa0, 0xdd, 0xb2, 0xaf, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11,
	0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x2a, 0xc5, 0x01, 0x0a, 0x2f, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x55, 0x42, 0x54, 0x4c,
	0x56, 0x54, 0x59, 0x50, 0x45, 0x12, 0x39, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46,
	0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x55,
	0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x57, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53,
	0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x49,
	0x44, 0x10, 0x93, 0xb3, 0xb4, 0x9f, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x41, 0x44, 0x4a, 0x41,
	0x43, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x2a, 0xcb, 0x03, 0x0a, 0x40, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x50,
	0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x12, 0x4a,
	0x0a, 0x46, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5c, 0x0a, 0x49, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x50,
	0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x52, 0x4f, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x8a, 0xd8, 0x6f, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x45, 0x52, 0x4f, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x12, 0x61, 0x0a, 0x4b, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x50, 0x52, 0x45,
	0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x4f,
	0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0xe3, 0x83, 0xaa, 0x17, 0x1a, 0x0d, 0x82, 0x41,
	0x0a, 0x45, 0x52, 0x4f, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x12, 0x7a, 0x0a, 0x57, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x49, 0x44, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xd6, 0xf3, 0x95, 0xfb, 0x01, 0x1a, 0x19, 0x82, 0x41,
	0x16, 0x53, 0x49, 0x44, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x2a, 0x90, 0x03, 0x0a, 0x31, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f,
	0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x50, 0x52, 0x45,
	0x46, 0x49, 0x58, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x12, 0x3b, 0x0a,
	0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x60, 0x0a, 0x43, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x50,
	0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0xbd, 0xb2, 0xb5, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x53, 0x49, 0x44, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x12, 0x68, 0x0a, 0x47,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xc8, 0xf2, 0xfb, 0x60, 0x1a, 0x18, 0x82, 0x41,
	0x15, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x12, 0x52, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50,
	0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x49, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x10, 0xb1, 0xf0, 0xab, 0x71, 0x1a, 0x0d, 0x82, 0x41, 0x0a,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x2a, 0xeb, 0x02, 0x0a, 0x3b, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x4f, 0x50, 0x41, 0x54, 0x48, 0x53,
	0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x12, 0x45, 0x0a, 0x41, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58,
	0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x4f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x61, 0x0a, 0x48, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58,
	0x54, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x52,
	0x4f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xaa, 0xf9,
	0x90, 0xa2, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x12, 0x81, 0x01, 0x0a, 0x58, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46,
	0x56, 0x32, 0x45, 0x58, 0x54, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x42, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x45, 0x52, 0x4f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0xae, 0xcd, 0xcd, 0xef, 0x01, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x55, 0x4e, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x2a, 0xbd, 0x03, 0x0a, 0x27, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x49, 0x4e, 0x4b,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56,
	0x32, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x56, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53,
	0x50, 0x46, 0x56, 0x32, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x55, 0x42, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xcd, 0xb3, 0x80, 0x2d, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x53, 0x54,
	0x55, 0x42, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x12,
	0x4c, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55,
	0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x81, 0x93, 0x9d, 0x52, 0x1a, 0x0f, 0x82, 0x41,
	0x0c, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x12, 0x5a, 0x0a,
	0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54,
	0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xcf, 0xdd, 0xd1,
	0x74, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x12, 0x5d, 0x0a, 0x3c, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x49, 0x4e, 0x4b,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xd4, 0x86, 0x8c, 0xf6, 0x01, 0x1a,
	0x17, 0x82, 0x41, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x2a, 0x93, 0x04, 0x0a, 0x20, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x49, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x12, 0x2a, 0x0a,
	0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x52, 0x49, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x4f, 0x0a, 0x32, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x52, 0x49, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x52, 0x49,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x10,
	0xe5, 0x9d, 0xda, 0x2e, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x52, 0x49, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x12, 0x61, 0x0a, 0x3b, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x52, 0x49, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x52,
	0x49, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x41, 0x50,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0xec, 0x85, 0x8b, 0x3a, 0x1a, 0x1d,
	0x82, 0x41, 0x1a, 0x52, 0x49, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x12, 0x67, 0x0a,
	0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x52, 0x49, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x5f, 0x52, 0x49, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10,
	0xc2, 0xf2, 0xad, 0x6e, 0x1a, 0x20, 0x82, 0x41, 0x1d, 0x52, 0x49, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x12, 0x4c, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x49, 0x4c,
	0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x52, 0x49, 0x5f, 0x53, 0x52,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x10, 0x99, 0xf3, 0x9b, 0x97, 0x01,
	0x1a, 0x12, 0x82, 0x41, 0x0f, 0x52, 0x49, 0x5f, 0x53, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52,
	0x49, 0x54, 0x48, 0x4d, 0x12, 0x58, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x49, 0x4c, 0x53, 0x41,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x52, 0x49, 0x5f, 0x53, 0x52, 0x5f, 0x53,
	0x49, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x9f,
	0xe3, 0xbf, 0xbd, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x52, 0x49, 0x5f, 0x53, 0x52, 0x5f, 0x53,
	0x49, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x2a, 0xbd,
	0x03, 0x0a, 0x21, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x53, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x5c, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x53,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53,
	0x41, 0x5f, 0x53, 0x54, 0x55, 0x42, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x8d,
	0xdf, 0x92, 0x20, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c,
	0x53, 0x41, 0x5f, 0x53, 0x54, 0x55, 0x42, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x12,
	0x4a, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x53, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53, 0x41, 0x5f,
	0x50, 0x32, 0x50, 0x10, 0xa0, 0xae, 0xe7, 0x23, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53, 0x41, 0x5f, 0x50, 0x32, 0x50, 0x12, 0x62, 0x0a, 0x3c, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53, 0x41, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x49, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0xd4, 0xd8, 0xb8, 0x5c,
	0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53, 0x41, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x12,
	0x5d, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x53, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53, 0x41, 0x5f,
	0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x82, 0x87, 0xcb,
	0xa5, 0x01, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53,
	0x41, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x2a, 0xbf,
	0x01, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x52, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x22, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x53, 0x52, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x50,
	0x46, 0x10, 0xd9, 0xaa, 0x88, 0x75, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x53, 0x50, 0x46, 0x12, 0x40,
	0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x53, 0x50, 0x46, 0x10, 0xbf, 0x92, 0xe1, 0xcf,
	0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x53, 0x50, 0x46,
	0x2a, 0xac, 0x02, 0x0a, 0x29, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f,
	0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x45, 0x4e, 0x4f, 0x44, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x12, 0x33,
	0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x45, 0x4e, 0x4f, 0x44, 0x45, 0x41, 0x54, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x45, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x64, 0x0a, 0x41, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x45, 0x4e, 0x4f, 0x44, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0xbb, 0xd0, 0xc5, 0x51, 0x1a, 0x1a, 0x82,
	0x41, 0x17, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x64, 0x0a, 0x41, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x54, 0x45, 0x4e, 0x4f, 0x44, 0x45, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x85,
	0xeb, 0xa8, 0x57, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x2a,
	0x9a, 0x01, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73,
	0x70, 0x66, 0x76, 0x32, 0x53, 0x72, 0x53, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x56,
	0x32, 0x53, 0x52, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x2d, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x53, 0x52, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x12, 0x29, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x56, 0x32, 0x53, 0x52, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x49, 0x44, 0x10, 0x02, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x53, 0x49, 0x44, 0x2a, 0xf7, 0x04, 0x0a,
	0x23, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x4c, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x43, 0x45, 0x10, 0x91, 0xe4, 0xdb, 0x06, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x43,
	0x45, 0x12, 0x4c, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4c, 0x44, 0x50, 0x10, 0x80, 0xf0, 0xb9, 0x1e, 0x1a, 0x11, 0x82, 0x41,
	0x0e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4c, 0x44, 0x50, 0x12,
	0x4c, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0xf5, 0xfd, 0xe7, 0x42, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x12, 0x4c, 0x0a,
	0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x10, 0xf7, 0xfd, 0xe7, 0x42, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x12, 0x4b, 0x0a, 0x31, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x50,
	0x10, 0xff, 0xa5, 0xe1, 0xb6, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x50, 0x12, 0x4d, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0xec,
	0xae, 0x84, 0xcc, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x12, 0x4d, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0xdb, 0x92,
	0xa8, 0xf9, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x2a, 0x9c, 0x05, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x12,
	0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x3d, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x10, 0xd7,
	0xf2, 0xbb, 0x0b, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x12, 0x3d,
	0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x8a, 0xb2,
	0xbb, 0x12, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x50, 0x5f, 0x54, 0x43, 0x50, 0x12, 0x3f, 0x0a,
	0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x4c, 0x32, 0x54, 0x50, 0x10, 0xb3, 0x82,
	0x87, 0x27, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50, 0x5f, 0x4c, 0x32, 0x54, 0x50, 0x12, 0x3f,
	0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0xc7,
	0xa9, 0x9d, 0x61, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x12,
	0x3e, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x50, 0x49, 0x4d, 0x10, 0xe5,
	0xdf, 0x90, 0x82, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x50, 0x5f, 0x50, 0x49, 0x4d, 0x12,
	0x40, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x49, 0x47, 0x4d, 0x50, 0x10,
	0xfa, 0xcb, 0xa2, 0xf4, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50, 0x5f, 0x49, 0x47, 0x4d,
	0x50, 0x12, 0x40, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49,
	0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x49, 0x43, 0x4d,
	0x50, 0x10, 0xd6, 0xc0, 0xc6, 0xf4, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50, 0x5f, 0x49,
	0x43, 0x4d, 0x50, 0x12, 0x3e, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x55,
	0x44, 0x50, 0x10, 0xfa, 0xc7, 0xb1, 0xfa, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x50, 0x5f,
	0x55, 0x44, 0x50, 0x12, 0x40, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x52,
	0x53, 0x56, 0x50, 0x10, 0xea, 0xf6, 0xe0, 0xfc, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50,
	0x5f, 0x52, 0x53, 0x56, 0x50, 0x2a, 0xcc, 0x04, 0x0a, 0x22, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x12, 0x2c, 0x0a, 0x28,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41,
	0x47, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3d, 0x0a, 0x2a, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53,
	0x5f, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x57, 0x52, 0x10, 0xd2, 0xa4, 0xba, 0x03, 0x1a, 0x0a, 0x82,
	0x41, 0x07, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x57, 0x52, 0x12, 0x3d, 0x0a, 0x2a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f,
	0x54, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0xd1, 0xd9, 0xce, 0x23, 0x1a, 0x0a, 0x82, 0x41,
	0x07, 0x54, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x4b, 0x12, 0x3d, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x54,
	0x43, 0x50, 0x5f, 0x52, 0x53, 0x54, 0x10, 0xb1, 0x9b, 0xcf, 0x24, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x54, 0x43, 0x50, 0x5f, 0x52, 0x53, 0x54, 0x12, 0x3d, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x54, 0x43,
	0x50, 0x5f, 0x45, 0x43, 0x45, 0x10, 0xb3, 0x98, 0xaa, 0x63, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54,
	0x43, 0x50, 0x5f, 0x45, 0x43, 0x45, 0x12, 0x3d, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x54, 0x43, 0x50,
	0x5f, 0x50, 0x53, 0x48, 0x10, 0xa3, 0x8b, 0xe6, 0x64, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x43,
	0x50, 0x5f, 0x50, 0x53, 0x48, 0x12, 0x3d, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x54, 0x43, 0x50, 0x5f,
	0x53, 0x59, 0x4e, 0x10, 0xb4, 0x94, 0xdd, 0x74, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x43, 0x50,
	0x5f, 0x53, 0x59, 0x4e, 0x12, 0x3e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x46,
	0x49, 0x4e, 0x10, 0xed, 0x8e, 0x89, 0x93, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x43, 0x50,
	0x5f, 0x46, 0x49, 0x4e, 0x12, 0x3e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x55,
	0x52, 0x47, 0x10, 0x8e, 0x88, 0xc6, 0xec, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x43, 0x50,
	0x5f, 0x55, 0x52, 0x47, 0x2a, 0xcc, 0x01, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x49, 0x4d, 0x4d, 0x4f,
	0x44, 0x45, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x50, 0x49, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x49, 0x4d, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x43, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x49, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x49, 0x4d,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x49, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45,
	0x4e, 0x53, 0x45, 0x10, 0xa1, 0xe3, 0xdb, 0x88, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x50, 0x49,
	0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x4e, 0x53, 0x45, 0x12, 0x45, 0x0a, 0x29,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x49, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x50, 0x49, 0x4d, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x49, 0x4d, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x52, 0x53, 0x45, 0x10, 0xa0, 0xe5, 0x9f, 0xff, 0x01, 0x1a,
	0x12, 0x82, 0x41, 0x0f, 0x50, 0x49, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x50, 0x41,
	0x52, 0x53, 0x45, 0x2a, 0xd4, 0x01, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x4c, 0x49, 0x4e, 0x45, 0x43, 0x41,
	0x52, 0x44, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x00, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x12, 0x52, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x4c, 0x49, 0x4e, 0x45,
	0x43, 0x41, 0x52, 0x44, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x2a, 0xbb, 0x02, 0x0a, 0x2a, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x4f,
	0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x34, 0x0a, 0x30, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x4f, 0x50, 0x45,
	0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x47, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x95, 0xbe, 0xca, 0x1f, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x12, 0x44, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x4f, 0x50, 0x45, 0x52,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0xa4, 0xde,
	0x92, 0xa7, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x12, 0x48,
	0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0xc6, 0xad, 0x95, 0xd6, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x2a, 0xa5, 0x02, 0x0a, 0x22, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x46, 0x45, 0x43, 0x4d, 0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x2c, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x46, 0x45, 0x43, 0x4d, 0x4f, 0x44,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x45, 0x0a,
	0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x46, 0x45, 0x43, 0x4d, 0x4f, 0x44, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x9c, 0xe4, 0xf9, 0x35, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x46, 0x45, 0x43, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x12, 0x40, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x46,
	0x45, 0x43, 0x4d, 0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x41,
	0x55, 0x54, 0x4f, 0x10, 0xd4, 0xcb, 0xc6, 0xc4, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x46, 0x45,
	0x43, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x12, 0x48, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x46, 0x45, 0x43, 0x4d, 0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x43,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0xc5, 0x93, 0xf3, 0xd7, 0x01, 0x1a,
	0x0f, 0x82, 0x41, 0x0c, 0x46, 0x45, 0x43, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x2a, 0x86, 0x02, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x46, 0x45, 0x43, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x46, 0x45, 0x43, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x54, 0x0a, 0x36, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x46, 0x45, 0x43, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0xd3, 0xcf, 0xb7, 0xe2, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x46, 0x45,
	0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x12,
	0x58, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x46, 0x45, 0x43, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xe2, 0x94, 0xcd, 0xee,
	0x01, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x46, 0x45, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x2a, 0xc6, 0x0a, 0x0a, 0x32, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48,
	0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x12, 0x3c, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5d,
	0x0a, 0x42, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x96, 0x94, 0xb2, 0x08, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x4f, 0x50,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x12, 0x4b, 0x0a,
	0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x10, 0x95, 0xc0, 0xbe, 0x22, 0x1a,
	0x09, 0x82, 0x41, 0x06, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x12, 0x57, 0x0a, 0x3f, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48,
	0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x81, 0x9a,
	0xd1, 0x4a, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4c, 0x59, 0x12, 0x4b, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52,
	0x10, 0xb8, 0xc8, 0xf5, 0x4d, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52,
	0x12, 0x4d, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0xc9,
	0x81, 0xe4, 0x50, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x12,
	0x47, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xe3, 0x86, 0xca, 0x63, 0x1a,
	0x07, 0x82, 0x41, 0x04, 0x50, 0x4f, 0x52, 0x54, 0x12, 0x45, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52,
	0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x46,
	0x41, 0x4e, 0x10, 0xe5, 0xac, 0xb0, 0x76, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x46, 0x41, 0x4e, 0x12,
	0x51, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10,
	0xcf, 0xb7, 0xd1, 0x7f, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x42, 0x41, 0x43, 0x4b, 0x50, 0x4c, 0x41,
	0x4e, 0x45, 0x12, 0x50, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x43, 0x41, 0x52,
	0x44, 0x10, 0xae, 0x83, 0xc2, 0x8a, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4c, 0x49, 0x4e, 0x45,
	0x43, 0x41, 0x52, 0x44, 0x12, 0x64, 0x0a, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52,
	0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47,
	0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x10, 0xc1, 0xe3,
	0xb9, 0xa4, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x12, 0x4e, 0x0a, 0x3a, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48,
	0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x10, 0x82, 0xbe, 0xb1, 0xb7, 0x01, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x12, 0x5e, 0x0a, 0x42, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48,
	0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x10, 0x87, 0x8e, 0xbf, 0xdc, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x12, 0x46, 0x0a, 0x36, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48,
	0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x50, 0x55, 0x10, 0x80, 0xb6, 0xe5, 0xde, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x43,
	0x50, 0x55, 0x12, 0x56, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x52, 0x10, 0xb0, 0xae, 0xd8, 0xe6, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x12, 0x46, 0x0a, 0x36, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48,
	0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x52, 0x55, 0x10, 0xbb, 0xe1, 0xb0, 0xfe, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x46,
	0x52, 0x55, 0x2a, 0xc3, 0x02, 0x0a, 0x32, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x12, 0x3c, 0x0a, 0x38, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x4f,
	0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5f, 0x0a, 0x43, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x4f, 0x46, 0x54,
	0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0xf2,
	0xb1, 0xb4, 0x04, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x12, 0x6e, 0x0a, 0x4a, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x4f, 0x46,
	0x54, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x8e, 0x8b, 0xa3, 0xa7, 0x01, 0x1a, 0x1a, 0x82, 0x41,
	0x17, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x2a, 0xcd, 0x02, 0x0a, 0x28, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x52, 0x49, 0x53, 0x4f, 0x4e, 0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x54,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x4d, 0x0a, 0x35, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f,
	0x45, 0x51, 0x10, 0xb0, 0xff, 0x9b, 0x06, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x51, 0x12, 0x4e, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52,
	0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x4c,
	0x45, 0x10, 0xf3, 0xe3, 0x9b, 0xbe, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x4c, 0x45, 0x12, 0x4e, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52,
	0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x47,
	0x45, 0x10, 0xfe, 0xf9, 0x9b, 0xf6, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x47, 0x45, 0x2a, 0xce, 0x05, 0x0a, 0x28, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x54, 0x59, 0x50, 0x45, 0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x2f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x8a, 0xed, 0xa5,
	0x4e, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x12, 0x53, 0x0a, 0x38,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0xd5, 0xe1, 0xdf, 0x4f, 0x1a, 0x12, 0x82,
	0x41, 0x0f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x12, 0x3d, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c,
	0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53,
	0x50, 0x46, 0x10, 0xf0, 0xfb, 0x95, 0x59, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4f, 0x53, 0x50, 0x46,
	0x12, 0x3b, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x4d,
	0x10, 0xde, 0xce, 0xa2, 0x61, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x50, 0x49, 0x4d, 0x12, 0x3e, 0x0a,
	0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x10, 0xf8,
	0x90, 0x90, 0x93, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x53, 0x49, 0x53, 0x12, 0x3e, 0x0a,
	0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x47, 0x4d, 0x50, 0x10, 0xb3,
	0x84, 0xd9, 0xb4, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x47, 0x4d, 0x50, 0x12, 0x3c, 0x0a,
	0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x47, 0x50, 0x10, 0xab, 0x83,
	0x9b, 0xd0, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x42, 0x47, 0x50, 0x12, 0x5a, 0x0a, 0x3b, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4c, 0x59,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0xce, 0x82, 0xeb, 0xdc, 0x01,
	0x1a, 0x15, 0x82, 0x41, 0x12, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4c, 0x59, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x12, 0x40, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x33, 0x10, 0xe3, 0x81, 0x95, 0xe0, 0x01, 0x1a,
	0x08, 0x82, 0x41, 0x05, 0x4f, 0x53, 0x50, 0x46, 0x33, 0x2a, 0x9e, 0x04, 0x0a, 0x18, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x54, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x53, 0x54, 0x45, 0x53, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x1d, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x53, 0x54, 0x45,
	0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x01, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x12, 0x2c, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x53, 0x54, 0x45, 0x53, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x10, 0x02, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x49,
	0x43, 0x4d, 0x50, 0x36, 0x12, 0x3e, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x53, 0x54, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10,
	0x03, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x54, 0x41, 0x4d, 0x50, 0x12, 0x40, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x53, 0x54, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x10, 0x04, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x12, 0x28, 0x0a, 0x1c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x53, 0x54, 0x45, 0x53, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x05, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x54, 0x43, 0x50,
	0x12, 0x28, 0x0a, 0x1c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x52,
	0x4f, 0x42, 0x45, 0x53, 0x54, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x44, 0x50,
	0x10, 0x06, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x55, 0x44, 0x50, 0x12, 0x3c, 0x0a, 0x26, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x53, 0x54, 0x45,
	0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x54, 0x41, 0x4d, 0x50, 0x10, 0x07, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x55, 0x44, 0x50, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x12, 0x32, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x53, 0x54, 0x45, 0x53, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x08, 0x1a,
	0x0b, 0x82, 0x41, 0x08, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x3c, 0x0a, 0x26,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x53,
	0x54, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x09, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x2a, 0xa4, 0x01, 0x0a, 0x1a, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x51, 0x4f, 0x53, 0x51, 0x55, 0x45, 0x55, 0x45, 0x42,
	0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x2e, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x51, 0x4f, 0x53,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x53, 0x48,
	0x41, 0x50, 0x45, 0x10, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x53, 0x48, 0x41, 0x50, 0x45, 0x12,
	0x30, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x51, 0x4f, 0x53,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x45, 0x10, 0x02, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x45, 0x2a, 0xf2, 0x01, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x51, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x51, 0x4f, 0x53, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x51, 0x4f, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x51, 0x4f, 0x53, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3d,
	0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x51, 0x4f, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x51, 0x4f, 0x53, 0x51, 0x55, 0x45, 0x55, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x10, 0xe1, 0xde, 0xf5, 0x31, 0x1a,
	0x0c, 0x82, 0x41, 0x09, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x12, 0x33, 0x0a,
	0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x51, 0x4f, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x51, 0x4f, 0x53, 0x51, 0x55, 0x45, 0x55, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x52, 0x45, 0x44, 0x10, 0xeb, 0xa8, 0xdd, 0x3c, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x57, 0x52,
	0x45, 0x44, 0x12, 0x32, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x51, 0x4f, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x51, 0x4f, 0x53, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x10, 0xe0, 0xfa, 0xe6, 0xac, 0x01, 0x1a, 0x06,
	0x82, 0x41, 0x03, 0x52, 0x45, 0x44, 0x2a, 0x82, 0x02, 0x0a, 0x22, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x51, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x51, 0x4f, 0x53,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2c, 0x0a,
	0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x51, 0x4f, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x51, 0x4f, 0x53, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x54, 0x0a, 0x35, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x51, 0x4f, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x51, 0x4f, 0x53, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x10, 0xc7, 0xea, 0xe7, 0x99, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x4f,
	0x4e, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x12, 0x58, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x51,
	0x4f, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x51, 0x4f, 0x53, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0xff, 0x8c, 0xb9,
	0xcc, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x54, 0x57, 0x4f, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x2a, 0xda, 0x02, 0x0a, 0x21,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70,
	0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52,
	0x49, 0x42, 0x42, 0x47, 0x50, 0x41, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x37,
	0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42,
	0x47, 0x50, 0x41, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x53, 0x45, 0x51, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x41, 0x53, 0x5f, 0x53, 0x45, 0x51, 0x12, 0x37, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x41, 0x53, 0x50, 0x41, 0x54,
	0x48, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x02, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x41, 0x53, 0x5f, 0x53, 0x45, 0x54,
	0x12, 0x4f, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49,
	0x42, 0x42, 0x47, 0x50, 0x41, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x5f,
	0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x41,
	0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43,
	0x45, 0x12, 0x45, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52,
	0x49, 0x42, 0x42, 0x47, 0x50, 0x41, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x41, 0x53, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x2a, 0xf7, 0x01, 0x0a, 0x21, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x42, 0x67, 0x70,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42,
	0x47, 0x50, 0x42, 0x47, 0x50, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x25, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x42,
	0x47, 0x50, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x47, 0x50, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x49, 0x47, 0x50, 0x12, 0x31,
	0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42,
	0x47, 0x50, 0x42, 0x47, 0x50, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x47, 0x50, 0x10, 0x02, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x45, 0x47,
	0x50, 0x12, 0x3f, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52,
	0x49, 0x42, 0x42, 0x47, 0x50, 0x42, 0x47, 0x50, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x03, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x2a, 0xb6, 0x06, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x4e,
	0x4f, 0x54, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x42, 0x45, 0x53, 0x54, 0x50, 0x41,
	0x54, 0x48, 0x12, 0x35, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x4e, 0x4f,
	0x54, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x42, 0x45, 0x53, 0x54, 0x50, 0x41, 0x54,
	0x48, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x56, 0x0a, 0x3b, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x42, 0x45, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0xd6, 0xa0, 0xa1, 0x07, 0x1a, 0x12, 0x82,
	0x41, 0x0f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x12, 0x58, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52,
	0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x4e, 0x4f, 0x54,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x42, 0x45, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x5f, 0x4c, 0x4f, 0x57, 0x45,
	0x52, 0x10, 0xab, 0xa2, 0xd8, 0x28, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x12, 0x5e, 0x0a, 0x3f, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x42, 0x45, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48,
	0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x52, 0x10, 0xd0,
	0xec, 0x84, 0x33, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f,
	0x43, 0x4f, 0x53, 0x54, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x52, 0x12, 0x4c, 0x0a, 0x36, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x42, 0x45, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x44, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x45, 0x52, 0x10, 0xc2, 0x9e, 0xfc, 0x49, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4d,
	0x45, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x52, 0x12, 0x55, 0x0a, 0x3a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x42, 0x45, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x41, 0x53, 0x5f, 0x50, 0x41, 0x54, 0x48,
	0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x45, 0x52, 0x10, 0xb0, 0xe9, 0xb3, 0x84, 0x01, 0x1a, 0x11, 0x82,
	0x41, 0x0e, 0x41, 0x53, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x45, 0x52,
	0x12, 0x59, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49,
	0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x4e, 0x4f, 0x54, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x42, 0x45, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44,
	0x10, 0xc3, 0x87, 0xf6, 0x8e, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x48, 0x49, 0x47, 0x48, 0x45,
	0x52, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x12, 0x5f, 0x0a, 0x3f, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x42, 0x45, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45,
	0x52, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0xd7,
	0xfc, 0xc4, 0xa0, 0x01, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x48, 0x49, 0x47, 0x48, 0x45, 0x52, 0x5f,
	0x50, 0x45, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x5d, 0x0a, 0x3e,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x42, 0x45, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4f, 0x52, 0x49, 0x47,
	0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x52, 0x10, 0xdb,
	0x82, 0xae, 0xa2, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x52, 0x2a, 0xc5, 0x01, 0x0a, 0x29,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x12, 0x33, 0x0a, 0x2f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x63,
	0x0a, 0x40, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x10, 0xd8, 0x80, 0x99, 0x85, 0x01, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x2a, 0xbe, 0x03, 0x0a, 0x27, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x12,
	0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x53, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0xe8, 0xa0,
	0xb8, 0x86, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x41, 0x53, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x12, 0x59, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x41, 0x54, 0x4f, 0x52, 0x10, 0xa1, 0xde, 0x91, 0x9d, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54,
	0x4f, 0x52, 0x12, 0x5d, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f,
	0x4f, 0x50, 0x10, 0x80, 0xc1, 0xad, 0xad, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x4f,
	0x50, 0x12, 0x51, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52,
	0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x10, 0xd6, 0xb7, 0xd2, 0xc0,
	0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x45, 0x44, 0x2a, 0xdf, 0x04, 0x0a, 0x32, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x12, 0x3c, 0x0a, 0x38, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53,
	0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5d, 0x0a, 0x42, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x52, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0xee, 0xd3, 0xc3, 0x20, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x53, 0x52, 0x54, 0x45, 0x5f, 0x50, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x12, 0x60, 0x0a, 0x43, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x52, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x44, 0x10,
	0x85, 0xc8, 0x9d, 0xae, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x53, 0x52, 0x54, 0x45, 0x5f, 0x42,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x44, 0x12, 0x6c, 0x0a, 0x49, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0xed, 0xfd, 0xf9, 0xc2, 0x01, 0x1a, 0x19, 0x82,
	0x41, 0x16, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f,
	0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x12, 0x62, 0x0a, 0x44, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x52, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x9b, 0xb9, 0xf5, 0xe0, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x53, 0x52, 0x54, 0x45, 0x5f,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x58, 0x0a, 0x3f,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50,
	0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10,
	0x86, 0xf2, 0xe5, 0xeb, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x2a, 0xc5, 0x01, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x12, 0x36, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x5d, 0x0a, 0x3f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e,
	0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x52, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x10, 0xe9, 0xb1, 0xa7, 0x5a, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x53, 0x52, 0x54, 0x45,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x2a, 0xc2,
	0x01, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x35, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x10, 0x00, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x12, 0x4a, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x10, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x2a, 0xc8, 0x01, 0x0a, 0x34, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x38,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x53, 0x45, 0x54, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41,
	0x4e, 0x59, 0x12, 0x4a, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x52, 0x45, 0x53, 0x54,
	0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52,
	0x54, 0x10, 0x02, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x2a, 0xe6,
	0x01, 0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a,
	0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x53, 0x45, 0x54,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10,
	0x00, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4e, 0x59, 0x12, 0x3a, 0x0a, 0x2e, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x1a, 0x06, 0x82,
	0x41, 0x03, 0x41, 0x4c, 0x4c, 0x12, 0x40, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x10, 0x03, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x2a, 0xf2, 0x01, 0x0a, 0x27, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x49, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x01,
	0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x12, 0x49, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52,
	0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x2a, 0x95, 0x03, 0x0a,
	0x75, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x84, 0x01, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x42, 0x47, 0x50, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x4d, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x82, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x42, 0x47,
	0x50, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x45, 0x54, 0x4d, 0x45, 0x44, 0x5f, 0x49, 0x47, 0x50, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41,
	0x03, 0x49, 0x47, 0x50, 0x2a, 0xa3, 0x03, 0x0a, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x12, 0x8d, 0x01, 0x0a, 0x88, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x42, 0x47,
	0x50, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x45, 0x54, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x87, 0x01, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x42, 0x47,
	0x50, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x45, 0x54, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10,
	0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x53, 0x45, 0x4c, 0x46, 0x2a, 0xd2, 0x01, 0x0a, 0x27, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x72, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x52, 0x44, 0x41, 0x54, 0x41, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x2c, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x52, 0x44, 0x41, 0x54, 0x41, 0x50, 0x4c, 0x41, 0x4e, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x4d, 0x50, 0x4c, 0x53, 0x12, 0x39, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x52, 0x44, 0x41, 0x54, 0x41, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x2a,
	0xf4, 0x01, 0x0a, 0x22, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x53, 0x74, 0x70, 0x47, 0x75, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45,
	0x53, 0x54, 0x50, 0x47, 0x55, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x53, 0x54,
	0x50, 0x47, 0x55, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10,
	0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x52, 0x4f, 0x4f, 0x54, 0x12, 0x34, 0x0a, 0x27, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x54, 0x52, 0x45, 0x45, 0x53, 0x54, 0x50, 0x47, 0x55, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4c, 0x4f, 0x4f, 0x50,
	0x12, 0x34, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50,
	0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x53, 0x54, 0x50, 0x47, 0x55, 0x41,
	0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x2a, 0xbc, 0x01, 0x0a, 0x21, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65,
	0x65, 0x53, 0x74, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x27,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x53, 0x54, 0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x25, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54,
	0x52, 0x45, 0x45, 0x53, 0x54, 0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x32, 0x50, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x50, 0x32, 0x50, 0x12, 0x37, 0x0a, 0x28,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x53, 0x54, 0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x44, 0x2a, 0xbb, 0x02, 0x0a, 0x26, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x54, 0x50, 0x45, 0x44, 0x47, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50,
	0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53,
	0x54, 0x50, 0x45, 0x44, 0x47, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x49, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x53, 0x54, 0x50, 0x45, 0x44, 0x47, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x44, 0x47,
	0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xc9, 0xba, 0xcf, 0x7d, 0x1a, 0x0e, 0x82,
	0x41, 0x0b, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x46, 0x0a,
	0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x50, 0x45,
	0x44, 0x47, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x41, 0x55, 0x54,
	0x4f, 0x10, 0xd9, 0xa2, 0xc4, 0xc6, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x45, 0x44, 0x47, 0x45,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x12, 0x4c, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x50, 0x45, 0x44, 0x47, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x45, 0x44, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xa8, 0xac, 0xca,
	0xd8, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x2a, 0xe9, 0x02, 0x0a, 0x26, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x53, 0x54, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x4f, 0x4c, 0x45, 0x12, 0x30,
	0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x47, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50,
	0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53,
	0x54, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0xf3, 0xb3, 0xb4, 0x1e, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x44,
	0x45, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x12, 0x3b, 0x0a, 0x2b, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54,
	0x52, 0x45, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0xf9, 0xe4, 0xe6, 0x5d, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x52, 0x4f, 0x4f, 0x54, 0x12, 0x3f, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0xbf, 0xfa, 0x88, 0x73, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x12, 0x46, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x10, 0xf1, 0xf3, 0xed, 0xf7,
	0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x2a,
	0xc3, 0x03, 0x0a, 0x27, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53,
	0x54, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x12, 0x31, 0x0a, 0x2d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x54, 0x52, 0x45, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x46,
	0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0xa3, 0xad, 0xcb, 0x23, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x4c, 0x49, 0x53,
	0x54, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x12, 0x44, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x84, 0xbb, 0xb2, 0x3a, 0x1a,
	0x0b, 0x82, 0x41, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x12, 0x45, 0x0a, 0x30,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0xb2, 0xde, 0xec, 0xa1, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4c, 0x45, 0x41, 0x52, 0x4e,
	0x49, 0x4e, 0x47, 0x12, 0x49, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x53, 0x54, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x8d, 0xd1, 0xdd, 0xc8, 0x01, 0x1a,
	0x0d, 0x82, 0x41, 0x0a, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x12, 0x45,
	0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0xb1, 0xd2, 0xa3, 0xd3, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x49, 0x4e, 0x47, 0x2a, 0x9f, 0x02, 0x0a, 0x26, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x54, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50,
	0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53,
	0x54, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x3b, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x53, 0x50, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x53, 0x54, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4d, 0x53, 0x54,
	0x50, 0x10, 0xa7, 0x9e, 0xf5, 0x04, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4d, 0x53, 0x54, 0x50, 0x12,
	0x3c, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54,
	0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x53, 0x54, 0x50, 0x10, 0xea,
	0xb3, 0xc7, 0xad, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x52, 0x53, 0x54, 0x50, 0x12, 0x48, 0x0a,
	0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x50, 0x41, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x54, 0x52, 0x45, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x50, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x41, 0x50, 0x49, 0x44, 0x5f, 0x50, 0x56,
	0x53, 0x54, 0x10, 0x85, 0x88, 0xfc, 0xe1, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x52, 0x41, 0x50,
	0x49, 0x44, 0x5f, 0x50, 0x56, 0x53, 0x54, 0x2a, 0x92, 0x03, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x45, 0x6e, 0x6c, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x52, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x45, 0x4e, 0x4c, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x54, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x52,
	0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x45, 0x4e, 0x4c, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x50,
	0x55, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x54, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x53, 0x52, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x45, 0x4e,
	0x4c, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x02,
	0x1a, 0x1a, 0x82, 0x41, 0x17, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x56, 0x0a, 0x35,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x52, 0x54, 0x45, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x45, 0x4e, 0x4c, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x53,
	0x48, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x50, 0x55, 0x53, 0x48,
	0x5f, 0x49, 0x50, 0x56, 0x34, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x46, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x53, 0x52, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x45, 0x4e, 0x4c, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x4e, 0x4f, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x2a, 0xfb, 0x03, 0x0a,
	0x27, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x72, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x53, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x52, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x53, 0x52, 0x54, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x53, 0x4c, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x30, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x52, 0x54, 0x45, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x53, 0x52, 0x54, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x53, 0x4c,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x53, 0x4c, 0x10,
	0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x53, 0x4c, 0x12, 0x47,
	0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x52, 0x54, 0x45,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x53, 0x52, 0x54, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x53, 0x4c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x57,
	0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x5a, 0x45, 0x52, 0x4f,
	0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x12, 0x5d, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x52, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x53,
	0x52, 0x54, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x53, 0x4c, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x52,
	0x45, 0x53, 0x4f, 0x4c, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0x19, 0x82, 0x41, 0x16,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x4f,
	0x4c, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x5d, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x53, 0x52, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x53, 0x52,
	0x54, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x53, 0x4c, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x52, 0x45,
	0x53, 0x4f, 0x4c, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x4f, 0x4c,
	0x56, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x53, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x53, 0x52, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x53, 0x52, 0x54,
	0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x53, 0x4c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x10, 0x05, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x2a, 0x80, 0x02, 0x0a, 0x24, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x53, 0x72, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x53, 0x52, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x53, 0x52, 0x54, 0x45, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x53, 0x52, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x53, 0x52, 0x54, 0x45, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x43, 0x45, 0x50,
	0x10, 0x0b, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x50, 0x43, 0x45, 0x50, 0x12, 0x34, 0x0a, 0x28, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x52, 0x54, 0x45, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x53, 0x52, 0x54, 0x45, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x47, 0x50, 0x10, 0x15, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x42, 0x47,
	0x50, 0x12, 0x3a, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53,
	0x52, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x53, 0x52, 0x54, 0x45, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x10, 0x1f, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x2a, 0x99, 0x0a,
	0x0a, 0x25, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46,
	0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47,
	0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x50, 0x52, 0x49, 0x56, 0x10, 0x9f, 0xcb, 0x79, 0x1a, 0x0b,
	0x82, 0x41, 0x08, 0x41, 0x55, 0x54, 0x48, 0x50, 0x52, 0x49, 0x56, 0x12, 0x3a, 0x0a, 0x2a, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c,
	0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0xaf, 0x9a, 0xcc, 0x34, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x4d, 0x41, 0x49, 0x4c, 0x12, 0x3e, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x35, 0x10, 0xd0, 0xad, 0xf3, 0x5d, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x35, 0x12, 0x3e, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x34, 0x10, 0xd1, 0xad, 0xf3, 0x5d, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x34, 0x12, 0x3e, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x37, 0x10, 0xd2, 0xad, 0xf3, 0x5d, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x37, 0x12, 0x3e, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x36, 0x10, 0xd3, 0xad, 0xf3, 0x5d, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x36, 0x12, 0x3e, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x31, 0x10, 0xd4, 0xad, 0xf3, 0x5d, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x31, 0x12, 0x3e, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x30, 0x10, 0xd5, 0xad, 0xf3, 0x5d, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x30, 0x12, 0x3e, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x33, 0x10, 0xd6, 0xad, 0xf3, 0x5d, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x33, 0x12, 0x3e, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x32, 0x10, 0xd7, 0xad, 0xf3, 0x5d, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x32, 0x12, 0x38, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x9f, 0xa4, 0xa4, 0x78, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4c,
	0x4c, 0x12, 0x41, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c,
	0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x4f,
	0x4c, 0x45, 0x10, 0xfd, 0xb9, 0xb7, 0xa0, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x43, 0x4f, 0x4e,
	0x53, 0x4f, 0x4c, 0x45, 0x12, 0x39, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53,
	0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x54,
	0x50, 0x10, 0xfc, 0xb9, 0x8c, 0xa7, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x4e, 0x54, 0x50, 0x12,
	0x3f, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47,
	0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x10,
	0xad, 0xa2, 0xe4, 0xbd, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x12, 0x3d, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f,
	0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x10,
	0xc3, 0xc9, 0xf4, 0xe3, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x41, 0x55, 0x44, 0x49, 0x54, 0x12,
	0x3b, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47,
	0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x9c, 0xb8,
	0x85, 0xe4, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x41, 0x55, 0x54, 0x48, 0x12, 0x4d, 0x0a, 0x33,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x41, 0x45,
	0x4d, 0x4f, 0x4e, 0x10, 0xc4, 0x9d, 0x96, 0xee, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x41, 0x45, 0x4d, 0x4f, 0x4e, 0x12, 0x3f, 0x0a, 0x2c, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c,
	0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x10, 0xe9, 0xab, 0xd5, 0xf2,
	0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x12, 0x3b, 0x0a, 0x2a,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xcb, 0xfc, 0xe7, 0xf9, 0x01,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x55, 0x53, 0x45, 0x52, 0x2a, 0xd4, 0x04, 0x0a, 0x25, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59,
	0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53,
	0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x45, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x12, 0x39, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x12, 0x3f, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53,
	0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x12, 0x39, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59,
	0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x04, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x3d,
	0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x12, 0x3b, 0x0a,
	0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x06, 0x1a,
	0x09, 0x82, 0x41, 0x06, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x12, 0x49, 0x0a, 0x33, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f,
	0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x07, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x12, 0x39, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47,
	0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x45, 0x42, 0x55, 0x47, 0x10, 0x08, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47,
	0x2a, 0x86, 0x01, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x54, 0x50, 0x41, 0x55, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x4e, 0x54, 0x50, 0x41, 0x55, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x40, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4e, 0x54, 0x50, 0x41, 0x55,
	0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x4d, 0x44, 0x35, 0x10, 0x8b, 0xa4, 0xf7, 0x43, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x4e, 0x54, 0x50,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x44, 0x35, 0x2a, 0xca, 0x02, 0x0a, 0x2a, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49,
	0x4e, 0x47, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x44, 0x41, 0x54, 0x41, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x45,
	0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x45, 0x4c, 0x45,
	0x4d, 0x45, 0x54, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x44, 0x41, 0x54, 0x41, 0x45, 0x4e,
	0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x45, 0x4e, 0x43,
	0x5f, 0x58, 0x4d, 0x4c, 0x10, 0xa1, 0x84, 0xbc, 0x61, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x45, 0x4e,
	0x43, 0x5f, 0x58, 0x4d, 0x4c, 0x12, 0x4b, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x44, 0x41, 0x54, 0x41, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x33, 0x10, 0x97,
	0xcb, 0xd8, 0x66, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x45, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x33, 0x12, 0x52, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x44, 0x41,
	0x54, 0x41, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x45, 0x4e, 0x43, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x45, 0x54, 0x46, 0x10, 0xb3,
	0xf0, 0xcd, 0xd0, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x45, 0x4e, 0x43, 0x5f, 0x4a, 0x53, 0x4f,
	0x4e, 0x5f, 0x49, 0x45, 0x54, 0x46, 0x2a, 0xf9, 0x03, 0x0a, 0x26, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x5b, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x5f, 0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52,
	0x50, 0x43, 0x10, 0xb8, 0x81, 0xac, 0x0e, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x5f, 0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x50, 0x43,
	0x12, 0x48, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x5f, 0x53, 0x53, 0x48, 0x10, 0xcf, 0x80, 0xd5, 0xa7, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x53, 0x48, 0x12, 0x52, 0x0a, 0x36, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52,
	0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4a, 0x53, 0x4f, 0x4e,
	0x5f, 0x52, 0x50, 0x43, 0x10, 0x89, 0xa2, 0xa0, 0xbe, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x50, 0x43, 0x12, 0x56,
	0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x45, 0x4c, 0x45,
	0x4d, 0x45, 0x54, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x54, 0x48, 0x52, 0x49, 0x46, 0x54, 0x5f, 0x52, 0x50, 0x43, 0x10, 0xea, 0x89, 0xe3, 0xc4, 0x01,
	0x1a, 0x14, 0x82, 0x41, 0x11, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x54, 0x48, 0x52, 0x49,
	0x46, 0x54, 0x5f, 0x52, 0x50, 0x43, 0x12, 0x4a, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x10, 0xcb, 0xb7, 0xfa,
	0xeb, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52,
	0x50, 0x43, 0x2a, 0x98, 0x02, 0x0a, 0x26, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x45, 0x52, 0x4d, 0x49,
	0x4e, 0x41, 0x4c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x3e, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x45, 0x52,
	0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x12,
	0x40, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x45, 0x52,
	0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x12, 0x3a, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54,
	0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x54, 0x10, 0x03, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x2a, 0xee, 0x01,
	0x0a, 0x28, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x2d, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x4d, 0x4f,
	0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x12, 0x42, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x4d, 0x4f, 0x44, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x1a, 0x0b, 0x82,
	0x41, 0x08, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x42, 0x0a, 0x31, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x4d, 0x4f,
	0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x10,
	0x03, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x2a, 0xb1,
	0x02, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35,
	0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x4c, 0x49, 0x4e, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x43, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x4c, 0x49, 0x4e, 0x45,
	0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x12, 0x45, 0x0a, 0x34, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x4c, 0x49, 0x4e, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x12, 0x3f, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x4c, 0x49, 0x4e, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x4f, 0x4e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4d, 0x41, 0x49,
	0x4e, 0x54, 0x2a, 0xcd, 0x01, 0x0a, 0x35, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x4f, 0x52, 0x54, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x12, 0x3f, 0x0a, 0x3b,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x4c, 0x49, 0x4e, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x50, 0x4f, 0x52, 0x54, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x53, 0x0a,
	0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x4c, 0x49, 0x4e, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x50, 0x4f, 0x52, 0x54, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10,
	0x83, 0x9c, 0xf8, 0xe7, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x2a, 0xf1, 0x01, 0x0a, 0x29, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x50, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53,
	0x12, 0x33, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x4c, 0x49, 0x4e, 0x45, 0x50, 0x52, 0x4f, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x50, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x44, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x4c, 0x49, 0x4e, 0x45,
	0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x50, 0x53, 0x50, 0x41, 0x54,
	0x48, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0xc6, 0xcb, 0xf5, 0x29, 0x1a,
	0x0a, 0x82, 0x41, 0x07, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x12, 0x49, 0x0a, 0x33, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x4c, 0x49, 0x4e, 0x45, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x50, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41,
	0x52, 0x59, 0x10, 0xca, 0x8b, 0x99, 0x8a, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x53, 0x45, 0x43,
	0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x2a, 0xfd, 0x0f, 0x0a, 0x27, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x4c, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x5f, 0x41, 0x4f, 0x43, 0x10, 0xb3, 0xc8,
	0xb2, 0x19, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x5f,
	0x41, 0x4f, 0x43, 0x12, 0x58, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x54, 0x48, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x57, 0x44, 0x4d,
	0x34, 0x10, 0x8e, 0xb3, 0x9e, 0x1a, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x45, 0x54, 0x48, 0x5f, 0x31,
	0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x57, 0x44, 0x4d, 0x34, 0x12, 0x50, 0x0a,
	0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x47,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x10, 0xbe, 0xdf, 0xa8, 0x1f, 0x1a, 0x11, 0x82, 0x41,
	0x0e, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x12,
	0x56, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x31,
	0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x4c, 0x52, 0x34, 0x10, 0x86, 0xed, 0xed,
	0x25, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x43, 0x4c, 0x52, 0x34, 0x12, 0x54, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x34, 0x58, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x4c, 0x52, 0x10, 0xbf, 0x8e, 0xa4, 0x33, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x45, 0x54, 0x48,
	0x5f, 0x34, 0x58, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x52, 0x12, 0x54, 0x0a,
	0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x34, 0x58, 0x31,
	0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x10, 0xf2, 0xad, 0xa3, 0x3b, 0x1a, 0x13,
	0x82, 0x41, 0x10, 0x45, 0x54, 0x48, 0x5f, 0x34, 0x58, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x53, 0x52, 0x12, 0x52, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x54, 0x48, 0x5f, 0x34, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x34, 0x10, 0xf5,
	0xac, 0x84, 0x64, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x45, 0x54, 0x48, 0x5f, 0x34, 0x30, 0x47, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x34, 0x12, 0x50, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x5a,
	0x52, 0x10, 0xc5, 0xfc, 0xa8, 0x67, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x45, 0x54, 0x48, 0x5f, 0x31,
	0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x5a, 0x52, 0x12, 0x4c, 0x0a, 0x34, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x5f, 0x41, 0x43,
	0x43, 0x10, 0x97, 0xee, 0xb2, 0x79, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x45, 0x54, 0x48, 0x5f, 0x31,
	0x30, 0x30, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x12, 0x4e, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0xb3, 0xc9, 0xf4, 0x7d, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x45, 0x54, 0x48, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x12, 0x53, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c,
	0x52, 0x4d, 0x10, 0xc4, 0xe2, 0x8b, 0x8f, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x45, 0x54, 0x48,
	0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x52, 0x4d, 0x12, 0x51, 0x0a, 0x36,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x47, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x10, 0xa4, 0x8b, 0xa9, 0x8f, 0x01, 0x1a, 0x11, 0x82, 0x41,
	0x0e, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x12,
	0x53, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x34,
	0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x52, 0x34, 0x10, 0xe0, 0xd1, 0xc9, 0x94, 0x01,
	0x1a, 0x12, 0x82, 0x41, 0x0f, 0x45, 0x54, 0x48, 0x5f, 0x34, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x4c, 0x52, 0x34, 0x12, 0x57, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x53, 0x4d,
	0x34, 0x10, 0xbd, 0xef, 0x85, 0x9e, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x45, 0x54, 0x48, 0x5f,
	0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x53, 0x4d, 0x34, 0x12, 0x53, 0x0a,
	0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x34, 0x30, 0x47,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x34, 0x10, 0xe3, 0xc4, 0xf5, 0xa2, 0x01, 0x1a, 0x12,
	0x82, 0x41, 0x0f, 0x45, 0x54, 0x48, 0x5f, 0x34, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53,
	0x52, 0x34, 0x12, 0x53, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54,
	0x48, 0x5f, 0x34, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x52, 0x34, 0x10, 0xf3, 0x89,
	0x98, 0xa4, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x45, 0x54, 0x48, 0x5f, 0x34, 0x30, 0x47, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x43, 0x52, 0x34, 0x12, 0x55, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x34, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50,
	0x53, 0x4d, 0x34, 0x10, 0x8e, 0xbb, 0x9f, 0xb9, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x45, 0x54,
	0x48, 0x5f, 0x34, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x53, 0x4d, 0x34, 0x12, 0x55,
	0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30,
	0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x52, 0x34, 0x10, 0x99, 0xb6, 0x95, 0xbd, 0x01,
	0x1a, 0x13, 0x82, 0x41, 0x10, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x4c, 0x52, 0x34, 0x12, 0x57, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x52,
	0x31, 0x30, 0x10, 0xf5, 0xf8, 0xee, 0xd4, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x45, 0x54, 0x48,
	0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x31, 0x30, 0x12, 0x51,
	0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30,
	0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x52, 0x10, 0xf3, 0xa8, 0xa9, 0xd7, 0x01, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c,
	0x52, 0x12, 0x55, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48,
	0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x34, 0x10, 0xc2, 0xa3,
	0xe5, 0xea, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x30, 0x47,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x34, 0x12, 0x55, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x43, 0x52, 0x34, 0x10, 0x92, 0xf9, 0xff, 0xeb, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x45,
	0x54, 0x48, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x52, 0x34, 0x12,
	0x55, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x31,
	0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x34, 0x10, 0x84, 0x8e, 0xbc, 0xec,
	0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x45, 0x54, 0x48, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x45, 0x52, 0x34, 0x2a, 0x82, 0x04, 0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x46, 0x49, 0x42, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x12, 0x34, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x46, 0x49, 0x42, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x52, 0x0a, 0x38, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x46, 0x49, 0x42, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x43, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0xfc, 0xf4, 0xa6, 0x87, 0x01, 0x1a, 0x10, 0x82,
	0x41, 0x0d, 0x44, 0x41, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x12,
	0x52, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x46, 0x49, 0x42, 0x45, 0x52,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50,
	0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0xd2, 0xa2, 0xce, 0x8e,
	0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x4d, 0x50, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x12, 0x50, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x46,
	0x49, 0x42, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0xc2,
	0xd0, 0x8b, 0x8f, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x53, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x12, 0x50, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x46, 0x49, 0x42, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52,
	0x10, 0x83, 0xcd, 0xd4, 0xc6, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x4c, 0x43, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x12, 0x52, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x46, 0x49, 0x42, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4f, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x10, 0xc3, 0x96, 0xa1, 0xd8, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x41, 0x4f,
	0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x2a, 0xaf, 0x02, 0x0a, 0x27,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x46, 0x49, 0x42, 0x45, 0x52, 0x4a, 0x55, 0x4d,
	0x50, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x46, 0x49, 0x42, 0x45, 0x52, 0x4a, 0x55, 0x4d, 0x50, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5c, 0x0a, 0x3c, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x46, 0x49, 0x42, 0x45, 0x52, 0x4a, 0x55, 0x4d, 0x50, 0x45,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x5f, 0x4a, 0x55, 0x4d, 0x50,
	0x45, 0x52, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x10, 0xb7, 0xf9, 0xaf, 0x0f, 0x1a,
	0x17, 0x82, 0x41, 0x14, 0x46, 0x49, 0x42, 0x45, 0x52, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x45, 0x52,
	0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x12, 0x73, 0x0a, 0x47, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x46, 0x49, 0x42, 0x45, 0x52, 0x4a, 0x55, 0x4d, 0x50, 0x45, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x45, 0x52,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x52,
	0x41, 0x4e, 0x44, 0x10, 0x8c, 0x96, 0xcc, 0x84, 0x01, 0x1a, 0x22, 0x82, 0x41, 0x1f, 0x46, 0x49,
	0x42, 0x45, 0x52, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x44, 0x2a, 0xf4, 0x03,
	0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x4d,
	0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x12, 0x36,
	0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x4d,
	0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x42, 0x4d, 0x50, 0x10, 0xef, 0xfd, 0xda, 0x3c, 0x1a,
	0x06, 0x82, 0x41, 0x03, 0x42, 0x4d, 0x50, 0x12, 0x3f, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x41, 0x4d, 0x50, 0x10, 0xd4, 0x9b, 0xfc, 0x3c,
	0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4d, 0x50, 0x12, 0x3f, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x47, 0x4d, 0x50, 0x10, 0xee, 0xd8, 0x8c,
	0x5d, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x47, 0x4d, 0x50, 0x12, 0x43, 0x0a, 0x32, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e,
	0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x47, 0x46, 0x50, 0x5f, 0x54, 0x10,
	0x86, 0xa9, 0xe3, 0x66, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x47, 0x46, 0x50, 0x5f, 0x54, 0x12, 0x43,
	0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x4d,
	0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x47,
	0x46, 0x50, 0x5f, 0x46, 0x10, 0x94, 0xa9, 0xe3, 0x66, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x47, 0x46,
	0x50, 0x5f, 0x46, 0x12, 0x3f, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x43, 0x42, 0x52, 0x10, 0xe9, 0xf5, 0xe4, 0x74, 0x1a, 0x06, 0x82, 0x41,
	0x03, 0x43, 0x42, 0x52, 0x2a, 0x9f, 0x02, 0x0a, 0x32, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x12, 0x3c, 0x0a, 0x38, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x4f, 0x0a, 0x3b, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x54, 0x4e, 0x10, 0xc2, 0xae, 0xb5, 0x24, 0x1a, 0x0b, 0x82,
	0x41, 0x08, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x54, 0x4e, 0x12, 0x5a, 0x0a, 0x40, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x45, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x88,
	0xd8, 0x9f, 0xdc, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x2a, 0xc7, 0x04, 0x0a, 0x27, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3c, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0xd9, 0xe2, 0xb7, 0x09, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44,
	0x52, 0x4f, 0x50, 0x12, 0x4e, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x8b, 0x95, 0xe9,
	0x1f, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x12, 0x42, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x10, 0xb8, 0xcb, 0xee, 0x4a, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x12, 0x40, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0xef, 0x8d, 0xe6, 0x76, 0x1a, 0x09,
	0x82, 0x41, 0x06, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x12, 0x43, 0x0a, 0x2f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x50, 0x4f, 0x52, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0xbf, 0xe9, 0x86,
	0x9b, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x12, 0x53,
	0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e,
	0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0xf4, 0x89, 0x80, 0xa0, 0x01, 0x1a,
	0x12, 0x82, 0x41, 0x0f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x12, 0x3b, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x44, 0x44, 0x10, 0xb7, 0xa4, 0xfb, 0xaa, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x44, 0x44,
	0x2a, 0x93, 0x03, 0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x54, 0x4e,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x12,
	0x34, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x54, 0x4e, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x47, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x54, 0x4e, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x31, 0x53, 0x31, 0x5f, 0x32, 0x44, 0x32, 0x10, 0xd3, 0x82, 0xcc,
	0x11, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x50, 0x31, 0x53, 0x31, 0x5f, 0x32, 0x44, 0x32, 0x12, 0x48,
	0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x54, 0x4e, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x31, 0x4c,
	0x31, 0x5f, 0x32, 0x44, 0x31, 0x10, 0xe1, 0xed, 0xf7, 0x94, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x50, 0x31, 0x4c, 0x31, 0x5f, 0x32, 0x44, 0x31, 0x12, 0x48, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x54, 0x4e, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x31, 0x4c, 0x31, 0x5f, 0x32, 0x44, 0x32, 0x10,
	0xe2, 0xed, 0xf7, 0x94, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x50, 0x31, 0x4c, 0x31, 0x5f, 0x32,
	0x44, 0x32, 0x12, 0x52, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x54,
	0x4e, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x4f, 0x54, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0xfd,
	0xb7, 0xbd, 0xe6, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x4f, 0x54, 0x4e, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x2a, 0xb3, 0x03, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x53, 0x4f, 0x4e, 0x45, 0x54, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x36, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x45, 0x54, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x4f, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x45, 0x54,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x56, 0x53, 0x52, 0x32, 0x30, 0x30, 0x30, 0x5f, 0x33, 0x52, 0x35, 0x10, 0xf1, 0xc8, 0x9b, 0x10,
	0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x56, 0x53, 0x52, 0x32, 0x30, 0x30, 0x30, 0x5f, 0x33, 0x52, 0x35,
	0x12, 0x4f, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x45,
	0x54, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x56, 0x53, 0x52, 0x32, 0x30, 0x30, 0x30, 0x5f, 0x33, 0x52, 0x32, 0x10, 0xf6, 0xc8, 0x9b,
	0x10, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x56, 0x53, 0x52, 0x32, 0x30, 0x30, 0x30, 0x5f, 0x33, 0x52,
	0x32, 0x12, 0x4f, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x4f, 0x4e,
	0x45, 0x54, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x56, 0x53, 0x52, 0x32, 0x30, 0x30, 0x30, 0x5f, 0x33, 0x52, 0x33, 0x10, 0xf7, 0xc8,
	0x9b, 0x10, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x56, 0x53, 0x52, 0x32, 0x30, 0x30, 0x30, 0x5f, 0x33,
	0x52, 0x33, 0x12, 0x58, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x4f,
	0x4e, 0x45, 0x54, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x4f, 0x4e, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0xdd, 0xd3, 0xbb, 0xd8, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x53, 0x4f, 0x4e,
	0x45, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x2a, 0x90, 0x09, 0x0a,
	0x31, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x3b, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x58, 0x0a, 0x3f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x47, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0xbe, 0xf2, 0x97, 0x3a, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x4e, 0x4f, 0x4e, 0x5f,
	0x50, 0x4c, 0x55, 0x47, 0x47, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x46, 0x0a, 0x36, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52,
	0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x46, 0x50, 0x34, 0x10, 0xf0, 0xee, 0xef, 0x52, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x43, 0x46, 0x50,
	0x34, 0x12, 0x46, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43, 0x54,
	0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x46, 0x50, 0x32, 0x10, 0xf6, 0xee, 0xef, 0x52,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x43, 0x46, 0x50, 0x32, 0x12, 0x46, 0x0a, 0x36, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52,
	0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51,
	0x53, 0x46, 0x50, 0x10, 0x91, 0xf1, 0xd5, 0x76, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x51, 0x53, 0x46,
	0x50, 0x12, 0x46, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43, 0x54,
	0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x50, 0x41, 0x4b, 0x10, 0xee, 0x80, 0xc1, 0x79,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x43, 0x50, 0x41, 0x4b, 0x12, 0x50, 0x0a, 0x3b, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52,
	0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51,
	0x53, 0x46, 0x50, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0xdc, 0xd3, 0x9a, 0x7d, 0x1a, 0x0c, 0x82,
	0x41, 0x09, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x12, 0x43, 0x0a, 0x34, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56,
	0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x58, 0x32, 0x10, 0xb5, 0x83, 0x95, 0x9a, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x58, 0x32,
	0x12, 0x49, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x97, 0xf2, 0xc6, 0xa0,
	0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x12, 0x45, 0x0a, 0x35, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56,
	0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x46, 0x50, 0x10, 0xac, 0x8c, 0xb3, 0xa6, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x43,
	0x46, 0x50, 0x12, 0x45, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x46, 0x50, 0x10, 0xdc, 0xed, 0xd4, 0xa7,
	0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x53, 0x46, 0x50, 0x12, 0x4b, 0x0a, 0x38, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52,
	0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51,
	0x53, 0x46, 0x50, 0x32, 0x38, 0x10, 0xdb, 0xab, 0x97, 0xb1, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06,
	0x51, 0x53, 0x46, 0x50, 0x32, 0x38, 0x12, 0x45, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x46, 0x4f, 0x52,
	0x4d, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x46, 0x50, 0x10,
	0x83, 0x85, 0x9a, 0xb8, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x58, 0x46, 0x50, 0x12, 0x4f, 0x0a,
	0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x46, 0x50, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0xdb, 0xaf, 0xaa, 0xcc,
	0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x53, 0x46, 0x50, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x12, 0x4f,
	0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x46, 0x50, 0x32, 0x5f, 0x41, 0x43, 0x4f, 0x10, 0xcc, 0xa4, 0xb8,
	0xe4, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x43, 0x46, 0x50, 0x32, 0x5f, 0x41, 0x43, 0x4f, 0x2a,
	0xf2, 0x0f, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x37, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x4e, 0x0a, 0x38, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x5f, 0x4f, 0x43, 0x37, 0x36, 0x38, 0x10, 0xc6, 0xff, 0x84, 0x08, 0x1a, 0x0d, 0x82, 0x41, 0x0a,
	0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x43, 0x37, 0x36, 0x38, 0x12, 0x4e, 0x0a, 0x38, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x5f, 0x4f, 0x54, 0x55, 0x31, 0x45, 0x10, 0x99, 0xe7, 0x8d, 0x2c, 0x1a, 0x0d, 0x82, 0x41, 0x0a,
	0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x54, 0x55, 0x31, 0x45, 0x12, 0x4c, 0x0a, 0x37, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x5f, 0x4f, 0x54, 0x55, 0x34, 0x10, 0xb1, 0xac, 0xb6, 0x3b, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x50,
	0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x54, 0x55, 0x34, 0x12, 0x4c, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f,
	0x54, 0x55, 0x33, 0x10, 0xb6, 0xac, 0xb6, 0x3b, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x50, 0x52, 0x4f,
	0x54, 0x5f, 0x4f, 0x54, 0x55, 0x33, 0x12, 0x4c, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x54, 0x55,
	0x32, 0x10, 0xb7, 0xac, 0xb6, 0x3b, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x5f,
	0x4f, 0x54, 0x55, 0x32, 0x12, 0x4e, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x44, 0x55, 0x43, 0x4e,
	0x10, 0xcc, 0xfa, 0xe9, 0x3b, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f,
	0x44, 0x55, 0x43, 0x4e, 0x12, 0x4c, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x44, 0x55, 0x34, 0x10,
	0xc1, 0xf0, 0xd8, 0x3c, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x44,
	0x55, 0x34, 0x12, 0x4c, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x44, 0x55, 0x33, 0x10, 0xc6, 0xf0,
	0xd8, 0x3c, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x44, 0x55, 0x33,
	0x12, 0x4c, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x44, 0x55, 0x32, 0x10, 0xc7, 0xf0, 0xd8, 0x3c,
	0x1a, 0x0c, 0x82, 0x41, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x44, 0x55, 0x32, 0x12, 0x4e,
	0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x54, 0x55, 0x32, 0x45, 0x10, 0xd0, 0xf1, 0x8d, 0x44, 0x1a,
	0x0d, 0x82, 0x41, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x54, 0x55, 0x32, 0x45, 0x12, 0x4c,
	0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x43, 0x34, 0x38, 0x10, 0x8d, 0xf7, 0xa4, 0x44, 0x1a, 0x0c,
	0x82, 0x41, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x43, 0x34, 0x38, 0x12, 0x4e, 0x0a, 0x38,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52,
	0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x5f, 0x53, 0x54, 0x4d, 0x31, 0x36, 0x10, 0xae, 0xb2, 0xe2, 0x74, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x4d, 0x31, 0x36, 0x12, 0x4e, 0x0a, 0x38,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52,
	0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x45, 0x10, 0xed, 0xcd, 0xd1, 0x75, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x45, 0x12, 0x4a, 0x0a, 0x36,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52,
	0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x5f, 0x31, 0x47, 0x45, 0x10, 0xb8, 0x93, 0xe7, 0x7a, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x50, 0x52, 0x4f, 0x54, 0x5f, 0x31, 0x47, 0x45, 0x12, 0x55, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x31,
	0x30, 0x30, 0x47, 0x5f, 0x4d, 0x4c, 0x47, 0x10, 0xe0, 0xa3, 0x88, 0x85, 0x01, 0x1a, 0x10, 0x82,
	0x41, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x5f, 0x4d, 0x4c, 0x47, 0x12,
	0x4f, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x45, 0x10, 0xf8, 0x8a, 0xea, 0x93,
	0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x45,
	0x12, 0x4f, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x4d, 0x36, 0x34, 0x10, 0xa9, 0xc8, 0xe2,
	0xac, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x4d, 0x36,
	0x34, 0x12, 0x4d, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x34, 0x30, 0x47, 0x45, 0x10, 0x93, 0x8a, 0xf9,
	0xae, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x34, 0x30, 0x47, 0x45,
	0x12, 0x55, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x31, 0x30, 0x47, 0x45, 0x5f, 0x57, 0x41, 0x4e, 0x10,
	0xcb, 0xea, 0xe1, 0xaf, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x31,
	0x30, 0x47, 0x45, 0x5f, 0x57, 0x41, 0x4e, 0x12, 0x51, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x53, 0x54,
	0x4d, 0x32, 0x35, 0x36, 0x10, 0xda, 0x9b, 0x82, 0xba, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x50,
	0x52, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x4d, 0x32, 0x35, 0x36, 0x12, 0x4f, 0x0a, 0x38, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x5f, 0x4f, 0x54, 0x55, 0x43, 0x4e, 0x10, 0xfc, 0xa0, 0x8e, 0xbc, 0x01, 0x1a, 0x0d, 0x82, 0x41,
	0x0a, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x54, 0x55, 0x43, 0x4e, 0x12, 0x4f, 0x0a, 0x38, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x5f, 0x4f, 0x44, 0x55, 0x32, 0x45, 0x10, 0x80, 0xaf, 0xea, 0xc3, 0x01, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x44, 0x55, 0x32, 0x45, 0x12, 0x55, 0x0a, 0x3b,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52,
	0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x5f, 0x31, 0x30, 0x47, 0x45, 0x5f, 0x4c, 0x41, 0x4e, 0x10, 0x80, 0xe2, 0xc5, 0xf1,
	0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x31, 0x30, 0x47, 0x45, 0x5f,
	0x4c, 0x41, 0x4e, 0x12, 0x4f, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x43, 0x31, 0x39, 0x32, 0x10,
	0x8f, 0x82, 0xf3, 0xff, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f,
	0x43, 0x31, 0x39, 0x32, 0x2a, 0xa4, 0x12, 0x0a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x12, 0x38, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x57, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x35, 0x35,
	0x30, 0x47, 0x10, 0xfc, 0xf8, 0x9a, 0x0a, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x52, 0x49, 0x42,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x35, 0x35, 0x30, 0x47, 0x12, 0x57, 0x0a, 0x3d, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52,
	0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49,
	0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x39, 0x35, 0x30, 0x47, 0x10, 0x80, 0xb9, 0xb1, 0x1c,
	0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x39,
	0x35, 0x30, 0x47, 0x12, 0x55, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x34, 0x30, 0x47, 0x10, 0x8c, 0xe0, 0xa7, 0x1e, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x54, 0x52, 0x49,
	0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x34, 0x30, 0x47, 0x12, 0x57, 0x0a, 0x3d, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52,
	0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49,
	0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x34, 0x35, 0x30, 0x47, 0x10, 0x9b, 0x81, 0xb4, 0x1f,
	0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x34,
	0x35, 0x30, 0x47, 0x12, 0x57, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x38, 0x30, 0x30, 0x47, 0x10, 0x82, 0x8f, 0xdb, 0x20, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x52,
	0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x38, 0x30, 0x30, 0x47, 0x12, 0x57, 0x0a, 0x3d,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52,
	0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x39, 0x30, 0x30, 0x47, 0x10, 0xbd, 0xa7,
	0xfe, 0x2b, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x39, 0x30, 0x30, 0x47, 0x12, 0x57, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x36, 0x35, 0x30, 0x47, 0x10, 0xa1, 0xd1, 0x81, 0x2c, 0x1a, 0x11, 0x82, 0x41, 0x0e,
	0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x36, 0x35, 0x30, 0x47, 0x12, 0x57,
	0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x38, 0x35, 0x30, 0x47, 0x10,
	0xbf, 0x90, 0xab, 0x30, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x38, 0x35, 0x30, 0x47, 0x12, 0x53, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x31, 0x47, 0x10, 0xd5, 0xdc, 0xb1, 0x36, 0x1a, 0x0f, 0x82, 0x41, 0x0c,
	0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x47, 0x12, 0x59, 0x0a, 0x3e,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52,
	0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x31, 0x30, 0x30, 0x47, 0x10, 0xa6,
	0xde, 0x82, 0x64, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x31, 0x31, 0x30, 0x30, 0x47, 0x12, 0x57, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x31, 0x35, 0x30, 0x47, 0x10, 0x88, 0xd5, 0x96, 0x65, 0x1a, 0x11, 0x82,
	0x41, 0x0e, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x35, 0x30, 0x47,
	0x12, 0x59, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x30, 0x30,
	0x30, 0x47, 0x10, 0xf1, 0x92, 0xa5, 0x6f, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x54, 0x52, 0x49, 0x42,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x47, 0x12, 0x57, 0x0a, 0x3d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59,
	0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52,
	0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x10, 0xc5, 0xd7, 0xe6,
	0x74, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x31, 0x30, 0x30, 0x47, 0x12, 0x57, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x32, 0x30, 0x30, 0x47, 0x10, 0xd0, 0xd7, 0xd0, 0x78, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54,
	0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x12, 0x58, 0x0a,
	0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41,
	0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x33, 0x30, 0x30, 0x47, 0x10, 0xab,
	0x8a, 0xf3, 0x83, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x33, 0x30, 0x30, 0x47, 0x12, 0x58, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x32, 0x35, 0x30, 0x47, 0x10, 0x8d, 0xc5, 0x9d, 0x88, 0x01, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x35, 0x30,
	0x47, 0x12, 0x58, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x34, 0x30,
	0x30, 0x47, 0x10, 0xe6, 0xa3, 0x96, 0x8f, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x52, 0x49,
	0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x12, 0x58, 0x0a, 0x3d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59,
	0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52,
	0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x37, 0x35, 0x30, 0x47, 0x10, 0xea, 0x9d, 0xba,
	0x97, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x37, 0x35, 0x30, 0x47, 0x12, 0x58, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x35, 0x30, 0x30, 0x47, 0x10, 0xb1, 0xd6, 0xb8, 0x9a, 0x01, 0x1a, 0x11, 0x82, 0x41,
	0x0e, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x35, 0x30, 0x30, 0x47, 0x12,
	0x58, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x36, 0x30, 0x30, 0x47,
	0x10, 0xec, 0xf3, 0xe3, 0x9b, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x52, 0x49, 0x42, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x36, 0x30, 0x30, 0x47, 0x12, 0x58, 0x0a, 0x3d, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41,
	0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x37, 0x30, 0x30, 0x47, 0x10, 0xc7, 0xa7, 0x86, 0xa7, 0x01,
	0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x37,
	0x30, 0x30, 0x47, 0x12, 0x56, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x31, 0x30, 0x47, 0x10, 0xc1, 0xbf, 0xc5, 0xae, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x54, 0x52,
	0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x30, 0x47, 0x12, 0x5a, 0x0a, 0x3e, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59,
	0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52,
	0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x30, 0x35, 0x30, 0x47, 0x10, 0xbc, 0xb3,
	0x87, 0xdf, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x31, 0x30, 0x35, 0x30, 0x47, 0x12, 0x58, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x32, 0x5f, 0x35, 0x47, 0x10, 0xc5, 0xaf, 0xe5, 0xf0, 0x01, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x2e, 0x35,
	0x47, 0x12, 0x58, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x33, 0x35,
	0x30, 0x47, 0x10, 0xf6, 0xac, 0xd5, 0xf3, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x52, 0x49,
	0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x33, 0x35, 0x30, 0x47, 0x2a, 0xfe, 0x02, 0x0a, 0x30,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52,
	0x59, 0x53, 0x4c, 0x4f, 0x54, 0x47, 0x52, 0x41, 0x4e, 0x55, 0x4c, 0x41, 0x52, 0x49, 0x54, 0x59,
	0x12, 0x3a, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x41, 0x52, 0x59, 0x53, 0x4c, 0x4f, 0x54, 0x47, 0x52, 0x41, 0x4e, 0x55, 0x4c, 0x41,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5b, 0x0a, 0x40,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52,
	0x59, 0x53, 0x4c, 0x4f, 0x54, 0x47, 0x52, 0x41, 0x4e, 0x55, 0x4c, 0x41, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x31, 0x5f, 0x32, 0x35, 0x47,
	0x10, 0xe1, 0xe6, 0xbf, 0x1e, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x53,
	0x4c, 0x4f, 0x54, 0x5f, 0x31, 0x2e, 0x32, 0x35, 0x47, 0x12, 0x59, 0x0a, 0x3f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x53, 0x4c,
	0x4f, 0x54, 0x47, 0x52, 0x41, 0x4e, 0x55, 0x4c, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x52,
	0x49, 0x42, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x32, 0x5f, 0x35, 0x47, 0x10, 0xb8, 0xbf, 0xe6,
	0x53, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f,
	0x32, 0x2e, 0x35, 0x47, 0x12, 0x56, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x53, 0x4c, 0x4f, 0x54, 0x47, 0x52, 0x41,
	0x4e, 0x55, 0x4c, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x53, 0x4c,
	0x4f, 0x54, 0x5f, 0x35, 0x47, 0x10, 0xd0, 0x9c, 0xf1, 0xf8, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c,
	0x54, 0x52, 0x49, 0x42, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x35, 0x47, 0x2a, 0xa2, 0x02, 0x0a,
	0x1c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x12, 0x26, 0x0a,
	0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x46,
	0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0xd9, 0xec, 0x9b, 0x70, 0x1a,
	0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x12, 0x31, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0xdb, 0xec,
	0x9b, 0x70, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12, 0x32, 0x0a, 0x21, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x10, 0xc2, 0x85, 0x95, 0xd3, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x12,
	0x40, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f,
	0x4c, 0x32, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0xfa, 0xfd, 0x8a, 0xf1,
	0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4c, 0x32, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x2a, 0x87, 0x03, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x56, 0x4c, 0x41, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x28, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x54, 0x50, 0x49, 0x44, 0x5f,
	0x30, 0x58, 0x39, 0x31, 0x30, 0x30, 0x10, 0x80, 0xf3, 0xd6, 0x14, 0x1a, 0x0e, 0x82, 0x41, 0x0b,
	0x54, 0x50, 0x49, 0x44, 0x5f, 0x30, 0x58, 0x39, 0x31, 0x30, 0x30, 0x12, 0x3f, 0x0a, 0x28, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x54, 0x50, 0x49, 0x44,
	0x5f, 0x30, 0x58, 0x38, 0x38, 0x41, 0x38, 0x10, 0xf1, 0x92, 0xfb, 0x4f, 0x1a, 0x0e, 0x82, 0x41,
	0x0b, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x30, 0x58, 0x38, 0x38, 0x41, 0x38, 0x12, 0x3f, 0x0a, 0x28,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x54, 0x50, 0x49,
	0x44, 0x5f, 0x30, 0x58, 0x38, 0x31, 0x30, 0x30, 0x10, 0xe7, 0xa6, 0xd6, 0x78, 0x1a, 0x0e, 0x82,
	0x41, 0x0b, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x30, 0x58, 0x38, 0x31, 0x30, 0x30, 0x12, 0x3a, 0x0a,
	0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x54, 0x50,
	0x49, 0x44, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0xc4, 0xd0, 0x8e, 0x89, 0x01, 0x1a, 0x0b, 0x82, 0x41,
	0x08, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x41, 0x4e, 0x59, 0x12, 0x40, 0x0a, 0x28, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x30,
	0x58, 0x39, 0x32, 0x30, 0x30, 0x10, 0xfb, 0xb6, 0xf5, 0xa4, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b,
	0x54, 0x50, 0x49, 0x44, 0x5f, 0x30, 0x58, 0x39, 0x32, 0x30, 0x30, 0x2a, 0xa4, 0x01, 0x0a, 0x1a,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c,
	0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x56, 0x4c, 0x41, 0x4e,
	0x4d, 0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x30, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c,
	0x41, 0x4e, 0x56, 0x4c, 0x41, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x12, 0x2e, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x56, 0x4c, 0x41, 0x4e, 0x56, 0x4c, 0x41, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x02, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x54, 0x52, 0x55,
	0x4e, 0x4b, 0x2a, 0xd9, 0x01, 0x0a, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x56, 0x4c, 0x41, 0x4e, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2f, 0x0a,
	0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x56,
	0x4c, 0x41, 0x4e, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x55, 0x53, 0x48, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x50, 0x55, 0x53, 0x48, 0x12, 0x2d,
	0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e,
	0x56, 0x4c, 0x41, 0x4e, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x4f, 0x50, 0x10, 0x02, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x50, 0x4f, 0x50, 0x12, 0x2f, 0x0a,
	0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x56,
	0x4c, 0x41, 0x4e, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x57, 0x41, 0x50, 0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x53, 0x57, 0x41, 0x50, 0x2a, 0xc9,
	0x03, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x32, 0x0a, 0x2e, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x41, 0x56, 0x45, 0x4c, 0x45, 0x4e,
	0x47, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x41, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x5b, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x41, 0x56,
	0x45, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x41, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x5f, 0x41, 0x53, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0xb6, 0xa3, 0xad, 0x41, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x41, 0x53,
	0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x12, 0x6e, 0x0a, 0x45,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x41, 0x56, 0x45, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x41, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x41, 0x53,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x95, 0xb3, 0xe0, 0xc4, 0x01, 0x1a, 0x1f, 0x82, 0x41, 0x1c,
	0x41, 0x55, 0x54, 0x4f, 0x5f, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x12, 0x4c, 0x0a, 0x34,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x41, 0x56, 0x45, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x41, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0xb5, 0xc1, 0xaa, 0xdd, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x41,
	0x53, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x12, 0x4e, 0x0a, 0x35, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x41, 0x56, 0x45, 0x4c, 0x45, 0x4e, 0x47,
	0x54, 0x48, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x41, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0xfe, 0x90, 0x96, 0xf6, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x41, 0x53,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x2a, 0xca, 0x02, 0x0a, 0x30, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x55, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x12,
	0x3a, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x41, 0x56,
	0x45, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x41, 0x54, 0x54,
	0x45, 0x4e, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x6a, 0x0a, 0x47, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x41, 0x56, 0x45, 0x4c, 0x45, 0x4e,
	0x47, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x55, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x54, 0x54, 0x45, 0x4e, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x58, 0x45,
	0x44, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0xa6, 0x92, 0xc9, 0xbb, 0x01, 0x1a, 0x19, 0x82, 0x41,
	0x16, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x58,
	0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x12, 0x6e, 0x0a, 0x49, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x41, 0x56, 0x45, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x45,
	0x4e, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f,
	0x4c, 0x4f, 0x53, 0x53, 0x10, 0xf1, 0xd7, 0xa2, 0xfc, 0x01, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x41,
	0x54, 0x54, 0x45, 0x4e, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d,
	0x49, 0x43, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x2a, 0xa2, 0x02, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x57, 0x41, 0x56, 0x45, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x40, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x41, 0x56, 0x45, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x12, 0x42, 0x0a, 0x31, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x41, 0x56, 0x45, 0x4c, 0x45, 0x4e, 0x47,
	0x54, 0x48, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x12, 0x3c,
	0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x41, 0x56, 0x45,
	0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54,
	0x10, 0x03, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x2a, 0xde, 0x01, 0x0a,
	0x1a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x41, 0x50, 0x53, 0x54, 0x41, 0x54, 0x45, 0x12, 0x24, 0x0a, 0x20, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x41, 0x50, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x3a, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57,
	0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x50, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xb1, 0x80, 0xf2, 0xa6, 0x01, 0x1a,
	0x0c, 0x82, 0x41, 0x09, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x12, 0x2c, 0x0a,
	0x1d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x41, 0x50, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x93,
	0xbe, 0xf5, 0xe1, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x30, 0x0a, 0x1f, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x41, 0x50, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0xf0,
	0xb8, 0xa5, 0xfc, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x2a, 0xd6, 0x02,
	0x0a, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x4c, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0xf9, 0xf6, 0xc5, 0x36, 0x1a,
	0x11, 0x82, 0x41, 0x0e, 0x42, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x12, 0x36, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x46, 0x53, 0x10, 0xfc, 0xda,
	0x93, 0x66, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x44, 0x46, 0x53, 0x12, 0x3b, 0x0a, 0x29, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x49, 0x53, 0x45, 0x10, 0xcb, 0xe9, 0x8f, 0xa0, 0x01, 0x1a, 0x08, 0x82,
	0x41, 0x05, 0x4e, 0x4f, 0x49, 0x53, 0x45, 0x12, 0x3d, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x82, 0xcd, 0x89, 0xe4, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x2a, 0xf8, 0x02, 0x0a, 0x25, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53,
	0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49,
	0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x43, 0x41, 0x50,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x40, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57,
	0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x43, 0x41,
	0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x44, 0x4f, 0x54, 0x5f, 0x31,
	0x31, 0x52, 0x10, 0xeb, 0xda, 0x9c, 0x0c, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x44, 0x4f, 0x54, 0x5f,
	0x31, 0x31, 0x52, 0x12, 0x40, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x44, 0x4f, 0x54,
	0x5f, 0x31, 0x31, 0x56, 0x10, 0xef, 0xda, 0x9c, 0x0c, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x44, 0x4f,
	0x54, 0x5f, 0x31, 0x31, 0x56, 0x12, 0x4c, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x4d,
	0x55, 0x5f, 0x42, 0x45, 0x41, 0x4d, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x45, 0x10, 0x8b, 0x84, 0xb5,
	0x2b, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x4d, 0x55, 0x5f, 0x42, 0x45, 0x41, 0x4d, 0x46, 0x4f, 0x52,
	0x4d, 0x45, 0x45, 0x12, 0x4c, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x4d, 0x55, 0x5f,
	0x42, 0x45, 0x41, 0x4d, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x52, 0x10, 0x9c, 0x84, 0xb5, 0x2b, 0x1a,
	0x10, 0x82, 0x41, 0x0d, 0x4d, 0x55, 0x5f, 0x42, 0x45, 0x41, 0x4d, 0x46, 0x4f, 0x52, 0x4d, 0x45,
	0x52, 0x2a, 0xdc, 0x06, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x41,
	0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x94, 0xec, 0xcd,
	0x07, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x45,
	0x44, 0x12, 0x43, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57,
	0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0xe0, 0x9b, 0xf6, 0x30, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x12, 0x41, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x32, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x52, 0x45, 0x51, 0x44, 0x10, 0xc1, 0xa3, 0xa8, 0x52, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4c, 0x32,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x44, 0x12, 0x3d, 0x0a, 0x28, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x53, 0x41, 0x56, 0x45, 0x10, 0x9e, 0x9b, 0xa2, 0x71, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x53, 0x41, 0x56, 0x45, 0x12, 0x45, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xd7, 0x9e, 0xb2, 0x77, 0x1a, 0x10, 0x82,
	0x41, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x12,
	0x55, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46,
	0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x32, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0xc9, 0xe6, 0xbf, 0x79, 0x1a, 0x18, 0x82, 0x41,
	0x15, 0x4c, 0x32, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x12, 0x58, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x32, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0xb9, 0xeb, 0xc6, 0x97, 0x01, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x4c, 0x32, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x12, 0x42, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49,
	0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4c, 0x33, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x44, 0x10, 0x8e,
	0xae, 0xdd, 0xab, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4c, 0x33, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x52, 0x45, 0x51, 0x44, 0x12, 0x40, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45,
	0x44, 0x10, 0xa0, 0xc8, 0xa1, 0xc9, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x41, 0x53, 0x53, 0x4f,
	0x43, 0x49, 0x41, 0x54, 0x45, 0x44, 0x12, 0x48, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x33, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0xd0, 0xa8, 0xd7, 0xd8, 0x01, 0x1a, 0x11, 0x82,
	0x41, 0x0e, 0x4c, 0x33, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x12, 0x3e, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49,
	0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x44, 0x10, 0xbe, 0xca, 0xa9,
	0xe8, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x44,
	0x2a, 0x95, 0x06, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57,
	0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45,
	0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49,
	0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x44, 0x41,
	0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x33, 0x36, 0x4d, 0x42,
	0x10, 0xa1, 0x8e, 0xee, 0x0a, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x33,
	0x36, 0x4d, 0x42, 0x12, 0x3a, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x34, 0x38, 0x4d, 0x42, 0x10, 0x86, 0xb1, 0x9b,
	0x0c, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x34, 0x38, 0x4d, 0x42, 0x12,
	0x3a, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46,
	0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x31, 0x38, 0x4d, 0x42, 0x10, 0xd1, 0x84, 0x95, 0x39, 0x1a, 0x0c, 0x82,
	0x41, 0x09, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x38, 0x4d, 0x42, 0x12, 0x3a, 0x0a, 0x25, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x31, 0x31, 0x4d, 0x42, 0x10, 0x8c, 0xcb, 0xee, 0x59, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x31, 0x31, 0x4d, 0x42, 0x12, 0x3a, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x44, 0x41,
	0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x32, 0x4d, 0x42,
	0x10, 0x87, 0xc0, 0xfb, 0x59, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31,
	0x32, 0x4d, 0x42, 0x12, 0x3b, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x34, 0x4d, 0x42, 0x10, 0xf8, 0xd0, 0x8d,
	0x8f, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x34, 0x4d, 0x42,
	0x12, 0x3b, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49,
	0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x35, 0x34, 0x4d, 0x42, 0x10, 0x91, 0xf6, 0xa3, 0x9d, 0x01, 0x1a,
	0x0c, 0x82, 0x41, 0x09, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x35, 0x34, 0x4d, 0x42, 0x12, 0x39, 0x0a,
	0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x36, 0x4d, 0x42, 0x10, 0xae, 0x90, 0xb9, 0xc5, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x36, 0x4d, 0x42, 0x12, 0x39, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x44,
	0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x4d, 0x42,
	0x10, 0xa1, 0xf2, 0xc2, 0xc5, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x31, 0x4d, 0x42, 0x12, 0x39, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x4d, 0x42, 0x10, 0xea, 0xea, 0xdd, 0xc5,
	0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x4d, 0x42, 0x12, 0x39,
	0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x39, 0x4d, 0x42, 0x10, 0x99, 0xb8, 0x8f, 0xc6, 0x01, 0x1a, 0x0b, 0x82, 0x41,
	0x08, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x39, 0x4d, 0x42, 0x12, 0x3d, 0x0a, 0x26, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x35, 0x5f,
	0x35, 0x4d, 0x42, 0x10, 0xf2, 0xf1, 0x8d, 0xdc, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x35, 0x2e, 0x35, 0x4d, 0x42, 0x2a, 0xb3, 0x02, 0x0a, 0x25, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e,
	0x43, 0x59, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x45, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x46, 0x52, 0x45,
	0x51, 0x5f, 0x35, 0x47, 0x48, 0x5a, 0x10, 0xdc, 0xf9, 0xf8, 0x9b, 0x01, 0x1a, 0x0c, 0x82, 0x41,
	0x09, 0x46, 0x52, 0x45, 0x51, 0x5f, 0x35, 0x47, 0x48, 0x5a, 0x12, 0x4b, 0x0a, 0x32, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x5f, 0x32, 0x5f, 0x35, 0x5f, 0x47, 0x48, 0x5a,
	0x10, 0xd4, 0xc0, 0x80, 0xb7, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x46, 0x52, 0x45, 0x51, 0x5f,
	0x32, 0x5f, 0x35, 0x5f, 0x47, 0x48, 0x5a, 0x12, 0x45, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x49, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x46, 0x52, 0x45, 0x51, 0x5f, 0x32, 0x47, 0x48, 0x5a, 0x10, 0xd1, 0xd5, 0xd8, 0xf2, 0x01,
	0x1a, 0x0c, 0x82, 0x41, 0x09, 0x46, 0x52, 0x45, 0x51, 0x5f, 0x32, 0x47, 0x48, 0x5a, 0x42, 0x17,
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_enums_proto_rawDescOnce sync.Once
	file_openconfig_enums_proto_rawDescData = file_openconfig_enums_proto_rawDesc
)

func file_openconfig_enums_proto_rawDescGZIP() []byte {
	file_openconfig_enums_proto_rawDescOnce.Do(func() {
		file_openconfig_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_enums_proto_rawDescData)
	})
	return file_openconfig_enums_proto_rawDescData
}

var file_openconfig_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 217)
var file_openconfig_enums_proto_goTypes = []interface{}{
	(IETFInterfacesInterfaceType)(0),                                                        // 0: openconfig.IETFInterfacesInterfaceType
	(OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE)(0),                                           // 1: openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE
	(OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE)(0),                                        // 2: openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE
	(OpenconfigAaaTypesAAAMETHODTYPE)(0),                                                    // 3: openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	(OpenconfigAaaTypesAAASERVERTYPE)(0),                                                    // 4: openconfig.OpenconfigAaaTypesAAASERVERTYPE
	(OpenconfigAaaTypesSYSTEMDEFINEDROLES)(0),                                               // 5: openconfig.OpenconfigAaaTypesSYSTEMDEFINEDROLES
	(OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex)(0),               // 6: openconfig.OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex
	(OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses)(0), // 7: openconfig.OpenconfigAccessPointsAccessPointsAccessPointSystemGrpcServerConfigListenAddresses
	(OpenconfigAclACLCOUNTERCAPABILITY)(0),                                                  // 8: openconfig.OpenconfigAclACLCOUNTERCAPABILITY
	(OpenconfigAclACLTYPE)(0),                                                               // 9: openconfig.OpenconfigAclACLTYPE
	(OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort)(0),      // 10: openconfig.OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort
	(OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort)(0),           // 11: openconfig.OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort
	(OpenconfigAclFORWARDINGACTION)(0),                                                      // 12: openconfig.OpenconfigAclFORWARDINGACTION
	(OpenconfigAclLOGACTION)(0),                                                             // 13: openconfig.OpenconfigAclLOGACTION
	(OpenconfigAftEncapsulationHeaderType)(0),                                               // 14: openconfig.OpenconfigAftEncapsulationHeaderType
	(OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY)(0),                                        // 15: openconfig.OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY
	(OpenconfigAlarmTypesOPENCONFIGALARMTYPEID)(0),                                          // 16: openconfig.OpenconfigAlarmTypesOPENCONFIGALARMTYPEID
	(OpenconfigBfdBfdDiagnosticCode)(0),                                                     // 17: openconfig.OpenconfigBfdBfdDiagnosticCode
	(OpenconfigBfdBfdSessionState)(0),                                                       // 18: openconfig.OpenconfigBfdBfdSessionState
	(OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid)(0), // 19: openconfig.OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvSegmentListsSegmentListSegmentsSegmentStateSid
	(OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid)(0),                                // 20: openconfig.OpenconfigBgpBgpRibAttrSetsAttrSetTunnelEncapsulationTunnelsTunnelSubtlvsSubtlvStateBindingSid
	(OpenconfigBgpCommunityType)(0),                                                            // 21: openconfig.OpenconfigBgpCommunityType
	(OpenconfigBgpPeerType)(0),                                                                 // 22: openconfig.OpenconfigBgpPeerType
	(OpenconfigBgpPolicyBgpOriginAttrType)(0),                                                  // 23: openconfig.OpenconfigBgpPolicyBgpOriginAttrType
	(OpenconfigBgpPolicyBgpSetCommunityOptionType)(0),                                          // 24: openconfig.OpenconfigBgpPolicyBgpSetCommunityOptionType
	(OpenconfigBgpRemovePrivateAsOption)(0),                                                    // 25: openconfig.OpenconfigBgpRemovePrivateAsOption
	(OpenconfigBgpTypesAFISAFITYPE)(0),                                                         // 26: openconfig.OpenconfigBgpTypesAFISAFITYPE
	(OpenconfigBgpTypesBGPCAPABILITY)(0),                                                       // 27: openconfig.OpenconfigBgpTypesBGPCAPABILITY
	(OpenconfigBgpTypesBGPERRORCODE)(0),                                                        // 28: openconfig.OpenconfigBgpTypesBGPERRORCODE
	(OpenconfigBgpTypesBGPERRORSUBCODE)(0),                                                     // 29: openconfig.OpenconfigBgpTypesBGPERRORSUBCODE
	(OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY)(0),                                            // 30: openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY
	(OpenconfigCatalogTypesCATALOGMEMBERTYPE)(0),                                               // 31: openconfig.OpenconfigCatalogTypesCATALOGMEMBERTYPE
	(OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE)(0),                                        // 32: openconfig.OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE
	(OpenconfigCatalogTypesMODULECATEGORYBASE)(0),                                              // 33: openconfig.OpenconfigCatalogTypesMODULECATEGORYBASE
	(OpenconfigCatalogTypesMODULESTATUSTYPE)(0),                                                // 34: openconfig.OpenconfigCatalogTypesMODULESTATUSTYPE
	(OpenconfigCatalogTypesMODULESUBCATEGORYBASE)(0),                                           // 35: openconfig.OpenconfigCatalogTypesMODULESUBCATEGORYBASE
	(OpenconfigCatalogTypesORGANIZATIONTYPE)(0),                                                // 36: openconfig.OpenconfigCatalogTypesORGANIZATIONTYPE
	(OpenconfigExampleBASEIDENTITY)(0),                                                         // 37: openconfig.OpenconfigExampleBASEIDENTITY
	(OpenconfigIfAggregateAggregationType)(0),                                                  // 38: openconfig.OpenconfigIfAggregateAggregationType
	(OpenconfigIfEthernetETHERNETSPEED)(0),                                                     // 39: openconfig.OpenconfigIfEthernetETHERNETSPEED
	(OpenconfigIfIpIpAddressOrigin)(0),                                                         // 40: openconfig.OpenconfigIfIpIpAddressOrigin
	(OpenconfigIfIpNeighborOrigin)(0),                                                          // 41: openconfig.OpenconfigIfIpNeighborOrigin
	(OpenconfigIsisAdaptiveTimerType)(0),                                                       // 42: openconfig.OpenconfigIsisAdaptiveTimerType
	(OpenconfigIsisCircuitType)(0),                                                             // 43: openconfig.OpenconfigIsisCircuitType
	(OpenconfigIsisHelloPaddingType)(0),                                                        // 44: openconfig.OpenconfigIsisHelloPaddingType
	(OpenconfigIsisIsisInterfaceAdjState)(0),                                                   // 45: openconfig.OpenconfigIsisIsisInterfaceAdjState
	(OpenconfigIsisIsisMetricFlags)(0),                                                         // 46: openconfig.OpenconfigIsisIsisMetricFlags
	(OpenconfigIsisLevelType)(0),                                                               // 47: openconfig.OpenconfigIsisLevelType
	(OpenconfigIsisLsdbTypesISISSUBTLVTYPE)(0),                                                 // 48: openconfig.OpenconfigIsisLsdbTypesISISSUBTLVTYPE
	(OpenconfigIsisLsdbTypesISISTLVTYPE)(0),                                                    // 49: openconfig.OpenconfigIsisLsdbTypesISISTLVTYPE
	(OpenconfigIsisMetricStyle)(0),                                                             // 50: openconfig.OpenconfigIsisMetricStyle
	(OpenconfigIsisTypesAFISAFITYPE)(0),                                                        // 51: openconfig.OpenconfigIsisTypesAFISAFITYPE
	(OpenconfigIsisTypesAFITYPE)(0),                                                            // 52: openconfig.OpenconfigIsisTypesAFITYPE
	(OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE)(0),                                           // 53: openconfig.OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE
	(OpenconfigIsisTypesSAFITYPE)(0),                                                           // 54: openconfig.OpenconfigIsisTypesSAFITYPE
	(OpenconfigLacpLacpActivityType)(0),                                                        // 55: openconfig.OpenconfigLacpLacpActivityType
	(OpenconfigLacpLacpPeriodType)(0),                                                          // 56: openconfig.OpenconfigLacpLacpPeriodType
	(OpenconfigLacpLacpSynchronizationType)(0),                                                 // 57: openconfig.OpenconfigLacpLacpSynchronizationType
	(OpenconfigLacpLacpTimeoutType)(0),                                                         // 58: openconfig.OpenconfigLacpLacpTimeoutType
	(OpenconfigLldpChassisIdType)(0),                                                           // 59: openconfig.OpenconfigLldpChassisIdType
	(OpenconfigLldpPortIdType)(0),                                                              // 60: openconfig.OpenconfigLldpPortIdType
	(OpenconfigLldpTypesLLDPSYSTEMCAPABILITY)(0),                                               // 61: openconfig.OpenconfigLldpTypesLLDPSYSTEMCAPABILITY
	(OpenconfigLldpTypesLLDPTLV)(0),                                                            // 62: openconfig.OpenconfigLldpTypesLLDPTLV
	(OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP)(0),                                             // 63: openconfig.OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP
	(OpenconfigMacsecConfidentialityOffset)(0),                                                 // 64: openconfig.OpenconfigMacsecConfidentialityOffset
	(OpenconfigMacsecMacsecCipherSuite)(0),                                                     // 65: openconfig.OpenconfigMacsecMacsecCipherSuite
	(OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime)(0),       // 66: openconfig.OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigExpirationDateTime
	(OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime)(0),            // 67: openconfig.OpenconfigMacsecMacsecMkaKeyChainsKeyChainMkaKeysMkaKeyConfigValidDateTime
	(OpenconfigMessagesDEBUGSERVICE)(0),                                                        // 68: openconfig.OpenconfigMessagesDEBUGSERVICE
	(OpenconfigMessagesSyslogSeverity)(0),                                                      // 69: openconfig.OpenconfigMessagesSyslogSeverity
	(OpenconfigMplsCspfTieBreaking)(0),                                                         // 70: openconfig.OpenconfigMplsCspfTieBreaking
	(OpenconfigMplsLdpMplsLdpAdjacencyType)(0),                                                 // 71: openconfig.OpenconfigMplsLdpMplsLdpAdjacencyType
	(OpenconfigMplsLdpMplsLdpAfi)(0),                                                           // 72: openconfig.OpenconfigMplsLdpMplsLdpAfi
	(OpenconfigMplsMplsHopType)(0),                                                             // 73: openconfig.OpenconfigMplsMplsHopType
	(OpenconfigMplsMplsSrlgFloodingType)(0),                                                    // 74: openconfig.OpenconfigMplsMplsSrlgFloodingType
	(OpenconfigMplsTeBandwidthType)(0),                                                         // 75: openconfig.OpenconfigMplsTeBandwidthType
	(OpenconfigMplsTypesLSPMETRICTYPE)(0),                                                      // 76: openconfig.OpenconfigMplsTypesLSPMETRICTYPE
	(OpenconfigMplsTypesLSPOPERSTATUS)(0),                                                      // 77: openconfig.OpenconfigMplsTypesLSPOPERSTATUS
	(OpenconfigMplsTypesLSPROLE)(0),                                                            // 78: openconfig.OpenconfigMplsTypesLSPROLE
	(OpenconfigMplsTypesNULLLABELTYPE)(0),                                                      // 79: openconfig.OpenconfigMplsTypesNULLLABELTYPE
	(OpenconfigMplsTypesPATHCOMPUTATIONMETHOD)(0),                                              // 80: openconfig.OpenconfigMplsTypesPATHCOMPUTATIONMETHOD
	(OpenconfigMplsTypesPATHSETUPPROTOCOL)(0),                                                  // 81: openconfig.OpenconfigMplsTypesPATHSETUPPROTOCOL
	(OpenconfigMplsTypesPROTECTIONTYPE)(0),                                                     // 82: openconfig.OpenconfigMplsTypesPROTECTIONTYPE
	(OpenconfigMplsTypesPSEUDOWIREENCAPSULATION)(0),                                            // 83: openconfig.OpenconfigMplsTypesPSEUDOWIREENCAPSULATION
	(OpenconfigMplsTypesTUNNELADMINSTATUS)(0),                                                  // 84: openconfig.OpenconfigMplsTypesTUNNELADMINSTATUS
	(OpenconfigMplsTypesTUNNELTYPE)(0),                                                         // 85: openconfig.OpenconfigMplsTypesTUNNELTYPE
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel)(0), // 86: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryConfigLabel
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack)(0),                                                                                                                         // 87: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsMplsLabelEntryStatePoppedMplsLabelStack
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack)(0),                                                                                                                        // 88: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsNextHopsNextHopStatePushedMplsLabelStack
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel)(0),                                                                                                            // 89: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceAftsPolicyForwardingPolicyForwardingEntryConfigMplsLabel
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound)(0),                                                                                                     // 90: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigLowerBound
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound)(0),                                                                                                     // 91: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsGlobalReservedLabelBlocksReservedLabelBlockConfigUpperBound
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel)(0),                                                                                                                // 92: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigIncomingLabel
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel)(0),                                                                                                                    // 93: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsLspsStaticLspsStaticLspEgressConfigPushLabel
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority)(0),                                                      // 94: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeInterfaceAttributesInterfaceBandwidthReservationsBandwidthReservationStatePriority
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel)(0),                                                                        // 95: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionExplicitRouteObjectsExplicitRouteObjectStateLabel
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel)(0),                                                                    // 96: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionRecordRouteObjectsRecordRouteObjectStateReportedLabel
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn)(0),                                                                                                             // 97: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelIn
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut)(0),                                                                                                            // 98: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsRsvpTeSessionsSessionStateLabelOut
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel)(0),                                                                           // 99: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceMplsSignalingProtocolsSegmentRoutingAggregateSidCountersAggregateSidCounterStateMplsLabel
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue)(0),                                                                              // 100: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleActionSegmentListsSegmentListSidsSidConfigValue
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid)(0),                                                                                                           // 101: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstancePolicyForwardingPoliciesPolicyRulesRuleSrteConfigMplsBsid
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId)(0),                                                      // 102: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidConfigSidId
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal)(0),                                       // 103: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingAdjacencySidsAdjacencySidStateAllocatedDynamicLocal
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId)(0),                                                            // 104: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisInterfacesInterfaceLevelsLevelAfiSafiAfSegmentRoutingPrefixSidsPrefixSidConfigSidId
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel)(0), // 105: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolIsisLevelsLevelLinkStateDatabaseLspTlvsTlvRouterCapabilitiesCapabilitySubtlvsSubtlvSegmentRoutingCapabilitySrgbDescriptorsSrgbDescriptorStateLabel
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType)(0),                              // 106: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvSegmentRoutingSidLabelRangeTlvsTlvStateType
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType)(0),                                                                // 107: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaRouterInformationTlvsTlvStateType
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType)(0),                                              // 108: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvLinkSubTlvsSubTlvStateType
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType)(0),                                     // 109: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceProtocolsProtocolOspfv2AreasAreaLsdbLsaTypesLsaTypeLsasLsaOpaqueLsaTrafficEngineeringTlvsTlvNodeAttributeSubTlvsSubTlvStateType
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue)(0),                                                                 // 110: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyCandidatePathsCandidatePathSegmentListsSegmentListSidsSidStateValue
	(OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid)(0),                                                                                                                           // 111: openconfig.OpenconfigNetworkInstanceNetworkInstancesNetworkInstanceSegmentRoutingTePoliciesTePolicyStateBsid
	(OpenconfigNetworkInstanceTypesENCAPSULATION)(0),                      // 112: openconfig.OpenconfigNetworkInstanceTypesENCAPSULATION
	(OpenconfigNetworkInstanceTypesENDPOINTTYPE)(0),                       // 113: openconfig.OpenconfigNetworkInstanceTypesENDPOINTTYPE
	(OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE)(0),                // 114: openconfig.OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE
	(OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE)(0),                // 115: openconfig.OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE
	(OpenconfigOpenflowFailureMode)(0),                                    // 116: openconfig.OpenconfigOpenflowFailureMode
	(OpenconfigOpenflowTransport)(0),                                      // 117: openconfig.OpenconfigOpenflowTransport
	(OpenconfigOpticalAmplifierFIBERTYPEPROFILE)(0),                       // 118: openconfig.OpenconfigOpticalAmplifierFIBERTYPEPROFILE
	(OpenconfigOpticalAmplifierGAINRANGE)(0),                              // 119: openconfig.OpenconfigOpticalAmplifierGAINRANGE
	(OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE)(0),                   // 120: openconfig.OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE
	(OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE)(0),                   // 121: openconfig.OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE
	(OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE)(0),                 // 122: openconfig.OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE
	(OpenconfigOspfTypesGRACELSATLVTYPES)(0),                              // 123: openconfig.OpenconfigOspfTypesGRACELSATLVTYPES
	(OpenconfigOspfTypesMAXMETRICINCLUDE)(0),                              // 124: openconfig.OpenconfigOspfTypesMAXMETRICINCLUDE
	(OpenconfigOspfTypesMAXMETRICTRIGGER)(0),                              // 125: openconfig.OpenconfigOspfTypesMAXMETRICTRIGGER
	(OpenconfigOspfTypesOSPFLSATYPE)(0),                                   // 126: openconfig.OpenconfigOspfTypesOSPFLSATYPE
	(OpenconfigOspfTypesOSPFNEIGHBORSTATE)(0),                             // 127: openconfig.OpenconfigOspfTypesOSPFNEIGHBORSTATE
	(OpenconfigOspfTypesOSPFNETWORKTYPE)(0),                               // 128: openconfig.OpenconfigOspfTypesOSPFNETWORKTYPE
	(OpenconfigOspfTypesOSPFOPAQUELSATYPE)(0),                             // 129: openconfig.OpenconfigOspfTypesOSPFOPAQUELSATYPE
	(OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES)(0),                      // 130: openconfig.OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES
	(OpenconfigOspfTypesOSPFTELINKTLVTYPE)(0),                             // 131: openconfig.OpenconfigOspfTypesOSPFTELINKTLVTYPE
	(OpenconfigOspfTypesOSPFTELSATLVTYPE)(0),                              // 132: openconfig.OpenconfigOspfTypesOSPFTELSATLVTYPE
	(OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE)(0),                  // 133: openconfig.OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE
	(OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE)(0), // 134: openconfig.OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE
	(OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE)(0),                // 135: openconfig.OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE
	(OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE)(0),      // 136: openconfig.OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE
	(OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE)(0),                          // 137: openconfig.OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE
	(OpenconfigOspfTypesRILSATLVTYPES)(0),                                 // 138: openconfig.OpenconfigOspfTypesRILSATLVTYPES
	(OpenconfigOspfTypesROUTERLSATYPES)(0),                                // 139: openconfig.OpenconfigOspfTypesROUTERLSATYPES
	(OpenconfigOspfTypesSRALGORITHM)(0),                                   // 140: openconfig.OpenconfigOspfTypesSRALGORITHM
	(OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE)(0),                        // 141: openconfig.OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE
	(OpenconfigOspfv2SrSidType)(0),                                        // 142: openconfig.OpenconfigOspfv2SrSidType
	(OpenconfigPacketMatchTypesETHERTYPE)(0),                              // 143: openconfig.OpenconfigPacketMatchTypesETHERTYPE
	(OpenconfigPacketMatchTypesIPPROTOCOL)(0),                             // 144: openconfig.OpenconfigPacketMatchTypesIPPROTOCOL
	(OpenconfigPacketMatchTypesTCPFLAGS)(0),                               // 145: openconfig.OpenconfigPacketMatchTypesTCPFLAGS
	(OpenconfigPimTypesPIMMODE)(0),                                        // 146: openconfig.OpenconfigPimTypesPIMMODE
	(OpenconfigPlatformLinecardComponentPowerType)(0),                     // 147: openconfig.OpenconfigPlatformLinecardComponentPowerType
	(OpenconfigPlatformTypesCOMPONENTOPERSTATUS)(0),                       // 148: openconfig.OpenconfigPlatformTypesCOMPONENTOPERSTATUS
	(OpenconfigPlatformTypesFECMODETYPE)(0),                               // 149: openconfig.OpenconfigPlatformTypesFECMODETYPE
	(OpenconfigPlatformTypesFECSTATUSTYPE)(0),                             // 150: openconfig.OpenconfigPlatformTypesFECSTATUSTYPE
	(OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT)(0),               // 151: openconfig.OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT
	(OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT)(0),               // 152: openconfig.OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT
	(OpenconfigPolicyTypesATTRIBUTECOMPARISON)(0),                         // 153: openconfig.OpenconfigPolicyTypesATTRIBUTECOMPARISON
	(OpenconfigPolicyTypesINSTALLPROTOCOLTYPE)(0),                         // 154: openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	(OpenconfigProbesTestType)(0),                                         // 155: openconfig.OpenconfigProbesTestType
	(OpenconfigQosQueueBehavior)(0),                                       // 156: openconfig.OpenconfigQosQueueBehavior
	(OpenconfigQosTypesQOSQUEUETYPE)(0),                                   // 157: openconfig.OpenconfigQosTypesQOSQUEUETYPE
	(OpenconfigQosTypesQOSSCHEDULERTYPE)(0),                               // 158: openconfig.OpenconfigQosTypesQOSSCHEDULERTYPE
	(OpenconfigRibBgpAsPathSegmentType)(0),                                // 159: openconfig.OpenconfigRibBgpAsPathSegmentType
	(OpenconfigRibBgpBgpOriginAttrType)(0),                                // 160: openconfig.OpenconfigRibBgpBgpOriginAttrType
	(OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH)(0),                      // 161: openconfig.OpenconfigRibBgpTypesBGPNOTSELECTEDBESTPATH
	(OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY)(0),                        // 162: openconfig.OpenconfigRibBgpTypesBGPNOTSELECTEDPOLICY
	(OpenconfigRibBgpTypesINVALIDROUTEREASON)(0),                          // 163: openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	(OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE)(0),               // 164: openconfig.OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE
	(OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE)(0),                     // 165: openconfig.OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE
	(OpenconfigRoutingPolicyDefaultPolicyType)(0),                         // 166: openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	(OpenconfigRoutingPolicyMatchSetOptionsRestrictedType)(0),             // 167: openconfig.OpenconfigRoutingPolicyMatchSetOptionsRestrictedType
	(OpenconfigRoutingPolicyMatchSetOptionsType)(0),                       // 168: openconfig.OpenconfigRoutingPolicyMatchSetOptionsType
	(OpenconfigRoutingPolicyPolicyResultType)(0),                          // 169: openconfig.OpenconfigRoutingPolicyPolicyResultType
	(OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed)(0),     // 170: openconfig.OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetMed
	(OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop)(0), // 171: openconfig.OpenconfigRoutingPolicyRoutingPolicyPolicyDefinitionsPolicyDefinitionStatementsStatementActionsBgpActionsConfigSetNextHop
	(OpenconfigSegmentRoutingSrDataplaneType)(0),               // 172: openconfig.OpenconfigSegmentRoutingSrDataplaneType
	(OpenconfigSpanningTreeStpGuardType)(0),                    // 173: openconfig.OpenconfigSpanningTreeStpGuardType
	(OpenconfigSpanningTreeStpLinkType)(0),                     // 174: openconfig.OpenconfigSpanningTreeStpLinkType
	(OpenconfigSpanningTreeTypesSTPEDGEPORT)(0),                // 175: openconfig.OpenconfigSpanningTreeTypesSTPEDGEPORT
	(OpenconfigSpanningTreeTypesSTPPORTROLE)(0),                // 176: openconfig.OpenconfigSpanningTreeTypesSTPPORTROLE
	(OpenconfigSpanningTreeTypesSTPPORTSTATE)(0),               // 177: openconfig.OpenconfigSpanningTreeTypesSTPPORTSTATE
	(OpenconfigSpanningTreeTypesSTPPROTOCOL)(0),                // 178: openconfig.OpenconfigSpanningTreeTypesSTPPROTOCOL
	(OpenconfigSrtePolicyEnlpType)(0),                          // 179: openconfig.OpenconfigSrtePolicyEnlpType
	(OpenconfigSrtePolicySrteInvalidSlReason)(0),               // 180: openconfig.OpenconfigSrtePolicySrteInvalidSlReason
	(OpenconfigSrtePolicySrteProtocolType)(0),                  // 181: openconfig.OpenconfigSrtePolicySrteProtocolType
	(OpenconfigSystemLoggingSYSLOGFACILITY)(0),                 // 182: openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	(OpenconfigSystemLoggingSyslogSeverity)(0),                 // 183: openconfig.OpenconfigSystemLoggingSyslogSeverity
	(OpenconfigSystemNTPAUTHTYPE)(0),                           // 184: openconfig.OpenconfigSystemNTPAUTHTYPE
	(OpenconfigTelemetryTypesDATAENCODINGMETHOD)(0),            // 185: openconfig.OpenconfigTelemetryTypesDATAENCODINGMETHOD
	(OpenconfigTelemetryTypesSTREAMPROTOCOL)(0),                // 186: openconfig.OpenconfigTelemetryTypesSTREAMPROTOCOL
	(OpenconfigTerminalDeviceAdminStateType)(0),                // 187: openconfig.OpenconfigTerminalDeviceAdminStateType
	(OpenconfigTerminalDeviceLoopbackModeType)(0),              // 188: openconfig.OpenconfigTerminalDeviceLoopbackModeType
	(OpenconfigTransportLineCommonAdminStateType)(0),           // 189: openconfig.OpenconfigTransportLineCommonAdminStateType
	(OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE)(0), // 190: openconfig.OpenconfigTransportLineConnectivityPORTCONNECTIONTYPE
	(OpenconfigTransportLineProtectionAPSPATHS)(0),             // 191: openconfig.OpenconfigTransportLineProtectionAPSPATHS
	(OpenconfigTransportTypesETHERNETPMDTYPE)(0),               // 192: openconfig.OpenconfigTransportTypesETHERNETPMDTYPE
	(OpenconfigTransportTypesFIBERCONNECTORTYPE)(0),            // 193: openconfig.OpenconfigTransportTypesFIBERCONNECTORTYPE
	(OpenconfigTransportTypesFIBERJUMPERTYPE)(0),               // 194: openconfig.OpenconfigTransportTypesFIBERJUMPERTYPE
	(OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL)(0),          // 195: openconfig.OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL
	(OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE)(0),    // 196: openconfig.OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE
	(OpenconfigTransportTypesOPTICALPORTTYPE)(0),               // 197: openconfig.OpenconfigTransportTypesOPTICALPORTTYPE
	(OpenconfigTransportTypesOTNAPPLICATIONCODE)(0),            // 198: openconfig.OpenconfigTransportTypesOTNAPPLICATIONCODE
	(OpenconfigTransportTypesSONETAPPLICATIONCODE)(0),          // 199: openconfig.OpenconfigTransportTypesSONETAPPLICATIONCODE
	(OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE)(0),     // 200: openconfig.OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE
	(OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE)(0),         // 201: openconfig.OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE
	(OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE)(0),        // 202: openconfig.OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE
	(OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY)(0),      // 203: openconfig.OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY
	(OpenconfigTypesADDRESSFAMILY)(0),                          // 204: openconfig.OpenconfigTypesADDRESSFAMILY
	(OpenconfigVlanTypesTPIDTYPES)(0),                          // 205: openconfig.OpenconfigVlanTypesTPIDTYPES
	(OpenconfigVlanVlanModeType)(0),                            // 206: openconfig.OpenconfigVlanVlanModeType
	(OpenconfigVlanVlanStackAction)(0),                         // 207: openconfig.OpenconfigVlanVlanStackAction
	(OpenconfigWavelengthRouterASECONTROLMODE)(0),              // 208: openconfig.OpenconfigWavelengthRouterASECONTROLMODE
	(OpenconfigWavelengthRouterATTENUATIONCONTROLMODE)(0),      // 209: openconfig.OpenconfigWavelengthRouterATTENUATIONCONTROLMODE
	(OpenconfigWavelengthRouterAdminStateType)(0),              // 210: openconfig.OpenconfigWavelengthRouterAdminStateType
	(OpenconfigWifiTypesAPSTATE)(0),                            // 211: openconfig.OpenconfigWifiTypesAPSTATE
	(OpenconfigWifiTypesCHANGEREASONTYPE)(0),                   // 212: openconfig.OpenconfigWifiTypesCHANGEREASONTYPE
	(OpenconfigWifiTypesCLIENTCAPABILITIES)(0),                 // 213: openconfig.OpenconfigWifiTypesCLIENTCAPABILITIES
	(OpenconfigWifiTypesCLIENTSTATE)(0),                        // 214: openconfig.OpenconfigWifiTypesCLIENTSTATE
	(OpenconfigWifiTypesDATARATE)(0),                           // 215: openconfig.OpenconfigWifiTypesDATARATE
	(OpenconfigWifiTypesOPERATINGFREQUENCY)(0),                 // 216: openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY
}
var file_openconfig_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_openconfig_enums_proto_init() }
func file_openconfig_enums_proto_init() {
	if File_openconfig_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_enums_proto_rawDesc,
			NumEnums:      217,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_enums_proto_goTypes,
		DependencyIndexes: file_openconfig_enums_proto_depIdxs,
		EnumInfos:         file_openconfig_enums_proto_enumTypes,
	}.Build()
	File_openconfig_enums_proto = out.File
	file_openconfig_enums_proto_rawDesc = nil
	file_openconfig_enums_proto_goTypes = nil
	file_openconfig_enums_proto_depIdxs = nil
}
