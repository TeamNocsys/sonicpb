// openconfig.openconfig_lacp is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_lacp.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Lacp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config     *Lacp_Config     `protobuf:"bytes,416417031,opt,name=config,proto3" json:"config,omitempty"`
	Interfaces *Lacp_Interfaces `protobuf:"bytes,278182533,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	State      *Lacp_State      `protobuf:"bytes,340469368,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Lacp) Reset() {
	*x = Lacp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lacp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lacp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lacp) ProtoMessage() {}

func (x *Lacp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lacp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lacp.ProtoReflect.Descriptor instead.
func (*Lacp) Descriptor() ([]byte, []int) {
	return file_openconfig_lacp_proto_rawDescGZIP(), []int{0}
}

func (x *Lacp) GetConfig() *Lacp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Lacp) GetInterfaces() *Lacp_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Lacp) GetState() *Lacp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Lacp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemPriority *ywrapper.UintValue `protobuf:"bytes,71542334,opt,name=system_priority,json=systemPriority,proto3" json:"system_priority,omitempty"`
}

func (x *Lacp_Config) Reset() {
	*x = Lacp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lacp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lacp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lacp_Config) ProtoMessage() {}

func (x *Lacp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lacp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lacp_Config.ProtoReflect.Descriptor instead.
func (*Lacp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_lacp_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Lacp_Config) GetSystemPriority() *ywrapper.UintValue {
	if x != nil {
		return x.SystemPriority
	}
	return nil
}

type Lacp_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*Lacp_Interfaces_InterfaceKey `protobuf:"bytes,212110241,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Lacp_Interfaces) Reset() {
	*x = Lacp_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lacp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lacp_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lacp_Interfaces) ProtoMessage() {}

func (x *Lacp_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lacp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lacp_Interfaces.ProtoReflect.Descriptor instead.
func (*Lacp_Interfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_lacp_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Lacp_Interfaces) GetInterface() []*Lacp_Interfaces_InterfaceKey {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Lacp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemPriority *ywrapper.UintValue `protobuf:"bytes,509622121,opt,name=system_priority,json=systemPriority,proto3" json:"system_priority,omitempty"`
}

func (x *Lacp_State) Reset() {
	*x = Lacp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lacp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lacp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lacp_State) ProtoMessage() {}

func (x *Lacp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lacp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lacp_State.ProtoReflect.Descriptor instead.
func (*Lacp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_lacp_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Lacp_State) GetSystemPriority() *ywrapper.UintValue {
	if x != nil {
		return x.SystemPriority
	}
	return nil
}

type Lacp_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config  *Lacp_Interfaces_Interface_Config  `protobuf:"bytes,267814,opt,name=config,proto3" json:"config,omitempty"`
	Members *Lacp_Interfaces_Interface_Members `protobuf:"bytes,448219541,opt,name=members,proto3" json:"members,omitempty"`
	State   *Lacp_Interfaces_Interface_State   `protobuf:"bytes,409381779,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Lacp_Interfaces_Interface) Reset() {
	*x = Lacp_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lacp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lacp_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lacp_Interfaces_Interface) ProtoMessage() {}

func (x *Lacp_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lacp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lacp_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*Lacp_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_openconfig_lacp_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Lacp_Interfaces_Interface) GetConfig() *Lacp_Interfaces_Interface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Lacp_Interfaces_Interface) GetMembers() *Lacp_Interfaces_Interface_Members {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Lacp_Interfaces_Interface) GetState() *Lacp_Interfaces_Interface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Lacp_Interfaces_InterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Interface *Lacp_Interfaces_Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Lacp_Interfaces_InterfaceKey) Reset() {
	*x = Lacp_Interfaces_InterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lacp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lacp_Interfaces_InterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lacp_Interfaces_InterfaceKey) ProtoMessage() {}

func (x *Lacp_Interfaces_InterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lacp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lacp_Interfaces_InterfaceKey.ProtoReflect.Descriptor instead.
func (*Lacp_Interfaces_InterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_lacp_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *Lacp_Interfaces_InterfaceKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Lacp_Interfaces_InterfaceKey) GetInterface() *Lacp_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Lacp_Interfaces_Interface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval       OpenconfigLacpLacpPeriodType   `protobuf:"varint,463085042,opt,name=interval,proto3,enum=openconfig.OpenconfigLacpLacpPeriodType" json:"interval,omitempty"`
	LacpMode       OpenconfigLacpLacpActivityType `protobuf:"varint,43173203,opt,name=lacp_mode,json=lacpMode,proto3,enum=openconfig.OpenconfigLacpLacpActivityType" json:"lacp_mode,omitempty"`
	Name           *ywrapper.StringValue          `protobuf:"bytes,73148204,opt,name=name,proto3" json:"name,omitempty"`
	SystemIdMac    *ywrapper.StringValue          `protobuf:"bytes,461403306,opt,name=system_id_mac,json=systemIdMac,proto3" json:"system_id_mac,omitempty"`
	SystemPriority *ywrapper.UintValue            `protobuf:"bytes,131529879,opt,name=system_priority,json=systemPriority,proto3" json:"system_priority,omitempty"`
}

func (x *Lacp_Interfaces_Interface_Config) Reset() {
	*x = Lacp_Interfaces_Interface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lacp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lacp_Interfaces_Interface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lacp_Interfaces_Interface_Config) ProtoMessage() {}

func (x *Lacp_Interfaces_Interface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lacp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lacp_Interfaces_Interface_Config.ProtoReflect.Descriptor instead.
func (*Lacp_Interfaces_Interface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_lacp_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *Lacp_Interfaces_Interface_Config) GetInterval() OpenconfigLacpLacpPeriodType {
	if x != nil {
		return x.Interval
	}
	return OpenconfigLacpLacpPeriodType_OPENCONFIGLACPLACPPERIODTYPE_SLOW
}

func (x *Lacp_Interfaces_Interface_Config) GetLacpMode() OpenconfigLacpLacpActivityType {
	if x != nil {
		return x.LacpMode
	}
	return OpenconfigLacpLacpActivityType_OPENCONFIGLACPLACPACTIVITYTYPE_ACTIVE
}

func (x *Lacp_Interfaces_Interface_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Config) GetSystemIdMac() *ywrapper.StringValue {
	if x != nil {
		return x.SystemIdMac
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Config) GetSystemPriority() *ywrapper.UintValue {
	if x != nil {
		return x.SystemPriority
	}
	return nil
}

type Lacp_Interfaces_Interface_Members struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member []*Lacp_Interfaces_Interface_Members_MemberKey `protobuf:"bytes,107372070,rep,name=member,proto3" json:"member,omitempty"`
}

func (x *Lacp_Interfaces_Interface_Members) Reset() {
	*x = Lacp_Interfaces_Interface_Members{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lacp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lacp_Interfaces_Interface_Members) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lacp_Interfaces_Interface_Members) ProtoMessage() {}

func (x *Lacp_Interfaces_Interface_Members) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lacp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lacp_Interfaces_Interface_Members.ProtoReflect.Descriptor instead.
func (*Lacp_Interfaces_Interface_Members) Descriptor() ([]byte, []int) {
	return file_openconfig_lacp_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *Lacp_Interfaces_Interface_Members) GetMember() []*Lacp_Interfaces_Interface_Members_MemberKey {
	if x != nil {
		return x.Member
	}
	return nil
}

type Lacp_Interfaces_Interface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval       OpenconfigLacpLacpPeriodType   `protobuf:"varint,156781677,opt,name=interval,proto3,enum=openconfig.OpenconfigLacpLacpPeriodType" json:"interval,omitempty"`
	LacpMode       OpenconfigLacpLacpActivityType `protobuf:"varint,285910318,opt,name=lacp_mode,json=lacpMode,proto3,enum=openconfig.OpenconfigLacpLacpActivityType" json:"lacp_mode,omitempty"`
	Name           *ywrapper.StringValue          `protobuf:"bytes,53396163,opt,name=name,proto3" json:"name,omitempty"`
	SystemIdMac    *ywrapper.StringValue          `protobuf:"bytes,308184979,opt,name=system_id_mac,json=systemIdMac,proto3" json:"system_id_mac,omitempty"`
	SystemPriority *ywrapper.UintValue            `protobuf:"bytes,386600370,opt,name=system_priority,json=systemPriority,proto3" json:"system_priority,omitempty"`
}

func (x *Lacp_Interfaces_Interface_State) Reset() {
	*x = Lacp_Interfaces_Interface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lacp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lacp_Interfaces_Interface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lacp_Interfaces_Interface_State) ProtoMessage() {}

func (x *Lacp_Interfaces_Interface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lacp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lacp_Interfaces_Interface_State.ProtoReflect.Descriptor instead.
func (*Lacp_Interfaces_Interface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_lacp_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

func (x *Lacp_Interfaces_Interface_State) GetInterval() OpenconfigLacpLacpPeriodType {
	if x != nil {
		return x.Interval
	}
	return OpenconfigLacpLacpPeriodType_OPENCONFIGLACPLACPPERIODTYPE_SLOW
}

func (x *Lacp_Interfaces_Interface_State) GetLacpMode() OpenconfigLacpLacpActivityType {
	if x != nil {
		return x.LacpMode
	}
	return OpenconfigLacpLacpActivityType_OPENCONFIGLACPLACPACTIVITYTYPE_ACTIVE
}

func (x *Lacp_Interfaces_Interface_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_State) GetSystemIdMac() *ywrapper.StringValue {
	if x != nil {
		return x.SystemIdMac
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_State) GetSystemPriority() *ywrapper.UintValue {
	if x != nil {
		return x.SystemPriority
	}
	return nil
}

type Lacp_Interfaces_Interface_Members_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Lacp_Interfaces_Interface_Members_Member_State `protobuf:"bytes,101613208,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Lacp_Interfaces_Interface_Members_Member) Reset() {
	*x = Lacp_Interfaces_Interface_Members_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lacp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lacp_Interfaces_Interface_Members_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lacp_Interfaces_Interface_Members_Member) ProtoMessage() {}

func (x *Lacp_Interfaces_Interface_Members_Member) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lacp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lacp_Interfaces_Interface_Members_Member.ProtoReflect.Descriptor instead.
func (*Lacp_Interfaces_Interface_Members_Member) Descriptor() ([]byte, []int) {
	return file_openconfig_lacp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0}
}

func (x *Lacp_Interfaces_Interface_Members_Member) GetState() *Lacp_Interfaces_Interface_Members_Member_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Lacp_Interfaces_Interface_Members_MemberKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface string                                    `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	Member    *Lacp_Interfaces_Interface_Members_Member `protobuf:"bytes,2,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *Lacp_Interfaces_Interface_Members_MemberKey) Reset() {
	*x = Lacp_Interfaces_Interface_Members_MemberKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lacp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lacp_Interfaces_Interface_Members_MemberKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lacp_Interfaces_Interface_Members_MemberKey) ProtoMessage() {}

func (x *Lacp_Interfaces_Interface_Members_MemberKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lacp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lacp_Interfaces_Interface_Members_MemberKey.ProtoReflect.Descriptor instead.
func (*Lacp_Interfaces_Interface_Members_MemberKey) Descriptor() ([]byte, []int) {
	return file_openconfig_lacp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1}
}

func (x *Lacp_Interfaces_Interface_Members_MemberKey) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *Lacp_Interfaces_Interface_Members_MemberKey) GetMember() *Lacp_Interfaces_Interface_Members_Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type Lacp_Interfaces_Interface_Members_Member_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity        OpenconfigLacpLacpActivityType                           `protobuf:"varint,344383748,opt,name=activity,proto3,enum=openconfig.OpenconfigLacpLacpActivityType" json:"activity,omitempty"`
	Aggregatable    *ywrapper.BoolValue                                      `protobuf:"bytes,490059983,opt,name=aggregatable,proto3" json:"aggregatable,omitempty"`
	Collecting      *ywrapper.BoolValue                                      `protobuf:"bytes,431241365,opt,name=collecting,proto3" json:"collecting,omitempty"`
	Counters        *Lacp_Interfaces_Interface_Members_Member_State_Counters `protobuf:"bytes,159126128,opt,name=counters,proto3" json:"counters,omitempty"`
	Distributing    *ywrapper.BoolValue                                      `protobuf:"bytes,325869523,opt,name=distributing,proto3" json:"distributing,omitempty"`
	Interface       *ywrapper.StringValue                                    `protobuf:"bytes,140807600,opt,name=interface,proto3" json:"interface,omitempty"`
	OperKey         *ywrapper.UintValue                                      `protobuf:"bytes,503255861,opt,name=oper_key,json=operKey,proto3" json:"oper_key,omitempty"`
	PartnerId       *ywrapper.StringValue                                    `protobuf:"bytes,342233611,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	PartnerKey      *ywrapper.UintValue                                      `protobuf:"bytes,313821353,opt,name=partner_key,json=partnerKey,proto3" json:"partner_key,omitempty"`
	PartnerPortNum  *ywrapper.UintValue                                      `protobuf:"bytes,11089282,opt,name=partner_port_num,json=partnerPortNum,proto3" json:"partner_port_num,omitempty"`
	PortNum         *ywrapper.UintValue                                      `protobuf:"bytes,55409541,opt,name=port_num,json=portNum,proto3" json:"port_num,omitempty"`
	Synchronization OpenconfigLacpLacpSynchronizationType                    `protobuf:"varint,179070617,opt,name=synchronization,proto3,enum=openconfig.OpenconfigLacpLacpSynchronizationType" json:"synchronization,omitempty"`
	SystemId        *ywrapper.StringValue                                    `protobuf:"bytes,207537082,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	Timeout         OpenconfigLacpLacpTimeoutType                            `protobuf:"varint,834808,opt,name=timeout,proto3,enum=openconfig.OpenconfigLacpLacpTimeoutType" json:"timeout,omitempty"`
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) Reset() {
	*x = Lacp_Interfaces_Interface_Members_Member_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lacp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lacp_Interfaces_Interface_Members_Member_State) ProtoMessage() {}

func (x *Lacp_Interfaces_Interface_Members_Member_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lacp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lacp_Interfaces_Interface_Members_Member_State.ProtoReflect.Descriptor instead.
func (*Lacp_Interfaces_Interface_Members_Member_State) Descriptor() ([]byte, []int) {
	return file_openconfig_lacp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 0}
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) GetActivity() OpenconfigLacpLacpActivityType {
	if x != nil {
		return x.Activity
	}
	return OpenconfigLacpLacpActivityType_OPENCONFIGLACPLACPACTIVITYTYPE_ACTIVE
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) GetAggregatable() *ywrapper.BoolValue {
	if x != nil {
		return x.Aggregatable
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) GetCollecting() *ywrapper.BoolValue {
	if x != nil {
		return x.Collecting
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) GetCounters() *Lacp_Interfaces_Interface_Members_Member_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) GetDistributing() *ywrapper.BoolValue {
	if x != nil {
		return x.Distributing
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) GetOperKey() *ywrapper.UintValue {
	if x != nil {
		return x.OperKey
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) GetPartnerId() *ywrapper.StringValue {
	if x != nil {
		return x.PartnerId
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) GetPartnerKey() *ywrapper.UintValue {
	if x != nil {
		return x.PartnerKey
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) GetPartnerPortNum() *ywrapper.UintValue {
	if x != nil {
		return x.PartnerPortNum
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) GetPortNum() *ywrapper.UintValue {
	if x != nil {
		return x.PortNum
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) GetSynchronization() OpenconfigLacpLacpSynchronizationType {
	if x != nil {
		return x.Synchronization
	}
	return OpenconfigLacpLacpSynchronizationType_OPENCONFIGLACPLACPSYNCHRONIZATIONTYPE_UNSET
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) GetSystemId() *ywrapper.StringValue {
	if x != nil {
		return x.SystemId
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State) GetTimeout() OpenconfigLacpLacpTimeoutType {
	if x != nil {
		return x.Timeout
	}
	return OpenconfigLacpLacpTimeoutType_OPENCONFIGLACPLACPTIMEOUTTYPE_UNSET
}

type Lacp_Interfaces_Interface_Members_Member_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LacpErrors        *ywrapper.UintValue `protobuf:"bytes,432819317,opt,name=lacp_errors,json=lacpErrors,proto3" json:"lacp_errors,omitempty"`
	LacpInPkts        *ywrapper.UintValue `protobuf:"bytes,133444718,opt,name=lacp_in_pkts,json=lacpInPkts,proto3" json:"lacp_in_pkts,omitempty"`
	LacpOutPkts       *ywrapper.UintValue `protobuf:"bytes,391388365,opt,name=lacp_out_pkts,json=lacpOutPkts,proto3" json:"lacp_out_pkts,omitempty"`
	LacpRxErrors      *ywrapper.UintValue `protobuf:"bytes,124474434,opt,name=lacp_rx_errors,json=lacpRxErrors,proto3" json:"lacp_rx_errors,omitempty"`
	LacpTxErrors      *ywrapper.UintValue `protobuf:"bytes,98014728,opt,name=lacp_tx_errors,json=lacpTxErrors,proto3" json:"lacp_tx_errors,omitempty"`
	LacpUnknownErrors *ywrapper.UintValue `protobuf:"bytes,33984050,opt,name=lacp_unknown_errors,json=lacpUnknownErrors,proto3" json:"lacp_unknown_errors,omitempty"`
}

func (x *Lacp_Interfaces_Interface_Members_Member_State_Counters) Reset() {
	*x = Lacp_Interfaces_Interface_Members_Member_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lacp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lacp_Interfaces_Interface_Members_Member_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lacp_Interfaces_Interface_Members_Member_State_Counters) ProtoMessage() {}

func (x *Lacp_Interfaces_Interface_Members_Member_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lacp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lacp_Interfaces_Interface_Members_Member_State_Counters.ProtoReflect.Descriptor instead.
func (*Lacp_Interfaces_Interface_Members_Member_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_lacp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 0, 0}
}

func (x *Lacp_Interfaces_Interface_Members_Member_State_Counters) GetLacpErrors() *ywrapper.UintValue {
	if x != nil {
		return x.LacpErrors
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State_Counters) GetLacpInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.LacpInPkts
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State_Counters) GetLacpOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.LacpOutPkts
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State_Counters) GetLacpRxErrors() *ywrapper.UintValue {
	if x != nil {
		return x.LacpRxErrors
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State_Counters) GetLacpTxErrors() *ywrapper.UintValue {
	if x != nil {
		return x.LacpTxErrors
	}
	return nil
}

func (x *Lacp_Interfaces_Interface_Members_Member_State_Counters) GetLacpUnknownErrors() *ywrapper.UintValue {
	if x != nil {
		return x.LacpUnknownErrors
	}
	return nil
}

var File_openconfig_lacp_proto protoreflect.FileDescriptor

var file_openconfig_lacp_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x61, 0x63,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x29, 0x0a, 0x04, 0x4c, 0x61, 0x63, 0x70,
	0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x87, 0x8a, 0xc8, 0xc6, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0f, 0x82,
	0x41, 0x0c, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x85, 0xf5, 0xd2, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x63, 0x70,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42, 0x13, 0x82, 0x41, 0x10,
	0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf8, 0xcc, 0xac, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x63,
	0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x82, 0x41, 0x0b, 0x2f, 0x6c, 0x61, 0x63,
	0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x6a,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xbe, 0xcc, 0x8e, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x6c,
	0x61, 0x63, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xa0, 0x26, 0x0a, 0x0a, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xa1, 0x97, 0x92, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x63,
	0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x6c,
	0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x1a, 0x99, 0x24, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x6c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa6, 0xac, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x72, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x95, 0x93, 0xdd, 0xd5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x6a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x93, 0xd7, 0x9a,
	0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0xc0, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x77, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xf2, 0xbb, 0xe8, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x63, 0x70, 0x4c, 0x61, 0x63, 0x70,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f,
	0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x7a, 0x0a, 0x09, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0xd3, 0x8a, 0xcb, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x61, 0x63, 0x70, 0x4c, 0x61, 0x63, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x61, 0x63, 0x70,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x63, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x57, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xac, 0xce, 0xf0, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x6c, 0x61, 0x63,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0xaa, 0xe9, 0x81, 0xdc, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f,
	0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x69, 0x64, 0x2d, 0x6d, 0x61, 0x63, 0x52, 0x0b,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x4d, 0x61, 0x63, 0x12, 0x75, 0x0a, 0x0f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x97,
	0xf9, 0xdb, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41,
	0x31, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x1a, 0xbc, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x80,
	0x01, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0xa6, 0xbc, 0x99, 0x33, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4c, 0x61, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x2c, 0x82, 0x41, 0x29,
	0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x1a, 0xfb, 0x15, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x87, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x98, 0xfd, 0xb9, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x63,
	0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f,
	0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe6, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x87, 0x01, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x84, 0xc2,
	0x9b, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c,
	0x61, 0x63, 0x70, 0x4c, 0x61, 0x63, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x7c, 0x0a, 0x0c, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xcf, 0xf1, 0xd6, 0xe9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x6c,
	0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x76, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x95, 0xf1, 0xd0, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x9f, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xf0, 0xa4,
	0xf0, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x3b, 0x82, 0x41, 0x38,
	0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x7c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0xd3, 0xbf, 0xb1, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x74, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xb0, 0x9b,
	0x92, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82,
	0x41, 0x39, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0xb5, 0xa6, 0xfc, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x07,
	0x6f, 0x70, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x77, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x8b, 0xa4, 0x98, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x6c, 0x61, 0x63, 0x70,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2d, 0x69, 0x64, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x78, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0xa9, 0x91, 0xd2, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e,
	0x82, 0x41, 0x3b, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x82, 0xeb, 0xa4, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82,
	0x41, 0x40, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e,
	0x75, 0x6d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x6e, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x85,
	0xf7, 0xb5, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41,
	0x38, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0xa2, 0x01, 0x0a, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x99, 0xcd, 0xb1, 0x55, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x63, 0x70, 0x4c, 0x61, 0x63, 0x70, 0x53,
	0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0xba, 0x87, 0xfb, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d,
	0x69, 0x64, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x81, 0x01, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xf8, 0xf9, 0x32, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x63, 0x70, 0x4c, 0x61, 0x63, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37,
	0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x1a, 0xcc, 0x06, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x81, 0x01,
	0x0a, 0x0b, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xf5, 0x98,
	0xb1, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41,
	0x44, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0a, 0x6c, 0x61, 0x63, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x82, 0x01, 0x0a, 0x0c, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x18, 0xee, 0xe8, 0xd0, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x61,
	0x63, 0x70, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0a, 0x6c, 0x61, 0x63, 0x70,
	0x49, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x63, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xcd, 0xb9, 0xd0, 0xba, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x6c, 0x61, 0x63,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6b,
	0x74, 0x73, 0x52, 0x0b, 0x6c, 0x61, 0x63, 0x70, 0x4f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12,
	0x88, 0x01, 0x0a, 0x0e, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0xc2, 0xa8, 0xad, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x61,
	0x63, 0x70, 0x2d, 0x72, 0x78, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0c, 0x6c, 0x61,
	0x63, 0x70, 0x52, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x6c,
	0x61, 0x63, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x88, 0xac,
	0xde, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47,
	0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2d, 0x74, 0x78,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0c, 0x6c, 0x61, 0x63, 0x70, 0x54, 0x78, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x13, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xb2, 0x9c,
	0x9a, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c,
	0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2d, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x11, 0x6c, 0x61,
	0x63, 0x70, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a,
	0xaf, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x54, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x1a, 0xbb, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x75, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xed, 0x98, 0xe1, 0x4a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x63, 0x70, 0x4c, 0x61, 0x63, 0x70,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f,
	0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x7a, 0x0a, 0x09, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0xae, 0xca, 0xaa, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x61, 0x63, 0x70, 0x4c, 0x61, 0x63, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x63, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x56,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc3, 0x85, 0xbb, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x6c, 0x61, 0x63, 0x70,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x70, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x93, 0x8f, 0xfa, 0x92, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x6c, 0x61,
	0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2d, 0x69, 0x64, 0x2d, 0x6d, 0x61, 0x63, 0x52, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x4d, 0x61, 0x63, 0x12, 0x75, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xb2, 0x9b, 0xac, 0xb8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f,
	0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a,
	0x8b, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22,
	0x82, 0x41, 0x1f, 0x2f, 0x6c, 0x61, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x69, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xe9, 0xee, 0x80, 0xf3, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x6c, 0x61,
	0x63, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_lacp_proto_rawDescOnce sync.Once
	file_openconfig_lacp_proto_rawDescData = file_openconfig_lacp_proto_rawDesc
)

func file_openconfig_lacp_proto_rawDescGZIP() []byte {
	file_openconfig_lacp_proto_rawDescOnce.Do(func() {
		file_openconfig_lacp_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_lacp_proto_rawDescData)
	})
	return file_openconfig_lacp_proto_rawDescData
}

var file_openconfig_lacp_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_openconfig_lacp_proto_goTypes = []interface{}{
	(*Lacp)(nil),                                                    // 0: openconfig.Lacp
	(*Lacp_Config)(nil),                                             // 1: openconfig.Lacp.Config
	(*Lacp_Interfaces)(nil),                                         // 2: openconfig.Lacp.Interfaces
	(*Lacp_State)(nil),                                              // 3: openconfig.Lacp.State
	(*Lacp_Interfaces_Interface)(nil),                               // 4: openconfig.Lacp.Interfaces.Interface
	(*Lacp_Interfaces_InterfaceKey)(nil),                            // 5: openconfig.Lacp.Interfaces.InterfaceKey
	(*Lacp_Interfaces_Interface_Config)(nil),                        // 6: openconfig.Lacp.Interfaces.Interface.Config
	(*Lacp_Interfaces_Interface_Members)(nil),                       // 7: openconfig.Lacp.Interfaces.Interface.Members
	(*Lacp_Interfaces_Interface_State)(nil),                         // 8: openconfig.Lacp.Interfaces.Interface.State
	(*Lacp_Interfaces_Interface_Members_Member)(nil),                // 9: openconfig.Lacp.Interfaces.Interface.Members.Member
	(*Lacp_Interfaces_Interface_Members_MemberKey)(nil),             // 10: openconfig.Lacp.Interfaces.Interface.Members.MemberKey
	(*Lacp_Interfaces_Interface_Members_Member_State)(nil),          // 11: openconfig.Lacp.Interfaces.Interface.Members.Member.State
	(*Lacp_Interfaces_Interface_Members_Member_State_Counters)(nil), // 12: openconfig.Lacp.Interfaces.Interface.Members.Member.State.Counters
	(*ywrapper.UintValue)(nil),                                      // 13: ywrapper.UintValue
	(OpenconfigLacpLacpPeriodType)(0),                               // 14: openconfig.OpenconfigLacpLacpPeriodType
	(OpenconfigLacpLacpActivityType)(0),                             // 15: openconfig.OpenconfigLacpLacpActivityType
	(*ywrapper.StringValue)(nil),                                    // 16: ywrapper.StringValue
	(*ywrapper.BoolValue)(nil),                                      // 17: ywrapper.BoolValue
	(OpenconfigLacpLacpSynchronizationType)(0),                      // 18: openconfig.OpenconfigLacpLacpSynchronizationType
	(OpenconfigLacpLacpTimeoutType)(0),                              // 19: openconfig.OpenconfigLacpLacpTimeoutType
}
var file_openconfig_lacp_proto_depIdxs = []int32{
	1,  // 0: openconfig.Lacp.config:type_name -> openconfig.Lacp.Config
	2,  // 1: openconfig.Lacp.interfaces:type_name -> openconfig.Lacp.Interfaces
	3,  // 2: openconfig.Lacp.state:type_name -> openconfig.Lacp.State
	13, // 3: openconfig.Lacp.Config.system_priority:type_name -> ywrapper.UintValue
	5,  // 4: openconfig.Lacp.Interfaces.interface:type_name -> openconfig.Lacp.Interfaces.InterfaceKey
	13, // 5: openconfig.Lacp.State.system_priority:type_name -> ywrapper.UintValue
	6,  // 6: openconfig.Lacp.Interfaces.Interface.config:type_name -> openconfig.Lacp.Interfaces.Interface.Config
	7,  // 7: openconfig.Lacp.Interfaces.Interface.members:type_name -> openconfig.Lacp.Interfaces.Interface.Members
	8,  // 8: openconfig.Lacp.Interfaces.Interface.state:type_name -> openconfig.Lacp.Interfaces.Interface.State
	4,  // 9: openconfig.Lacp.Interfaces.InterfaceKey.interface:type_name -> openconfig.Lacp.Interfaces.Interface
	14, // 10: openconfig.Lacp.Interfaces.Interface.Config.interval:type_name -> openconfig.OpenconfigLacpLacpPeriodType
	15, // 11: openconfig.Lacp.Interfaces.Interface.Config.lacp_mode:type_name -> openconfig.OpenconfigLacpLacpActivityType
	16, // 12: openconfig.Lacp.Interfaces.Interface.Config.name:type_name -> ywrapper.StringValue
	16, // 13: openconfig.Lacp.Interfaces.Interface.Config.system_id_mac:type_name -> ywrapper.StringValue
	13, // 14: openconfig.Lacp.Interfaces.Interface.Config.system_priority:type_name -> ywrapper.UintValue
	10, // 15: openconfig.Lacp.Interfaces.Interface.Members.member:type_name -> openconfig.Lacp.Interfaces.Interface.Members.MemberKey
	14, // 16: openconfig.Lacp.Interfaces.Interface.State.interval:type_name -> openconfig.OpenconfigLacpLacpPeriodType
	15, // 17: openconfig.Lacp.Interfaces.Interface.State.lacp_mode:type_name -> openconfig.OpenconfigLacpLacpActivityType
	16, // 18: openconfig.Lacp.Interfaces.Interface.State.name:type_name -> ywrapper.StringValue
	16, // 19: openconfig.Lacp.Interfaces.Interface.State.system_id_mac:type_name -> ywrapper.StringValue
	13, // 20: openconfig.Lacp.Interfaces.Interface.State.system_priority:type_name -> ywrapper.UintValue
	11, // 21: openconfig.Lacp.Interfaces.Interface.Members.Member.state:type_name -> openconfig.Lacp.Interfaces.Interface.Members.Member.State
	9,  // 22: openconfig.Lacp.Interfaces.Interface.Members.MemberKey.member:type_name -> openconfig.Lacp.Interfaces.Interface.Members.Member
	15, // 23: openconfig.Lacp.Interfaces.Interface.Members.Member.State.activity:type_name -> openconfig.OpenconfigLacpLacpActivityType
	17, // 24: openconfig.Lacp.Interfaces.Interface.Members.Member.State.aggregatable:type_name -> ywrapper.BoolValue
	17, // 25: openconfig.Lacp.Interfaces.Interface.Members.Member.State.collecting:type_name -> ywrapper.BoolValue
	12, // 26: openconfig.Lacp.Interfaces.Interface.Members.Member.State.counters:type_name -> openconfig.Lacp.Interfaces.Interface.Members.Member.State.Counters
	17, // 27: openconfig.Lacp.Interfaces.Interface.Members.Member.State.distributing:type_name -> ywrapper.BoolValue
	16, // 28: openconfig.Lacp.Interfaces.Interface.Members.Member.State.interface:type_name -> ywrapper.StringValue
	13, // 29: openconfig.Lacp.Interfaces.Interface.Members.Member.State.oper_key:type_name -> ywrapper.UintValue
	16, // 30: openconfig.Lacp.Interfaces.Interface.Members.Member.State.partner_id:type_name -> ywrapper.StringValue
	13, // 31: openconfig.Lacp.Interfaces.Interface.Members.Member.State.partner_key:type_name -> ywrapper.UintValue
	13, // 32: openconfig.Lacp.Interfaces.Interface.Members.Member.State.partner_port_num:type_name -> ywrapper.UintValue
	13, // 33: openconfig.Lacp.Interfaces.Interface.Members.Member.State.port_num:type_name -> ywrapper.UintValue
	18, // 34: openconfig.Lacp.Interfaces.Interface.Members.Member.State.synchronization:type_name -> openconfig.OpenconfigLacpLacpSynchronizationType
	16, // 35: openconfig.Lacp.Interfaces.Interface.Members.Member.State.system_id:type_name -> ywrapper.StringValue
	19, // 36: openconfig.Lacp.Interfaces.Interface.Members.Member.State.timeout:type_name -> openconfig.OpenconfigLacpLacpTimeoutType
	13, // 37: openconfig.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_errors:type_name -> ywrapper.UintValue
	13, // 38: openconfig.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_in_pkts:type_name -> ywrapper.UintValue
	13, // 39: openconfig.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_out_pkts:type_name -> ywrapper.UintValue
	13, // 40: openconfig.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_rx_errors:type_name -> ywrapper.UintValue
	13, // 41: openconfig.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_tx_errors:type_name -> ywrapper.UintValue
	13, // 42: openconfig.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_unknown_errors:type_name -> ywrapper.UintValue
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_openconfig_lacp_proto_init() }
func file_openconfig_lacp_proto_init() {
	if File_openconfig_lacp_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_lacp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lacp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lacp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lacp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lacp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lacp_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lacp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lacp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lacp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lacp_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lacp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lacp_Interfaces_InterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lacp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lacp_Interfaces_Interface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lacp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lacp_Interfaces_Interface_Members); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lacp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lacp_Interfaces_Interface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lacp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lacp_Interfaces_Interface_Members_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lacp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lacp_Interfaces_Interface_Members_MemberKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lacp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lacp_Interfaces_Interface_Members_Member_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lacp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lacp_Interfaces_Interface_Members_Member_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_lacp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_lacp_proto_goTypes,
		DependencyIndexes: file_openconfig_lacp_proto_depIdxs,
		MessageInfos:      file_openconfig_lacp_proto_msgTypes,
	}.Build()
	File_openconfig_lacp_proto = out.File
	file_openconfig_lacp_proto_rawDesc = nil
	file_openconfig_lacp_proto_goTypes = nil
	file_openconfig_lacp_proto_depIdxs = nil
}
