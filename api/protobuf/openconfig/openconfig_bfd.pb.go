// openconfig.openconfig_bfd is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_bfd.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Bfd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces *Bfd_Interfaces `protobuf:"bytes,52497131,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *Bfd) Reset() {
	*x = Bfd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd) ProtoMessage() {}

func (x *Bfd) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd.ProtoReflect.Descriptor instead.
func (*Bfd) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0}
}

func (x *Bfd) GetInterfaces() *Bfd_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type Bfd_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*Bfd_Interfaces_InterfaceKey `protobuf:"bytes,387772731,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Bfd_Interfaces) Reset() {
	*x = Bfd_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces) ProtoMessage() {}

func (x *Bfd_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Bfd_Interfaces) GetInterface() []*Bfd_Interfaces_InterfaceKey {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Bfd_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config           *Bfd_Interfaces_Interface_Config           `protobuf:"bytes,131271660,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceRef     *Bfd_Interfaces_Interface_InterfaceRef     `protobuf:"bytes,172078355,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	MicroBfdSessions *Bfd_Interfaces_Interface_MicroBfdSessions `protobuf:"bytes,34321613,opt,name=micro_bfd_sessions,json=microBfdSessions,proto3" json:"micro_bfd_sessions,omitempty"`
	Peers            *Bfd_Interfaces_Interface_Peers            `protobuf:"bytes,505126969,opt,name=peers,proto3" json:"peers,omitempty"`
	State            *Bfd_Interfaces_Interface_State            `protobuf:"bytes,316051429,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bfd_Interfaces_Interface) Reset() {
	*x = Bfd_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Bfd_Interfaces_Interface) GetConfig() *Bfd_Interfaces_Interface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bfd_Interfaces_Interface) GetInterfaceRef() *Bfd_Interfaces_Interface_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *Bfd_Interfaces_Interface) GetMicroBfdSessions() *Bfd_Interfaces_Interface_MicroBfdSessions {
	if x != nil {
		return x.MicroBfdSessions
	}
	return nil
}

func (x *Bfd_Interfaces_Interface) GetPeers() *Bfd_Interfaces_Interface_Peers {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *Bfd_Interfaces_Interface) GetState() *Bfd_Interfaces_Interface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bfd_Interfaces_InterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Interface *Bfd_Interfaces_Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Bfd_Interfaces_InterfaceKey) Reset() {
	*x = Bfd_Interfaces_InterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_InterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_InterfaceKey) ProtoMessage() {}

func (x *Bfd_Interfaces_InterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_InterfaceKey.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_InterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Bfd_Interfaces_InterfaceKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Bfd_Interfaces_InterfaceKey) GetInterface() *Bfd_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Bfd_Interfaces_Interface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredMinimumTxInterval *ywrapper.UintValue   `protobuf:"bytes,3108429,opt,name=desired_minimum_tx_interval,json=desiredMinimumTxInterval,proto3" json:"desired_minimum_tx_interval,omitempty"`
	DetectionMultiplier      *ywrapper.UintValue   `protobuf:"bytes,121584092,opt,name=detection_multiplier,json=detectionMultiplier,proto3" json:"detection_multiplier,omitempty"`
	EnablePerMemberLink      *ywrapper.BoolValue   `protobuf:"bytes,502752516,opt,name=enable_per_member_link,json=enablePerMemberLink,proto3" json:"enable_per_member_link,omitempty"`
	Enabled                  *ywrapper.BoolValue   `protobuf:"bytes,484539102,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Id                       *ywrapper.StringValue `protobuf:"bytes,194209260,opt,name=id,proto3" json:"id,omitempty"`
	LocalAddress             *ywrapper.StringValue `protobuf:"bytes,154169843,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	RequiredMinimumReceive   *ywrapper.UintValue   `protobuf:"bytes,438560423,opt,name=required_minimum_receive,json=requiredMinimumReceive,proto3" json:"required_minimum_receive,omitempty"`
}

func (x *Bfd_Interfaces_Interface_Config) Reset() {
	*x = Bfd_Interfaces_Interface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_Config) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_Config.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Bfd_Interfaces_Interface_Config) GetDesiredMinimumTxInterval() *ywrapper.UintValue {
	if x != nil {
		return x.DesiredMinimumTxInterval
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Config) GetDetectionMultiplier() *ywrapper.UintValue {
	if x != nil {
		return x.DetectionMultiplier
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Config) GetEnablePerMemberLink() *ywrapper.BoolValue {
	if x != nil {
		return x.EnablePerMemberLink
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Config) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Config) GetLocalAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Config) GetRequiredMinimumReceive() *ywrapper.UintValue {
	if x != nil {
		return x.RequiredMinimumReceive
	}
	return nil
}

type Bfd_Interfaces_Interface_InterfaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bfd_Interfaces_Interface_InterfaceRef_Config `protobuf:"bytes,469921972,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bfd_Interfaces_Interface_InterfaceRef_State  `protobuf:"bytes,302974157,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bfd_Interfaces_Interface_InterfaceRef) Reset() {
	*x = Bfd_Interfaces_Interface_InterfaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_InterfaceRef) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_InterfaceRef.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *Bfd_Interfaces_Interface_InterfaceRef) GetConfig() *Bfd_Interfaces_Interface_InterfaceRef_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_InterfaceRef) GetState() *Bfd_Interfaces_Interface_InterfaceRef_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bfd_Interfaces_Interface_MicroBfdSessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MicroBfdSession []*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSessionKey `protobuf:"bytes,244872648,rep,name=micro_bfd_session,json=microBfdSession,proto3" json:"micro_bfd_session,omitempty"`
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions) Reset() {
	*x = Bfd_Interfaces_Interface_MicroBfdSessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_MicroBfdSessions) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_MicroBfdSessions.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_MicroBfdSessions) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions) GetMicroBfdSession() []*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSessionKey {
	if x != nil {
		return x.MicroBfdSession
	}
	return nil
}

type Bfd_Interfaces_Interface_Peers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer []*Bfd_Interfaces_Interface_Peers_PeerKey `protobuf:"bytes,134812464,rep,name=peer,proto3" json:"peer,omitempty"`
}

func (x *Bfd_Interfaces_Interface_Peers) Reset() {
	*x = Bfd_Interfaces_Interface_Peers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_Peers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_Peers) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_Peers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_Peers.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_Peers) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (x *Bfd_Interfaces_Interface_Peers) GetPeer() []*Bfd_Interfaces_Interface_Peers_PeerKey {
	if x != nil {
		return x.Peer
	}
	return nil
}

type Bfd_Interfaces_Interface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredMinimumTxInterval *ywrapper.UintValue   `protobuf:"bytes,416070712,opt,name=desired_minimum_tx_interval,json=desiredMinimumTxInterval,proto3" json:"desired_minimum_tx_interval,omitempty"`
	DetectionMultiplier      *ywrapper.UintValue   `protobuf:"bytes,447553879,opt,name=detection_multiplier,json=detectionMultiplier,proto3" json:"detection_multiplier,omitempty"`
	EnablePerMemberLink      *ywrapper.BoolValue   `protobuf:"bytes,72600899,opt,name=enable_per_member_link,json=enablePerMemberLink,proto3" json:"enable_per_member_link,omitempty"`
	Enabled                  *ywrapper.BoolValue   `protobuf:"bytes,51299467,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Id                       *ywrapper.StringValue `protobuf:"bytes,398607551,opt,name=id,proto3" json:"id,omitempty"`
	LocalAddress             *ywrapper.StringValue `protobuf:"bytes,40604318,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	RequiredMinimumReceive   *ywrapper.UintValue   `protobuf:"bytes,69002204,opt,name=required_minimum_receive,json=requiredMinimumReceive,proto3" json:"required_minimum_receive,omitempty"`
}

func (x *Bfd_Interfaces_Interface_State) Reset() {
	*x = Bfd_Interfaces_Interface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_State) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_State.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 4}
}

func (x *Bfd_Interfaces_Interface_State) GetDesiredMinimumTxInterval() *ywrapper.UintValue {
	if x != nil {
		return x.DesiredMinimumTxInterval
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_State) GetDetectionMultiplier() *ywrapper.UintValue {
	if x != nil {
		return x.DetectionMultiplier
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_State) GetEnablePerMemberLink() *ywrapper.BoolValue {
	if x != nil {
		return x.EnablePerMemberLink
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_State) GetLocalAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_State) GetRequiredMinimumReceive() *ywrapper.UintValue {
	if x != nil {
		return x.RequiredMinimumReceive
	}
	return nil
}

type Bfd_Interfaces_Interface_InterfaceRef_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,503066764,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,190614204,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Bfd_Interfaces_Interface_InterfaceRef_Config) Reset() {
	*x = Bfd_Interfaces_Interface_InterfaceRef_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_InterfaceRef_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_InterfaceRef_Config) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_InterfaceRef_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_InterfaceRef_Config.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_InterfaceRef_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *Bfd_Interfaces_Interface_InterfaceRef_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_InterfaceRef_Config) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Bfd_Interfaces_Interface_InterfaceRef_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,329875513,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,47527675,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Bfd_Interfaces_Interface_InterfaceRef_State) Reset() {
	*x = Bfd_Interfaces_Interface_InterfaceRef_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_InterfaceRef_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_InterfaceRef_State) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_InterfaceRef_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_InterfaceRef_State.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_InterfaceRef_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1}
}

func (x *Bfd_Interfaces_Interface_InterfaceRef_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_InterfaceRef_State) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config `protobuf:"bytes,507837229,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State  `protobuf:"bytes,126152162,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) Reset() {
	*x = Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) GetConfig() *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) GetState() *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSessionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberInterface string                                                     `protobuf:"bytes,1,opt,name=member_interface,json=memberInterface,proto3" json:"member_interface,omitempty"`
	MicroBfdSession *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession `protobuf:"bytes,2,opt,name=micro_bfd_session,json=microBfdSession,proto3" json:"micro_bfd_session,omitempty"`
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSessionKey) Reset() {
	*x = Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSessionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSessionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSessionKey) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSessionKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSessionKey.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSessionKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 2, 1}
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSessionKey) GetMemberInterface() string {
	if x != nil {
		return x.MemberInterface
	}
	return ""
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSessionKey) GetMicroBfdSession() *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession {
	if x != nil {
		return x.MicroBfdSession
	}
	return nil
}

type Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalAddress    *ywrapper.StringValue `protobuf:"bytes,26992054,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	MemberInterface *ywrapper.StringValue `protobuf:"bytes,29307232,opt,name=member_interface,json=memberInterface,proto3" json:"member_interface,omitempty"`
	RemoteAddress   *ywrapper.StringValue `protobuf:"bytes,470787469,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config) Reset() {
	*x = Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0}
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config) GetLocalAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config) GetMemberInterface() *ywrapper.StringValue {
	if x != nil {
		return x.MemberInterface
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config) GetRemoteAddress() *ywrapper.StringValue {
	if x != nil {
		return x.RemoteAddress
	}
	return nil
}

type Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Async                         *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async `protobuf:"bytes,118371439,opt,name=async,proto3" json:"async,omitempty"`
	DemandModeRequested           *ywrapper.BoolValue                                                    `protobuf:"bytes,464686027,opt,name=demand_mode_requested,json=demandModeRequested,proto3" json:"demand_mode_requested,omitempty"`
	FailureTransitions            *ywrapper.UintValue                                                    `protobuf:"bytes,492109010,opt,name=failure_transitions,json=failureTransitions,proto3" json:"failure_transitions,omitempty"`
	LastFailureTime               *ywrapper.UintValue                                                    `protobuf:"bytes,104701954,opt,name=last_failure_time,json=lastFailureTime,proto3" json:"last_failure_time,omitempty"`
	LocalAddress                  *ywrapper.StringValue                                                  `protobuf:"bytes,448529105,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	LocalDiagnosticCode           OpenconfigBfdBfdDiagnosticCode                                         `protobuf:"varint,121428592,opt,name=local_diagnostic_code,json=localDiagnosticCode,proto3,enum=openconfig.OpenconfigBfdBfdDiagnosticCode" json:"local_diagnostic_code,omitempty"`
	LocalDiscriminator            *ywrapper.StringValue                                                  `protobuf:"bytes,240714553,opt,name=local_discriminator,json=localDiscriminator,proto3" json:"local_discriminator,omitempty"`
	MemberInterface               *ywrapper.StringValue                                                  `protobuf:"bytes,50678549,opt,name=member_interface,json=memberInterface,proto3" json:"member_interface,omitempty"`
	RemoteAddress                 *ywrapper.StringValue                                                  `protobuf:"bytes,389127900,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	RemoteAuthenticationEnabled   *ywrapper.BoolValue                                                    `protobuf:"bytes,437494876,opt,name=remote_authentication_enabled,json=remoteAuthenticationEnabled,proto3" json:"remote_authentication_enabled,omitempty"`
	RemoteControlPlaneIndependent *ywrapper.BoolValue                                                    `protobuf:"bytes,180171043,opt,name=remote_control_plane_independent,json=remoteControlPlaneIndependent,proto3" json:"remote_control_plane_independent,omitempty"`
	RemoteDiagnosticCode          OpenconfigBfdBfdDiagnosticCode                                         `protobuf:"varint,141788981,opt,name=remote_diagnostic_code,json=remoteDiagnosticCode,proto3,enum=openconfig.OpenconfigBfdBfdDiagnosticCode" json:"remote_diagnostic_code,omitempty"`
	RemoteDiscriminator           *ywrapper.StringValue                                                  `protobuf:"bytes,322623616,opt,name=remote_discriminator,json=remoteDiscriminator,proto3" json:"remote_discriminator,omitempty"`
	RemoteMinimumReceiveInterval  *ywrapper.UintValue                                                    `protobuf:"bytes,430764270,opt,name=remote_minimum_receive_interval,json=remoteMinimumReceiveInterval,proto3" json:"remote_minimum_receive_interval,omitempty"`
	RemoteSessionState            OpenconfigBfdBfdSessionState                                           `protobuf:"varint,369670936,opt,name=remote_session_state,json=remoteSessionState,proto3,enum=openconfig.OpenconfigBfdBfdSessionState" json:"remote_session_state,omitempty"`
	SessionState                  OpenconfigBfdBfdSessionState                                           `protobuf:"varint,163619199,opt,name=session_state,json=sessionState,proto3,enum=openconfig.OpenconfigBfdBfdSessionState" json:"session_state,omitempty"`
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) Reset() {
	*x = Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1}
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetAsync() *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async {
	if x != nil {
		return x.Async
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetDemandModeRequested() *ywrapper.BoolValue {
	if x != nil {
		return x.DemandModeRequested
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetFailureTransitions() *ywrapper.UintValue {
	if x != nil {
		return x.FailureTransitions
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetLastFailureTime() *ywrapper.UintValue {
	if x != nil {
		return x.LastFailureTime
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetLocalAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetLocalDiagnosticCode() OpenconfigBfdBfdDiagnosticCode {
	if x != nil {
		return x.LocalDiagnosticCode
	}
	return OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_UNSET
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetLocalDiscriminator() *ywrapper.StringValue {
	if x != nil {
		return x.LocalDiscriminator
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetMemberInterface() *ywrapper.StringValue {
	if x != nil {
		return x.MemberInterface
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetRemoteAddress() *ywrapper.StringValue {
	if x != nil {
		return x.RemoteAddress
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetRemoteAuthenticationEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.RemoteAuthenticationEnabled
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetRemoteControlPlaneIndependent() *ywrapper.BoolValue {
	if x != nil {
		return x.RemoteControlPlaneIndependent
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetRemoteDiagnosticCode() OpenconfigBfdBfdDiagnosticCode {
	if x != nil {
		return x.RemoteDiagnosticCode
	}
	return OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_UNSET
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetRemoteDiscriminator() *ywrapper.StringValue {
	if x != nil {
		return x.RemoteDiscriminator
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetRemoteMinimumReceiveInterval() *ywrapper.UintValue {
	if x != nil {
		return x.RemoteMinimumReceiveInterval
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetRemoteSessionState() OpenconfigBfdBfdSessionState {
	if x != nil {
		return x.RemoteSessionState
	}
	return OpenconfigBfdBfdSessionState_OPENCONFIGBFDBFDSESSIONSTATE_UNSET
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetSessionState() OpenconfigBfdBfdSessionState {
	if x != nil {
		return x.SessionState
	}
	return OpenconfigBfdBfdSessionState_OPENCONFIGBFDBFDSESSIONSTATE_UNSET
}

type Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastPacketReceived    *ywrapper.UintValue `protobuf:"bytes,290762301,opt,name=last_packet_received,json=lastPacketReceived,proto3" json:"last_packet_received,omitempty"`
	LastPacketTransmitted *ywrapper.UintValue `protobuf:"bytes,462904667,opt,name=last_packet_transmitted,json=lastPacketTransmitted,proto3" json:"last_packet_transmitted,omitempty"`
	ReceivedPackets       *ywrapper.UintValue `protobuf:"bytes,55754291,opt,name=received_packets,json=receivedPackets,proto3" json:"received_packets,omitempty"`
	TransmittedPackets    *ywrapper.UintValue `protobuf:"bytes,244144849,opt,name=transmitted_packets,json=transmittedPackets,proto3" json:"transmitted_packets,omitempty"`
	UpTransitions         *ywrapper.UintValue `protobuf:"bytes,46443954,opt,name=up_transitions,json=upTransitions,proto3" json:"up_transitions,omitempty"`
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) Reset() {
	*x = Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0}
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) GetLastPacketReceived() *ywrapper.UintValue {
	if x != nil {
		return x.LastPacketReceived
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) GetLastPacketTransmitted() *ywrapper.UintValue {
	if x != nil {
		return x.LastPacketTransmitted
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) GetReceivedPackets() *ywrapper.UintValue {
	if x != nil {
		return x.ReceivedPackets
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) GetTransmittedPackets() *ywrapper.UintValue {
	if x != nil {
		return x.TransmittedPackets
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) GetUpTransitions() *ywrapper.UintValue {
	if x != nil {
		return x.UpTransitions
	}
	return nil
}

type Bfd_Interfaces_Interface_Peers_Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bfd_Interfaces_Interface_Peers_Peer_State `protobuf:"bytes,336678074,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bfd_Interfaces_Interface_Peers_Peer) Reset() {
	*x = Bfd_Interfaces_Interface_Peers_Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_Peers_Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_Peers_Peer) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_Peers_Peer) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_Peers_Peer.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_Peers_Peer) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0}
}

func (x *Bfd_Interfaces_Interface_Peers_Peer) GetState() *Bfd_Interfaces_Interface_Peers_Peer_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bfd_Interfaces_Interface_Peers_PeerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalDiscriminator string                               `protobuf:"bytes,1,opt,name=local_discriminator,json=localDiscriminator,proto3" json:"local_discriminator,omitempty"`
	Peer               *Bfd_Interfaces_Interface_Peers_Peer `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (x *Bfd_Interfaces_Interface_Peers_PeerKey) Reset() {
	*x = Bfd_Interfaces_Interface_Peers_PeerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_Peers_PeerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_Peers_PeerKey) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_Peers_PeerKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_Peers_PeerKey.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_Peers_PeerKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 3, 1}
}

func (x *Bfd_Interfaces_Interface_Peers_PeerKey) GetLocalDiscriminator() string {
	if x != nil {
		return x.LocalDiscriminator
	}
	return ""
}

func (x *Bfd_Interfaces_Interface_Peers_PeerKey) GetPeer() *Bfd_Interfaces_Interface_Peers_Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type Bfd_Interfaces_Interface_Peers_Peer_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Async                         *Bfd_Interfaces_Interface_Peers_Peer_State_Async `protobuf:"bytes,392691447,opt,name=async,proto3" json:"async,omitempty"`
	DemandModeRequested           *ywrapper.BoolValue                              `protobuf:"bytes,521433907,opt,name=demand_mode_requested,json=demandModeRequested,proto3" json:"demand_mode_requested,omitempty"`
	Echo                          *Bfd_Interfaces_Interface_Peers_Peer_State_Echo  `protobuf:"bytes,212761422,opt,name=echo,proto3" json:"echo,omitempty"`
	FailureTransitions            *ywrapper.UintValue                              `protobuf:"bytes,396053722,opt,name=failure_transitions,json=failureTransitions,proto3" json:"failure_transitions,omitempty"`
	LastFailureTime               *ywrapper.UintValue                              `protobuf:"bytes,441519802,opt,name=last_failure_time,json=lastFailureTime,proto3" json:"last_failure_time,omitempty"`
	LocalAddress                  *ywrapper.StringValue                            `protobuf:"bytes,468469945,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	LocalDiagnosticCode           OpenconfigBfdBfdDiagnosticCode                   `protobuf:"varint,375832792,opt,name=local_diagnostic_code,json=localDiagnosticCode,proto3,enum=openconfig.OpenconfigBfdBfdDiagnosticCode" json:"local_diagnostic_code,omitempty"`
	LocalDiscriminator            *ywrapper.StringValue                            `protobuf:"bytes,436706433,opt,name=local_discriminator,json=localDiscriminator,proto3" json:"local_discriminator,omitempty"`
	RemoteAddress                 *ywrapper.StringValue                            `protobuf:"bytes,199809156,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	RemoteAuthenticationEnabled   *ywrapper.BoolValue                              `protobuf:"bytes,322010820,opt,name=remote_authentication_enabled,json=remoteAuthenticationEnabled,proto3" json:"remote_authentication_enabled,omitempty"`
	RemoteControlPlaneIndependent *ywrapper.BoolValue                              `protobuf:"bytes,190706123,opt,name=remote_control_plane_independent,json=remoteControlPlaneIndependent,proto3" json:"remote_control_plane_independent,omitempty"`
	RemoteDiagnosticCode          OpenconfigBfdBfdDiagnosticCode                   `protobuf:"varint,512810205,opt,name=remote_diagnostic_code,json=remoteDiagnosticCode,proto3,enum=openconfig.OpenconfigBfdBfdDiagnosticCode" json:"remote_diagnostic_code,omitempty"`
	RemoteDiscriminator           *ywrapper.StringValue                            `protobuf:"bytes,118552808,opt,name=remote_discriminator,json=remoteDiscriminator,proto3" json:"remote_discriminator,omitempty"`
	RemoteMinimumReceiveInterval  *ywrapper.UintValue                              `protobuf:"bytes,492895878,opt,name=remote_minimum_receive_interval,json=remoteMinimumReceiveInterval,proto3" json:"remote_minimum_receive_interval,omitempty"`
	RemoteSessionState            OpenconfigBfdBfdSessionState                     `protobuf:"varint,377499520,opt,name=remote_session_state,json=remoteSessionState,proto3,enum=openconfig.OpenconfigBfdBfdSessionState" json:"remote_session_state,omitempty"`
	SessionState                  OpenconfigBfdBfdSessionState                     `protobuf:"varint,6247,opt,name=session_state,json=sessionState,proto3,enum=openconfig.OpenconfigBfdBfdSessionState" json:"session_state,omitempty"`
	SubscribedProtocols           []OpenconfigPolicyTypesINSTALLPROTOCOLTYPE       `protobuf:"varint,145248353,rep,packed,name=subscribed_protocols,json=subscribedProtocols,proto3,enum=openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE" json:"subscribed_protocols,omitempty"`
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) Reset() {
	*x = Bfd_Interfaces_Interface_Peers_Peer_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_Peers_Peer_State) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_Peers_Peer_State.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_Peers_Peer_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 0}
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetAsync() *Bfd_Interfaces_Interface_Peers_Peer_State_Async {
	if x != nil {
		return x.Async
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetDemandModeRequested() *ywrapper.BoolValue {
	if x != nil {
		return x.DemandModeRequested
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetEcho() *Bfd_Interfaces_Interface_Peers_Peer_State_Echo {
	if x != nil {
		return x.Echo
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetFailureTransitions() *ywrapper.UintValue {
	if x != nil {
		return x.FailureTransitions
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetLastFailureTime() *ywrapper.UintValue {
	if x != nil {
		return x.LastFailureTime
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetLocalAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetLocalDiagnosticCode() OpenconfigBfdBfdDiagnosticCode {
	if x != nil {
		return x.LocalDiagnosticCode
	}
	return OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_UNSET
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetLocalDiscriminator() *ywrapper.StringValue {
	if x != nil {
		return x.LocalDiscriminator
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetRemoteAddress() *ywrapper.StringValue {
	if x != nil {
		return x.RemoteAddress
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetRemoteAuthenticationEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.RemoteAuthenticationEnabled
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetRemoteControlPlaneIndependent() *ywrapper.BoolValue {
	if x != nil {
		return x.RemoteControlPlaneIndependent
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetRemoteDiagnosticCode() OpenconfigBfdBfdDiagnosticCode {
	if x != nil {
		return x.RemoteDiagnosticCode
	}
	return OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_UNSET
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetRemoteDiscriminator() *ywrapper.StringValue {
	if x != nil {
		return x.RemoteDiscriminator
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetRemoteMinimumReceiveInterval() *ywrapper.UintValue {
	if x != nil {
		return x.RemoteMinimumReceiveInterval
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetRemoteSessionState() OpenconfigBfdBfdSessionState {
	if x != nil {
		return x.RemoteSessionState
	}
	return OpenconfigBfdBfdSessionState_OPENCONFIGBFDBFDSESSIONSTATE_UNSET
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetSessionState() OpenconfigBfdBfdSessionState {
	if x != nil {
		return x.SessionState
	}
	return OpenconfigBfdBfdSessionState_OPENCONFIGBFDBFDSESSIONSTATE_UNSET
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State) GetSubscribedProtocols() []OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	if x != nil {
		return x.SubscribedProtocols
	}
	return nil
}

type Bfd_Interfaces_Interface_Peers_Peer_State_Async struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastPacketReceived    *ywrapper.UintValue `protobuf:"bytes,469155029,opt,name=last_packet_received,json=lastPacketReceived,proto3" json:"last_packet_received,omitempty"`
	LastPacketTransmitted *ywrapper.UintValue `protobuf:"bytes,186524835,opt,name=last_packet_transmitted,json=lastPacketTransmitted,proto3" json:"last_packet_transmitted,omitempty"`
	ReceivedPackets       *ywrapper.UintValue `protobuf:"bytes,218926923,opt,name=received_packets,json=receivedPackets,proto3" json:"received_packets,omitempty"`
	TransmittedPackets    *ywrapper.UintValue `protobuf:"bytes,285022425,opt,name=transmitted_packets,json=transmittedPackets,proto3" json:"transmitted_packets,omitempty"`
	UpTransitions         *ywrapper.UintValue `protobuf:"bytes,72344602,opt,name=up_transitions,json=upTransitions,proto3" json:"up_transitions,omitempty"`
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Async) Reset() {
	*x = Bfd_Interfaces_Interface_Peers_Peer_State_Async{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Async) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_Peers_Peer_State_Async) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Async) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_Peers_Peer_State_Async.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_Peers_Peer_State_Async) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 0, 0}
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Async) GetLastPacketReceived() *ywrapper.UintValue {
	if x != nil {
		return x.LastPacketReceived
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Async) GetLastPacketTransmitted() *ywrapper.UintValue {
	if x != nil {
		return x.LastPacketTransmitted
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Async) GetReceivedPackets() *ywrapper.UintValue {
	if x != nil {
		return x.ReceivedPackets
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Async) GetTransmittedPackets() *ywrapper.UintValue {
	if x != nil {
		return x.TransmittedPackets
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Async) GetUpTransitions() *ywrapper.UintValue {
	if x != nil {
		return x.UpTransitions
	}
	return nil
}

type Bfd_Interfaces_Interface_Peers_Peer_State_Echo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active                *ywrapper.BoolValue `protobuf:"bytes,356479131,opt,name=active,proto3" json:"active,omitempty"`
	LastPacketReceived    *ywrapper.UintValue `protobuf:"bytes,172528234,opt,name=last_packet_received,json=lastPacketReceived,proto3" json:"last_packet_received,omitempty"`
	LastPacketTransmitted *ywrapper.UintValue `protobuf:"bytes,514153054,opt,name=last_packet_transmitted,json=lastPacketTransmitted,proto3" json:"last_packet_transmitted,omitempty"`
	ReceivedPackets       *ywrapper.UintValue `protobuf:"bytes,431591008,opt,name=received_packets,json=receivedPackets,proto3" json:"received_packets,omitempty"`
	TransmittedPackets    *ywrapper.UintValue `protobuf:"bytes,254261680,opt,name=transmitted_packets,json=transmittedPackets,proto3" json:"transmitted_packets,omitempty"`
	UpTransitions         *ywrapper.UintValue `protobuf:"bytes,500113713,opt,name=up_transitions,json=upTransitions,proto3" json:"up_transitions,omitempty"`
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Echo) Reset() {
	*x = Bfd_Interfaces_Interface_Peers_Peer_State_Echo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bfd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Echo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd_Interfaces_Interface_Peers_Peer_State_Echo) ProtoMessage() {}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Echo) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bfd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd_Interfaces_Interface_Peers_Peer_State_Echo.ProtoReflect.Descriptor instead.
func (*Bfd_Interfaces_Interface_Peers_Peer_State_Echo) Descriptor() ([]byte, []int) {
	return file_openconfig_bfd_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 0, 1}
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Echo) GetActive() *ywrapper.BoolValue {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Echo) GetLastPacketReceived() *ywrapper.UintValue {
	if x != nil {
		return x.LastPacketReceived
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Echo) GetLastPacketTransmitted() *ywrapper.UintValue {
	if x != nil {
		return x.LastPacketTransmitted
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Echo) GetReceivedPackets() *ywrapper.UintValue {
	if x != nil {
		return x.ReceivedPackets
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Echo) GetTransmittedPackets() *ywrapper.UintValue {
	if x != nil {
		return x.TransmittedPackets
	}
	return nil
}

func (x *Bfd_Interfaces_Interface_Peers_Peer_State_Echo) GetUpTransitions() *ywrapper.UintValue {
	if x != nil {
		return x.UpTransitions
	}
	return nil
}

var File_openconfig_bfd_proto protoreflect.FileDescriptor

var file_openconfig_bfd_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x62, 0x66, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x67, 0x0a, 0x03, 0x42, 0x66, 0x64, 0x12, 0x51,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xeb, 0x95, 0x84,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x42, 0x12, 0x82, 0x41, 0x0f, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x1a, 0xb3, 0x66, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x67, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xbb, 0xe2,
	0xf3, 0xb8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xb5, 0x64, 0x0a, 0x09, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xec, 0x97, 0xcc, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x62, 0x66, 0x64,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x93, 0xea, 0x86, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x97, 0x01, 0x0a,
	0x12, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x62, 0x66, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xcd, 0xe9, 0xae, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x66, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18,
	0xb9, 0xc0, 0xee, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x12, 0x68, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe5, 0x9f, 0xda, 0x96, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x22, 0x82, 0x41, 0x1f, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe8, 0x06, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xcd, 0xdc, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x2d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x74, 0x78, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x52, 0x18, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x54, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x83,
	0x01, 0x0a, 0x14, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0xdc, 0xf3, 0xfc, 0x39, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52,
	0x13, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x12, 0x88, 0x01, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x84, 0xca, 0xdd, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a,
	0x82, 0x41, 0x37, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x5e, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xde, 0xf5, 0x85, 0xe7, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x62,
	0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x50, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xec, 0xcb, 0xcd, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x70, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0xf3, 0xe3, 0xc1, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x18, 0xa7, 0xcd, 0x8f, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x16, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x1a, 0x95, 0x06, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x87, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xb4, 0xe1, 0x89, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65,
	0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x83, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xcd, 0x89, 0xbc, 0x90, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x30, 0x82,
	0x41, 0x2d, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xfa, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x74, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x8c,
	0xe1, 0xf0, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x3b, 0x82, 0x41, 0x38, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xbc, 0x95, 0xf2, 0x5a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65,
	0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x1a, 0xf7, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x73, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xb9, 0x80, 0xa6, 0x9d, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37,
	0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x79, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0xfb, 0xed, 0xd4, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xc4, 0x27,
	0x0a, 0x10, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x11, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x62, 0x66, 0x64,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xc8, 0xeb, 0xe1, 0x74, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x66, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x66,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x41, 0x82, 0x41, 0x3e,
	0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d,
	0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0xe9, 0x23, 0x0a, 0x0f, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0xb2, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xad,
	0xf6, 0x93, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x62, 0x66, 0x64, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66,
	0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xad, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xe2, 0xdb, 0x93, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x66,
	0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64,
	0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d,
	0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xdd, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x95, 0x01, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xb6, 0xbb, 0xef, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64,
	0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x10,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0xe0, 0xe2, 0xfc, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x99, 0x01, 0x0a,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x8d, 0xcb, 0xbe, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x90, 0x1d, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x05, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x18, 0xef, 0xe8, 0xb8,
	0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x66,
	0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64,
	0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d,
	0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x05, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x12, 0xaa,
	0x01, 0x0a, 0x15, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0xcb, 0x97, 0xca, 0xdd, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x62, 0x66, 0x64,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62,
	0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x13, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0xa5, 0x01, 0x0a, 0x13,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xd2, 0xf9, 0xd3, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x12, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x82, 0xc0, 0xf6, 0x31, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x66, 0x64,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62,
	0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xd1, 0x85, 0xf0, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x66, 0x64, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66,
	0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x15,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xf0, 0xb4, 0xf3, 0x39, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x66, 0x64, 0x42, 0x66, 0x64, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f,
	0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62,
	0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0xa6,
	0x01, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0xb9, 0x86, 0xe4, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x66, 0x64, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66,
	0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x9d, 0x01, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x95, 0x96, 0x95,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41,
	0x55, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xdc, 0xbd, 0xc6, 0xb9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53,
	0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d,
	0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0xdc, 0xc8, 0xce, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x1b, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0xc9, 0x01, 0x0a, 0x20, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0xa3, 0xe2, 0xf4,
	0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f,
	0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62,
	0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x12, 0xc3, 0x01, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xb5,
	0x8e, 0xce, 0x43, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x66, 0x64, 0x42, 0x66, 0x64, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x14, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x80, 0xb1, 0xeb, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xc7, 0x01, 0x0a, 0x1f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xee, 0xe1, 0xb3, 0xcd, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62,
	0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66,
	0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x1c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0xbc, 0x01, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x98, 0xf6, 0xa2, 0xb0, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x66, 0x64, 0x42, 0x66,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x5c, 0x82,
	0x41, 0x59, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0xa7, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xff, 0xc2, 0x82, 0x4e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x66, 0x64, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xdf, 0x06, 0x0a, 0x05, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x12, 0xad, 0x01, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xbd, 0xdc, 0xd2,
	0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f,
	0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d,
	0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52,
	0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0xb6, 0x01, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18,
	0xdb, 0xba, 0xdd, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65,
	0x82, 0x41, 0x62, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x6c, 0x61,
	0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0xa1, 0x01, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0xb3, 0xfc, 0xca, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0xaa, 0x01, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xd1, 0xb5, 0xb5, 0x74, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62, 0x66, 0x64, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66,
	0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x9b, 0x01,
	0x0a, 0x0e, 0x75, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xb2, 0xdb, 0x92, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c,
	0x82, 0x41, 0x59, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x75, 0x70,
	0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x75, 0x70,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x86, 0x02, 0x0a, 0x12,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x7d, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x52, 0x82, 0x41,
	0x4f, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2d, 0x62, 0x66, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x71, 0x0a, 0x11, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x62, 0x66, 0x64, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x97, 0x24, 0x0a, 0x05, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x72,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0xb0, 0xa6, 0xa4, 0x40, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x1a, 0xda, 0x21, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x7e, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xba, 0x99, 0xc5, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd1, 0x20, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x05, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x18,
	0xf7, 0xfd, 0x9f, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x62, 0x66, 0x64, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x05, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0xb3, 0xe6, 0xd1,
	0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40,
	0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x13, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0xce,
	0xf6, 0xb9, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45,
	0x63, 0x68, 0x6f, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x8b, 0x01,
	0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xda, 0x99, 0xed, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0xba, 0x9d, 0xc4, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6c, 0x61, 0x73, 0x74, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x7b, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0xb9, 0x91, 0xb1, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0xa7, 0x01, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xd8, 0x81, 0x9b, 0xb3, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x66, 0x64, 0x42, 0x66,
	0x64, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x43, 0x82, 0x41, 0x40, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2d,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x13, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x81, 0xb9, 0x9e, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63,
	0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x7d, 0x0a, 0x0e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x84, 0xb1, 0xa3, 0x5f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39,
	0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x1d, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc4, 0xfd, 0xc5, 0x99, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62,
	0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x1b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0xaf, 0x01, 0x0a, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0xcb, 0xe3, 0xf7, 0x5a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x66, 0x64, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0xaa, 0x01, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0xdd, 0xb9, 0xc3, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x66, 0x64, 0x42, 0x66, 0x64, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x62, 0x66, 0x64, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0xe8, 0xf1, 0xc3, 0x38,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f,
	0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0xad, 0x01, 0x0a, 0x1f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x86, 0xfd, 0x83, 0xeb, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x66, 0x64,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x1c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0xa2, 0x01, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x80, 0xdf,
	0x80, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x66, 0x64, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe7, 0x30, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x66, 0x64, 0x42, 0x66, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3b, 0x82, 0x41,
	0x38, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x18, 0xe1, 0xa0, 0xa1, 0x45, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x42,
	0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x1a, 0xdd, 0x05, 0x0a, 0x05, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x12, 0x93, 0x01, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xd5, 0xf9, 0xda, 0xdf,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f,
	0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f,
	0x6c, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x17, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x18, 0xa3, 0xc9, 0xf8, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x52,
	0x15, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xcb, 0x9e, 0xb2, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x62,
	0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x91, 0x01, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xd9, 0xb1, 0xf4, 0x87, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x66, 0x64,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x75, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9a, 0xc8, 0xbf, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x75, 0x70, 0x2d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x75, 0x70, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xc4, 0x06, 0x0a, 0x04, 0x45, 0x63, 0x68,
	0x6f, 0x12, 0x6a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x9b, 0xe1, 0xfd, 0xa9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f,
	0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x91, 0x01,
	0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xea, 0xa4, 0xa2, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x9b, 0x01, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0xde, 0xb4,
	0x95, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41,
	0x47, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x63, 0x68, 0x6f,
	0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12,
	0x87, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0xe0, 0x9c, 0xe6, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0xb0, 0xf3, 0x9e, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x46, 0x82, 0x41, 0x43, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x63, 0x68, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0e,
	0x75, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb1,
	0xc2, 0xbc, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82,
	0x41, 0x3e, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x63, 0x68,
	0x6f, 0x2f, 0x75, 0x70, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0d, 0x75, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0xbc, 0x01, 0x0a, 0x07, 0x50, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x6c, 0x0a, 0x13, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x62, 0x66,
	0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63,
	0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x1a, 0xe0,
	0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x78, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xb8, 0xf8, 0xb2, 0xc6, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x66, 0x64,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x2d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x74, 0x78, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x18, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0xd7, 0xc2, 0xb4, 0xd5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x62,
	0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x52, 0x13, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0xc3, 0x9a, 0xcf, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x70, 0x65, 0x72, 0x2d,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x13, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x5c, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x8b, 0x89, 0xbb, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x62,
	0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x50,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0xbf, 0x89, 0x89, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x6f, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x9e, 0xa5, 0xae, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0xdc,
	0xc7, 0xf3, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41,
	0x38, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x1a, 0x83, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0x82, 0x41, 0x1c, 0x2f, 0x62, 0x66, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_bfd_proto_rawDescOnce sync.Once
	file_openconfig_bfd_proto_rawDescData = file_openconfig_bfd_proto_rawDesc
)

func file_openconfig_bfd_proto_rawDescGZIP() []byte {
	file_openconfig_bfd_proto_rawDescOnce.Do(func() {
		file_openconfig_bfd_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_bfd_proto_rawDescData)
	})
	return file_openconfig_bfd_proto_rawDescData
}

var file_openconfig_bfd_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_openconfig_bfd_proto_goTypes = []interface{}{
	(*Bfd)(nil),                                                                   // 0: openconfig.Bfd
	(*Bfd_Interfaces)(nil),                                                        // 1: openconfig.Bfd.Interfaces
	(*Bfd_Interfaces_Interface)(nil),                                              // 2: openconfig.Bfd.Interfaces.Interface
	(*Bfd_Interfaces_InterfaceKey)(nil),                                           // 3: openconfig.Bfd.Interfaces.InterfaceKey
	(*Bfd_Interfaces_Interface_Config)(nil),                                       // 4: openconfig.Bfd.Interfaces.Interface.Config
	(*Bfd_Interfaces_Interface_InterfaceRef)(nil),                                 // 5: openconfig.Bfd.Interfaces.Interface.InterfaceRef
	(*Bfd_Interfaces_Interface_MicroBfdSessions)(nil),                             // 6: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions
	(*Bfd_Interfaces_Interface_Peers)(nil),                                        // 7: openconfig.Bfd.Interfaces.Interface.Peers
	(*Bfd_Interfaces_Interface_State)(nil),                                        // 8: openconfig.Bfd.Interfaces.Interface.State
	(*Bfd_Interfaces_Interface_InterfaceRef_Config)(nil),                          // 9: openconfig.Bfd.Interfaces.Interface.InterfaceRef.Config
	(*Bfd_Interfaces_Interface_InterfaceRef_State)(nil),                           // 10: openconfig.Bfd.Interfaces.Interface.InterfaceRef.State
	(*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession)(nil),             // 11: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession
	(*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSessionKey)(nil),          // 12: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSessionKey
	(*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config)(nil),      // 13: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.Config
	(*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State)(nil),       // 14: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State
	(*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async)(nil), // 15: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.Async
	(*Bfd_Interfaces_Interface_Peers_Peer)(nil),                                   // 16: openconfig.Bfd.Interfaces.Interface.Peers.Peer
	(*Bfd_Interfaces_Interface_Peers_PeerKey)(nil),                                // 17: openconfig.Bfd.Interfaces.Interface.Peers.PeerKey
	(*Bfd_Interfaces_Interface_Peers_Peer_State)(nil),                             // 18: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State
	(*Bfd_Interfaces_Interface_Peers_Peer_State_Async)(nil),                       // 19: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Async
	(*Bfd_Interfaces_Interface_Peers_Peer_State_Echo)(nil),                        // 20: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Echo
	(*ywrapper.UintValue)(nil),                                                    // 21: ywrapper.UintValue
	(*ywrapper.BoolValue)(nil),                                                    // 22: ywrapper.BoolValue
	(*ywrapper.StringValue)(nil),                                                  // 23: ywrapper.StringValue
	(OpenconfigBfdBfdDiagnosticCode)(0),                                           // 24: openconfig.OpenconfigBfdBfdDiagnosticCode
	(OpenconfigBfdBfdSessionState)(0),                                             // 25: openconfig.OpenconfigBfdBfdSessionState
	(OpenconfigPolicyTypesINSTALLPROTOCOLTYPE)(0),                                 // 26: openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
}
var file_openconfig_bfd_proto_depIdxs = []int32{
	1,  // 0: openconfig.Bfd.interfaces:type_name -> openconfig.Bfd.Interfaces
	3,  // 1: openconfig.Bfd.Interfaces.interface:type_name -> openconfig.Bfd.Interfaces.InterfaceKey
	4,  // 2: openconfig.Bfd.Interfaces.Interface.config:type_name -> openconfig.Bfd.Interfaces.Interface.Config
	5,  // 3: openconfig.Bfd.Interfaces.Interface.interface_ref:type_name -> openconfig.Bfd.Interfaces.Interface.InterfaceRef
	6,  // 4: openconfig.Bfd.Interfaces.Interface.micro_bfd_sessions:type_name -> openconfig.Bfd.Interfaces.Interface.MicroBfdSessions
	7,  // 5: openconfig.Bfd.Interfaces.Interface.peers:type_name -> openconfig.Bfd.Interfaces.Interface.Peers
	8,  // 6: openconfig.Bfd.Interfaces.Interface.state:type_name -> openconfig.Bfd.Interfaces.Interface.State
	2,  // 7: openconfig.Bfd.Interfaces.InterfaceKey.interface:type_name -> openconfig.Bfd.Interfaces.Interface
	21, // 8: openconfig.Bfd.Interfaces.Interface.Config.desired_minimum_tx_interval:type_name -> ywrapper.UintValue
	21, // 9: openconfig.Bfd.Interfaces.Interface.Config.detection_multiplier:type_name -> ywrapper.UintValue
	22, // 10: openconfig.Bfd.Interfaces.Interface.Config.enable_per_member_link:type_name -> ywrapper.BoolValue
	22, // 11: openconfig.Bfd.Interfaces.Interface.Config.enabled:type_name -> ywrapper.BoolValue
	23, // 12: openconfig.Bfd.Interfaces.Interface.Config.id:type_name -> ywrapper.StringValue
	23, // 13: openconfig.Bfd.Interfaces.Interface.Config.local_address:type_name -> ywrapper.StringValue
	21, // 14: openconfig.Bfd.Interfaces.Interface.Config.required_minimum_receive:type_name -> ywrapper.UintValue
	9,  // 15: openconfig.Bfd.Interfaces.Interface.InterfaceRef.config:type_name -> openconfig.Bfd.Interfaces.Interface.InterfaceRef.Config
	10, // 16: openconfig.Bfd.Interfaces.Interface.InterfaceRef.state:type_name -> openconfig.Bfd.Interfaces.Interface.InterfaceRef.State
	12, // 17: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.micro_bfd_session:type_name -> openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSessionKey
	17, // 18: openconfig.Bfd.Interfaces.Interface.Peers.peer:type_name -> openconfig.Bfd.Interfaces.Interface.Peers.PeerKey
	21, // 19: openconfig.Bfd.Interfaces.Interface.State.desired_minimum_tx_interval:type_name -> ywrapper.UintValue
	21, // 20: openconfig.Bfd.Interfaces.Interface.State.detection_multiplier:type_name -> ywrapper.UintValue
	22, // 21: openconfig.Bfd.Interfaces.Interface.State.enable_per_member_link:type_name -> ywrapper.BoolValue
	22, // 22: openconfig.Bfd.Interfaces.Interface.State.enabled:type_name -> ywrapper.BoolValue
	23, // 23: openconfig.Bfd.Interfaces.Interface.State.id:type_name -> ywrapper.StringValue
	23, // 24: openconfig.Bfd.Interfaces.Interface.State.local_address:type_name -> ywrapper.StringValue
	21, // 25: openconfig.Bfd.Interfaces.Interface.State.required_minimum_receive:type_name -> ywrapper.UintValue
	23, // 26: openconfig.Bfd.Interfaces.Interface.InterfaceRef.Config.interface:type_name -> ywrapper.StringValue
	21, // 27: openconfig.Bfd.Interfaces.Interface.InterfaceRef.Config.subinterface:type_name -> ywrapper.UintValue
	23, // 28: openconfig.Bfd.Interfaces.Interface.InterfaceRef.State.interface:type_name -> ywrapper.StringValue
	21, // 29: openconfig.Bfd.Interfaces.Interface.InterfaceRef.State.subinterface:type_name -> ywrapper.UintValue
	13, // 30: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.config:type_name -> openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.Config
	14, // 31: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.state:type_name -> openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State
	11, // 32: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSessionKey.micro_bfd_session:type_name -> openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession
	23, // 33: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.Config.local_address:type_name -> ywrapper.StringValue
	23, // 34: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.Config.member_interface:type_name -> ywrapper.StringValue
	23, // 35: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.Config.remote_address:type_name -> ywrapper.StringValue
	15, // 36: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.async:type_name -> openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.Async
	22, // 37: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.demand_mode_requested:type_name -> ywrapper.BoolValue
	21, // 38: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.failure_transitions:type_name -> ywrapper.UintValue
	21, // 39: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.last_failure_time:type_name -> ywrapper.UintValue
	23, // 40: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.local_address:type_name -> ywrapper.StringValue
	24, // 41: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.local_diagnostic_code:type_name -> openconfig.OpenconfigBfdBfdDiagnosticCode
	23, // 42: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.local_discriminator:type_name -> ywrapper.StringValue
	23, // 43: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.member_interface:type_name -> ywrapper.StringValue
	23, // 44: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.remote_address:type_name -> ywrapper.StringValue
	22, // 45: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.remote_authentication_enabled:type_name -> ywrapper.BoolValue
	22, // 46: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.remote_control_plane_independent:type_name -> ywrapper.BoolValue
	24, // 47: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.remote_diagnostic_code:type_name -> openconfig.OpenconfigBfdBfdDiagnosticCode
	23, // 48: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.remote_discriminator:type_name -> ywrapper.StringValue
	21, // 49: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.remote_minimum_receive_interval:type_name -> ywrapper.UintValue
	25, // 50: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.remote_session_state:type_name -> openconfig.OpenconfigBfdBfdSessionState
	25, // 51: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.session_state:type_name -> openconfig.OpenconfigBfdBfdSessionState
	21, // 52: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.Async.last_packet_received:type_name -> ywrapper.UintValue
	21, // 53: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.Async.last_packet_transmitted:type_name -> ywrapper.UintValue
	21, // 54: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.Async.received_packets:type_name -> ywrapper.UintValue
	21, // 55: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.Async.transmitted_packets:type_name -> ywrapper.UintValue
	21, // 56: openconfig.Bfd.Interfaces.Interface.MicroBfdSessions.MicroBfdSession.State.Async.up_transitions:type_name -> ywrapper.UintValue
	18, // 57: openconfig.Bfd.Interfaces.Interface.Peers.Peer.state:type_name -> openconfig.Bfd.Interfaces.Interface.Peers.Peer.State
	16, // 58: openconfig.Bfd.Interfaces.Interface.Peers.PeerKey.peer:type_name -> openconfig.Bfd.Interfaces.Interface.Peers.Peer
	19, // 59: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.async:type_name -> openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Async
	22, // 60: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.demand_mode_requested:type_name -> ywrapper.BoolValue
	20, // 61: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.echo:type_name -> openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Echo
	21, // 62: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.failure_transitions:type_name -> ywrapper.UintValue
	21, // 63: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.last_failure_time:type_name -> ywrapper.UintValue
	23, // 64: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.local_address:type_name -> ywrapper.StringValue
	24, // 65: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.local_diagnostic_code:type_name -> openconfig.OpenconfigBfdBfdDiagnosticCode
	23, // 66: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.local_discriminator:type_name -> ywrapper.StringValue
	23, // 67: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.remote_address:type_name -> ywrapper.StringValue
	22, // 68: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.remote_authentication_enabled:type_name -> ywrapper.BoolValue
	22, // 69: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.remote_control_plane_independent:type_name -> ywrapper.BoolValue
	24, // 70: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.remote_diagnostic_code:type_name -> openconfig.OpenconfigBfdBfdDiagnosticCode
	23, // 71: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.remote_discriminator:type_name -> ywrapper.StringValue
	21, // 72: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.remote_minimum_receive_interval:type_name -> ywrapper.UintValue
	25, // 73: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.remote_session_state:type_name -> openconfig.OpenconfigBfdBfdSessionState
	25, // 74: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.session_state:type_name -> openconfig.OpenconfigBfdBfdSessionState
	26, // 75: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.subscribed_protocols:type_name -> openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	21, // 76: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Async.last_packet_received:type_name -> ywrapper.UintValue
	21, // 77: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Async.last_packet_transmitted:type_name -> ywrapper.UintValue
	21, // 78: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Async.received_packets:type_name -> ywrapper.UintValue
	21, // 79: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Async.transmitted_packets:type_name -> ywrapper.UintValue
	21, // 80: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Async.up_transitions:type_name -> ywrapper.UintValue
	22, // 81: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Echo.active:type_name -> ywrapper.BoolValue
	21, // 82: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Echo.last_packet_received:type_name -> ywrapper.UintValue
	21, // 83: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Echo.last_packet_transmitted:type_name -> ywrapper.UintValue
	21, // 84: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Echo.received_packets:type_name -> ywrapper.UintValue
	21, // 85: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Echo.transmitted_packets:type_name -> ywrapper.UintValue
	21, // 86: openconfig.Bfd.Interfaces.Interface.Peers.Peer.State.Echo.up_transitions:type_name -> ywrapper.UintValue
	87, // [87:87] is the sub-list for method output_type
	87, // [87:87] is the sub-list for method input_type
	87, // [87:87] is the sub-list for extension type_name
	87, // [87:87] is the sub-list for extension extendee
	0,  // [0:87] is the sub-list for field type_name
}

func init() { file_openconfig_bfd_proto_init() }
func file_openconfig_bfd_proto_init() {
	if File_openconfig_bfd_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_bfd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_InterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_InterfaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_MicroBfdSessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_Peers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_InterfaceRef_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_InterfaceRef_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSessionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_Peers_Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_Peers_PeerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_Peers_Peer_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_Peers_Peer_State_Async); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bfd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd_Interfaces_Interface_Peers_Peer_State_Echo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_bfd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_bfd_proto_goTypes,
		DependencyIndexes: file_openconfig_bfd_proto_depIdxs,
		MessageInfos:      file_openconfig_bfd_proto_msgTypes,
	}.Build()
	File_openconfig_bfd_proto = out.File
	file_openconfig_bfd_proto_rawDesc = nil
	file_openconfig_bfd_proto_goTypes = nil
	file_openconfig_bfd_proto_depIdxs = nil
}
