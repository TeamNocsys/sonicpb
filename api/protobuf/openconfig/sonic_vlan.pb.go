// openconfig.sonic_vlan is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/sonic-vlan.yang
// Include paths:
//   - ../api/yang/sonic:../api/yang/public/third_party/...

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.3
// source: sonic_vlan.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope int32

const (
	SonicVlan_VlanInterface_VlanInterfaceIpprefixList_SCOPE_UNSET  SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope = 0
	SonicVlan_VlanInterface_VlanInterfaceIpprefixList_SCOPE_global SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope = 1
	SonicVlan_VlanInterface_VlanInterfaceIpprefixList_SCOPE_local  SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope = 2
)

// Enum value maps for SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope.
var (
	SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope_name = map[int32]string{
		0: "SCOPE_UNSET",
		1: "SCOPE_global",
		2: "SCOPE_local",
	}
	SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope_value = map[string]int32{
		"SCOPE_UNSET":  0,
		"SCOPE_global": 1,
		"SCOPE_local":  2,
	}
)

func (x SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope) Enum() *SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope {
	p := new(SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope)
	*p = x
	return p
}

func (x SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_vlan_proto_enumTypes[0].Descriptor()
}

func (SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope) Type() protoreflect.EnumType {
	return &file_sonic_vlan_proto_enumTypes[0]
}

func (x SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope.Descriptor instead.
func (SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope) EnumDescriptor() ([]byte, []int) {
	return file_sonic_vlan_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type SonicVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vlan          *SonicVlan_Vlan          `protobuf:"bytes,481733833,opt,name=vlan,proto3" json:"vlan,omitempty"`
	VlanInterface *SonicVlan_VlanInterface `protobuf:"bytes,181565299,opt,name=vlan_interface,json=vlanInterface,proto3" json:"vlan_interface,omitempty"`
	VlanMember    *SonicVlan_VlanMember    `protobuf:"bytes,24357316,opt,name=vlan_member,json=vlanMember,proto3" json:"vlan_member,omitempty"`
}

func (x *SonicVlan) Reset() {
	*x = SonicVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vlan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVlan) ProtoMessage() {}

func (x *SonicVlan) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vlan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVlan.ProtoReflect.Descriptor instead.
func (*SonicVlan) Descriptor() ([]byte, []int) {
	return file_sonic_vlan_proto_rawDescGZIP(), []int{0}
}

func (x *SonicVlan) GetVlan() *SonicVlan_Vlan {
	if x != nil {
		return x.Vlan
	}
	return nil
}

func (x *SonicVlan) GetVlanInterface() *SonicVlan_VlanInterface {
	if x != nil {
		return x.VlanInterface
	}
	return nil
}

func (x *SonicVlan) GetVlanMember() *SonicVlan_VlanMember {
	if x != nil {
		return x.VlanMember
	}
	return nil
}

type SonicVlan_Vlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanList []*SonicVlan_Vlan_VlanListKey `protobuf:"bytes,273076916,rep,name=vlan_list,json=vlanList,proto3" json:"vlan_list,omitempty"`
}

func (x *SonicVlan_Vlan) Reset() {
	*x = SonicVlan_Vlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vlan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVlan_Vlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVlan_Vlan) ProtoMessage() {}

func (x *SonicVlan_Vlan) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vlan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVlan_Vlan.ProtoReflect.Descriptor instead.
func (*SonicVlan_Vlan) Descriptor() ([]byte, []int) {
	return file_sonic_vlan_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SonicVlan_Vlan) GetVlanList() []*SonicVlan_Vlan_VlanListKey {
	if x != nil {
		return x.VlanList
	}
	return nil
}

type SonicVlan_VlanInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanInterfaceIpprefixList []*SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey `protobuf:"bytes,478444568,rep,name=vlan_interface_ipprefix_list,json=vlanInterfaceIpprefixList,proto3" json:"vlan_interface_ipprefix_list,omitempty"`
	VlanInterfaceList         []*SonicVlan_VlanInterface_VlanInterfaceListKey         `protobuf:"bytes,198449936,rep,name=vlan_interface_list,json=vlanInterfaceList,proto3" json:"vlan_interface_list,omitempty"`
}

func (x *SonicVlan_VlanInterface) Reset() {
	*x = SonicVlan_VlanInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vlan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVlan_VlanInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVlan_VlanInterface) ProtoMessage() {}

func (x *SonicVlan_VlanInterface) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vlan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVlan_VlanInterface.ProtoReflect.Descriptor instead.
func (*SonicVlan_VlanInterface) Descriptor() ([]byte, []int) {
	return file_sonic_vlan_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SonicVlan_VlanInterface) GetVlanInterfaceIpprefixList() []*SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey {
	if x != nil {
		return x.VlanInterfaceIpprefixList
	}
	return nil
}

func (x *SonicVlan_VlanInterface) GetVlanInterfaceList() []*SonicVlan_VlanInterface_VlanInterfaceListKey {
	if x != nil {
		return x.VlanInterfaceList
	}
	return nil
}

type SonicVlan_VlanMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanMemberList []*SonicVlan_VlanMember_VlanMemberListKey `protobuf:"bytes,116963448,rep,name=vlan_member_list,json=vlanMemberList,proto3" json:"vlan_member_list,omitempty"`
}

func (x *SonicVlan_VlanMember) Reset() {
	*x = SonicVlan_VlanMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vlan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVlan_VlanMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVlan_VlanMember) ProtoMessage() {}

func (x *SonicVlan_VlanMember) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vlan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVlan_VlanMember.ProtoReflect.Descriptor instead.
func (*SonicVlan_VlanMember) Descriptor() ([]byte, []int) {
	return file_sonic_vlan_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SonicVlan_VlanMember) GetVlanMemberList() []*SonicVlan_VlanMember_VlanMemberListKey {
	if x != nil {
		return x.VlanMemberList
	}
	return nil
}

type SonicVlan_Vlan_VlanList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminStatus SonicVlanAdminStatus    `protobuf:"varint,501302387,opt,name=admin_status,json=adminStatus,proto3,enum=openconfig.SonicVlanAdminStatus" json:"admin_status,omitempty"`
	Description *ywrapper.StringValue   `protobuf:"bytes,482608655,opt,name=description,proto3" json:"description,omitempty"`
	DhcpServers []*ywrapper.StringValue `protobuf:"bytes,306247501,rep,name=dhcp_servers,json=dhcpServers,proto3" json:"dhcp_servers,omitempty"`
	Members     []*ywrapper.StringValue `protobuf:"bytes,232949812,rep,name=members,proto3" json:"members,omitempty"`
	Mtu         *ywrapper.UintValue     `protobuf:"bytes,253322429,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Vlanid      *ywrapper.UintValue     `protobuf:"bytes,348806935,opt,name=vlanid,proto3" json:"vlanid,omitempty"`
}

func (x *SonicVlan_Vlan_VlanList) Reset() {
	*x = SonicVlan_Vlan_VlanList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vlan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVlan_Vlan_VlanList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVlan_Vlan_VlanList) ProtoMessage() {}

func (x *SonicVlan_Vlan_VlanList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vlan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVlan_Vlan_VlanList.ProtoReflect.Descriptor instead.
func (*SonicVlan_Vlan_VlanList) Descriptor() ([]byte, []int) {
	return file_sonic_vlan_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *SonicVlan_Vlan_VlanList) GetAdminStatus() SonicVlanAdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return SonicVlanAdminStatus_SONICVLANADMINSTATUS_UNSET
}

func (x *SonicVlan_Vlan_VlanList) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *SonicVlan_Vlan_VlanList) GetDhcpServers() []*ywrapper.StringValue {
	if x != nil {
		return x.DhcpServers
	}
	return nil
}

func (x *SonicVlan_Vlan_VlanList) GetMembers() []*ywrapper.StringValue {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *SonicVlan_Vlan_VlanList) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

func (x *SonicVlan_Vlan_VlanList) GetVlanid() *ywrapper.UintValue {
	if x != nil {
		return x.Vlanid
	}
	return nil
}

type SonicVlan_Vlan_VlanListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanName string                   `protobuf:"bytes,1,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
	VlanList *SonicVlan_Vlan_VlanList `protobuf:"bytes,2,opt,name=vlan_list,json=vlanList,proto3" json:"vlan_list,omitempty"`
}

func (x *SonicVlan_Vlan_VlanListKey) Reset() {
	*x = SonicVlan_Vlan_VlanListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vlan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVlan_Vlan_VlanListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVlan_Vlan_VlanListKey) ProtoMessage() {}

func (x *SonicVlan_Vlan_VlanListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vlan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVlan_Vlan_VlanListKey.ProtoReflect.Descriptor instead.
func (*SonicVlan_Vlan_VlanListKey) Descriptor() ([]byte, []int) {
	return file_sonic_vlan_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *SonicVlan_Vlan_VlanListKey) GetVlanName() string {
	if x != nil {
		return x.VlanName
	}
	return ""
}

func (x *SonicVlan_Vlan_VlanListKey) GetVlanList() *SonicVlan_Vlan_VlanList {
	if x != nil {
		return x.VlanList
	}
	return nil
}

type SonicVlan_VlanInterface_VlanInterfaceIpprefixList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family SonicVlanIpFamily                                       `protobuf:"varint,409194099,opt,name=family,proto3,enum=openconfig.SonicVlanIpFamily" json:"family,omitempty"`
	Scope  SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope `protobuf:"varint,484703593,opt,name=scope,proto3,enum=openconfig.SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope" json:"scope,omitempty"`
}

func (x *SonicVlan_VlanInterface_VlanInterfaceIpprefixList) Reset() {
	*x = SonicVlan_VlanInterface_VlanInterfaceIpprefixList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vlan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVlan_VlanInterface_VlanInterfaceIpprefixList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVlan_VlanInterface_VlanInterfaceIpprefixList) ProtoMessage() {}

func (x *SonicVlan_VlanInterface_VlanInterfaceIpprefixList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vlan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVlan_VlanInterface_VlanInterfaceIpprefixList.ProtoReflect.Descriptor instead.
func (*SonicVlan_VlanInterface_VlanInterfaceIpprefixList) Descriptor() ([]byte, []int) {
	return file_sonic_vlan_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *SonicVlan_VlanInterface_VlanInterfaceIpprefixList) GetFamily() SonicVlanIpFamily {
	if x != nil {
		return x.Family
	}
	return SonicVlanIpFamily_SONICVLANIPFAMILY_UNSET
}

func (x *SonicVlan_VlanInterface_VlanInterfaceIpprefixList) GetScope() SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope {
	if x != nil {
		return x.Scope
	}
	return SonicVlan_VlanInterface_VlanInterfaceIpprefixList_SCOPE_UNSET
}

type SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanName                  string                                             `protobuf:"bytes,1,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
	IpPrefix                  string                                             `protobuf:"bytes,2,opt,name=ip_prefix,json=ipPrefix,proto3" json:"ip_prefix,omitempty"`
	VlanInterfaceIpprefixList *SonicVlan_VlanInterface_VlanInterfaceIpprefixList `protobuf:"bytes,3,opt,name=vlan_interface_ipprefix_list,json=vlanInterfaceIpprefixList,proto3" json:"vlan_interface_ipprefix_list,omitempty"`
}

func (x *SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey) Reset() {
	*x = SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vlan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey) ProtoMessage() {}

func (x *SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vlan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey.ProtoReflect.Descriptor instead.
func (*SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey) Descriptor() ([]byte, []int) {
	return file_sonic_vlan_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey) GetVlanName() string {
	if x != nil {
		return x.VlanName
	}
	return ""
}

func (x *SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey) GetIpPrefix() string {
	if x != nil {
		return x.IpPrefix
	}
	return ""
}

func (x *SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey) GetVlanInterfaceIpprefixList() *SonicVlan_VlanInterface_VlanInterfaceIpprefixList {
	if x != nil {
		return x.VlanInterfaceIpprefixList
	}
	return nil
}

type SonicVlan_VlanInterface_VlanInterfaceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrfName *ywrapper.StringValue `protobuf:"bytes,4724679,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
}

func (x *SonicVlan_VlanInterface_VlanInterfaceList) Reset() {
	*x = SonicVlan_VlanInterface_VlanInterfaceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vlan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVlan_VlanInterface_VlanInterfaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVlan_VlanInterface_VlanInterfaceList) ProtoMessage() {}

func (x *SonicVlan_VlanInterface_VlanInterfaceList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vlan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVlan_VlanInterface_VlanInterfaceList.ProtoReflect.Descriptor instead.
func (*SonicVlan_VlanInterface_VlanInterfaceList) Descriptor() ([]byte, []int) {
	return file_sonic_vlan_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *SonicVlan_VlanInterface_VlanInterfaceList) GetVrfName() *ywrapper.StringValue {
	if x != nil {
		return x.VrfName
	}
	return nil
}

type SonicVlan_VlanInterface_VlanInterfaceListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanName          string                                     `protobuf:"bytes,1,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
	VlanInterfaceList *SonicVlan_VlanInterface_VlanInterfaceList `protobuf:"bytes,2,opt,name=vlan_interface_list,json=vlanInterfaceList,proto3" json:"vlan_interface_list,omitempty"`
}

func (x *SonicVlan_VlanInterface_VlanInterfaceListKey) Reset() {
	*x = SonicVlan_VlanInterface_VlanInterfaceListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vlan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVlan_VlanInterface_VlanInterfaceListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVlan_VlanInterface_VlanInterfaceListKey) ProtoMessage() {}

func (x *SonicVlan_VlanInterface_VlanInterfaceListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vlan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVlan_VlanInterface_VlanInterfaceListKey.ProtoReflect.Descriptor instead.
func (*SonicVlan_VlanInterface_VlanInterfaceListKey) Descriptor() ([]byte, []int) {
	return file_sonic_vlan_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *SonicVlan_VlanInterface_VlanInterfaceListKey) GetVlanName() string {
	if x != nil {
		return x.VlanName
	}
	return ""
}

func (x *SonicVlan_VlanInterface_VlanInterfaceListKey) GetVlanInterfaceList() *SonicVlan_VlanInterface_VlanInterfaceList {
	if x != nil {
		return x.VlanInterfaceList
	}
	return nil
}

type SonicVlan_VlanMember_VlanMemberList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaggingMode SonicVlanVlanTaggingMode `protobuf:"varint,227939300,opt,name=tagging_mode,json=taggingMode,proto3,enum=openconfig.SonicVlanVlanTaggingMode" json:"tagging_mode,omitempty"`
}

func (x *SonicVlan_VlanMember_VlanMemberList) Reset() {
	*x = SonicVlan_VlanMember_VlanMemberList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vlan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVlan_VlanMember_VlanMemberList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVlan_VlanMember_VlanMemberList) ProtoMessage() {}

func (x *SonicVlan_VlanMember_VlanMemberList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vlan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVlan_VlanMember_VlanMemberList.ProtoReflect.Descriptor instead.
func (*SonicVlan_VlanMember_VlanMemberList) Descriptor() ([]byte, []int) {
	return file_sonic_vlan_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *SonicVlan_VlanMember_VlanMemberList) GetTaggingMode() SonicVlanVlanTaggingMode {
	if x != nil {
		return x.TaggingMode
	}
	return SonicVlanVlanTaggingMode_SONICVLANVLANTAGGINGMODE_UNSET
}

type SonicVlan_VlanMember_VlanMemberListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanName       string                               `protobuf:"bytes,1,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
	Port           string                               `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	VlanMemberList *SonicVlan_VlanMember_VlanMemberList `protobuf:"bytes,3,opt,name=vlan_member_list,json=vlanMemberList,proto3" json:"vlan_member_list,omitempty"`
}

func (x *SonicVlan_VlanMember_VlanMemberListKey) Reset() {
	*x = SonicVlan_VlanMember_VlanMemberListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vlan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVlan_VlanMember_VlanMemberListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVlan_VlanMember_VlanMemberListKey) ProtoMessage() {}

func (x *SonicVlan_VlanMember_VlanMemberListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vlan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVlan_VlanMember_VlanMemberListKey.ProtoReflect.Descriptor instead.
func (*SonicVlan_VlanMember_VlanMemberListKey) Descriptor() ([]byte, []int) {
	return file_sonic_vlan_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *SonicVlan_VlanMember_VlanMemberListKey) GetVlanName() string {
	if x != nil {
		return x.VlanName
	}
	return ""
}

func (x *SonicVlan_VlanMember_VlanMemberListKey) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *SonicVlan_VlanMember_VlanMemberListKey) GetVlanMemberList() *SonicVlan_VlanMember_VlanMemberList {
	if x != nil {
		return x.VlanMemberList
	}
	return nil
}

var File_sonic_vlan_proto protoreflect.FileDescriptor

var file_sonic_vlan_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x92, 0x19, 0x0a, 0x09, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e,
	0x12, 0x47, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0xc9, 0xd9, 0xda, 0xe5, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x42, 0x13,
	0x82, 0x41, 0x10, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x6c, 0x0a, 0x0e, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xf3, 0xee, 0xc9, 0x56,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0d, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0xc4, 0xd3, 0xce, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e,
	0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0a, 0x76,
	0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xd9, 0x06, 0x0a, 0x04, 0x56, 0x6c,
	0x61, 0x6e, 0x12, 0x66, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0xb4, 0xa5, 0x9b, 0x82, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xd0, 0x04, 0x0a, 0x08, 0x56,
	0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xf3, 0x88, 0x85, 0xef, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x6f, 0x6e, 0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x66, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8f, 0x8c, 0x90, 0xe6,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41,
	0x26, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0xcd, 0xee, 0x83, 0x92, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x52, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x59,
	0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0xb4, 0x90, 0x8a, 0x6f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x03, 0x6d, 0x74, 0x75,
	0x18, 0xbd, 0xc9, 0xe5, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21,
	0x82, 0x41, 0x1e, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6d, 0x74,
	0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x55, 0x0a, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x69, 0x64,
	0x18, 0x97, 0xbe, 0xa9, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x24, 0x82, 0x41, 0x21, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x69, 0x64, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x1a, 0x95, 0x01,
	0x0a, 0x0b, 0x56, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a,
	0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x76, 0x6c, 0x61,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xcc, 0x0b, 0x0a, 0x0d, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x1c, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x98, 0xf8, 0x91, 0xe4, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2d, 0x69, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x19, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x13,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x90, 0xb6, 0xd0, 0x5e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56,
	0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x8d, 0x03, 0x0a,
	0x19, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0xf3, 0x9c, 0x8f, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69,
	0x63, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x42, 0x41, 0x82,
	0x41, 0x3e, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x70, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x9f, 0x01, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0xe9, 0xfa, 0x8f, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56,
	0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x69, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x50, 0x0a, 0x05, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x0c, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x12, 0x19, 0x0a, 0x0b, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x10, 0x02, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x1a, 0xe4, 0x02, 0x0a,
	0x1c, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x61, 0x0a,
	0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69,
	0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x61, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x69, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x69, 0x70, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x08, 0x69, 0x70, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x7e, 0x0a, 0x1c, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x19, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x84, 0x01, 0x0a, 0x11, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x08, 0x76, 0x72, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc7, 0xaf, 0xa0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xd7, 0x01, 0x0a, 0x14, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x58, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a,
	0x13, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x6c, 0x61,
	0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0xc0, 0x04, 0x0a, 0x0a, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xf8, 0xf0, 0xe2, 0x37, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x6f, 0x6e, 0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x0e, 0x76, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x97, 0x01, 0x0a, 0x0e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x0c, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xe4, 0xa7, 0xd8, 0x6c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e,
	0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x88, 0x02, 0x0a,
	0x11, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x52, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x76, 0x6c,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x10,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x76, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sonic_vlan_proto_rawDescOnce sync.Once
	file_sonic_vlan_proto_rawDescData = file_sonic_vlan_proto_rawDesc
)

func file_sonic_vlan_proto_rawDescGZIP() []byte {
	file_sonic_vlan_proto_rawDescOnce.Do(func() {
		file_sonic_vlan_proto_rawDescData = protoimpl.X.CompressGZIP(file_sonic_vlan_proto_rawDescData)
	})
	return file_sonic_vlan_proto_rawDescData
}

var file_sonic_vlan_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sonic_vlan_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_sonic_vlan_proto_goTypes = []interface{}{
	(SonicVlan_VlanInterface_VlanInterfaceIpprefixList_Scope)(0), // 0: openconfig.SonicVlan.VlanInterface.VlanInterfaceIpprefixList.Scope
	(*SonicVlan)(nil),                                            // 1: openconfig.SonicVlan
	(*SonicVlan_Vlan)(nil),                                       // 2: openconfig.SonicVlan.Vlan
	(*SonicVlan_VlanInterface)(nil),                              // 3: openconfig.SonicVlan.VlanInterface
	(*SonicVlan_VlanMember)(nil),                                 // 4: openconfig.SonicVlan.VlanMember
	(*SonicVlan_Vlan_VlanList)(nil),                              // 5: openconfig.SonicVlan.Vlan.VlanList
	(*SonicVlan_Vlan_VlanListKey)(nil),                           // 6: openconfig.SonicVlan.Vlan.VlanListKey
	(*SonicVlan_VlanInterface_VlanInterfaceIpprefixList)(nil),    // 7: openconfig.SonicVlan.VlanInterface.VlanInterfaceIpprefixList
	(*SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey)(nil), // 8: openconfig.SonicVlan.VlanInterface.VlanInterfaceIpprefixListKey
	(*SonicVlan_VlanInterface_VlanInterfaceList)(nil),            // 9: openconfig.SonicVlan.VlanInterface.VlanInterfaceList
	(*SonicVlan_VlanInterface_VlanInterfaceListKey)(nil),         // 10: openconfig.SonicVlan.VlanInterface.VlanInterfaceListKey
	(*SonicVlan_VlanMember_VlanMemberList)(nil),                  // 11: openconfig.SonicVlan.VlanMember.VlanMemberList
	(*SonicVlan_VlanMember_VlanMemberListKey)(nil),               // 12: openconfig.SonicVlan.VlanMember.VlanMemberListKey
	(SonicVlanAdminStatus)(0),                                    // 13: openconfig.SonicVlanAdminStatus
	(*ywrapper.StringValue)(nil),                                 // 14: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                                   // 15: ywrapper.UintValue
	(SonicVlanIpFamily)(0),                                       // 16: openconfig.SonicVlanIpFamily
	(SonicVlanVlanTaggingMode)(0),                                // 17: openconfig.SonicVlanVlanTaggingMode
}
var file_sonic_vlan_proto_depIdxs = []int32{
	2,  // 0: openconfig.SonicVlan.vlan:type_name -> openconfig.SonicVlan.Vlan
	3,  // 1: openconfig.SonicVlan.vlan_interface:type_name -> openconfig.SonicVlan.VlanInterface
	4,  // 2: openconfig.SonicVlan.vlan_member:type_name -> openconfig.SonicVlan.VlanMember
	6,  // 3: openconfig.SonicVlan.Vlan.vlan_list:type_name -> openconfig.SonicVlan.Vlan.VlanListKey
	8,  // 4: openconfig.SonicVlan.VlanInterface.vlan_interface_ipprefix_list:type_name -> openconfig.SonicVlan.VlanInterface.VlanInterfaceIpprefixListKey
	10, // 5: openconfig.SonicVlan.VlanInterface.vlan_interface_list:type_name -> openconfig.SonicVlan.VlanInterface.VlanInterfaceListKey
	12, // 6: openconfig.SonicVlan.VlanMember.vlan_member_list:type_name -> openconfig.SonicVlan.VlanMember.VlanMemberListKey
	13, // 7: openconfig.SonicVlan.Vlan.VlanList.admin_status:type_name -> openconfig.SonicVlanAdminStatus
	14, // 8: openconfig.SonicVlan.Vlan.VlanList.description:type_name -> ywrapper.StringValue
	14, // 9: openconfig.SonicVlan.Vlan.VlanList.dhcp_servers:type_name -> ywrapper.StringValue
	14, // 10: openconfig.SonicVlan.Vlan.VlanList.members:type_name -> ywrapper.StringValue
	15, // 11: openconfig.SonicVlan.Vlan.VlanList.mtu:type_name -> ywrapper.UintValue
	15, // 12: openconfig.SonicVlan.Vlan.VlanList.vlanid:type_name -> ywrapper.UintValue
	5,  // 13: openconfig.SonicVlan.Vlan.VlanListKey.vlan_list:type_name -> openconfig.SonicVlan.Vlan.VlanList
	16, // 14: openconfig.SonicVlan.VlanInterface.VlanInterfaceIpprefixList.family:type_name -> openconfig.SonicVlanIpFamily
	0,  // 15: openconfig.SonicVlan.VlanInterface.VlanInterfaceIpprefixList.scope:type_name -> openconfig.SonicVlan.VlanInterface.VlanInterfaceIpprefixList.Scope
	7,  // 16: openconfig.SonicVlan.VlanInterface.VlanInterfaceIpprefixListKey.vlan_interface_ipprefix_list:type_name -> openconfig.SonicVlan.VlanInterface.VlanInterfaceIpprefixList
	14, // 17: openconfig.SonicVlan.VlanInterface.VlanInterfaceList.vrf_name:type_name -> ywrapper.StringValue
	9,  // 18: openconfig.SonicVlan.VlanInterface.VlanInterfaceListKey.vlan_interface_list:type_name -> openconfig.SonicVlan.VlanInterface.VlanInterfaceList
	17, // 19: openconfig.SonicVlan.VlanMember.VlanMemberList.tagging_mode:type_name -> openconfig.SonicVlanVlanTaggingMode
	11, // 20: openconfig.SonicVlan.VlanMember.VlanMemberListKey.vlan_member_list:type_name -> openconfig.SonicVlan.VlanMember.VlanMemberList
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_sonic_vlan_proto_init() }
func file_sonic_vlan_proto_init() {
	if File_sonic_vlan_proto != nil {
		return
	}
	file_sonic_vlan_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sonic_vlan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vlan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVlan_Vlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vlan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVlan_VlanInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vlan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVlan_VlanMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vlan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVlan_Vlan_VlanList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vlan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVlan_Vlan_VlanListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vlan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVlan_VlanInterface_VlanInterfaceIpprefixList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vlan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVlan_VlanInterface_VlanInterfaceIpprefixListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vlan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVlan_VlanInterface_VlanInterfaceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vlan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVlan_VlanInterface_VlanInterfaceListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vlan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVlan_VlanMember_VlanMemberList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vlan_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVlan_VlanMember_VlanMemberListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sonic_vlan_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sonic_vlan_proto_goTypes,
		DependencyIndexes: file_sonic_vlan_proto_depIdxs,
		EnumInfos:         file_sonic_vlan_proto_enumTypes,
		MessageInfos:      file_sonic_vlan_proto_msgTypes,
	}.Build()
	File_sonic_vlan_proto = out.File
	file_sonic_vlan_proto_rawDesc = nil
	file_sonic_vlan_proto_goTypes = nil
	file_sonic_vlan_proto_depIdxs = nil
}
