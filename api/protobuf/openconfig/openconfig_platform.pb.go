// openconfig.openconfig_platform is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_platform.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Components_Component_Transceiver_State_Present int32

const (
	Components_Component_Transceiver_State_PRESENT_UNSET       Components_Component_Transceiver_State_Present = 0
	Components_Component_Transceiver_State_PRESENT_PRESENT     Components_Component_Transceiver_State_Present = 1
	Components_Component_Transceiver_State_PRESENT_NOT_PRESENT Components_Component_Transceiver_State_Present = 2
)

// Enum value maps for Components_Component_Transceiver_State_Present.
var (
	Components_Component_Transceiver_State_Present_name = map[int32]string{
		0: "PRESENT_UNSET",
		1: "PRESENT_PRESENT",
		2: "PRESENT_NOT_PRESENT",
	}
	Components_Component_Transceiver_State_Present_value = map[string]int32{
		"PRESENT_UNSET":       0,
		"PRESENT_PRESENT":     1,
		"PRESENT_NOT_PRESENT": 2,
	}
)

func (x Components_Component_Transceiver_State_Present) Enum() *Components_Component_Transceiver_State_Present {
	p := new(Components_Component_Transceiver_State_Present)
	*p = x
	return p
}

func (x Components_Component_Transceiver_State_Present) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Components_Component_Transceiver_State_Present) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_platform_proto_enumTypes[0].Descriptor()
}

func (Components_Component_Transceiver_State_Present) Type() protoreflect.EnumType {
	return &file_openconfig_platform_proto_enumTypes[0]
}

func (x Components_Component_Transceiver_State_Present) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Components_Component_Transceiver_State_Present.Descriptor instead.
func (Components_Component_Transceiver_State_Present) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 2, 0}
}

type Components struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component []*Components_ComponentKey `protobuf:"bytes,51431701,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Components) Reset() {
	*x = Components{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components) ProtoMessage() {}

func (x *Components) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components.ProtoReflect.Descriptor instead.
func (*Components) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0}
}

func (x *Components) GetComponent() []*Components_ComponentKey {
	if x != nil {
		return x.Component
	}
	return nil
}

type Components_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backplane         *Components_Component_Backplane         `protobuf:"bytes,23572881,opt,name=backplane,proto3" json:"backplane,omitempty"`
	Chassis           *Components_Component_Chassis           `protobuf:"bytes,153681076,opt,name=chassis,proto3" json:"chassis,omitempty"`
	Config            *Components_Component_Config            `protobuf:"bytes,405956410,opt,name=config,proto3" json:"config,omitempty"`
	Cpu               *Components_Component_Cpu               `protobuf:"bytes,60886558,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Fabric            *Components_Component_Fabric            `protobuf:"bytes,101006771,opt,name=fabric,proto3" json:"fabric,omitempty"`
	Fan               *Components_Component_Fan               `protobuf:"bytes,111660679,opt,name=fan,proto3" json:"fan,omitempty"`
	IntegratedCircuit *Components_Component_IntegratedCircuit `protobuf:"bytes,195631273,opt,name=integrated_circuit,json=integratedCircuit,proto3" json:"integrated_circuit,omitempty"`
	Linecard          *Components_Component_Linecard          `protobuf:"bytes,18894832,opt,name=linecard,proto3" json:"linecard,omitempty"`
	OpticalChannel    *Components_Component_OpticalChannel    `protobuf:"bytes,465649934,opt,name=optical_channel,json=opticalChannel,proto3" json:"optical_channel,omitempty"`
	Port              *Components_Component_Port              `protobuf:"bytes,529421081,opt,name=port,proto3" json:"port,omitempty"`
	PowerSupply       *Components_Component_PowerSupply       `protobuf:"bytes,438616709,opt,name=power_supply,json=powerSupply,proto3" json:"power_supply,omitempty"`
	Properties        *Components_Component_Properties        `protobuf:"bytes,107529735,opt,name=properties,proto3" json:"properties,omitempty"`
	State             *Components_Component_State             `protobuf:"bytes,317480023,opt,name=state,proto3" json:"state,omitempty"`
	Storage           *Components_Component_Storage           `protobuf:"bytes,403943259,opt,name=storage,proto3" json:"storage,omitempty"`
	Subcomponents     *Components_Component_Subcomponents     `protobuf:"bytes,374810450,opt,name=subcomponents,proto3" json:"subcomponents,omitempty"`
	Transceiver       *Components_Component_Transceiver       `protobuf:"bytes,40802250,opt,name=transceiver,proto3" json:"transceiver,omitempty"`
}

func (x *Components_Component) Reset() {
	*x = Components_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component) ProtoMessage() {}

func (x *Components_Component) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component.ProtoReflect.Descriptor instead.
func (*Components_Component) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Components_Component) GetBackplane() *Components_Component_Backplane {
	if x != nil {
		return x.Backplane
	}
	return nil
}

func (x *Components_Component) GetChassis() *Components_Component_Chassis {
	if x != nil {
		return x.Chassis
	}
	return nil
}

func (x *Components_Component) GetConfig() *Components_Component_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component) GetCpu() *Components_Component_Cpu {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *Components_Component) GetFabric() *Components_Component_Fabric {
	if x != nil {
		return x.Fabric
	}
	return nil
}

func (x *Components_Component) GetFan() *Components_Component_Fan {
	if x != nil {
		return x.Fan
	}
	return nil
}

func (x *Components_Component) GetIntegratedCircuit() *Components_Component_IntegratedCircuit {
	if x != nil {
		return x.IntegratedCircuit
	}
	return nil
}

func (x *Components_Component) GetLinecard() *Components_Component_Linecard {
	if x != nil {
		return x.Linecard
	}
	return nil
}

func (x *Components_Component) GetOpticalChannel() *Components_Component_OpticalChannel {
	if x != nil {
		return x.OpticalChannel
	}
	return nil
}

func (x *Components_Component) GetPort() *Components_Component_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *Components_Component) GetPowerSupply() *Components_Component_PowerSupply {
	if x != nil {
		return x.PowerSupply
	}
	return nil
}

func (x *Components_Component) GetProperties() *Components_Component_Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Components_Component) GetState() *Components_Component_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Components_Component) GetStorage() *Components_Component_Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *Components_Component) GetSubcomponents() *Components_Component_Subcomponents {
	if x != nil {
		return x.Subcomponents
	}
	return nil
}

func (x *Components_Component) GetTransceiver() *Components_Component_Transceiver {
	if x != nil {
		return x.Transceiver
	}
	return nil
}

type Components_ComponentKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Component *Components_Component `protobuf:"bytes,2,opt,name=component,proto3" json:"component,omitempty"`
}

func (x *Components_ComponentKey) Reset() {
	*x = Components_ComponentKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_ComponentKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_ComponentKey) ProtoMessage() {}

func (x *Components_ComponentKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_ComponentKey.ProtoReflect.Descriptor instead.
func (*Components_ComponentKey) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Components_ComponentKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Components_ComponentKey) GetComponent() *Components_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

type Components_Component_Backplane struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Components_Component_Backplane_Config `protobuf:"bytes,112681526,opt,name=config,proto3" json:"config,omitempty"`
	State  *Components_Component_Backplane_State  `protobuf:"bytes,238113123,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_Backplane) Reset() {
	*x = Components_Component_Backplane{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Backplane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Backplane) ProtoMessage() {}

func (x *Components_Component_Backplane) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Backplane.ProtoReflect.Descriptor instead.
func (*Components_Component_Backplane) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Components_Component_Backplane) GetConfig() *Components_Component_Backplane_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_Backplane) GetState() *Components_Component_Backplane_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_Chassis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Components_Component_Chassis_Config `protobuf:"bytes,473125305,opt,name=config,proto3" json:"config,omitempty"`
	State  *Components_Component_Chassis_State  `protobuf:"bytes,88528910,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_Chassis) Reset() {
	*x = Components_Component_Chassis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Chassis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Chassis) ProtoMessage() {}

func (x *Components_Component_Chassis) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Chassis.ProtoReflect.Descriptor instead.
func (*Components_Component_Chassis) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Components_Component_Chassis) GetConfig() *Components_Component_Chassis_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_Chassis) GetState() *Components_Component_Chassis_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,118287144,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Components_Component_Config) Reset() {
	*x = Components_Component_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Config) ProtoMessage() {}

func (x *Components_Component_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Components_Component_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Components_Component_Cpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *Components_Component_Cpu_Config      `protobuf:"bytes,14534639,opt,name=config,proto3" json:"config,omitempty"`
	State       *Components_Component_Cpu_State       `protobuf:"bytes,493359968,opt,name=state,proto3" json:"state,omitempty"`
	Utilization *Components_Component_Cpu_Utilization `protobuf:"bytes,437681307,opt,name=utilization,proto3" json:"utilization,omitempty"`
}

func (x *Components_Component_Cpu) Reset() {
	*x = Components_Component_Cpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Cpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Cpu) ProtoMessage() {}

func (x *Components_Component_Cpu) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Cpu.ProtoReflect.Descriptor instead.
func (*Components_Component_Cpu) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *Components_Component_Cpu) GetConfig() *Components_Component_Cpu_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_Cpu) GetState() *Components_Component_Cpu_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Components_Component_Cpu) GetUtilization() *Components_Component_Cpu_Utilization {
	if x != nil {
		return x.Utilization
	}
	return nil
}

type Components_Component_Fabric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Components_Component_Fabric_Config `protobuf:"bytes,145493716,opt,name=config,proto3" json:"config,omitempty"`
	State  *Components_Component_Fabric_State  `protobuf:"bytes,140431213,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_Fabric) Reset() {
	*x = Components_Component_Fabric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Fabric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Fabric) ProtoMessage() {}

func (x *Components_Component_Fabric) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Fabric.ProtoReflect.Descriptor instead.
func (*Components_Component_Fabric) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *Components_Component_Fabric) GetConfig() *Components_Component_Fabric_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_Fabric) GetState() *Components_Component_Fabric_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_Fan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Components_Component_Fan_Config `protobuf:"bytes,532415128,opt,name=config,proto3" json:"config,omitempty"`
	State  *Components_Component_Fan_State  `protobuf:"bytes,105888817,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_Fan) Reset() {
	*x = Components_Component_Fan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Fan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Fan) ProtoMessage() {}

func (x *Components_Component_Fan) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Fan.ProtoReflect.Descriptor instead.
func (*Components_Component_Fan) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (x *Components_Component_Fan) GetConfig() *Components_Component_Fan_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_Fan) GetState() *Components_Component_Fan_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_IntegratedCircuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Components_Component_IntegratedCircuit_Config `protobuf:"bytes,104535454,opt,name=config,proto3" json:"config,omitempty"`
	State  *Components_Component_IntegratedCircuit_State  `protobuf:"bytes,401234699,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_IntegratedCircuit) Reset() {
	*x = Components_Component_IntegratedCircuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_IntegratedCircuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_IntegratedCircuit) ProtoMessage() {}

func (x *Components_Component_IntegratedCircuit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_IntegratedCircuit.ProtoReflect.Descriptor instead.
func (*Components_Component_IntegratedCircuit) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 6}
}

func (x *Components_Component_IntegratedCircuit) GetConfig() *Components_Component_IntegratedCircuit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_IntegratedCircuit) GetState() *Components_Component_IntegratedCircuit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_Linecard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Components_Component_Linecard_Config `protobuf:"bytes,421310981,opt,name=config,proto3" json:"config,omitempty"`
	State  *Components_Component_Linecard_State  `protobuf:"bytes,252073466,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_Linecard) Reset() {
	*x = Components_Component_Linecard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Linecard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Linecard) ProtoMessage() {}

func (x *Components_Component_Linecard) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Linecard.ProtoReflect.Descriptor instead.
func (*Components_Component_Linecard) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 7}
}

func (x *Components_Component_Linecard) GetConfig() *Components_Component_Linecard_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_Linecard) GetState() *Components_Component_Linecard_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_OpticalChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Components_Component_OpticalChannel_Config `protobuf:"bytes,456634943,opt,name=config,proto3" json:"config,omitempty"`
	State  *Components_Component_OpticalChannel_State  `protobuf:"bytes,84008816,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_OpticalChannel) Reset() {
	*x = Components_Component_OpticalChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_OpticalChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_OpticalChannel) ProtoMessage() {}

func (x *Components_Component_OpticalChannel) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_OpticalChannel.ProtoReflect.Descriptor instead.
func (*Components_Component_OpticalChannel) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 8}
}

func (x *Components_Component_OpticalChannel) GetConfig() *Components_Component_OpticalChannel_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_OpticalChannel) GetState() *Components_Component_OpticalChannel_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BreakoutMode *Components_Component_Port_BreakoutMode `protobuf:"bytes,508830081,opt,name=breakout_mode,json=breakoutMode,proto3" json:"breakout_mode,omitempty"`
	Config       *Components_Component_Port_Config       `protobuf:"bytes,229703406,opt,name=config,proto3" json:"config,omitempty"`
	OpticalPort  *Components_Component_Port_OpticalPort  `protobuf:"bytes,114655720,opt,name=optical_port,json=opticalPort,proto3" json:"optical_port,omitempty"`
	State        *Components_Component_Port_State        `protobuf:"bytes,326598427,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_Port) Reset() {
	*x = Components_Component_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Port) ProtoMessage() {}

func (x *Components_Component_Port) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Port.ProtoReflect.Descriptor instead.
func (*Components_Component_Port) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 9}
}

func (x *Components_Component_Port) GetBreakoutMode() *Components_Component_Port_BreakoutMode {
	if x != nil {
		return x.BreakoutMode
	}
	return nil
}

func (x *Components_Component_Port) GetConfig() *Components_Component_Port_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_Port) GetOpticalPort() *Components_Component_Port_OpticalPort {
	if x != nil {
		return x.OpticalPort
	}
	return nil
}

func (x *Components_Component_Port) GetState() *Components_Component_Port_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_PowerSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Components_Component_PowerSupply_Config `protobuf:"bytes,285921994,opt,name=config,proto3" json:"config,omitempty"`
	State  *Components_Component_PowerSupply_State  `protobuf:"bytes,327902055,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_PowerSupply) Reset() {
	*x = Components_Component_PowerSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_PowerSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_PowerSupply) ProtoMessage() {}

func (x *Components_Component_PowerSupply) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_PowerSupply.ProtoReflect.Descriptor instead.
func (*Components_Component_PowerSupply) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 10}
}

func (x *Components_Component_PowerSupply) GetConfig() *Components_Component_PowerSupply_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_PowerSupply) GetState() *Components_Component_PowerSupply_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_Properties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property []*Components_Component_Properties_PropertyKey `protobuf:"bytes,502076969,rep,name=property,proto3" json:"property,omitempty"`
}

func (x *Components_Component_Properties) Reset() {
	*x = Components_Component_Properties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Properties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Properties) ProtoMessage() {}

func (x *Components_Component_Properties) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Properties.ProtoReflect.Descriptor instead.
func (*Components_Component_Properties) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 11}
}

func (x *Components_Component_Properties) GetProperty() []*Components_Component_Properties_PropertyKey {
	if x != nil {
		return x.Property
	}
	return nil
}

type Components_Component_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocatedPower    *ywrapper.UintValue                        `protobuf:"bytes,382835825,opt,name=allocated_power,json=allocatedPower,proto3" json:"allocated_power,omitempty"`
	Description       *ywrapper.StringValue                      `protobuf:"bytes,167549616,opt,name=description,proto3" json:"description,omitempty"`
	Empty             *ywrapper.BoolValue                        `protobuf:"bytes,433362321,opt,name=empty,proto3" json:"empty,omitempty"`
	EntityId          *ywrapper.UintValue                        `protobuf:"bytes,53940879,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	EquipmentFailure  *ywrapper.BoolValue                        `protobuf:"bytes,471038183,opt,name=equipment_failure,json=equipmentFailure,proto3" json:"equipment_failure,omitempty"`
	EquipmentMismatch *ywrapper.BoolValue                        `protobuf:"bytes,311608903,opt,name=equipment_mismatch,json=equipmentMismatch,proto3" json:"equipment_mismatch,omitempty"`
	FirmwareVersion   *ywrapper.StringValue                      `protobuf:"bytes,244667518,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	HardwareVersion   *ywrapper.StringValue                      `protobuf:"bytes,49616205,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	Id                *ywrapper.StringValue                      `protobuf:"bytes,246882465,opt,name=id,proto3" json:"id,omitempty"`
	Location          *ywrapper.StringValue                      `protobuf:"bytes,326611111,opt,name=location,proto3" json:"location,omitempty"`
	Memory            *Components_Component_State_Memory         `protobuf:"bytes,443182963,opt,name=memory,proto3" json:"memory,omitempty"`
	MfgDate           *ywrapper.StringValue                      `protobuf:"bytes,499974311,opt,name=mfg_date,json=mfgDate,proto3" json:"mfg_date,omitempty"`
	MfgName           *ywrapper.StringValue                      `protobuf:"bytes,80033814,opt,name=mfg_name,json=mfgName,proto3" json:"mfg_name,omitempty"`
	Name              *ywrapper.StringValue                      `protobuf:"bytes,111678303,opt,name=name,proto3" json:"name,omitempty"`
	OperStatus        OpenconfigPlatformTypesCOMPONENTOPERSTATUS `protobuf:"varint,378023501,opt,name=oper_status,json=operStatus,proto3,enum=openconfig.OpenconfigPlatformTypesCOMPONENTOPERSTATUS" json:"oper_status,omitempty"`
	Parent            *ywrapper.StringValue                      `protobuf:"bytes,291733930,opt,name=parent,proto3" json:"parent,omitempty"`
	PartNo            *ywrapper.StringValue                      `protobuf:"bytes,173082367,opt,name=part_no,json=partNo,proto3" json:"part_no,omitempty"`
	Removable         *ywrapper.BoolValue                        `protobuf:"bytes,351010765,opt,name=removable,proto3" json:"removable,omitempty"`
	SerialNo          *ywrapper.StringValue                      `protobuf:"bytes,490029750,opt,name=serial_no,json=serialNo,proto3" json:"serial_no,omitempty"`
	SoftwareVersion   *ywrapper.StringValue                      `protobuf:"bytes,220526526,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	Temperature       *Components_Component_State_Temperature    `protobuf:"bytes,169040172,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// Types that are assignable to Type:
	//	*Components_Component_State_TypeOpenconfigplatformtypesopenconfighardwarecomponent
	//	*Components_Component_State_TypeOpenconfigplatformtypesopenconfigsoftwarecomponent
	Type      isComponents_Component_State_Type `protobuf_oneof:"type"`
	UsedPower *ywrapper.UintValue               `protobuf:"bytes,259754309,opt,name=used_power,json=usedPower,proto3" json:"used_power,omitempty"`
}

func (x *Components_Component_State) Reset() {
	*x = Components_Component_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_State) ProtoMessage() {}

func (x *Components_Component_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_State.ProtoReflect.Descriptor instead.
func (*Components_Component_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 12}
}

func (x *Components_Component_State) GetAllocatedPower() *ywrapper.UintValue {
	if x != nil {
		return x.AllocatedPower
	}
	return nil
}

func (x *Components_Component_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Components_Component_State) GetEmpty() *ywrapper.BoolValue {
	if x != nil {
		return x.Empty
	}
	return nil
}

func (x *Components_Component_State) GetEntityId() *ywrapper.UintValue {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *Components_Component_State) GetEquipmentFailure() *ywrapper.BoolValue {
	if x != nil {
		return x.EquipmentFailure
	}
	return nil
}

func (x *Components_Component_State) GetEquipmentMismatch() *ywrapper.BoolValue {
	if x != nil {
		return x.EquipmentMismatch
	}
	return nil
}

func (x *Components_Component_State) GetFirmwareVersion() *ywrapper.StringValue {
	if x != nil {
		return x.FirmwareVersion
	}
	return nil
}

func (x *Components_Component_State) GetHardwareVersion() *ywrapper.StringValue {
	if x != nil {
		return x.HardwareVersion
	}
	return nil
}

func (x *Components_Component_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Components_Component_State) GetLocation() *ywrapper.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Components_Component_State) GetMemory() *Components_Component_State_Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *Components_Component_State) GetMfgDate() *ywrapper.StringValue {
	if x != nil {
		return x.MfgDate
	}
	return nil
}

func (x *Components_Component_State) GetMfgName() *ywrapper.StringValue {
	if x != nil {
		return x.MfgName
	}
	return nil
}

func (x *Components_Component_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Components_Component_State) GetOperStatus() OpenconfigPlatformTypesCOMPONENTOPERSTATUS {
	if x != nil {
		return x.OperStatus
	}
	return OpenconfigPlatformTypesCOMPONENTOPERSTATUS_OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_UNSET
}

func (x *Components_Component_State) GetParent() *ywrapper.StringValue {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Components_Component_State) GetPartNo() *ywrapper.StringValue {
	if x != nil {
		return x.PartNo
	}
	return nil
}

func (x *Components_Component_State) GetRemovable() *ywrapper.BoolValue {
	if x != nil {
		return x.Removable
	}
	return nil
}

func (x *Components_Component_State) GetSerialNo() *ywrapper.StringValue {
	if x != nil {
		return x.SerialNo
	}
	return nil
}

func (x *Components_Component_State) GetSoftwareVersion() *ywrapper.StringValue {
	if x != nil {
		return x.SoftwareVersion
	}
	return nil
}

func (x *Components_Component_State) GetTemperature() *Components_Component_State_Temperature {
	if x != nil {
		return x.Temperature
	}
	return nil
}

func (m *Components_Component_State) GetType() isComponents_Component_State_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Components_Component_State) GetTypeOpenconfigplatformtypesopenconfighardwarecomponent() OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT {
	if x, ok := x.GetType().(*Components_Component_State_TypeOpenconfigplatformtypesopenconfighardwarecomponent); ok {
		return x.TypeOpenconfigplatformtypesopenconfighardwarecomponent
	}
	return OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_UNSET
}

func (x *Components_Component_State) GetTypeOpenconfigplatformtypesopenconfigsoftwarecomponent() OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT {
	if x, ok := x.GetType().(*Components_Component_State_TypeOpenconfigplatformtypesopenconfigsoftwarecomponent); ok {
		return x.TypeOpenconfigplatformtypesopenconfigsoftwarecomponent
	}
	return OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_UNSET
}

func (x *Components_Component_State) GetUsedPower() *ywrapper.UintValue {
	if x != nil {
		return x.UsedPower
	}
	return nil
}

type isComponents_Component_State_Type interface {
	isComponents_Component_State_Type()
}

type Components_Component_State_TypeOpenconfigplatformtypesopenconfighardwarecomponent struct {
	TypeOpenconfigplatformtypesopenconfighardwarecomponent OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT `protobuf:"varint,423705132,opt,name=type_openconfigplatformtypesopenconfighardwarecomponent,json=typeOpenconfigplatformtypesopenconfighardwarecomponent,proto3,enum=openconfig.OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT,oneof"`
}

type Components_Component_State_TypeOpenconfigplatformtypesopenconfigsoftwarecomponent struct {
	TypeOpenconfigplatformtypesopenconfigsoftwarecomponent OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT `protobuf:"varint,366278741,opt,name=type_openconfigplatformtypesopenconfigsoftwarecomponent,json=typeOpenconfigplatformtypesopenconfigsoftwarecomponent,proto3,enum=openconfig.OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT,oneof"`
}

func (*Components_Component_State_TypeOpenconfigplatformtypesopenconfighardwarecomponent) isComponents_Component_State_Type() {
}

func (*Components_Component_State_TypeOpenconfigplatformtypesopenconfigsoftwarecomponent) isComponents_Component_State_Type() {
}

type Components_Component_Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Components_Component_Storage_Config `protobuf:"bytes,522152076,opt,name=config,proto3" json:"config,omitempty"`
	State  *Components_Component_Storage_State  `protobuf:"bytes,68412165,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_Storage) Reset() {
	*x = Components_Component_Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Storage) ProtoMessage() {}

func (x *Components_Component_Storage) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Storage.ProtoReflect.Descriptor instead.
func (*Components_Component_Storage) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 13}
}

func (x *Components_Component_Storage) GetConfig() *Components_Component_Storage_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_Storage) GetState() *Components_Component_Storage_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_Subcomponents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subcomponent []*Components_Component_Subcomponents_SubcomponentKey `protobuf:"bytes,282821422,rep,name=subcomponent,proto3" json:"subcomponent,omitempty"`
}

func (x *Components_Component_Subcomponents) Reset() {
	*x = Components_Component_Subcomponents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Subcomponents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Subcomponents) ProtoMessage() {}

func (x *Components_Component_Subcomponents) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Subcomponents.ProtoReflect.Descriptor instead.
func (*Components_Component_Subcomponents) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 14}
}

func (x *Components_Component_Subcomponents) GetSubcomponent() []*Components_Component_Subcomponents_SubcomponentKey {
	if x != nil {
		return x.Subcomponent
	}
	return nil
}

type Components_Component_Transceiver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config           *Components_Component_Transceiver_Config           `protobuf:"bytes,532347803,opt,name=config,proto3" json:"config,omitempty"`
	PhysicalChannels *Components_Component_Transceiver_PhysicalChannels `protobuf:"bytes,144337163,opt,name=physical_channels,json=physicalChannels,proto3" json:"physical_channels,omitempty"`
	State            *Components_Component_Transceiver_State            `protobuf:"bytes,171036572,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_Transceiver) Reset() {
	*x = Components_Component_Transceiver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver) ProtoMessage() {}

func (x *Components_Component_Transceiver) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15}
}

func (x *Components_Component_Transceiver) GetConfig() *Components_Component_Transceiver_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_Transceiver) GetPhysicalChannels() *Components_Component_Transceiver_PhysicalChannels {
	if x != nil {
		return x.PhysicalChannels
	}
	return nil
}

func (x *Components_Component_Transceiver) GetState() *Components_Component_Transceiver_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_Backplane_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_Backplane_Config) Reset() {
	*x = Components_Component_Backplane_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Backplane_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Backplane_Config) ProtoMessage() {}

func (x *Components_Component_Backplane_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Backplane_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Backplane_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type Components_Component_Backplane_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_Backplane_State) Reset() {
	*x = Components_Component_Backplane_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Backplane_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Backplane_State) ProtoMessage() {}

func (x *Components_Component_Backplane_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Backplane_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Backplane_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

type Components_Component_Chassis_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_Chassis_Config) Reset() {
	*x = Components_Component_Chassis_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Chassis_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Chassis_Config) ProtoMessage() {}

func (x *Components_Component_Chassis_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Chassis_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Chassis_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

type Components_Component_Chassis_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_Chassis_State) Reset() {
	*x = Components_Component_Chassis_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Chassis_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Chassis_State) ProtoMessage() {}

func (x *Components_Component_Chassis_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Chassis_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Chassis_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

type Components_Component_Cpu_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_Cpu_Config) Reset() {
	*x = Components_Component_Cpu_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Cpu_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Cpu_Config) ProtoMessage() {}

func (x *Components_Component_Cpu_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Cpu_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Cpu_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

type Components_Component_Cpu_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_Cpu_State) Reset() {
	*x = Components_Component_Cpu_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Cpu_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Cpu_State) ProtoMessage() {}

func (x *Components_Component_Cpu_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Cpu_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Cpu_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 3, 1}
}

type Components_Component_Cpu_Utilization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Components_Component_Cpu_Utilization_State `protobuf:"bytes,140553669,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_Cpu_Utilization) Reset() {
	*x = Components_Component_Cpu_Utilization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Cpu_Utilization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Cpu_Utilization) ProtoMessage() {}

func (x *Components_Component_Cpu_Utilization) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Cpu_Utilization.ProtoReflect.Descriptor instead.
func (*Components_Component_Cpu_Utilization) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 3, 2}
}

func (x *Components_Component_Cpu_Utilization) GetState() *Components_Component_Cpu_Utilization_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_Cpu_Utilization_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,223138920,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,356037459,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,245556819,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,40556458,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,233348896,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,174777348,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,397269742,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_Cpu_Utilization_State) Reset() {
	*x = Components_Component_Cpu_Utilization_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Cpu_Utilization_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Cpu_Utilization_State) ProtoMessage() {}

func (x *Components_Component_Cpu_Utilization_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Cpu_Utilization_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Cpu_Utilization_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 3, 2, 0}
}

func (x *Components_Component_Cpu_Utilization_State) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_Cpu_Utilization_State) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_Cpu_Utilization_State) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_Cpu_Utilization_State) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_Cpu_Utilization_State) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_Cpu_Utilization_State) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_Cpu_Utilization_State) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_Fabric_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_Fabric_Config) Reset() {
	*x = Components_Component_Fabric_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Fabric_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Fabric_Config) ProtoMessage() {}

func (x *Components_Component_Fabric_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Fabric_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Fabric_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 4, 0}
}

type Components_Component_Fabric_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_Fabric_State) Reset() {
	*x = Components_Component_Fabric_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Fabric_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Fabric_State) ProtoMessage() {}

func (x *Components_Component_Fabric_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Fabric_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Fabric_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 4, 1}
}

type Components_Component_Fan_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_Fan_Config) Reset() {
	*x = Components_Component_Fan_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Fan_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Fan_Config) ProtoMessage() {}

func (x *Components_Component_Fan_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Fan_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Fan_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 5, 0}
}

type Components_Component_Fan_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Speed *ywrapper.UintValue `protobuf:"bytes,39662101,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *Components_Component_Fan_State) Reset() {
	*x = Components_Component_Fan_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Fan_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Fan_State) ProtoMessage() {}

func (x *Components_Component_Fan_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Fan_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Fan_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 5, 1}
}

func (x *Components_Component_Fan_State) GetSpeed() *ywrapper.UintValue {
	if x != nil {
		return x.Speed
	}
	return nil
}

type Components_Component_IntegratedCircuit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_IntegratedCircuit_Config) Reset() {
	*x = Components_Component_IntegratedCircuit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_IntegratedCircuit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_IntegratedCircuit_Config) ProtoMessage() {}

func (x *Components_Component_IntegratedCircuit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_IntegratedCircuit_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_IntegratedCircuit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 6, 0}
}

type Components_Component_IntegratedCircuit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_IntegratedCircuit_State) Reset() {
	*x = Components_Component_IntegratedCircuit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_IntegratedCircuit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_IntegratedCircuit_State) ProtoMessage() {}

func (x *Components_Component_IntegratedCircuit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_IntegratedCircuit_State.ProtoReflect.Descriptor instead.
func (*Components_Component_IntegratedCircuit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 6, 1}
}

type Components_Component_Linecard_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerAdminState OpenconfigPlatformLinecardComponentPowerType `protobuf:"varint,460899237,opt,name=power_admin_state,json=powerAdminState,proto3,enum=openconfig.OpenconfigPlatformLinecardComponentPowerType" json:"power_admin_state,omitempty"`
}

func (x *Components_Component_Linecard_Config) Reset() {
	*x = Components_Component_Linecard_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Linecard_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Linecard_Config) ProtoMessage() {}

func (x *Components_Component_Linecard_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Linecard_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Linecard_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 7, 0}
}

func (x *Components_Component_Linecard_Config) GetPowerAdminState() OpenconfigPlatformLinecardComponentPowerType {
	if x != nil {
		return x.PowerAdminState
	}
	return OpenconfigPlatformLinecardComponentPowerType_OPENCONFIGPLATFORMLINECARDCOMPONENTPOWERTYPE_POWER_ENABLED
}

type Components_Component_Linecard_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerAdminState OpenconfigPlatformLinecardComponentPowerType `protobuf:"varint,443908706,opt,name=power_admin_state,json=powerAdminState,proto3,enum=openconfig.OpenconfigPlatformLinecardComponentPowerType" json:"power_admin_state,omitempty"`
	SlotId          *ywrapper.StringValue                        `protobuf:"bytes,426044457,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
}

func (x *Components_Component_Linecard_State) Reset() {
	*x = Components_Component_Linecard_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Linecard_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Linecard_State) ProtoMessage() {}

func (x *Components_Component_Linecard_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Linecard_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Linecard_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 7, 1}
}

func (x *Components_Component_Linecard_State) GetPowerAdminState() OpenconfigPlatformLinecardComponentPowerType {
	if x != nil {
		return x.PowerAdminState
	}
	return OpenconfigPlatformLinecardComponentPowerType_OPENCONFIGPLATFORMLINECARDCOMPONENTPOWERTYPE_POWER_ENABLED
}

func (x *Components_Component_Linecard_State) GetSlotId() *ywrapper.StringValue {
	if x != nil {
		return x.SlotId
	}
	return nil
}

type Components_Component_OpticalChannel_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frequency         *ywrapper.UintValue      `protobuf:"bytes,26841272,opt,name=frequency,proto3" json:"frequency,omitempty"`
	LinePort          *ywrapper.StringValue    `protobuf:"bytes,177586852,opt,name=line_port,json=linePort,proto3" json:"line_port,omitempty"`
	OperationalMode   *ywrapper.UintValue      `protobuf:"bytes,220459914,opt,name=operational_mode,json=operationalMode,proto3" json:"operational_mode,omitempty"`
	TargetOutputPower *ywrapper.Decimal64Value `protobuf:"bytes,62472149,opt,name=target_output_power,json=targetOutputPower,proto3" json:"target_output_power,omitempty"`
}

func (x *Components_Component_OpticalChannel_Config) Reset() {
	*x = Components_Component_OpticalChannel_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_OpticalChannel_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_OpticalChannel_Config) ProtoMessage() {}

func (x *Components_Component_OpticalChannel_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_OpticalChannel_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_OpticalChannel_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 8, 0}
}

func (x *Components_Component_OpticalChannel_Config) GetFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.Frequency
	}
	return nil
}

func (x *Components_Component_OpticalChannel_Config) GetLinePort() *ywrapper.StringValue {
	if x != nil {
		return x.LinePort
	}
	return nil
}

func (x *Components_Component_OpticalChannel_Config) GetOperationalMode() *ywrapper.UintValue {
	if x != nil {
		return x.OperationalMode
	}
	return nil
}

func (x *Components_Component_OpticalChannel_Config) GetTargetOutputPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetOutputPower
	}
	return nil
}

type Components_Component_OpticalChannel_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChromaticDispersion                   *Components_Component_OpticalChannel_State_ChromaticDispersion                   `protobuf:"bytes,99469822,opt,name=chromatic_dispersion,json=chromaticDispersion,proto3" json:"chromatic_dispersion,omitempty"`
	Frequency                             *ywrapper.UintValue                                                              `protobuf:"bytes,429916835,opt,name=frequency,proto3" json:"frequency,omitempty"`
	GroupId                               *ywrapper.UintValue                                                              `protobuf:"bytes,327440498,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	InputPower                            *Components_Component_OpticalChannel_State_InputPower                            `protobuf:"bytes,324789833,opt,name=input_power,json=inputPower,proto3" json:"input_power,omitempty"`
	LaserBiasCurrent                      *Components_Component_OpticalChannel_State_LaserBiasCurrent                      `protobuf:"bytes,91725622,opt,name=laser_bias_current,json=laserBiasCurrent,proto3" json:"laser_bias_current,omitempty"`
	LinePort                              *ywrapper.StringValue                                                            `protobuf:"bytes,123348347,opt,name=line_port,json=linePort,proto3" json:"line_port,omitempty"`
	OperationalMode                       *ywrapper.UintValue                                                              `protobuf:"bytes,85276411,opt,name=operational_mode,json=operationalMode,proto3" json:"operational_mode,omitempty"`
	OutputPower                           *Components_Component_OpticalChannel_State_OutputPower                           `protobuf:"bytes,190162364,opt,name=output_power,json=outputPower,proto3" json:"output_power,omitempty"`
	PolarizationDependentLoss             *Components_Component_OpticalChannel_State_PolarizationDependentLoss             `protobuf:"bytes,384302551,opt,name=polarization_dependent_loss,json=polarizationDependentLoss,proto3" json:"polarization_dependent_loss,omitempty"`
	PolarizationModeDispersion            *Components_Component_OpticalChannel_State_PolarizationModeDispersion            `protobuf:"bytes,145763652,opt,name=polarization_mode_dispersion,json=polarizationModeDispersion,proto3" json:"polarization_mode_dispersion,omitempty"`
	SecondOrderPolarizationModeDispersion *Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion `protobuf:"bytes,442862686,opt,name=second_order_polarization_mode_dispersion,json=secondOrderPolarizationModeDispersion,proto3" json:"second_order_polarization_mode_dispersion,omitempty"`
	TargetOutputPower                     *ywrapper.Decimal64Value                                                         `protobuf:"bytes,257534242,opt,name=target_output_power,json=targetOutputPower,proto3" json:"target_output_power,omitempty"`
}

func (x *Components_Component_OpticalChannel_State) Reset() {
	*x = Components_Component_OpticalChannel_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_OpticalChannel_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_OpticalChannel_State) ProtoMessage() {}

func (x *Components_Component_OpticalChannel_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_OpticalChannel_State.ProtoReflect.Descriptor instead.
func (*Components_Component_OpticalChannel_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 8, 1}
}

func (x *Components_Component_OpticalChannel_State) GetChromaticDispersion() *Components_Component_OpticalChannel_State_ChromaticDispersion {
	if x != nil {
		return x.ChromaticDispersion
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State) GetFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.Frequency
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State) GetGroupId() *ywrapper.UintValue {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State) GetInputPower() *Components_Component_OpticalChannel_State_InputPower {
	if x != nil {
		return x.InputPower
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State) GetLaserBiasCurrent() *Components_Component_OpticalChannel_State_LaserBiasCurrent {
	if x != nil {
		return x.LaserBiasCurrent
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State) GetLinePort() *ywrapper.StringValue {
	if x != nil {
		return x.LinePort
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State) GetOperationalMode() *ywrapper.UintValue {
	if x != nil {
		return x.OperationalMode
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State) GetOutputPower() *Components_Component_OpticalChannel_State_OutputPower {
	if x != nil {
		return x.OutputPower
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State) GetPolarizationDependentLoss() *Components_Component_OpticalChannel_State_PolarizationDependentLoss {
	if x != nil {
		return x.PolarizationDependentLoss
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State) GetPolarizationModeDispersion() *Components_Component_OpticalChannel_State_PolarizationModeDispersion {
	if x != nil {
		return x.PolarizationModeDispersion
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State) GetSecondOrderPolarizationModeDispersion() *Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion {
	if x != nil {
		return x.SecondOrderPolarizationModeDispersion
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State) GetTargetOutputPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetOutputPower
	}
	return nil
}

type Components_Component_OpticalChannel_State_ChromaticDispersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,264868115,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,423301068,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,275111866,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,380327293,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,80698957,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,514548211,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,40454815,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_OpticalChannel_State_ChromaticDispersion) Reset() {
	*x = Components_Component_OpticalChannel_State_ChromaticDispersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_OpticalChannel_State_ChromaticDispersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_OpticalChannel_State_ChromaticDispersion) ProtoMessage() {}

func (x *Components_Component_OpticalChannel_State_ChromaticDispersion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_OpticalChannel_State_ChromaticDispersion.ProtoReflect.Descriptor instead.
func (*Components_Component_OpticalChannel_State_ChromaticDispersion) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 8, 1, 0}
}

func (x *Components_Component_OpticalChannel_State_ChromaticDispersion) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_ChromaticDispersion) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_ChromaticDispersion) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_ChromaticDispersion) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_ChromaticDispersion) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_ChromaticDispersion) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_ChromaticDispersion) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_OpticalChannel_State_InputPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,119392212,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,477503791,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,97973455,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,335529838,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,173081036,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,469750720,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,79162402,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_OpticalChannel_State_InputPower) Reset() {
	*x = Components_Component_OpticalChannel_State_InputPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_OpticalChannel_State_InputPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_OpticalChannel_State_InputPower) ProtoMessage() {}

func (x *Components_Component_OpticalChannel_State_InputPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_OpticalChannel_State_InputPower.ProtoReflect.Descriptor instead.
func (*Components_Component_OpticalChannel_State_InputPower) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 8, 1, 1}
}

func (x *Components_Component_OpticalChannel_State_InputPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_InputPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_InputPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_InputPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_InputPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_InputPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_InputPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_OpticalChannel_State_LaserBiasCurrent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,114747003,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,49268100,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,345098114,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,232778501,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,371600501,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,98557579,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,435331191,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_OpticalChannel_State_LaserBiasCurrent) Reset() {
	*x = Components_Component_OpticalChannel_State_LaserBiasCurrent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_OpticalChannel_State_LaserBiasCurrent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_OpticalChannel_State_LaserBiasCurrent) ProtoMessage() {}

func (x *Components_Component_OpticalChannel_State_LaserBiasCurrent) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_OpticalChannel_State_LaserBiasCurrent.ProtoReflect.Descriptor instead.
func (*Components_Component_OpticalChannel_State_LaserBiasCurrent) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 8, 1, 2}
}

func (x *Components_Component_OpticalChannel_State_LaserBiasCurrent) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_LaserBiasCurrent) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_LaserBiasCurrent) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_LaserBiasCurrent) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_LaserBiasCurrent) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_LaserBiasCurrent) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_LaserBiasCurrent) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_OpticalChannel_State_OutputPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,468682565,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,307832130,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,322482692,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,252544967,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,239079627,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,386765881,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,188893457,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_OpticalChannel_State_OutputPower) Reset() {
	*x = Components_Component_OpticalChannel_State_OutputPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_OpticalChannel_State_OutputPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_OpticalChannel_State_OutputPower) ProtoMessage() {}

func (x *Components_Component_OpticalChannel_State_OutputPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_OpticalChannel_State_OutputPower.ProtoReflect.Descriptor instead.
func (*Components_Component_OpticalChannel_State_OutputPower) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 8, 1, 3}
}

func (x *Components_Component_OpticalChannel_State_OutputPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_OutputPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_OutputPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_OutputPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_OutputPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_OutputPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_OutputPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_OpticalChannel_State_PolarizationDependentLoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,533746774,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,32098901,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,460602601,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,145902896,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,108770770,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,11682014,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,100721596,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_OpticalChannel_State_PolarizationDependentLoss) Reset() {
	*x = Components_Component_OpticalChannel_State_PolarizationDependentLoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_OpticalChannel_State_PolarizationDependentLoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_OpticalChannel_State_PolarizationDependentLoss) ProtoMessage() {}

func (x *Components_Component_OpticalChannel_State_PolarizationDependentLoss) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_OpticalChannel_State_PolarizationDependentLoss.ProtoReflect.Descriptor instead.
func (*Components_Component_OpticalChannel_State_PolarizationDependentLoss) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 8, 1, 4}
}

func (x *Components_Component_OpticalChannel_State_PolarizationDependentLoss) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_PolarizationDependentLoss) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_PolarizationDependentLoss) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_PolarizationDependentLoss) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_PolarizationDependentLoss) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_PolarizationDependentLoss) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_PolarizationDependentLoss) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_OpticalChannel_State_PolarizationModeDispersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,237752797,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,42582794,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,415131900,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,19068223,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,408755203,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,421718209,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,131367769,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_OpticalChannel_State_PolarizationModeDispersion) Reset() {
	*x = Components_Component_OpticalChannel_State_PolarizationModeDispersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_OpticalChannel_State_PolarizationModeDispersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_OpticalChannel_State_PolarizationModeDispersion) ProtoMessage() {}

func (x *Components_Component_OpticalChannel_State_PolarizationModeDispersion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_OpticalChannel_State_PolarizationModeDispersion.ProtoReflect.Descriptor instead.
func (*Components_Component_OpticalChannel_State_PolarizationModeDispersion) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 8, 1, 5}
}

func (x *Components_Component_OpticalChannel_State_PolarizationModeDispersion) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_PolarizationModeDispersion) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_PolarizationModeDispersion) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_PolarizationModeDispersion) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_PolarizationModeDispersion) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_PolarizationModeDispersion) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_PolarizationModeDispersion) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,315050099,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,14501164,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,348223642,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,430612189,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,316820525,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,27962195,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,276576639,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) Reset() {
	*x = Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) ProtoMessage() {
}

func (x *Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion.ProtoReflect.Descriptor instead.
func (*Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 8, 1, 6}
}

func (x *Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_Port_BreakoutMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Components_Component_Port_BreakoutMode_Config `protobuf:"bytes,448331782,opt,name=config,proto3" json:"config,omitempty"`
	State  *Components_Component_Port_BreakoutMode_State  `protobuf:"bytes,72628467,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_Port_BreakoutMode) Reset() {
	*x = Components_Component_Port_BreakoutMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Port_BreakoutMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Port_BreakoutMode) ProtoMessage() {}

func (x *Components_Component_Port_BreakoutMode) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Port_BreakoutMode.ProtoReflect.Descriptor instead.
func (*Components_Component_Port_BreakoutMode) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 9, 0}
}

func (x *Components_Component_Port_BreakoutMode) GetConfig() *Components_Component_Port_BreakoutMode_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_Port_BreakoutMode) GetState() *Components_Component_Port_BreakoutMode_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_Port_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_Port_Config) Reset() {
	*x = Components_Component_Port_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Port_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Port_Config) ProtoMessage() {}

func (x *Components_Component_Port_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Port_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Port_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 9, 1}
}

type Components_Component_Port_OpticalPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Components_Component_Port_OpticalPort_Config `protobuf:"bytes,534285133,opt,name=config,proto3" json:"config,omitempty"`
	State  *Components_Component_Port_OpticalPort_State  `protobuf:"bytes,63061378,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_Port_OpticalPort) Reset() {
	*x = Components_Component_Port_OpticalPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Port_OpticalPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Port_OpticalPort) ProtoMessage() {}

func (x *Components_Component_Port_OpticalPort) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Port_OpticalPort.ProtoReflect.Descriptor instead.
func (*Components_Component_Port_OpticalPort) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 9, 2}
}

func (x *Components_Component_Port_OpticalPort) GetConfig() *Components_Component_Port_OpticalPort_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort) GetState() *Components_Component_Port_OpticalPort_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_Port_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_Port_State) Reset() {
	*x = Components_Component_Port_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Port_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Port_State) ProtoMessage() {}

func (x *Components_Component_Port_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Port_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Port_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 9, 3}
}

type Components_Component_Port_BreakoutMode_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelSpeed OpenconfigIfEthernetETHERNETSPEED `protobuf:"varint,133662836,opt,name=channel_speed,json=channelSpeed,proto3,enum=openconfig.OpenconfigIfEthernetETHERNETSPEED" json:"channel_speed,omitempty"`
	NumChannels  *ywrapper.UintValue               `protobuf:"bytes,207420976,opt,name=num_channels,json=numChannels,proto3" json:"num_channels,omitempty"`
}

func (x *Components_Component_Port_BreakoutMode_Config) Reset() {
	*x = Components_Component_Port_BreakoutMode_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Port_BreakoutMode_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Port_BreakoutMode_Config) ProtoMessage() {}

func (x *Components_Component_Port_BreakoutMode_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Port_BreakoutMode_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Port_BreakoutMode_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 9, 0, 0}
}

func (x *Components_Component_Port_BreakoutMode_Config) GetChannelSpeed() OpenconfigIfEthernetETHERNETSPEED {
	if x != nil {
		return x.ChannelSpeed
	}
	return OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_UNSET
}

func (x *Components_Component_Port_BreakoutMode_Config) GetNumChannels() *ywrapper.UintValue {
	if x != nil {
		return x.NumChannels
	}
	return nil
}

type Components_Component_Port_BreakoutMode_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelSpeed OpenconfigIfEthernetETHERNETSPEED `protobuf:"varint,512097777,opt,name=channel_speed,json=channelSpeed,proto3,enum=openconfig.OpenconfigIfEthernetETHERNETSPEED" json:"channel_speed,omitempty"`
	NumChannels  *ywrapper.UintValue               `protobuf:"bytes,514493927,opt,name=num_channels,json=numChannels,proto3" json:"num_channels,omitempty"`
}

func (x *Components_Component_Port_BreakoutMode_State) Reset() {
	*x = Components_Component_Port_BreakoutMode_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Port_BreakoutMode_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Port_BreakoutMode_State) ProtoMessage() {}

func (x *Components_Component_Port_BreakoutMode_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Port_BreakoutMode_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Port_BreakoutMode_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 9, 0, 1}
}

func (x *Components_Component_Port_BreakoutMode_State) GetChannelSpeed() OpenconfigIfEthernetETHERNETSPEED {
	if x != nil {
		return x.ChannelSpeed
	}
	return OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_UNSET
}

func (x *Components_Component_Port_BreakoutMode_State) GetNumChannels() *ywrapper.UintValue {
	if x != nil {
		return x.NumChannels
	}
	return nil
}

type Components_Component_Port_OpticalPort_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminState OpenconfigTransportLineCommonAdminStateType `protobuf:"varint,297524025,opt,name=admin_state,json=adminState,proto3,enum=openconfig.OpenconfigTransportLineCommonAdminStateType" json:"admin_state,omitempty"`
}

func (x *Components_Component_Port_OpticalPort_Config) Reset() {
	*x = Components_Component_Port_OpticalPort_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Port_OpticalPort_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Port_OpticalPort_Config) ProtoMessage() {}

func (x *Components_Component_Port_OpticalPort_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Port_OpticalPort_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Port_OpticalPort_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 9, 2, 0}
}

func (x *Components_Component_Port_OpticalPort_Config) GetAdminState() OpenconfigTransportLineCommonAdminStateType {
	if x != nil {
		return x.AdminState
	}
	return OpenconfigTransportLineCommonAdminStateType_OPENCONFIGTRANSPORTLINECOMMONADMINSTATETYPE_UNSET
}

type Components_Component_Port_OpticalPort_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminState      OpenconfigTransportLineCommonAdminStateType              `protobuf:"varint,419470978,opt,name=admin_state,json=adminState,proto3,enum=openconfig.OpenconfigTransportLineCommonAdminStateType" json:"admin_state,omitempty"`
	InputPower      *Components_Component_Port_OpticalPort_State_InputPower  `protobuf:"bytes,144943911,opt,name=input_power,json=inputPower,proto3" json:"input_power,omitempty"`
	OpticalPortType OpenconfigTransportTypesOPTICALPORTTYPE                  `protobuf:"varint,315697086,opt,name=optical_port_type,json=opticalPortType,proto3,enum=openconfig.OpenconfigTransportTypesOPTICALPORTTYPE" json:"optical_port_type,omitempty"`
	OutputPower     *Components_Component_Port_OpticalPort_State_OutputPower `protobuf:"bytes,522723990,opt,name=output_power,json=outputPower,proto3" json:"output_power,omitempty"`
	Tilt            *ywrapper.Decimal64Value                                 `protobuf:"bytes,411180660,opt,name=tilt,proto3" json:"tilt,omitempty"`
}

func (x *Components_Component_Port_OpticalPort_State) Reset() {
	*x = Components_Component_Port_OpticalPort_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Port_OpticalPort_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Port_OpticalPort_State) ProtoMessage() {}

func (x *Components_Component_Port_OpticalPort_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Port_OpticalPort_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Port_OpticalPort_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 9, 2, 1}
}

func (x *Components_Component_Port_OpticalPort_State) GetAdminState() OpenconfigTransportLineCommonAdminStateType {
	if x != nil {
		return x.AdminState
	}
	return OpenconfigTransportLineCommonAdminStateType_OPENCONFIGTRANSPORTLINECOMMONADMINSTATETYPE_UNSET
}

func (x *Components_Component_Port_OpticalPort_State) GetInputPower() *Components_Component_Port_OpticalPort_State_InputPower {
	if x != nil {
		return x.InputPower
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort_State) GetOpticalPortType() OpenconfigTransportTypesOPTICALPORTTYPE {
	if x != nil {
		return x.OpticalPortType
	}
	return OpenconfigTransportTypesOPTICALPORTTYPE_OPENCONFIGTRANSPORTTYPESOPTICALPORTTYPE_UNSET
}

func (x *Components_Component_Port_OpticalPort_State) GetOutputPower() *Components_Component_Port_OpticalPort_State_OutputPower {
	if x != nil {
		return x.OutputPower
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort_State) GetTilt() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Tilt
	}
	return nil
}

type Components_Component_Port_OpticalPort_State_InputPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,91259910,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,451839237,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,530201145,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,240274272,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,178100930,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,106053358,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,315000908,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_Port_OpticalPort_State_InputPower) Reset() {
	*x = Components_Component_Port_OpticalPort_State_InputPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Port_OpticalPort_State_InputPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Port_OpticalPort_State_InputPower) ProtoMessage() {}

func (x *Components_Component_Port_OpticalPort_State_InputPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Port_OpticalPort_State_InputPower.ProtoReflect.Descriptor instead.
func (*Components_Component_Port_OpticalPort_State_InputPower) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 9, 2, 1, 0}
}

func (x *Components_Component_Port_OpticalPort_State_InputPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort_State_InputPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort_State_InputPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort_State_InputPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort_State_InputPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort_State_InputPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort_State_InputPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_Port_OpticalPort_State_OutputPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,102264283,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,55114468,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,16830050,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,220296037,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,165372501,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,86075115,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,116689751,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_Port_OpticalPort_State_OutputPower) Reset() {
	*x = Components_Component_Port_OpticalPort_State_OutputPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Port_OpticalPort_State_OutputPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Port_OpticalPort_State_OutputPower) ProtoMessage() {}

func (x *Components_Component_Port_OpticalPort_State_OutputPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Port_OpticalPort_State_OutputPower.ProtoReflect.Descriptor instead.
func (*Components_Component_Port_OpticalPort_State_OutputPower) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 9, 2, 1, 1}
}

func (x *Components_Component_Port_OpticalPort_State_OutputPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort_State_OutputPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort_State_OutputPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort_State_OutputPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort_State_OutputPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort_State_OutputPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_Port_OpticalPort_State_OutputPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_PowerSupply_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,276021544,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Components_Component_PowerSupply_Config) Reset() {
	*x = Components_Component_PowerSupply_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_PowerSupply_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_PowerSupply_Config) ProtoMessage() {}

func (x *Components_Component_PowerSupply_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_PowerSupply_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_PowerSupply_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 10, 0}
}

func (x *Components_Component_PowerSupply_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Components_Component_PowerSupply_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capacity      *ywrapper.BytesValue `protobuf:"bytes,212758134,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Enabled       *ywrapper.BoolValue  `protobuf:"bytes,221635705,opt,name=enabled,proto3" json:"enabled,omitempty"`
	InputCurrent  *ywrapper.BytesValue `protobuf:"bytes,259601702,opt,name=input_current,json=inputCurrent,proto3" json:"input_current,omitempty"`
	InputVoltage  *ywrapper.BytesValue `protobuf:"bytes,368014879,opt,name=input_voltage,json=inputVoltage,proto3" json:"input_voltage,omitempty"`
	OutputCurrent *ywrapper.BytesValue `protobuf:"bytes,456498973,opt,name=output_current,json=outputCurrent,proto3" json:"output_current,omitempty"`
	OutputPower   *ywrapper.BytesValue `protobuf:"bytes,255979333,opt,name=output_power,json=outputPower,proto3" json:"output_power,omitempty"`
	OutputVoltage *ywrapper.BytesValue `protobuf:"bytes,180631100,opt,name=output_voltage,json=outputVoltage,proto3" json:"output_voltage,omitempty"`
}

func (x *Components_Component_PowerSupply_State) Reset() {
	*x = Components_Component_PowerSupply_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_PowerSupply_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_PowerSupply_State) ProtoMessage() {}

func (x *Components_Component_PowerSupply_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_PowerSupply_State.ProtoReflect.Descriptor instead.
func (*Components_Component_PowerSupply_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 10, 1}
}

func (x *Components_Component_PowerSupply_State) GetCapacity() *ywrapper.BytesValue {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *Components_Component_PowerSupply_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Components_Component_PowerSupply_State) GetInputCurrent() *ywrapper.BytesValue {
	if x != nil {
		return x.InputCurrent
	}
	return nil
}

func (x *Components_Component_PowerSupply_State) GetInputVoltage() *ywrapper.BytesValue {
	if x != nil {
		return x.InputVoltage
	}
	return nil
}

func (x *Components_Component_PowerSupply_State) GetOutputCurrent() *ywrapper.BytesValue {
	if x != nil {
		return x.OutputCurrent
	}
	return nil
}

func (x *Components_Component_PowerSupply_State) GetOutputPower() *ywrapper.BytesValue {
	if x != nil {
		return x.OutputPower
	}
	return nil
}

func (x *Components_Component_PowerSupply_State) GetOutputVoltage() *ywrapper.BytesValue {
	if x != nil {
		return x.OutputVoltage
	}
	return nil
}

type Components_Component_Properties_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Components_Component_Properties_Property_Config `protobuf:"bytes,159293982,opt,name=config,proto3" json:"config,omitempty"`
	State  *Components_Component_Properties_Property_State  `protobuf:"bytes,19033227,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_Properties_Property) Reset() {
	*x = Components_Component_Properties_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Properties_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Properties_Property) ProtoMessage() {}

func (x *Components_Component_Properties_Property) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Properties_Property.ProtoReflect.Descriptor instead.
func (*Components_Component_Properties_Property) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 11, 0}
}

func (x *Components_Component_Properties_Property) GetConfig() *Components_Component_Properties_Property_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_Properties_Property) GetState() *Components_Component_Properties_Property_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_Properties_PropertyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Property *Components_Component_Properties_Property `protobuf:"bytes,2,opt,name=property,proto3" json:"property,omitempty"`
}

func (x *Components_Component_Properties_PropertyKey) Reset() {
	*x = Components_Component_Properties_PropertyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Properties_PropertyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Properties_PropertyKey) ProtoMessage() {}

func (x *Components_Component_Properties_PropertyKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Properties_PropertyKey.ProtoReflect.Descriptor instead.
func (*Components_Component_Properties_PropertyKey) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 11, 1}
}

func (x *Components_Component_Properties_PropertyKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Components_Component_Properties_PropertyKey) GetProperty() *Components_Component_Properties_Property {
	if x != nil {
		return x.Property
	}
	return nil
}

type Components_Component_Properties_Property_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,516657476,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//	*Components_Component_Properties_Property_Config_ValueBool
	//	*Components_Component_Properties_Property_Config_ValueSint64
	//	*Components_Component_Properties_Property_Config_ValueString
	//	*Components_Component_Properties_Property_Config_ValueUint64
	//	*Components_Component_Properties_Property_Config_ValueDecimal64Value
	Value isComponents_Component_Properties_Property_Config_Value `protobuf_oneof:"value"`
}

func (x *Components_Component_Properties_Property_Config) Reset() {
	*x = Components_Component_Properties_Property_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Properties_Property_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Properties_Property_Config) ProtoMessage() {}

func (x *Components_Component_Properties_Property_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Properties_Property_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Properties_Property_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 11, 0, 0}
}

func (x *Components_Component_Properties_Property_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (m *Components_Component_Properties_Property_Config) GetValue() isComponents_Component_Properties_Property_Config_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Components_Component_Properties_Property_Config) GetValueBool() bool {
	if x, ok := x.GetValue().(*Components_Component_Properties_Property_Config_ValueBool); ok {
		return x.ValueBool
	}
	return false
}

func (x *Components_Component_Properties_Property_Config) GetValueSint64() int64 {
	if x, ok := x.GetValue().(*Components_Component_Properties_Property_Config_ValueSint64); ok {
		return x.ValueSint64
	}
	return 0
}

func (x *Components_Component_Properties_Property_Config) GetValueString() string {
	if x, ok := x.GetValue().(*Components_Component_Properties_Property_Config_ValueString); ok {
		return x.ValueString
	}
	return ""
}

func (x *Components_Component_Properties_Property_Config) GetValueUint64() uint64 {
	if x, ok := x.GetValue().(*Components_Component_Properties_Property_Config_ValueUint64); ok {
		return x.ValueUint64
	}
	return 0
}

func (x *Components_Component_Properties_Property_Config) GetValueDecimal64Value() *ywrapper.Decimal64Value {
	if x, ok := x.GetValue().(*Components_Component_Properties_Property_Config_ValueDecimal64Value); ok {
		return x.ValueDecimal64Value
	}
	return nil
}

type isComponents_Component_Properties_Property_Config_Value interface {
	isComponents_Component_Properties_Property_Config_Value()
}

type Components_Component_Properties_Property_Config_ValueBool struct {
	ValueBool bool `protobuf:"varint,320942043,opt,name=value_bool,json=valueBool,proto3,oneof"`
}

type Components_Component_Properties_Property_Config_ValueSint64 struct {
	ValueSint64 int64 `protobuf:"zigzag64,532815527,opt,name=value_sint64,json=valueSint64,proto3,oneof"`
}

type Components_Component_Properties_Property_Config_ValueString struct {
	ValueString string `protobuf:"bytes,259657076,opt,name=value_string,json=valueString,proto3,oneof"`
}

type Components_Component_Properties_Property_Config_ValueUint64 struct {
	ValueUint64 uint64 `protobuf:"varint,1206141,opt,name=value_uint64,json=valueUint64,proto3,oneof"`
}

type Components_Component_Properties_Property_Config_ValueDecimal64Value struct {
	ValueDecimal64Value *ywrapper.Decimal64Value `protobuf:"bytes,342547513,opt,name=value_decimal64value,json=valueDecimal64value,proto3,oneof"`
}

func (*Components_Component_Properties_Property_Config_ValueBool) isComponents_Component_Properties_Property_Config_Value() {
}

func (*Components_Component_Properties_Property_Config_ValueSint64) isComponents_Component_Properties_Property_Config_Value() {
}

func (*Components_Component_Properties_Property_Config_ValueString) isComponents_Component_Properties_Property_Config_Value() {
}

func (*Components_Component_Properties_Property_Config_ValueUint64) isComponents_Component_Properties_Property_Config_Value() {
}

func (*Components_Component_Properties_Property_Config_ValueDecimal64Value) isComponents_Component_Properties_Property_Config_Value() {
}

type Components_Component_Properties_Property_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configurable *ywrapper.BoolValue   `protobuf:"bytes,264996693,opt,name=configurable,proto3" json:"configurable,omitempty"`
	Name         *ywrapper.StringValue `protobuf:"bytes,71072955,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//	*Components_Component_Properties_Property_State_ValueBool
	//	*Components_Component_Properties_Property_State_ValueSint64
	//	*Components_Component_Properties_Property_State_ValueString
	//	*Components_Component_Properties_Property_State_ValueUint64
	//	*Components_Component_Properties_Property_State_ValueDecimal64Value
	Value isComponents_Component_Properties_Property_State_Value `protobuf_oneof:"value"`
}

func (x *Components_Component_Properties_Property_State) Reset() {
	*x = Components_Component_Properties_Property_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Properties_Property_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Properties_Property_State) ProtoMessage() {}

func (x *Components_Component_Properties_Property_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Properties_Property_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Properties_Property_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 11, 0, 1}
}

func (x *Components_Component_Properties_Property_State) GetConfigurable() *ywrapper.BoolValue {
	if x != nil {
		return x.Configurable
	}
	return nil
}

func (x *Components_Component_Properties_Property_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (m *Components_Component_Properties_Property_State) GetValue() isComponents_Component_Properties_Property_State_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Components_Component_Properties_Property_State) GetValueBool() bool {
	if x, ok := x.GetValue().(*Components_Component_Properties_Property_State_ValueBool); ok {
		return x.ValueBool
	}
	return false
}

func (x *Components_Component_Properties_Property_State) GetValueSint64() int64 {
	if x, ok := x.GetValue().(*Components_Component_Properties_Property_State_ValueSint64); ok {
		return x.ValueSint64
	}
	return 0
}

func (x *Components_Component_Properties_Property_State) GetValueString() string {
	if x, ok := x.GetValue().(*Components_Component_Properties_Property_State_ValueString); ok {
		return x.ValueString
	}
	return ""
}

func (x *Components_Component_Properties_Property_State) GetValueUint64() uint64 {
	if x, ok := x.GetValue().(*Components_Component_Properties_Property_State_ValueUint64); ok {
		return x.ValueUint64
	}
	return 0
}

func (x *Components_Component_Properties_Property_State) GetValueDecimal64Value() *ywrapper.Decimal64Value {
	if x, ok := x.GetValue().(*Components_Component_Properties_Property_State_ValueDecimal64Value); ok {
		return x.ValueDecimal64Value
	}
	return nil
}

type isComponents_Component_Properties_Property_State_Value interface {
	isComponents_Component_Properties_Property_State_Value()
}

type Components_Component_Properties_Property_State_ValueBool struct {
	ValueBool bool `protobuf:"varint,14419492,opt,name=value_bool,json=valueBool,proto3,oneof"`
}

type Components_Component_Properties_Property_State_ValueSint64 struct {
	ValueSint64 int64 `protobuf:"zigzag64,524890380,opt,name=value_sint64,json=valueSint64,proto3,oneof"`
}

type Components_Component_Properties_Property_State_ValueString struct {
	ValueString string `protobuf:"bytes,189491959,opt,name=value_string,json=valueString,proto3,oneof"`
}

type Components_Component_Properties_Property_State_ValueUint64 struct {
	ValueUint64 uint64 `protobuf:"varint,534672330,opt,name=value_uint64,json=valueUint64,proto3,oneof"`
}

type Components_Component_Properties_Property_State_ValueDecimal64Value struct {
	ValueDecimal64Value *ywrapper.Decimal64Value `protobuf:"bytes,190240218,opt,name=value_decimal64value,json=valueDecimal64value,proto3,oneof"`
}

func (*Components_Component_Properties_Property_State_ValueBool) isComponents_Component_Properties_Property_State_Value() {
}

func (*Components_Component_Properties_Property_State_ValueSint64) isComponents_Component_Properties_Property_State_Value() {
}

func (*Components_Component_Properties_Property_State_ValueString) isComponents_Component_Properties_Property_State_Value() {
}

func (*Components_Component_Properties_Property_State_ValueUint64) isComponents_Component_Properties_Property_State_Value() {
}

func (*Components_Component_Properties_Property_State_ValueDecimal64Value) isComponents_Component_Properties_Property_State_Value() {
}

type Components_Component_State_Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available *ywrapper.UintValue `protobuf:"bytes,322322459,opt,name=available,proto3" json:"available,omitempty"`
	Utilized  *ywrapper.UintValue `protobuf:"bytes,235118644,opt,name=utilized,proto3" json:"utilized,omitempty"`
}

func (x *Components_Component_State_Memory) Reset() {
	*x = Components_Component_State_Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_State_Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_State_Memory) ProtoMessage() {}

func (x *Components_Component_State_Memory) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_State_Memory.ProtoReflect.Descriptor instead.
func (*Components_Component_State_Memory) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 12, 0}
}

func (x *Components_Component_State_Memory) GetAvailable() *ywrapper.UintValue {
	if x != nil {
		return x.Available
	}
	return nil
}

func (x *Components_Component_State_Memory) GetUtilized() *ywrapper.UintValue {
	if x != nil {
		return x.Utilized
	}
	return nil
}

type Components_Component_State_Temperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmSeverity  OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY `protobuf:"varint,296397186,opt,name=alarm_severity,json=alarmSeverity,proto3,enum=openconfig.OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY" json:"alarm_severity,omitempty"`
	AlarmStatus    *ywrapper.BoolValue                         `protobuf:"bytes,176894761,opt,name=alarm_status,json=alarmStatus,proto3" json:"alarm_status,omitempty"`
	AlarmThreshold *ywrapper.UintValue                         `protobuf:"bytes,231489284,opt,name=alarm_threshold,json=alarmThreshold,proto3" json:"alarm_threshold,omitempty"`
	Avg            *ywrapper.Decimal64Value                    `protobuf:"bytes,100651349,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant        *ywrapper.Decimal64Value                    `protobuf:"bytes,206000082,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval       *ywrapper.UintValue                         `protobuf:"bytes,407404980,opt,name=interval,proto3" json:"interval,omitempty"`
	Max            *ywrapper.Decimal64Value                    `protobuf:"bytes,421397591,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime        *ywrapper.UintValue                         `protobuf:"bytes,415076571,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min            *ywrapper.Decimal64Value                    `protobuf:"bytes,18747561,opt,name=min,proto3" json:"min,omitempty"`
	MinTime        *ywrapper.UintValue                         `protobuf:"bytes,177135617,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_State_Temperature) Reset() {
	*x = Components_Component_State_Temperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_State_Temperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_State_Temperature) ProtoMessage() {}

func (x *Components_Component_State_Temperature) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_State_Temperature.ProtoReflect.Descriptor instead.
func (*Components_Component_State_Temperature) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 12, 1}
}

func (x *Components_Component_State_Temperature) GetAlarmSeverity() OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY {
	if x != nil {
		return x.AlarmSeverity
	}
	return OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNSET
}

func (x *Components_Component_State_Temperature) GetAlarmStatus() *ywrapper.BoolValue {
	if x != nil {
		return x.AlarmStatus
	}
	return nil
}

func (x *Components_Component_State_Temperature) GetAlarmThreshold() *ywrapper.UintValue {
	if x != nil {
		return x.AlarmThreshold
	}
	return nil
}

func (x *Components_Component_State_Temperature) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_State_Temperature) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_State_Temperature) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_State_Temperature) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_State_Temperature) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_State_Temperature) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_State_Temperature) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_Storage_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_Storage_Config) Reset() {
	*x = Components_Component_Storage_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Storage_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Storage_Config) ProtoMessage() {}

func (x *Components_Component_Storage_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Storage_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Storage_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 13, 0}
}

type Components_Component_Storage_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Components_Component_Storage_State) Reset() {
	*x = Components_Component_Storage_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Storage_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Storage_State) ProtoMessage() {}

func (x *Components_Component_Storage_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Storage_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Storage_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 13, 1}
}

type Components_Component_Subcomponents_Subcomponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Components_Component_Subcomponents_Subcomponent_Config `protobuf:"bytes,126822239,opt,name=config,proto3" json:"config,omitempty"`
	State  *Components_Component_Subcomponents_Subcomponent_State  `protobuf:"bytes,293778704,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_Subcomponents_Subcomponent) Reset() {
	*x = Components_Component_Subcomponents_Subcomponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Subcomponents_Subcomponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Subcomponents_Subcomponent) ProtoMessage() {}

func (x *Components_Component_Subcomponents_Subcomponent) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Subcomponents_Subcomponent.ProtoReflect.Descriptor instead.
func (*Components_Component_Subcomponents_Subcomponent) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 14, 0}
}

func (x *Components_Component_Subcomponents_Subcomponent) GetConfig() *Components_Component_Subcomponents_Subcomponent_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_Subcomponents_Subcomponent) GetState() *Components_Component_Subcomponents_Subcomponent_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_Subcomponents_SubcomponentKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Subcomponent *Components_Component_Subcomponents_Subcomponent `protobuf:"bytes,2,opt,name=subcomponent,proto3" json:"subcomponent,omitempty"`
}

func (x *Components_Component_Subcomponents_SubcomponentKey) Reset() {
	*x = Components_Component_Subcomponents_SubcomponentKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Subcomponents_SubcomponentKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Subcomponents_SubcomponentKey) ProtoMessage() {}

func (x *Components_Component_Subcomponents_SubcomponentKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Subcomponents_SubcomponentKey.ProtoReflect.Descriptor instead.
func (*Components_Component_Subcomponents_SubcomponentKey) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 14, 1}
}

func (x *Components_Component_Subcomponents_SubcomponentKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Components_Component_Subcomponents_SubcomponentKey) GetSubcomponent() *Components_Component_Subcomponents_Subcomponent {
	if x != nil {
		return x.Subcomponent
	}
	return nil
}

type Components_Component_Subcomponents_Subcomponent_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,137591847,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Components_Component_Subcomponents_Subcomponent_Config) Reset() {
	*x = Components_Component_Subcomponents_Subcomponent_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Subcomponents_Subcomponent_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Subcomponents_Subcomponent_Config) ProtoMessage() {}

func (x *Components_Component_Subcomponents_Subcomponent_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Subcomponents_Subcomponent_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Subcomponents_Subcomponent_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 14, 0, 0}
}

func (x *Components_Component_Subcomponents_Subcomponent_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Components_Component_Subcomponents_Subcomponent_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,123244986,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Components_Component_Subcomponents_Subcomponent_State) Reset() {
	*x = Components_Component_Subcomponents_Subcomponent_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Subcomponents_Subcomponent_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Subcomponents_Subcomponent_State) ProtoMessage() {}

func (x *Components_Component_Subcomponents_Subcomponent_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Subcomponents_Subcomponent_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Subcomponents_Subcomponent_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 14, 0, 1}
}

func (x *Components_Component_Subcomponents_Subcomponent_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Components_Component_Transceiver_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled            *ywrapper.BoolValue                               `protobuf:"bytes,202927581,opt,name=enabled,proto3" json:"enabled,omitempty"`
	EthernetPmdPreconf OpenconfigTransportTypesETHERNETPMDTYPE           `protobuf:"varint,338246677,opt,name=ethernet_pmd_preconf,json=ethernetPmdPreconf,proto3,enum=openconfig.OpenconfigTransportTypesETHERNETPMDTYPE" json:"ethernet_pmd_preconf,omitempty"`
	FecMode            OpenconfigPlatformTypesFECMODETYPE                `protobuf:"varint,277265248,opt,name=fec_mode,json=fecMode,proto3,enum=openconfig.OpenconfigPlatformTypesFECMODETYPE" json:"fec_mode,omitempty"`
	FormFactorPreconf  OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE `protobuf:"varint,471604670,opt,name=form_factor_preconf,json=formFactorPreconf,proto3,enum=openconfig.OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE" json:"form_factor_preconf,omitempty"`
}

func (x *Components_Component_Transceiver_Config) Reset() {
	*x = Components_Component_Transceiver_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_Config) ProtoMessage() {}

func (x *Components_Component_Transceiver_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 0}
}

func (x *Components_Component_Transceiver_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Components_Component_Transceiver_Config) GetEthernetPmdPreconf() OpenconfigTransportTypesETHERNETPMDTYPE {
	if x != nil {
		return x.EthernetPmdPreconf
	}
	return OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_UNSET
}

func (x *Components_Component_Transceiver_Config) GetFecMode() OpenconfigPlatformTypesFECMODETYPE {
	if x != nil {
		return x.FecMode
	}
	return OpenconfigPlatformTypesFECMODETYPE_OPENCONFIGPLATFORMTYPESFECMODETYPE_UNSET
}

func (x *Components_Component_Transceiver_Config) GetFormFactorPreconf() OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE {
	if x != nil {
		return x.FormFactorPreconf
	}
	return OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_UNSET
}

type Components_Component_Transceiver_PhysicalChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel []*Components_Component_Transceiver_PhysicalChannels_ChannelKey `protobuf:"bytes,359124959,rep,name=channel,proto3" json:"channel,omitempty"`
}

func (x *Components_Component_Transceiver_PhysicalChannels) Reset() {
	*x = Components_Component_Transceiver_PhysicalChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_PhysicalChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_PhysicalChannels) ProtoMessage() {}

func (x *Components_Component_Transceiver_PhysicalChannels) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_PhysicalChannels.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_PhysicalChannels) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 1}
}

func (x *Components_Component_Transceiver_PhysicalChannels) GetChannel() []*Components_Component_Transceiver_PhysicalChannels_ChannelKey {
	if x != nil {
		return x.Channel
	}
	return nil
}

type Components_Component_Transceiver_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorType          OpenconfigTransportTypesFIBERCONNECTORTYPE               `protobuf:"varint,252758609,opt,name=connector_type,json=connectorType,proto3,enum=openconfig.OpenconfigTransportTypesFIBERCONNECTORTYPE" json:"connector_type,omitempty"`
	DateCode               *ywrapper.StringValue                                    `protobuf:"bytes,323636967,opt,name=date_code,json=dateCode,proto3" json:"date_code,omitempty"`
	Enabled                *ywrapper.BoolValue                                      `protobuf:"bytes,252306382,opt,name=enabled,proto3" json:"enabled,omitempty"`
	EthernetPmd            OpenconfigTransportTypesETHERNETPMDTYPE                  `protobuf:"varint,416980802,opt,name=ethernet_pmd,json=ethernetPmd,proto3,enum=openconfig.OpenconfigTransportTypesETHERNETPMDTYPE" json:"ethernet_pmd,omitempty"`
	EthernetPmdPreconf     OpenconfigTransportTypesETHERNETPMDTYPE                  `protobuf:"varint,424376104,opt,name=ethernet_pmd_preconf,json=ethernetPmdPreconf,proto3,enum=openconfig.OpenconfigTransportTypesETHERNETPMDTYPE" json:"ethernet_pmd_preconf,omitempty"`
	FaultCondition         *ywrapper.BoolValue                                      `protobuf:"bytes,66972341,opt,name=fault_condition,json=faultCondition,proto3" json:"fault_condition,omitempty"`
	FecCorrectedBits       *ywrapper.UintValue                                      `protobuf:"bytes,272535390,opt,name=fec_corrected_bits,json=fecCorrectedBits,proto3" json:"fec_corrected_bits,omitempty"`
	FecCorrectedBytes      *ywrapper.UintValue                                      `protobuf:"bytes,133775387,opt,name=fec_corrected_bytes,json=fecCorrectedBytes,proto3" json:"fec_corrected_bytes,omitempty"`
	FecMode                OpenconfigPlatformTypesFECMODETYPE                       `protobuf:"varint,497693125,opt,name=fec_mode,json=fecMode,proto3,enum=openconfig.OpenconfigPlatformTypesFECMODETYPE" json:"fec_mode,omitempty"`
	FecStatus              OpenconfigPlatformTypesFECSTATUSTYPE                     `protobuf:"varint,41358082,opt,name=fec_status,json=fecStatus,proto3,enum=openconfig.OpenconfigPlatformTypesFECSTATUSTYPE" json:"fec_status,omitempty"`
	FecUncorrectableBlocks *ywrapper.UintValue                                      `protobuf:"bytes,497424056,opt,name=fec_uncorrectable_blocks,json=fecUncorrectableBlocks,proto3" json:"fec_uncorrectable_blocks,omitempty"`
	FecUncorrectableWords  *ywrapper.UintValue                                      `protobuf:"bytes,133578617,opt,name=fec_uncorrectable_words,json=fecUncorrectableWords,proto3" json:"fec_uncorrectable_words,omitempty"`
	FormFactor             OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE        `protobuf:"varint,11627927,opt,name=form_factor,json=formFactor,proto3,enum=openconfig.OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE" json:"form_factor,omitempty"`
	FormFactorPreconf      OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE        `protobuf:"varint,518555017,opt,name=form_factor_preconf,json=formFactorPreconf,proto3,enum=openconfig.OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE" json:"form_factor_preconf,omitempty"`
	InputPower             *Components_Component_Transceiver_State_InputPower       `protobuf:"bytes,41561605,opt,name=input_power,json=inputPower,proto3" json:"input_power,omitempty"`
	LaserBiasCurrent       *Components_Component_Transceiver_State_LaserBiasCurrent `protobuf:"bytes,422928146,opt,name=laser_bias_current,json=laserBiasCurrent,proto3" json:"laser_bias_current,omitempty"`
	OtnComplianceCode      OpenconfigTransportTypesOTNAPPLICATIONCODE               `protobuf:"varint,302597810,opt,name=otn_compliance_code,json=otnComplianceCode,proto3,enum=openconfig.OpenconfigTransportTypesOTNAPPLICATIONCODE" json:"otn_compliance_code,omitempty"`
	OutputPower            *Components_Component_Transceiver_State_OutputPower      `protobuf:"bytes,242740240,opt,name=output_power,json=outputPower,proto3" json:"output_power,omitempty"`
	PostFecBer             *Components_Component_Transceiver_State_PostFecBer       `protobuf:"bytes,125122572,opt,name=post_fec_ber,json=postFecBer,proto3" json:"post_fec_ber,omitempty"`
	PreFecBer              *Components_Component_Transceiver_State_PreFecBer        `protobuf:"bytes,264885771,opt,name=pre_fec_ber,json=preFecBer,proto3" json:"pre_fec_ber,omitempty"`
	Present                Components_Component_Transceiver_State_Present           `protobuf:"varint,171782640,opt,name=present,proto3,enum=openconfig.Components_Component_Transceiver_State_Present" json:"present,omitempty"`
	SerialNo               *ywrapper.StringValue                                    `protobuf:"bytes,48331837,opt,name=serial_no,json=serialNo,proto3" json:"serial_no,omitempty"`
	SonetSdhComplianceCode OpenconfigTransportTypesSONETAPPLICATIONCODE             `protobuf:"varint,354799300,opt,name=sonet_sdh_compliance_code,json=sonetSdhComplianceCode,proto3,enum=openconfig.OpenconfigTransportTypesSONETAPPLICATIONCODE" json:"sonet_sdh_compliance_code,omitempty"`
	Vendor                 *ywrapper.StringValue                                    `protobuf:"bytes,186283901,opt,name=vendor,proto3" json:"vendor,omitempty"`
	VendorPart             *ywrapper.StringValue                                    `protobuf:"bytes,246872941,opt,name=vendor_part,json=vendorPart,proto3" json:"vendor_part,omitempty"`
	VendorRev              *ywrapper.StringValue                                    `protobuf:"bytes,62133637,opt,name=vendor_rev,json=vendorRev,proto3" json:"vendor_rev,omitempty"`
}

func (x *Components_Component_Transceiver_State) Reset() {
	*x = Components_Component_Transceiver_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_State) ProtoMessage() {}

func (x *Components_Component_Transceiver_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 2}
}

func (x *Components_Component_Transceiver_State) GetConnectorType() OpenconfigTransportTypesFIBERCONNECTORTYPE {
	if x != nil {
		return x.ConnectorType
	}
	return OpenconfigTransportTypesFIBERCONNECTORTYPE_OPENCONFIGTRANSPORTTYPESFIBERCONNECTORTYPE_UNSET
}

func (x *Components_Component_Transceiver_State) GetDateCode() *ywrapper.StringValue {
	if x != nil {
		return x.DateCode
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetEthernetPmd() OpenconfigTransportTypesETHERNETPMDTYPE {
	if x != nil {
		return x.EthernetPmd
	}
	return OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_UNSET
}

func (x *Components_Component_Transceiver_State) GetEthernetPmdPreconf() OpenconfigTransportTypesETHERNETPMDTYPE {
	if x != nil {
		return x.EthernetPmdPreconf
	}
	return OpenconfigTransportTypesETHERNETPMDTYPE_OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_UNSET
}

func (x *Components_Component_Transceiver_State) GetFaultCondition() *ywrapper.BoolValue {
	if x != nil {
		return x.FaultCondition
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetFecCorrectedBits() *ywrapper.UintValue {
	if x != nil {
		return x.FecCorrectedBits
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetFecCorrectedBytes() *ywrapper.UintValue {
	if x != nil {
		return x.FecCorrectedBytes
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetFecMode() OpenconfigPlatformTypesFECMODETYPE {
	if x != nil {
		return x.FecMode
	}
	return OpenconfigPlatformTypesFECMODETYPE_OPENCONFIGPLATFORMTYPESFECMODETYPE_UNSET
}

func (x *Components_Component_Transceiver_State) GetFecStatus() OpenconfigPlatformTypesFECSTATUSTYPE {
	if x != nil {
		return x.FecStatus
	}
	return OpenconfigPlatformTypesFECSTATUSTYPE_OPENCONFIGPLATFORMTYPESFECSTATUSTYPE_UNSET
}

func (x *Components_Component_Transceiver_State) GetFecUncorrectableBlocks() *ywrapper.UintValue {
	if x != nil {
		return x.FecUncorrectableBlocks
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetFecUncorrectableWords() *ywrapper.UintValue {
	if x != nil {
		return x.FecUncorrectableWords
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetFormFactor() OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE {
	if x != nil {
		return x.FormFactor
	}
	return OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_UNSET
}

func (x *Components_Component_Transceiver_State) GetFormFactorPreconf() OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE {
	if x != nil {
		return x.FormFactorPreconf
	}
	return OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_OPENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_UNSET
}

func (x *Components_Component_Transceiver_State) GetInputPower() *Components_Component_Transceiver_State_InputPower {
	if x != nil {
		return x.InputPower
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetLaserBiasCurrent() *Components_Component_Transceiver_State_LaserBiasCurrent {
	if x != nil {
		return x.LaserBiasCurrent
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetOtnComplianceCode() OpenconfigTransportTypesOTNAPPLICATIONCODE {
	if x != nil {
		return x.OtnComplianceCode
	}
	return OpenconfigTransportTypesOTNAPPLICATIONCODE_OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONCODE_UNSET
}

func (x *Components_Component_Transceiver_State) GetOutputPower() *Components_Component_Transceiver_State_OutputPower {
	if x != nil {
		return x.OutputPower
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetPostFecBer() *Components_Component_Transceiver_State_PostFecBer {
	if x != nil {
		return x.PostFecBer
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetPreFecBer() *Components_Component_Transceiver_State_PreFecBer {
	if x != nil {
		return x.PreFecBer
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetPresent() Components_Component_Transceiver_State_Present {
	if x != nil {
		return x.Present
	}
	return Components_Component_Transceiver_State_PRESENT_UNSET
}

func (x *Components_Component_Transceiver_State) GetSerialNo() *ywrapper.StringValue {
	if x != nil {
		return x.SerialNo
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetSonetSdhComplianceCode() OpenconfigTransportTypesSONETAPPLICATIONCODE {
	if x != nil {
		return x.SonetSdhComplianceCode
	}
	return OpenconfigTransportTypesSONETAPPLICATIONCODE_OPENCONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_UNSET
}

func (x *Components_Component_Transceiver_State) GetVendor() *ywrapper.StringValue {
	if x != nil {
		return x.Vendor
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetVendorPart() *ywrapper.StringValue {
	if x != nil {
		return x.VendorPart
	}
	return nil
}

func (x *Components_Component_Transceiver_State) GetVendorRev() *ywrapper.StringValue {
	if x != nil {
		return x.VendorRev
	}
	return nil
}

type Components_Component_Transceiver_PhysicalChannels_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Components_Component_Transceiver_PhysicalChannels_Channel_Config `protobuf:"bytes,101023264,opt,name=config,proto3" json:"config,omitempty"`
	State  *Components_Component_Transceiver_PhysicalChannels_Channel_State  `protobuf:"bytes,282142105,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel) Reset() {
	*x = Components_Component_Transceiver_PhysicalChannels_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_PhysicalChannels_Channel) ProtoMessage() {}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_PhysicalChannels_Channel.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_PhysicalChannels_Channel) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 1, 0}
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel) GetConfig() *Components_Component_Transceiver_PhysicalChannels_Channel_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel) GetState() *Components_Component_Transceiver_PhysicalChannels_Channel_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Components_Component_Transceiver_PhysicalChannels_ChannelKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   uint64                                                     `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Channel *Components_Component_Transceiver_PhysicalChannels_Channel `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *Components_Component_Transceiver_PhysicalChannels_ChannelKey) Reset() {
	*x = Components_Component_Transceiver_PhysicalChannels_ChannelKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_PhysicalChannels_ChannelKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_PhysicalChannels_ChannelKey) ProtoMessage() {}

func (x *Components_Component_Transceiver_PhysicalChannels_ChannelKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_PhysicalChannels_ChannelKey.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_PhysicalChannels_ChannelKey) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 1, 1}
}

func (x *Components_Component_Transceiver_PhysicalChannels_ChannelKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Components_Component_Transceiver_PhysicalChannels_ChannelKey) GetChannel() *Components_Component_Transceiver_PhysicalChannels_Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type Components_Component_Transceiver_PhysicalChannels_Channel_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description       *ywrapper.StringValue    `protobuf:"bytes,314562795,opt,name=description,proto3" json:"description,omitempty"`
	Index             *ywrapper.UintValue      `protobuf:"bytes,333658993,opt,name=index,proto3" json:"index,omitempty"`
	TargetOutputPower *ywrapper.Decimal64Value `protobuf:"bytes,128341554,opt,name=target_output_power,json=targetOutputPower,proto3" json:"target_output_power,omitempty"`
	TxLaser           *ywrapper.BoolValue      `protobuf:"bytes,133868429,opt,name=tx_laser,json=txLaser,proto3" json:"tx_laser,omitempty"`
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_Config) Reset() {
	*x = Components_Component_Transceiver_PhysicalChannels_Channel_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_PhysicalChannels_Channel_Config) ProtoMessage() {}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_PhysicalChannels_Channel_Config.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_PhysicalChannels_Channel_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 1, 0, 0}
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_Config) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_Config) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_Config) GetTargetOutputPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetOutputPower
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_Config) GetTxLaser() *ywrapper.BoolValue {
	if x != nil {
		return x.TxLaser
	}
	return nil
}

type Components_Component_Transceiver_PhysicalChannels_Channel_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description       *ywrapper.StringValue                                                             `protobuf:"bytes,29929938,opt,name=description,proto3" json:"description,omitempty"`
	Index             *ywrapper.UintValue                                                               `protobuf:"bytes,53274280,opt,name=index,proto3" json:"index,omitempty"`
	InputPower        *Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower       `protobuf:"bytes,303986504,opt,name=input_power,json=inputPower,proto3" json:"input_power,omitempty"`
	LaserBiasCurrent  *Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent `protobuf:"bytes,482909465,opt,name=laser_bias_current,json=laserBiasCurrent,proto3" json:"laser_bias_current,omitempty"`
	OutputFrequency   *ywrapper.UintValue                                                               `protobuf:"bytes,226348966,opt,name=output_frequency,json=outputFrequency,proto3" json:"output_frequency,omitempty"`
	OutputPower       *Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower      `protobuf:"bytes,436080879,opt,name=output_power,json=outputPower,proto3" json:"output_power,omitempty"`
	TargetOutputPower *ywrapper.Decimal64Value                                                          `protobuf:"bytes,401597083,opt,name=target_output_power,json=targetOutputPower,proto3" json:"target_output_power,omitempty"`
	TxLaser           *ywrapper.BoolValue                                                               `protobuf:"bytes,415933878,opt,name=tx_laser,json=txLaser,proto3" json:"tx_laser,omitempty"`
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State) Reset() {
	*x = Components_Component_Transceiver_PhysicalChannels_Channel_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_PhysicalChannels_Channel_State) ProtoMessage() {}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_PhysicalChannels_Channel_State.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_PhysicalChannels_Channel_State) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 1, 0, 1}
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State) GetInputPower() *Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower {
	if x != nil {
		return x.InputPower
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State) GetLaserBiasCurrent() *Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent {
	if x != nil {
		return x.LaserBiasCurrent
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State) GetOutputFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.OutputFrequency
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State) GetOutputPower() *Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower {
	if x != nil {
		return x.OutputPower
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State) GetTargetOutputPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetOutputPower
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State) GetTxLaser() *ywrapper.BoolValue {
	if x != nil {
		return x.TxLaser
	}
	return nil
}

type Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,425608185,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,59663094,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,54371640,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,73969555,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,306475071,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,476619581,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,250548621,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) Reset() {
	*x = Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) ProtoMessage() {}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 1, 0, 1, 0}
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,230643524,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,325376671,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,384153695,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,446768222,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,277917244,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,44118224,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,201511538,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) Reset() {
	*x = Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) ProtoMessage() {
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 1, 0, 1, 1}
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,470907710,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,110986605,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,332288817,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,85611000,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,354684250,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,219831926,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,114700532,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) Reset() {
	*x = Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) ProtoMessage() {}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 1, 0, 1, 2}
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_Transceiver_State_InputPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,424783144,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,29798419,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,192286739,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,242200938,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,207250528,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,376421828,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,300437550,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_Transceiver_State_InputPower) Reset() {
	*x = Components_Component_Transceiver_State_InputPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_State_InputPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_State_InputPower) ProtoMessage() {}

func (x *Components_Component_Transceiver_State_InputPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_State_InputPower.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_State_InputPower) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 2, 0}
}

func (x *Components_Component_Transceiver_State_InputPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_Transceiver_State_InputPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_Transceiver_State_InputPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_Transceiver_State_InputPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_Transceiver_State_InputPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_Transceiver_State_InputPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_Transceiver_State_InputPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_Transceiver_State_LaserBiasCurrent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,44193839,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,400153624,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,482176166,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,26814849,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,397616537,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,161036031,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,106286659,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_Transceiver_State_LaserBiasCurrent) Reset() {
	*x = Components_Component_Transceiver_State_LaserBiasCurrent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_State_LaserBiasCurrent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_State_LaserBiasCurrent) ProtoMessage() {}

func (x *Components_Component_Transceiver_State_LaserBiasCurrent) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_State_LaserBiasCurrent.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_State_LaserBiasCurrent) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 2, 1}
}

func (x *Components_Component_Transceiver_State_LaserBiasCurrent) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_Transceiver_State_LaserBiasCurrent) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_Transceiver_State_LaserBiasCurrent) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_Transceiver_State_LaserBiasCurrent) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_Transceiver_State_LaserBiasCurrent) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_Transceiver_State_LaserBiasCurrent) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_Transceiver_State_LaserBiasCurrent) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_Transceiver_State_OutputPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,103469393,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,45091486,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,140247632,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,286038891,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,372050135,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,420259781,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,351300789,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_Transceiver_State_OutputPower) Reset() {
	*x = Components_Component_Transceiver_State_OutputPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_State_OutputPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_State_OutputPower) ProtoMessage() {}

func (x *Components_Component_Transceiver_State_OutputPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_State_OutputPower.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_State_OutputPower) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 2, 2}
}

func (x *Components_Component_Transceiver_State_OutputPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_Transceiver_State_OutputPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_Transceiver_State_OutputPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_Transceiver_State_OutputPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_Transceiver_State_OutputPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_Transceiver_State_OutputPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_Transceiver_State_OutputPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_Transceiver_State_PostFecBer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,101143861,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,488914354,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,358186772,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,421890103,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,200255931,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,19240073,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,128020833,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_Transceiver_State_PostFecBer) Reset() {
	*x = Components_Component_Transceiver_State_PostFecBer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_State_PostFecBer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_State_PostFecBer) ProtoMessage() {}

func (x *Components_Component_Transceiver_State_PostFecBer) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_State_PostFecBer.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_State_PostFecBer) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 2, 3}
}

func (x *Components_Component_Transceiver_State_PostFecBer) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_Transceiver_State_PostFecBer) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_Transceiver_State_PostFecBer) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_Transceiver_State_PostFecBer) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_Transceiver_State_PostFecBer) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_Transceiver_State_PostFecBer) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_Transceiver_State_PostFecBer) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Components_Component_Transceiver_State_PreFecBer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,473442514,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,345533569,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,3876757,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,221202788,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,128523470,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,355423706,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,453726032,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Components_Component_Transceiver_State_PreFecBer) Reset() {
	*x = Components_Component_Transceiver_State_PreFecBer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components_Component_Transceiver_State_PreFecBer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components_Component_Transceiver_State_PreFecBer) ProtoMessage() {}

func (x *Components_Component_Transceiver_State_PreFecBer) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components_Component_Transceiver_State_PreFecBer.ProtoReflect.Descriptor instead.
func (*Components_Component_Transceiver_State_PreFecBer) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_proto_rawDescGZIP(), []int{0, 0, 15, 2, 4}
}

func (x *Components_Component_Transceiver_State_PreFecBer) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Components_Component_Transceiver_State_PreFecBer) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Components_Component_Transceiver_State_PreFecBer) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Components_Component_Transceiver_State_PreFecBer) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Components_Component_Transceiver_State_PreFecBer) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Components_Component_Transceiver_State_PreFecBer) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Components_Component_Transceiver_State_PreFecBer) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

var File_openconfig_platform_proto protoreflect.FileDescriptor

var file_openconfig_platform_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0xc7, 0x02, 0x0a,
	0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x95, 0x92, 0xc3, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x18, 0x82, 0x41, 0x15, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xcd, 0xc5, 0x02, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x09, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x91, 0xe3, 0x9e, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x42, 0x22, 0x82, 0x41,
	0x1f, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x67, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x18, 0xb4, 0xf9, 0xa3, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x12, 0x64, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xba,
	0xce, 0xc9, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x03, 0x63, 0x70,
	0x75, 0x18, 0x9e, 0x9c, 0x84, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x70, 0x75,
	0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x70, 0x75, 0x52, 0x03,
	0x63, 0x70, 0x75, 0x12, 0x63, 0x0a, 0x06, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x18, 0xb3, 0xfb,
	0x94, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x42,
	0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x52, 0x06, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x12, 0x57, 0x0a, 0x03, 0x66, 0x61, 0x6e, 0x18,
	0x87, 0x9d, 0x9f, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x61, 0x6e, 0x42, 0x1c,
	0x82, 0x41, 0x19, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x61, 0x6e, 0x52, 0x03, 0x66, 0x61,
	0x6e, 0x12, 0x91, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x18, 0xa9, 0xb1, 0xa4, 0x5d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x6b, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x18, 0xf0, 0x9f, 0x81, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x8e, 0x82, 0x85, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0e, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x5c, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x99, 0xa6, 0xb9, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x7a, 0x0a, 0x0c, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x85, 0x85, 0x93, 0xd1, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x73, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x87, 0x8c, 0xa3, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xd7, 0xb8, 0xb1, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0xdb, 0xde, 0xce, 0xc0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x20, 0x82, 0x41, 0x1d,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xd2, 0xce, 0xdc, 0xb2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x75, 0x62,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x77, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0xca, 0xaf, 0xba, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x42,
	0x24, 0x82, 0x41, 0x21, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x1a, 0x8c, 0x02, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x12, 0x77, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb6, 0xc4, 0xdd, 0x35, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x73, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xe3, 0xa2, 0xc5, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x28, 0x82,
	0x41, 0x25, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x08,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x83, 0x02, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x12, 0x74, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb9, 0xa3, 0xcd, 0xe1, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x6f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8e, 0xb0, 0x9b,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x07,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x5c, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x52, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa8, 0xd6, 0xb3, 0x38, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xd8, 0x09, 0x0a, 0x03, 0x43, 0x70, 0x75, 0x12, 0x6b, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xef, 0x8f, 0xf7, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x23, 0x82,
	0x41, 0x20, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x68, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xe0, 0xa6, 0xa0, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0b, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9b, 0xf9, 0xd9, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x70, 0x75, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe3, 0x06, 0x0a, 0x0b, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xc5, 0xdb, 0x82, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x70, 0x75, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x70, 0x75, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd2, 0x05, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xe8, 0xa8, 0xb3,
	0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03,
	0x61, 0x76, 0x67, 0x12, 0x69, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xd3,
	0xe6, 0xe2, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82,
	0x41, 0x33, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x6b,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xd3, 0xcc, 0x8b, 0x75, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x5c, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0xaa, 0xaf, 0xab, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x6a, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xa0, 0xbe, 0xa2, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x84, 0xc8, 0xab,
	0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x6b, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0xee, 0xb5, 0xb7, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37,
	0x82, 0x41, 0x34, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d,
	0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0xfd, 0x01, 0x0a, 0x06, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x12, 0x71, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd4, 0x9d, 0xb0, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x26,
	0x82, 0x41, 0x23, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6d,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xed, 0x9e, 0xfb, 0x42, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x25, 0x82, 0x41, 0x22, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xc7, 0x02, 0x0a, 0x03, 0x46, 0x61, 0x6e, 0x12, 0x6c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x98, 0x85, 0xf0, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x46,
	0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x66, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xb1, 0xf8, 0xbe, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x61, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x66,
	0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x5f, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x56, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x95, 0xe4, 0xf4, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x66, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x1a, 0xb9, 0x02, 0x0a, 0x11, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x12, 0x88, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9e, 0xab, 0xec, 0x31,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x32, 0x82, 0x41, 0x2f, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8b, 0xb6, 0xa9, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x07, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xbc, 0x05, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x65, 0x63,
	0x61, 0x72, 0x64, 0x12, 0x76, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x85, 0xe4,
	0xf2, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xfa, 0xab, 0x99, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x4c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x27,
	0x82, 0x41, 0x24, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xaf,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa4, 0x01, 0x0a, 0x11, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xa5, 0x87, 0xe3, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x69,
	0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x92, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x11, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xe2, 0x84, 0xd6, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6c,
	0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x63, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xa9, 0xd8, 0x93, 0xcb,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41,
	0x2c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x73,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x1a, 0x9d, 0x49, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xbf, 0xe4, 0xde, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf0, 0xbe, 0x87, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x84,
	0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6f, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xb8, 0xa1, 0xe6, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x70, 0x0a, 0x09, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xa4, 0x85, 0xd7, 0x54, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x83, 0x01, 0x0a,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x8a, 0xe7, 0x8f, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x40, 0x82, 0x41, 0x3d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xd5, 0xff, 0xe4, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82,
	0x41, 0x40, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0xfd, 0x42, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0xc4, 0x01, 0x0a, 0x14, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xfe, 0x93, 0xb7, 0x2f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x43, 0x82, 0x41,
	0x40, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x44, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0xa3, 0x85, 0x80, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x6b, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0xf2, 0xb0, 0x91, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x69, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0xa1, 0x01, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0xc9, 0xcc, 0xef, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0xba, 0x01, 0x0a, 0x12, 0x6c, 0x61, 0x73,
	0x65, 0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0xb6, 0xbe, 0xde, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x4c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0xfb, 0xca, 0xe8, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xfb, 0xed, 0xd4, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x0c,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xbc, 0xcb, 0xd6,
	0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0xdf, 0x01, 0x0a, 0x1b, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f,
	0x73, 0x73, 0x18, 0xd7, 0xfb, 0x9f, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x42, 0x4a, 0x82,
	0x41, 0x47, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f,
	0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x52, 0x19, 0x70, 0x6f, 0x6c, 0x61, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x73, 0x73, 0x12, 0xe2, 0x01, 0x0a, 0x1c, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xc4, 0xda, 0xc0, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x70,
	0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x93, 0x02, 0x0a, 0x29, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x61, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xde, 0x98, 0x96, 0xd3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x58,
	0x82, 0x41, 0x55, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x61,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x64, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x25, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x8f, 0x01, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xa2, 0xd2, 0xe6, 0x7a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x11,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x1a, 0x8b, 0x07, 0x0a, 0x13, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x44,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x03, 0x61, 0x76, 0x67,
	0x18, 0x93, 0xa2, 0xa6, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x64, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76,
	0x67, 0x12, 0x83, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xcc, 0x9f,
	0xec, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x64, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0xba, 0xbf, 0x97, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x64, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x77, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0xfd, 0xaa, 0xad, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x78, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x7f, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xcd, 0xbc, 0xbd, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c,
	0x82, 0x41, 0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x77, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xf3, 0xc3, 0xad,
	0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x7f,
	0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x9f, 0x95, 0xa5, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x69,
	0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0xc0, 0x06, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x6d,
	0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xd4, 0x8f, 0xf7, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x7a, 0x0a,
	0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xaf, 0xc2, 0xd8, 0xe3, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41,
	0x3f, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xcf, 0xe9, 0xdb, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x6e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xee, 0x8e, 0xff, 0x9f, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82,
	0x41, 0x3b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x12, 0x76, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xcc,
	0x83, 0xc4, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41,
	0x40, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0xc0, 0xa7, 0xff, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x76, 0x0a, 0x08, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xa2, 0xd8, 0xdf, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x1a, 0xf8, 0x06, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xfb,
	0xcc, 0xdb, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x80, 0x01,
	0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x84, 0x8b, 0xbf, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41,
	0x46, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73,
	0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x7f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x82, 0x8f, 0xc7,
	0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65,
	0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x74, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x85, 0xd6, 0xff, 0x6e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65,
	0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d,
	0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x7e, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0xf5, 0xd8, 0x98, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x8b,
	0xbd, 0xff, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x7e, 0x0a,
	0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xf7, 0xc0, 0xca, 0xcf, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62,
	0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xc9, 0x06,
	0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x6f, 0x0a,
	0x03, 0x61, 0x76, 0x67, 0x18, 0xc5, 0x8e, 0xbe, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x7b,
	0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xc2, 0xca, 0xe4, 0x92, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82,
	0x41, 0x40, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x79, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x84, 0xe4, 0xe2, 0x99, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x6e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xc7, 0x8f,
	0xb6, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61,
	0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x77, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xcb, 0xa1, 0x80, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61,
	0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x6f, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xb9, 0xa8, 0xb6, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x77, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x91, 0x92, 0x89,
	0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xc2, 0x07, 0x0a, 0x19, 0x50, 0x6f,
	0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x7e, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xd6,
	0xa8, 0xc1, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2f, 0x61,
	0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x18, 0xd5, 0x94, 0xa7, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x6f,
	0x73, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0xe9, 0xf9, 0xd0, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x53, 0x82, 0x41, 0x50, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x7d,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xb0, 0x9a, 0xc9, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x2d,
	0x6c, 0x6f, 0x73, 0x73, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x86, 0x01,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd2, 0xeb, 0xee, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x2d,
	0x6c, 0x6f, 0x73, 0x73, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xde, 0x81,
	0xc9, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2f, 0x6d, 0x69, 0x6e,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xbc, 0xc7, 0x83, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2f, 0x6d, 0x69, 0x6e,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xcb,
	0x07, 0x0a, 0x1a, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a,
	0x03, 0x61, 0x76, 0x67, 0x18, 0xdd, 0xa3, 0xaf, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x8a, 0x01,
	0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x8a, 0x86, 0xa7, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41,
	0x50, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x6c,
	0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x64,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xfc, 0xd1, 0xf9, 0xc5, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x7e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xbf, 0xea,
	0x8b, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61,
	0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x88, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x83, 0xb8, 0xf4, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x7f, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xc1, 0xd1, 0x8b, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41,
	0x4c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x6c,
	0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x64,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0xd9, 0x86, 0xd2, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82,
	0x41, 0x51, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f,
	0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d,
	0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xb6, 0x08, 0x0a,
	0x25, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x61,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xf3,
	0x90, 0x9d, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x76, 0x67,
	0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x97, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x18, 0xac, 0x8a, 0xf5, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x2d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12,
	0x96, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x9a, 0xf1, 0x85,
	0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0xdd, 0xbd, 0xaa, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x2d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6d,
	0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x95, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0xad, 0x98, 0x89, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61,
	0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x8b, 0x01, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xd3, 0xd6, 0xaa, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x95, 0x01,
	0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xff, 0xf2, 0xf0, 0x83, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xe6, 0x21, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x88,
	0x01, 0x0a, 0x0d, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x81, 0xc3, 0xd0, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x2b,
	0x82, 0x41, 0x28, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xee, 0xfd, 0xc3, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xe8, 0x83, 0xd6, 0x36, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x6a,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9b, 0xfe, 0xdd, 0x9b, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x23,
	0x82, 0x41, 0x20, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe2, 0x06, 0x0a, 0x0c, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x86, 0x80, 0xe4, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x32, 0x82, 0x41, 0x2f,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xf3, 0xf1, 0xd0, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x9e,
	0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x97, 0x01, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0xf4, 0x90, 0xde, 0x3f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50,
	0x45, 0x45, 0x44, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x7a, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0xb0, 0xfc, 0xf3, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x75, 0x6d, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a,
	0x9d, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0xf1, 0xfb, 0x97, 0xf4,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x7a, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0xe7, 0x9b, 0xaa, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x75, 0x6d, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a,
	0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xf9, 0x16, 0x0a, 0x0b, 0x4f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xcd, 0x96, 0xe2, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x82, 0xfb,
	0x88, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x30, 0x82, 0x41, 0x2d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa6, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xb9, 0xb6, 0xef, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xb1, 0x13, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0b,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x82, 0xbd, 0x82, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3c,
	0x82, 0x41, 0x39, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x0b, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xa7, 0xd6, 0x8e, 0x45, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0xa7, 0x01, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xbe, 0xcf, 0xc4, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x50, 0x4f, 0x52, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x0c, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x96, 0xc5, 0xa0, 0xf9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x74, 0x18, 0xf4, 0xbc,
	0x88, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x69, 0x6c, 0x74, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x74, 0x1a, 0xce,
	0x06, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x6f, 0x0a,
	0x03, 0x61, 0x76, 0x67, 0x18, 0x86, 0x88, 0xc2, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x7c,
	0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x85, 0x8a, 0xba, 0xd7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82,
	0x41, 0x41, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x7a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xb9, 0xf4, 0xe8, 0xfc, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x6f, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0xe0, 0x96, 0xc9, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x78, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc2, 0xb5, 0xf6, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xee, 0xfd, 0xc8, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82,
	0x41, 0x3d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x79, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xcc, 0x90, 0x9a, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x45, 0x82, 0x41, 0x42, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69,
	0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0xd3, 0x06, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x70, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xdb, 0xdb, 0xe1, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76,
	0x67, 0x12, 0x7c, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xe4, 0xf5, 0xa3,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x45, 0x82, 0x41, 0x42, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12,
	0x7a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xe2, 0x9c, 0x83, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x70, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0xe5, 0xe6, 0x85, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x79, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd5, 0xc4, 0xed, 0x4e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x70, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0xeb, 0xcd, 0x85, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x79, 0x0a, 0x08, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd7, 0x96, 0xd2, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb8,
	0x09, 0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x7d,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xca, 0xa5, 0xab, 0x88, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x79, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe7, 0xc6, 0xad, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x71, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x67, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa8, 0x82,
	0xcf, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xbb, 0x06, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x69, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0xf6, 0xdc, 0xb9, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x65, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xf9, 0xc8, 0xd7, 0x69,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x77, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0xa6, 0xea, 0xe4, 0x7b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x78, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x9f, 0xec, 0xbd, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x7b, 0x0a, 0x0e, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x9d, 0xbe, 0xd6,
	0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41,
	0x37, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xc5, 0xde, 0x87, 0x7a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x7a, 0x0a,
	0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18,
	0xbc, 0xec, 0x90, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a,
	0x82, 0x41, 0x37, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x1a, 0xb6, 0x0b, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0xa9, 0xac, 0xb4, 0xef, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x1a, 0xf6, 0x08, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x8b, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9e, 0xc4, 0xfa, 0x4b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x33,
	0x82, 0x41, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x87, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8b, 0xd9, 0x89, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xea, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x67, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc4, 0xa2, 0xae, 0xf6, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xdb, 0xdf, 0x84, 0x99, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x27,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xa7,
	0xbd, 0x88, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x26, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xf4, 0x9a, 0xe8, 0x7b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x25, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0xfd, 0xce, 0x49, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x51, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xb9,
	0xb8, 0xab, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xe4, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xd5, 0x8e, 0xae,
	0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x65, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xbb, 0xf9, 0xf1, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xa4,
	0x8c, 0xf0, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x8c, 0xe2, 0xa4, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x26, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xf7, 0xd5,
	0xad, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xca, 0xe7, 0xf9, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x50,
	0x0a, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xda, 0xab, 0xdb, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x13, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa6, 0x01, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x50, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x1a, 0xc7, 0x1f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x70, 0x0a, 0x0f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0xf1, 0xb8, 0xc6, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e,
	0x82, 0x41, 0x2b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x66,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb0, 0xb5,
	0xf2, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82,
	0x41, 0x27, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18,
	0x91, 0xab, 0xd2, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24,
	0x82, 0x41, 0x21, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5d, 0x0a, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x8f, 0xa5, 0xdc, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x64,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x11, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18,
	0xe7, 0xf1, 0xcd, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30,
	0x82, 0x41, 0x2d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x10, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x79, 0x0a, 0x12, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0xc7, 0x8c, 0xcb, 0x94, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x2d, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x11, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x74, 0x0a,
	0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0xfe, 0xa8, 0xd5, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xcd, 0xaa, 0xd4, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0xa1, 0xc1, 0xdc, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x21, 0x82, 0x41, 0x1e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xa7, 0xe1, 0xde, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0xf3, 0xde, 0xa9, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x5d, 0x0a, 0x08, 0x6d, 0x66, 0x67, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0xa7, 0x81, 0xb4, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x66, 0x67, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07,
	0x6d, 0x66, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x66, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x96, 0xf0, 0x94, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x66, 0x67, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x66,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xdf, 0xa6,
	0xa0, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82,
	0x41, 0x20, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xcd, 0xdc, 0xa0, 0xb4, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x58, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0xaa, 0x83, 0x8e,
	0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82,
	0x41, 0x22, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0xff, 0x8d, 0xc4, 0x52, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x2d, 0x6e, 0x6f, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x12, 0x5f, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0xcd, 0xff, 0xaf, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0xb6, 0x85, 0xd5, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x6e, 0x6f,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x12, 0x74, 0x0a, 0x10, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xbe,
	0xef, 0x93, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f,
	0x82, 0x41, 0x2c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x83, 0x01, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0xac, 0xb2, 0xcd, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x2a, 0x82,
	0x41, 0x27, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0xbd, 0x01, 0x0a, 0x37, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0xac, 0xf4, 0x84, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57,
	0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x48, 0x00, 0x52, 0x36,
	0x74, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0xbd, 0x01, 0x0a, 0x37, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0xd5, 0xf0, 0xd3, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x4f, 0x46, 0x54, 0x57,
	0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x48, 0x00, 0x52, 0x36,
	0x74, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0xc5, 0x92, 0xee, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0xd4, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x66, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x9b, 0x80, 0xd9, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x62, 0x0a, 0x08, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0xb4, 0xc0, 0x8e, 0x70, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2f, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x08, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x1a,
	0xe2, 0x08, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x9d, 0x01, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x82, 0xd3, 0xaa, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x72, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0xa9, 0xe6, 0xac, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82,
	0x41, 0x34, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x7b, 0x0a, 0x0f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x84, 0xfe, 0xb0, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x52, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x5d, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xd5, 0xa2, 0xff, 0x2f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12,
	0x69, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xd2, 0x9f, 0x9d, 0x62, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82,
	0x41, 0x2f, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xb4, 0x83, 0xa2, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xd7, 0x88, 0xf8, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x67, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xdb, 0xa1, 0xf6, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x33, 0x82, 0x41, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5d, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0xa9, 0xa1, 0xf8, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x66, 0x0a, 0x08,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x81, 0xc0, 0xbb, 0x54, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x83, 0x02, 0x0a,
	0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x74, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x8c, 0xd1, 0xfd, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x27, 0x82,
	0x41, 0x24, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6f,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x85, 0xc6, 0xcf, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xa6, 0x07, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0xae, 0x86, 0xee, 0x86, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42,
	0x33, 0x82, 0x41, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x1a, 0xb3, 0x04, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xdf,
	0xce, 0xbc, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3a, 0x82, 0x41, 0x37,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x96, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x90, 0xea, 0x8a, 0x8c, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x77, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x6d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa7, 0xf8, 0xcd, 0x41, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x75, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0xba, 0xa3, 0xe2, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x75, 0x62,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xc0, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xbe, 0x73, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x7c, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9b, 0xf7, 0xeb, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa5, 0x01, 0x0a, 0x11, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x8b, 0xd2, 0xe9, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52,
	0x10, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x77, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9c, 0x9f, 0xc7, 0x51, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd8, 0x04, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0xdd, 0xdb, 0xe1, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33,
	0x82, 0x41, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0xab, 0x01, 0x0a,
	0x14, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x6d, 0x64, 0x5f, 0x70, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x95, 0xf8, 0xa4, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2d, 0x70, 0x6d, 0x64, 0x2d, 0x70,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x52, 0x12, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x50, 0x6d, 0x64, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x83, 0x01, 0x0a, 0x08, 0x66,
	0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xe0, 0xf6, 0x9a, 0x84, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x46, 0x45, 0x43, 0x4d, 0x4f, 0x44, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66,
	0x65, 0x63, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x66, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0xb2, 0x01, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0xbe, 0xbb, 0xf0, 0xe0, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66,
	0x6f, 0x72, 0x6d, 0x2d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x1a, 0x8c, 0x2d, 0x0a, 0x10, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xdf, 0x9f, 0x9f, 0xab, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x1a, 0x82, 0x2a, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0xae, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa0, 0xfc, 0x95, 0x30, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xab, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x99, 0xcb, 0xc4, 0x86, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc2,
	0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8e, 0x01, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xeb, 0xb1, 0xff, 0x95, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0xf1, 0xf6, 0x8c, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa6, 0x01, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xb2,
	0xac, 0x99, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x11, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x81, 0x01, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x18, 0x8d, 0xd7, 0xea,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x74, 0x78, 0x2d, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x52, 0x07, 0x74, 0x78, 0x4c, 0x61,
	0x73, 0x65, 0x72, 0x1a, 0xd2, 0x22, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8c, 0x01,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd2, 0xe3,
	0xa2, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82,
	0x41, 0x4d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xa8, 0xcd, 0xb3, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xcd, 0x01, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xc8, 0xee, 0xf9, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0xe7, 0x01, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x65, 0x72,
	0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x99, 0xba,
	0xa2, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65,
	0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x10,
	0x6c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x98, 0x01, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xa6, 0x9f, 0xf7, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xd1, 0x01, 0x0a, 0x0c,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xef, 0xa1, 0xf8,
	0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42,
	0x51, 0x82, 0x41, 0x4e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0xa6, 0x01, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x9b, 0xc5, 0xbf, 0xbf, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x08, 0x74, 0x78, 0x5f,
	0x6c, 0x61, 0x73, 0x65, 0x72, 0x18, 0xb6, 0xcb, 0xaa, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x78, 0x2d, 0x6c, 0x61,
	0x73, 0x65, 0x72, 0x52, 0x07, 0x74, 0x78, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x1a, 0xe1, 0x07, 0x0a,
	0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x03,
	0x61, 0x76, 0x67, 0x18, 0xf9, 0x87, 0xf9, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61,
	0x76, 0x67, 0x12, 0x8f, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xf6,
	0xc5, 0xb9, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x8d, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0xb8, 0xca, 0xf6, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x59, 0x82, 0x41, 0x56, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x83, 0x01, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x93, 0xdf, 0xa2,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x54, 0x82, 0x41, 0x51, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x8d, 0x01, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xbf, 0xe0, 0x91, 0x92, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0xbd, 0xc6, 0xa2, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x8d,
	0xa3, 0xbc, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41,
	0x56, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d,
	0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0x99, 0x08, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xc4, 0xae,
	0xfd, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61,
	0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61,
	0x76, 0x67, 0x12, 0x97, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x9f,
	0xb5, 0x93, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62,
	0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x95, 0x01, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xdf, 0xf0, 0x96, 0xb7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c,
	0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x8b, 0x01, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xde, 0xc8, 0x84,
	0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61,
	0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x12, 0x94, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0xbc, 0xdc, 0xc2, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60,
	0x82, 0x41, 0x5d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0xd0, 0xe1, 0x84, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72,
	0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x69,
	0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0xf2, 0xa4, 0x8b, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69,
	0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xe9, 0x07, 0x0a,
	0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x85, 0x01, 0x0a,
	0x03, 0x61, 0x76, 0x67, 0x18, 0xbe, 0xf6, 0xc5, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52,
	0x03, 0x61, 0x76, 0x67, 0x12, 0x90, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0xed, 0x8a, 0xf6, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0xb1, 0xa6, 0xb9, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x84, 0x01, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0xf8, 0xa3, 0xe9, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x8e, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xda, 0x9a,
	0x90, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41,
	0x57, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f,
	0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x84, 0x01, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xf6, 0xbc, 0xe9, 0x68, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41,
	0x52, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f,
	0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xf4, 0xe1, 0xd8, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xc9, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x5a, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0xa5, 0x3e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9b,
	0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0xd1, 0x94, 0xc3, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x46, 0x49, 0x42, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xe7, 0x9d, 0xa9, 0x9a, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x64, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xce, 0xc7, 0xa7, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x93, 0x01, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x6d,
	0x64, 0x18, 0xc2, 0xbe, 0xea, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2d, 0x70, 0x6d, 0x64, 0x52, 0x0b, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x50, 0x6d, 0x64, 0x12, 0xaa, 0x01, 0x0a, 0x14, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x5f, 0x70, 0x6d, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x18,
	0xa8, 0xee, 0xad, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x50, 0x4d, 0x44, 0x54, 0x59, 0x50, 0x45, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2d, 0x70, 0x6d, 0x64, 0x2d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x52,
	0x12, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x6d, 0x64, 0x50, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x12, 0x7b, 0x0a, 0x0f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb5, 0xd5, 0xf7, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x84, 0x01, 0x0a, 0x12, 0x66, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0xde, 0x9e, 0xfa, 0x81, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x66, 0x65, 0x63, 0x2d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x2d, 0x62, 0x69, 0x74, 0x73, 0x52, 0x10, 0x66, 0x65, 0x63, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x69, 0x74, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x13, 0x66, 0x65, 0x63, 0x5f,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x9b, 0x80, 0xe5, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82,
	0x41, 0x3b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x65, 0x63, 0x2d, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x11, 0x66,
	0x65, 0x63, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x82, 0x01, 0x0a, 0x08, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xc5, 0xe3,
	0xa8, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x46, 0x45, 0x43, 0x4d,
	0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x66, 0x65, 0x63, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x66, 0x65,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x66, 0x65, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x82, 0xa6, 0xdc, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x46, 0x45, 0x43, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x54, 0x59, 0x50, 0x45, 0x42,
	0x35, 0x82, 0x41, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x65, 0x63, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x66, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x96, 0x01, 0x0a, 0x18, 0x66, 0x65, 0x63, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0xb8,
	0xad, 0x98, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82,
	0x41, 0x40, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x65, 0x63, 0x2d, 0x75, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x16, 0x66, 0x65, 0x63, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x17, 0x66,
	0x65, 0x63, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0xf9, 0xfe, 0xd8, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x66, 0x65, 0x63, 0x2d, 0x75, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2d, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x15, 0x66, 0x65, 0x63, 0x55, 0x6e, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x99, 0x01, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x97, 0xdb, 0xc5, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x46, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0xb1, 0x01, 0x0a, 0x13,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x18, 0x89, 0x8b, 0xa2, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x46, 0x4f,
	0x52, 0x4d, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x42, 0x3e, 0x82, 0x41,
	0x3b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x52, 0x11, 0x66, 0x6f,
	0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x12,
	0x99, 0x01, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x85, 0xdc, 0xe8, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0xb4, 0x01, 0x0a, 0x12,
	0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x92, 0xbe, 0xd5, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61,
	0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x10, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0xaa, 0x01, 0x0a, 0x13, 0x6f, 0x74, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xb2, 0x8d, 0xa5, 0x90, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x54, 0x4e, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x42, 0x3e, 0x82, 0x41,
	0x3b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x74, 0x6e, 0x2d, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x6f, 0x74,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x9d, 0x01, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x90, 0xd8, 0xdf, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x9b, 0x01, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x62, 0x65, 0x72,
	0x18, 0x8c, 0xf0, 0xd4, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x46, 0x65, 0x63, 0x42, 0x65, 0x72, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65,
	0x72, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x63, 0x42, 0x65, 0x72, 0x12, 0x97, 0x01,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x62, 0x65, 0x72, 0x18, 0x8b, 0xac,
	0xa7, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x46, 0x65,
	0x63, 0x42, 0x65, 0x72, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x72, 0x65, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x46, 0x65, 0x63, 0x42, 0x65, 0x72, 0x12, 0x8b, 0x01, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0xf0, 0xe3, 0xf4, 0x51, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x6f, 0x18, 0xbd, 0xf8, 0x85, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x6e, 0x6f, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x6f, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x64, 0x68,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0xc4, 0x9d, 0x97, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x53, 0x4f, 0x4e, 0x45, 0x54, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x43, 0x4f, 0x44, 0x45, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x2d, 0x73, 0x64, 0x68, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x16, 0x73, 0x6f, 0x6e, 0x65,
	0x74, 0x53, 0x64, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x63, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0xfd, 0xee, 0xe9,
	0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41,
	0x2e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x71, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0xed, 0xf6, 0xdb, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x52, 0x0a,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x12, 0x6e, 0x0a, 0x0a, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x85, 0xab, 0xd0, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2d, 0x72, 0x65, 0x76, 0x52,
	0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x1a, 0xa4, 0x06, 0x0a, 0x0a, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x03, 0x61, 0x76, 0x67,
	0x18, 0xa8, 0xda, 0xc6, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x61, 0x76, 0x67,
	0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x75, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0x93, 0xe0, 0x9a, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x93, 0xa0, 0xd8, 0x5b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x69, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xea, 0xe2, 0xbe, 0x73, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x72, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xe0, 0xc8, 0xe9, 0x62, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d,
	0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x6a, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xc4, 0xfb, 0xbe, 0xb3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x73, 0x0a, 0x08,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xae, 0xa0, 0xa1, 0x8f, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f,
	0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0xdb, 0x06, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x70, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xaf, 0xb0,
	0x89, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73,
	0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f,
	0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x7d, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x18, 0x98, 0xb8, 0xe7, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x7b, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0xa6, 0xd9, 0xf5, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c,
	0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x70, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x81, 0xd3, 0xe4, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41,
	0x82, 0x41, 0x3e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72,
	0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x61,
	0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x7a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x99, 0xcb, 0xcc, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61,
	0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x70, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xff, 0xed, 0xe4, 0x4c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41,
	0x3e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62,
	0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x79, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xc3, 0x9c, 0xd7, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46,
	0x82, 0x41, 0x43, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72,
	0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x69,
	0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0xad, 0x06, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x6a, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xd1, 0xa2, 0xab, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x76, 0x0a, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x9e, 0x95, 0xc0, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0xd0, 0x84, 0xf0, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82,
	0x41, 0x3d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x6b, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0xeb, 0xb6, 0xb2, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61,
	0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x74, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xd7, 0x91, 0xb4, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0xc5, 0xcf, 0xb2, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x74, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb5, 0xd9, 0xc1, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69,
	0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0xab, 0x06, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x63, 0x42, 0x65, 0x72, 0x12, 0x6a,
	0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xb5, 0xaa, 0x9d, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65,
	0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x77, 0x0a, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xb2, 0xfb, 0x90, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62,
	0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x75, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x94, 0xfe, 0xe5, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40,
	0x82, 0x41, 0x3d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2d,
	0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x6b, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0xb7, 0x90, 0x96, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f, 0x6d,
	0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x73, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0xbb, 0xd3, 0xbe, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f,
	0x73, 0x74, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x89, 0xa9, 0x96, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f,
	0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x73, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0xe1, 0xe2, 0x85, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x6f, 0x73, 0x74, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xa4, 0x06,
	0x0a, 0x09, 0x50, 0x72, 0x65, 0x46, 0x65, 0x63, 0x42, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x03, 0x61,
	0x76, 0x67, 0x18, 0xd2, 0xd1, 0xe0, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f, 0x61,
	0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x76, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x81, 0xd9, 0xe1, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12,
	0x73, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x95, 0xcf, 0xec, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65,
	0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x69, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xe4, 0x92, 0xbd, 0x69,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a,
	0x82, 0x41, 0x37, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x2d, 0x66,
	0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x72, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xce, 0xb9, 0xa4, 0x3d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65,
	0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xda, 0xab, 0xbd, 0xa9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a,
	0x82, 0x41, 0x37, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x2d, 0x66,
	0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x73, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd0, 0x9e, 0xad, 0xd8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62,
	0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x1f, 0x0a, 0x0f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x54, 0x12, 0x27, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41,
	0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x1a, 0x81, 0x01, 0x0a,
	0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x82, 0x41, 0x1a,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_openconfig_platform_proto_rawDescOnce sync.Once
	file_openconfig_platform_proto_rawDescData = file_openconfig_platform_proto_rawDesc
)

func file_openconfig_platform_proto_rawDescGZIP() []byte {
	file_openconfig_platform_proto_rawDescOnce.Do(func() {
		file_openconfig_platform_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_platform_proto_rawDescData)
	})
	return file_openconfig_platform_proto_rawDescData
}

var file_openconfig_platform_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_openconfig_platform_proto_msgTypes = make([]protoimpl.MessageInfo, 83)
var file_openconfig_platform_proto_goTypes = []interface{}{
	(Components_Component_Transceiver_State_Present)(0), // 0: openconfig.Components.Component.Transceiver.State.Present
	(*Components)(nil),                                                                       // 1: openconfig.Components
	(*Components_Component)(nil),                                                             // 2: openconfig.Components.Component
	(*Components_ComponentKey)(nil),                                                          // 3: openconfig.Components.ComponentKey
	(*Components_Component_Backplane)(nil),                                                   // 4: openconfig.Components.Component.Backplane
	(*Components_Component_Chassis)(nil),                                                     // 5: openconfig.Components.Component.Chassis
	(*Components_Component_Config)(nil),                                                      // 6: openconfig.Components.Component.Config
	(*Components_Component_Cpu)(nil),                                                         // 7: openconfig.Components.Component.Cpu
	(*Components_Component_Fabric)(nil),                                                      // 8: openconfig.Components.Component.Fabric
	(*Components_Component_Fan)(nil),                                                         // 9: openconfig.Components.Component.Fan
	(*Components_Component_IntegratedCircuit)(nil),                                           // 10: openconfig.Components.Component.IntegratedCircuit
	(*Components_Component_Linecard)(nil),                                                    // 11: openconfig.Components.Component.Linecard
	(*Components_Component_OpticalChannel)(nil),                                              // 12: openconfig.Components.Component.OpticalChannel
	(*Components_Component_Port)(nil),                                                        // 13: openconfig.Components.Component.Port
	(*Components_Component_PowerSupply)(nil),                                                 // 14: openconfig.Components.Component.PowerSupply
	(*Components_Component_Properties)(nil),                                                  // 15: openconfig.Components.Component.Properties
	(*Components_Component_State)(nil),                                                       // 16: openconfig.Components.Component.State
	(*Components_Component_Storage)(nil),                                                     // 17: openconfig.Components.Component.Storage
	(*Components_Component_Subcomponents)(nil),                                               // 18: openconfig.Components.Component.Subcomponents
	(*Components_Component_Transceiver)(nil),                                                 // 19: openconfig.Components.Component.Transceiver
	(*Components_Component_Backplane_Config)(nil),                                            // 20: openconfig.Components.Component.Backplane.Config
	(*Components_Component_Backplane_State)(nil),                                             // 21: openconfig.Components.Component.Backplane.State
	(*Components_Component_Chassis_Config)(nil),                                              // 22: openconfig.Components.Component.Chassis.Config
	(*Components_Component_Chassis_State)(nil),                                               // 23: openconfig.Components.Component.Chassis.State
	(*Components_Component_Cpu_Config)(nil),                                                  // 24: openconfig.Components.Component.Cpu.Config
	(*Components_Component_Cpu_State)(nil),                                                   // 25: openconfig.Components.Component.Cpu.State
	(*Components_Component_Cpu_Utilization)(nil),                                             // 26: openconfig.Components.Component.Cpu.Utilization
	(*Components_Component_Cpu_Utilization_State)(nil),                                       // 27: openconfig.Components.Component.Cpu.Utilization.State
	(*Components_Component_Fabric_Config)(nil),                                               // 28: openconfig.Components.Component.Fabric.Config
	(*Components_Component_Fabric_State)(nil),                                                // 29: openconfig.Components.Component.Fabric.State
	(*Components_Component_Fan_Config)(nil),                                                  // 30: openconfig.Components.Component.Fan.Config
	(*Components_Component_Fan_State)(nil),                                                   // 31: openconfig.Components.Component.Fan.State
	(*Components_Component_IntegratedCircuit_Config)(nil),                                    // 32: openconfig.Components.Component.IntegratedCircuit.Config
	(*Components_Component_IntegratedCircuit_State)(nil),                                     // 33: openconfig.Components.Component.IntegratedCircuit.State
	(*Components_Component_Linecard_Config)(nil),                                             // 34: openconfig.Components.Component.Linecard.Config
	(*Components_Component_Linecard_State)(nil),                                              // 35: openconfig.Components.Component.Linecard.State
	(*Components_Component_OpticalChannel_Config)(nil),                                       // 36: openconfig.Components.Component.OpticalChannel.Config
	(*Components_Component_OpticalChannel_State)(nil),                                        // 37: openconfig.Components.Component.OpticalChannel.State
	(*Components_Component_OpticalChannel_State_ChromaticDispersion)(nil),                    // 38: openconfig.Components.Component.OpticalChannel.State.ChromaticDispersion
	(*Components_Component_OpticalChannel_State_InputPower)(nil),                             // 39: openconfig.Components.Component.OpticalChannel.State.InputPower
	(*Components_Component_OpticalChannel_State_LaserBiasCurrent)(nil),                       // 40: openconfig.Components.Component.OpticalChannel.State.LaserBiasCurrent
	(*Components_Component_OpticalChannel_State_OutputPower)(nil),                            // 41: openconfig.Components.Component.OpticalChannel.State.OutputPower
	(*Components_Component_OpticalChannel_State_PolarizationDependentLoss)(nil),              // 42: openconfig.Components.Component.OpticalChannel.State.PolarizationDependentLoss
	(*Components_Component_OpticalChannel_State_PolarizationModeDispersion)(nil),             // 43: openconfig.Components.Component.OpticalChannel.State.PolarizationModeDispersion
	(*Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion)(nil),  // 44: openconfig.Components.Component.OpticalChannel.State.SecondOrderPolarizationModeDispersion
	(*Components_Component_Port_BreakoutMode)(nil),                                           // 45: openconfig.Components.Component.Port.BreakoutMode
	(*Components_Component_Port_Config)(nil),                                                 // 46: openconfig.Components.Component.Port.Config
	(*Components_Component_Port_OpticalPort)(nil),                                            // 47: openconfig.Components.Component.Port.OpticalPort
	(*Components_Component_Port_State)(nil),                                                  // 48: openconfig.Components.Component.Port.State
	(*Components_Component_Port_BreakoutMode_Config)(nil),                                    // 49: openconfig.Components.Component.Port.BreakoutMode.Config
	(*Components_Component_Port_BreakoutMode_State)(nil),                                     // 50: openconfig.Components.Component.Port.BreakoutMode.State
	(*Components_Component_Port_OpticalPort_Config)(nil),                                     // 51: openconfig.Components.Component.Port.OpticalPort.Config
	(*Components_Component_Port_OpticalPort_State)(nil),                                      // 52: openconfig.Components.Component.Port.OpticalPort.State
	(*Components_Component_Port_OpticalPort_State_InputPower)(nil),                           // 53: openconfig.Components.Component.Port.OpticalPort.State.InputPower
	(*Components_Component_Port_OpticalPort_State_OutputPower)(nil),                          // 54: openconfig.Components.Component.Port.OpticalPort.State.OutputPower
	(*Components_Component_PowerSupply_Config)(nil),                                          // 55: openconfig.Components.Component.PowerSupply.Config
	(*Components_Component_PowerSupply_State)(nil),                                           // 56: openconfig.Components.Component.PowerSupply.State
	(*Components_Component_Properties_Property)(nil),                                         // 57: openconfig.Components.Component.Properties.Property
	(*Components_Component_Properties_PropertyKey)(nil),                                      // 58: openconfig.Components.Component.Properties.PropertyKey
	(*Components_Component_Properties_Property_Config)(nil),                                  // 59: openconfig.Components.Component.Properties.Property.Config
	(*Components_Component_Properties_Property_State)(nil),                                   // 60: openconfig.Components.Component.Properties.Property.State
	(*Components_Component_State_Memory)(nil),                                                // 61: openconfig.Components.Component.State.Memory
	(*Components_Component_State_Temperature)(nil),                                           // 62: openconfig.Components.Component.State.Temperature
	(*Components_Component_Storage_Config)(nil),                                              // 63: openconfig.Components.Component.Storage.Config
	(*Components_Component_Storage_State)(nil),                                               // 64: openconfig.Components.Component.Storage.State
	(*Components_Component_Subcomponents_Subcomponent)(nil),                                  // 65: openconfig.Components.Component.Subcomponents.Subcomponent
	(*Components_Component_Subcomponents_SubcomponentKey)(nil),                               // 66: openconfig.Components.Component.Subcomponents.SubcomponentKey
	(*Components_Component_Subcomponents_Subcomponent_Config)(nil),                           // 67: openconfig.Components.Component.Subcomponents.Subcomponent.Config
	(*Components_Component_Subcomponents_Subcomponent_State)(nil),                            // 68: openconfig.Components.Component.Subcomponents.Subcomponent.State
	(*Components_Component_Transceiver_Config)(nil),                                          // 69: openconfig.Components.Component.Transceiver.Config
	(*Components_Component_Transceiver_PhysicalChannels)(nil),                                // 70: openconfig.Components.Component.Transceiver.PhysicalChannels
	(*Components_Component_Transceiver_State)(nil),                                           // 71: openconfig.Components.Component.Transceiver.State
	(*Components_Component_Transceiver_PhysicalChannels_Channel)(nil),                        // 72: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel
	(*Components_Component_Transceiver_PhysicalChannels_ChannelKey)(nil),                     // 73: openconfig.Components.Component.Transceiver.PhysicalChannels.ChannelKey
	(*Components_Component_Transceiver_PhysicalChannels_Channel_Config)(nil),                 // 74: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.Config
	(*Components_Component_Transceiver_PhysicalChannels_Channel_State)(nil),                  // 75: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State
	(*Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower)(nil),       // 76: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.InputPower
	(*Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent)(nil), // 77: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.LaserBiasCurrent
	(*Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower)(nil),      // 78: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.OutputPower
	(*Components_Component_Transceiver_State_InputPower)(nil),                                // 79: openconfig.Components.Component.Transceiver.State.InputPower
	(*Components_Component_Transceiver_State_LaserBiasCurrent)(nil),                          // 80: openconfig.Components.Component.Transceiver.State.LaserBiasCurrent
	(*Components_Component_Transceiver_State_OutputPower)(nil),                               // 81: openconfig.Components.Component.Transceiver.State.OutputPower
	(*Components_Component_Transceiver_State_PostFecBer)(nil),                                // 82: openconfig.Components.Component.Transceiver.State.PostFecBer
	(*Components_Component_Transceiver_State_PreFecBer)(nil),                                 // 83: openconfig.Components.Component.Transceiver.State.PreFecBer
	(*ywrapper.StringValue)(nil),                                                             // 84: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                                                               // 85: ywrapper.UintValue
	(*ywrapper.BoolValue)(nil),                                                               // 86: ywrapper.BoolValue
	(OpenconfigPlatformTypesCOMPONENTOPERSTATUS)(0),                                          // 87: openconfig.OpenconfigPlatformTypesCOMPONENTOPERSTATUS
	(OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT)(0),                                  // 88: openconfig.OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT
	(OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT)(0),                                  // 89: openconfig.OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT
	(OpenconfigPlatformLinecardComponentPowerType)(0),                                        // 90: openconfig.OpenconfigPlatformLinecardComponentPowerType
	(*ywrapper.Decimal64Value)(nil),                                                          // 91: ywrapper.Decimal64Value
	(OpenconfigIfEthernetETHERNETSPEED)(0),                                                   // 92: openconfig.OpenconfigIfEthernetETHERNETSPEED
	(OpenconfigTransportLineCommonAdminStateType)(0),                                         // 93: openconfig.OpenconfigTransportLineCommonAdminStateType
	(OpenconfigTransportTypesOPTICALPORTTYPE)(0),                                             // 94: openconfig.OpenconfigTransportTypesOPTICALPORTTYPE
	(*ywrapper.BytesValue)(nil),                                                              // 95: ywrapper.BytesValue
	(OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY)(0),                                         // 96: openconfig.OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY
	(OpenconfigTransportTypesETHERNETPMDTYPE)(0),                                             // 97: openconfig.OpenconfigTransportTypesETHERNETPMDTYPE
	(OpenconfigPlatformTypesFECMODETYPE)(0),                                                  // 98: openconfig.OpenconfigPlatformTypesFECMODETYPE
	(OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE)(0),                                   // 99: openconfig.OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE
	(OpenconfigTransportTypesFIBERCONNECTORTYPE)(0),                                          // 100: openconfig.OpenconfigTransportTypesFIBERCONNECTORTYPE
	(OpenconfigPlatformTypesFECSTATUSTYPE)(0),                                                // 101: openconfig.OpenconfigPlatformTypesFECSTATUSTYPE
	(OpenconfigTransportTypesOTNAPPLICATIONCODE)(0),                                          // 102: openconfig.OpenconfigTransportTypesOTNAPPLICATIONCODE
	(OpenconfigTransportTypesSONETAPPLICATIONCODE)(0),                                        // 103: openconfig.OpenconfigTransportTypesSONETAPPLICATIONCODE
}
var file_openconfig_platform_proto_depIdxs = []int32{
	3,   // 0: openconfig.Components.component:type_name -> openconfig.Components.ComponentKey
	4,   // 1: openconfig.Components.Component.backplane:type_name -> openconfig.Components.Component.Backplane
	5,   // 2: openconfig.Components.Component.chassis:type_name -> openconfig.Components.Component.Chassis
	6,   // 3: openconfig.Components.Component.config:type_name -> openconfig.Components.Component.Config
	7,   // 4: openconfig.Components.Component.cpu:type_name -> openconfig.Components.Component.Cpu
	8,   // 5: openconfig.Components.Component.fabric:type_name -> openconfig.Components.Component.Fabric
	9,   // 6: openconfig.Components.Component.fan:type_name -> openconfig.Components.Component.Fan
	10,  // 7: openconfig.Components.Component.integrated_circuit:type_name -> openconfig.Components.Component.IntegratedCircuit
	11,  // 8: openconfig.Components.Component.linecard:type_name -> openconfig.Components.Component.Linecard
	12,  // 9: openconfig.Components.Component.optical_channel:type_name -> openconfig.Components.Component.OpticalChannel
	13,  // 10: openconfig.Components.Component.port:type_name -> openconfig.Components.Component.Port
	14,  // 11: openconfig.Components.Component.power_supply:type_name -> openconfig.Components.Component.PowerSupply
	15,  // 12: openconfig.Components.Component.properties:type_name -> openconfig.Components.Component.Properties
	16,  // 13: openconfig.Components.Component.state:type_name -> openconfig.Components.Component.State
	17,  // 14: openconfig.Components.Component.storage:type_name -> openconfig.Components.Component.Storage
	18,  // 15: openconfig.Components.Component.subcomponents:type_name -> openconfig.Components.Component.Subcomponents
	19,  // 16: openconfig.Components.Component.transceiver:type_name -> openconfig.Components.Component.Transceiver
	2,   // 17: openconfig.Components.ComponentKey.component:type_name -> openconfig.Components.Component
	20,  // 18: openconfig.Components.Component.Backplane.config:type_name -> openconfig.Components.Component.Backplane.Config
	21,  // 19: openconfig.Components.Component.Backplane.state:type_name -> openconfig.Components.Component.Backplane.State
	22,  // 20: openconfig.Components.Component.Chassis.config:type_name -> openconfig.Components.Component.Chassis.Config
	23,  // 21: openconfig.Components.Component.Chassis.state:type_name -> openconfig.Components.Component.Chassis.State
	84,  // 22: openconfig.Components.Component.Config.name:type_name -> ywrapper.StringValue
	24,  // 23: openconfig.Components.Component.Cpu.config:type_name -> openconfig.Components.Component.Cpu.Config
	25,  // 24: openconfig.Components.Component.Cpu.state:type_name -> openconfig.Components.Component.Cpu.State
	26,  // 25: openconfig.Components.Component.Cpu.utilization:type_name -> openconfig.Components.Component.Cpu.Utilization
	28,  // 26: openconfig.Components.Component.Fabric.config:type_name -> openconfig.Components.Component.Fabric.Config
	29,  // 27: openconfig.Components.Component.Fabric.state:type_name -> openconfig.Components.Component.Fabric.State
	30,  // 28: openconfig.Components.Component.Fan.config:type_name -> openconfig.Components.Component.Fan.Config
	31,  // 29: openconfig.Components.Component.Fan.state:type_name -> openconfig.Components.Component.Fan.State
	32,  // 30: openconfig.Components.Component.IntegratedCircuit.config:type_name -> openconfig.Components.Component.IntegratedCircuit.Config
	33,  // 31: openconfig.Components.Component.IntegratedCircuit.state:type_name -> openconfig.Components.Component.IntegratedCircuit.State
	34,  // 32: openconfig.Components.Component.Linecard.config:type_name -> openconfig.Components.Component.Linecard.Config
	35,  // 33: openconfig.Components.Component.Linecard.state:type_name -> openconfig.Components.Component.Linecard.State
	36,  // 34: openconfig.Components.Component.OpticalChannel.config:type_name -> openconfig.Components.Component.OpticalChannel.Config
	37,  // 35: openconfig.Components.Component.OpticalChannel.state:type_name -> openconfig.Components.Component.OpticalChannel.State
	45,  // 36: openconfig.Components.Component.Port.breakout_mode:type_name -> openconfig.Components.Component.Port.BreakoutMode
	46,  // 37: openconfig.Components.Component.Port.config:type_name -> openconfig.Components.Component.Port.Config
	47,  // 38: openconfig.Components.Component.Port.optical_port:type_name -> openconfig.Components.Component.Port.OpticalPort
	48,  // 39: openconfig.Components.Component.Port.state:type_name -> openconfig.Components.Component.Port.State
	55,  // 40: openconfig.Components.Component.PowerSupply.config:type_name -> openconfig.Components.Component.PowerSupply.Config
	56,  // 41: openconfig.Components.Component.PowerSupply.state:type_name -> openconfig.Components.Component.PowerSupply.State
	58,  // 42: openconfig.Components.Component.Properties.property:type_name -> openconfig.Components.Component.Properties.PropertyKey
	85,  // 43: openconfig.Components.Component.State.allocated_power:type_name -> ywrapper.UintValue
	84,  // 44: openconfig.Components.Component.State.description:type_name -> ywrapper.StringValue
	86,  // 45: openconfig.Components.Component.State.empty:type_name -> ywrapper.BoolValue
	85,  // 46: openconfig.Components.Component.State.entity_id:type_name -> ywrapper.UintValue
	86,  // 47: openconfig.Components.Component.State.equipment_failure:type_name -> ywrapper.BoolValue
	86,  // 48: openconfig.Components.Component.State.equipment_mismatch:type_name -> ywrapper.BoolValue
	84,  // 49: openconfig.Components.Component.State.firmware_version:type_name -> ywrapper.StringValue
	84,  // 50: openconfig.Components.Component.State.hardware_version:type_name -> ywrapper.StringValue
	84,  // 51: openconfig.Components.Component.State.id:type_name -> ywrapper.StringValue
	84,  // 52: openconfig.Components.Component.State.location:type_name -> ywrapper.StringValue
	61,  // 53: openconfig.Components.Component.State.memory:type_name -> openconfig.Components.Component.State.Memory
	84,  // 54: openconfig.Components.Component.State.mfg_date:type_name -> ywrapper.StringValue
	84,  // 55: openconfig.Components.Component.State.mfg_name:type_name -> ywrapper.StringValue
	84,  // 56: openconfig.Components.Component.State.name:type_name -> ywrapper.StringValue
	87,  // 57: openconfig.Components.Component.State.oper_status:type_name -> openconfig.OpenconfigPlatformTypesCOMPONENTOPERSTATUS
	84,  // 58: openconfig.Components.Component.State.parent:type_name -> ywrapper.StringValue
	84,  // 59: openconfig.Components.Component.State.part_no:type_name -> ywrapper.StringValue
	86,  // 60: openconfig.Components.Component.State.removable:type_name -> ywrapper.BoolValue
	84,  // 61: openconfig.Components.Component.State.serial_no:type_name -> ywrapper.StringValue
	84,  // 62: openconfig.Components.Component.State.software_version:type_name -> ywrapper.StringValue
	62,  // 63: openconfig.Components.Component.State.temperature:type_name -> openconfig.Components.Component.State.Temperature
	88,  // 64: openconfig.Components.Component.State.type_openconfigplatformtypesopenconfighardwarecomponent:type_name -> openconfig.OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT
	89,  // 65: openconfig.Components.Component.State.type_openconfigplatformtypesopenconfigsoftwarecomponent:type_name -> openconfig.OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT
	85,  // 66: openconfig.Components.Component.State.used_power:type_name -> ywrapper.UintValue
	63,  // 67: openconfig.Components.Component.Storage.config:type_name -> openconfig.Components.Component.Storage.Config
	64,  // 68: openconfig.Components.Component.Storage.state:type_name -> openconfig.Components.Component.Storage.State
	66,  // 69: openconfig.Components.Component.Subcomponents.subcomponent:type_name -> openconfig.Components.Component.Subcomponents.SubcomponentKey
	69,  // 70: openconfig.Components.Component.Transceiver.config:type_name -> openconfig.Components.Component.Transceiver.Config
	70,  // 71: openconfig.Components.Component.Transceiver.physical_channels:type_name -> openconfig.Components.Component.Transceiver.PhysicalChannels
	71,  // 72: openconfig.Components.Component.Transceiver.state:type_name -> openconfig.Components.Component.Transceiver.State
	27,  // 73: openconfig.Components.Component.Cpu.Utilization.state:type_name -> openconfig.Components.Component.Cpu.Utilization.State
	85,  // 74: openconfig.Components.Component.Cpu.Utilization.State.avg:type_name -> ywrapper.UintValue
	85,  // 75: openconfig.Components.Component.Cpu.Utilization.State.instant:type_name -> ywrapper.UintValue
	85,  // 76: openconfig.Components.Component.Cpu.Utilization.State.interval:type_name -> ywrapper.UintValue
	85,  // 77: openconfig.Components.Component.Cpu.Utilization.State.max:type_name -> ywrapper.UintValue
	85,  // 78: openconfig.Components.Component.Cpu.Utilization.State.max_time:type_name -> ywrapper.UintValue
	85,  // 79: openconfig.Components.Component.Cpu.Utilization.State.min:type_name -> ywrapper.UintValue
	85,  // 80: openconfig.Components.Component.Cpu.Utilization.State.min_time:type_name -> ywrapper.UintValue
	85,  // 81: openconfig.Components.Component.Fan.State.speed:type_name -> ywrapper.UintValue
	90,  // 82: openconfig.Components.Component.Linecard.Config.power_admin_state:type_name -> openconfig.OpenconfigPlatformLinecardComponentPowerType
	90,  // 83: openconfig.Components.Component.Linecard.State.power_admin_state:type_name -> openconfig.OpenconfigPlatformLinecardComponentPowerType
	84,  // 84: openconfig.Components.Component.Linecard.State.slot_id:type_name -> ywrapper.StringValue
	85,  // 85: openconfig.Components.Component.OpticalChannel.Config.frequency:type_name -> ywrapper.UintValue
	84,  // 86: openconfig.Components.Component.OpticalChannel.Config.line_port:type_name -> ywrapper.StringValue
	85,  // 87: openconfig.Components.Component.OpticalChannel.Config.operational_mode:type_name -> ywrapper.UintValue
	91,  // 88: openconfig.Components.Component.OpticalChannel.Config.target_output_power:type_name -> ywrapper.Decimal64Value
	38,  // 89: openconfig.Components.Component.OpticalChannel.State.chromatic_dispersion:type_name -> openconfig.Components.Component.OpticalChannel.State.ChromaticDispersion
	85,  // 90: openconfig.Components.Component.OpticalChannel.State.frequency:type_name -> ywrapper.UintValue
	85,  // 91: openconfig.Components.Component.OpticalChannel.State.group_id:type_name -> ywrapper.UintValue
	39,  // 92: openconfig.Components.Component.OpticalChannel.State.input_power:type_name -> openconfig.Components.Component.OpticalChannel.State.InputPower
	40,  // 93: openconfig.Components.Component.OpticalChannel.State.laser_bias_current:type_name -> openconfig.Components.Component.OpticalChannel.State.LaserBiasCurrent
	84,  // 94: openconfig.Components.Component.OpticalChannel.State.line_port:type_name -> ywrapper.StringValue
	85,  // 95: openconfig.Components.Component.OpticalChannel.State.operational_mode:type_name -> ywrapper.UintValue
	41,  // 96: openconfig.Components.Component.OpticalChannel.State.output_power:type_name -> openconfig.Components.Component.OpticalChannel.State.OutputPower
	42,  // 97: openconfig.Components.Component.OpticalChannel.State.polarization_dependent_loss:type_name -> openconfig.Components.Component.OpticalChannel.State.PolarizationDependentLoss
	43,  // 98: openconfig.Components.Component.OpticalChannel.State.polarization_mode_dispersion:type_name -> openconfig.Components.Component.OpticalChannel.State.PolarizationModeDispersion
	44,  // 99: openconfig.Components.Component.OpticalChannel.State.second_order_polarization_mode_dispersion:type_name -> openconfig.Components.Component.OpticalChannel.State.SecondOrderPolarizationModeDispersion
	91,  // 100: openconfig.Components.Component.OpticalChannel.State.target_output_power:type_name -> ywrapper.Decimal64Value
	91,  // 101: openconfig.Components.Component.OpticalChannel.State.ChromaticDispersion.avg:type_name -> ywrapper.Decimal64Value
	91,  // 102: openconfig.Components.Component.OpticalChannel.State.ChromaticDispersion.instant:type_name -> ywrapper.Decimal64Value
	85,  // 103: openconfig.Components.Component.OpticalChannel.State.ChromaticDispersion.interval:type_name -> ywrapper.UintValue
	91,  // 104: openconfig.Components.Component.OpticalChannel.State.ChromaticDispersion.max:type_name -> ywrapper.Decimal64Value
	85,  // 105: openconfig.Components.Component.OpticalChannel.State.ChromaticDispersion.max_time:type_name -> ywrapper.UintValue
	91,  // 106: openconfig.Components.Component.OpticalChannel.State.ChromaticDispersion.min:type_name -> ywrapper.Decimal64Value
	85,  // 107: openconfig.Components.Component.OpticalChannel.State.ChromaticDispersion.min_time:type_name -> ywrapper.UintValue
	91,  // 108: openconfig.Components.Component.OpticalChannel.State.InputPower.avg:type_name -> ywrapper.Decimal64Value
	91,  // 109: openconfig.Components.Component.OpticalChannel.State.InputPower.instant:type_name -> ywrapper.Decimal64Value
	85,  // 110: openconfig.Components.Component.OpticalChannel.State.InputPower.interval:type_name -> ywrapper.UintValue
	91,  // 111: openconfig.Components.Component.OpticalChannel.State.InputPower.max:type_name -> ywrapper.Decimal64Value
	85,  // 112: openconfig.Components.Component.OpticalChannel.State.InputPower.max_time:type_name -> ywrapper.UintValue
	91,  // 113: openconfig.Components.Component.OpticalChannel.State.InputPower.min:type_name -> ywrapper.Decimal64Value
	85,  // 114: openconfig.Components.Component.OpticalChannel.State.InputPower.min_time:type_name -> ywrapper.UintValue
	91,  // 115: openconfig.Components.Component.OpticalChannel.State.LaserBiasCurrent.avg:type_name -> ywrapper.Decimal64Value
	91,  // 116: openconfig.Components.Component.OpticalChannel.State.LaserBiasCurrent.instant:type_name -> ywrapper.Decimal64Value
	85,  // 117: openconfig.Components.Component.OpticalChannel.State.LaserBiasCurrent.interval:type_name -> ywrapper.UintValue
	91,  // 118: openconfig.Components.Component.OpticalChannel.State.LaserBiasCurrent.max:type_name -> ywrapper.Decimal64Value
	85,  // 119: openconfig.Components.Component.OpticalChannel.State.LaserBiasCurrent.max_time:type_name -> ywrapper.UintValue
	91,  // 120: openconfig.Components.Component.OpticalChannel.State.LaserBiasCurrent.min:type_name -> ywrapper.Decimal64Value
	85,  // 121: openconfig.Components.Component.OpticalChannel.State.LaserBiasCurrent.min_time:type_name -> ywrapper.UintValue
	91,  // 122: openconfig.Components.Component.OpticalChannel.State.OutputPower.avg:type_name -> ywrapper.Decimal64Value
	91,  // 123: openconfig.Components.Component.OpticalChannel.State.OutputPower.instant:type_name -> ywrapper.Decimal64Value
	85,  // 124: openconfig.Components.Component.OpticalChannel.State.OutputPower.interval:type_name -> ywrapper.UintValue
	91,  // 125: openconfig.Components.Component.OpticalChannel.State.OutputPower.max:type_name -> ywrapper.Decimal64Value
	85,  // 126: openconfig.Components.Component.OpticalChannel.State.OutputPower.max_time:type_name -> ywrapper.UintValue
	91,  // 127: openconfig.Components.Component.OpticalChannel.State.OutputPower.min:type_name -> ywrapper.Decimal64Value
	85,  // 128: openconfig.Components.Component.OpticalChannel.State.OutputPower.min_time:type_name -> ywrapper.UintValue
	91,  // 129: openconfig.Components.Component.OpticalChannel.State.PolarizationDependentLoss.avg:type_name -> ywrapper.Decimal64Value
	91,  // 130: openconfig.Components.Component.OpticalChannel.State.PolarizationDependentLoss.instant:type_name -> ywrapper.Decimal64Value
	85,  // 131: openconfig.Components.Component.OpticalChannel.State.PolarizationDependentLoss.interval:type_name -> ywrapper.UintValue
	91,  // 132: openconfig.Components.Component.OpticalChannel.State.PolarizationDependentLoss.max:type_name -> ywrapper.Decimal64Value
	85,  // 133: openconfig.Components.Component.OpticalChannel.State.PolarizationDependentLoss.max_time:type_name -> ywrapper.UintValue
	91,  // 134: openconfig.Components.Component.OpticalChannel.State.PolarizationDependentLoss.min:type_name -> ywrapper.Decimal64Value
	85,  // 135: openconfig.Components.Component.OpticalChannel.State.PolarizationDependentLoss.min_time:type_name -> ywrapper.UintValue
	91,  // 136: openconfig.Components.Component.OpticalChannel.State.PolarizationModeDispersion.avg:type_name -> ywrapper.Decimal64Value
	91,  // 137: openconfig.Components.Component.OpticalChannel.State.PolarizationModeDispersion.instant:type_name -> ywrapper.Decimal64Value
	85,  // 138: openconfig.Components.Component.OpticalChannel.State.PolarizationModeDispersion.interval:type_name -> ywrapper.UintValue
	91,  // 139: openconfig.Components.Component.OpticalChannel.State.PolarizationModeDispersion.max:type_name -> ywrapper.Decimal64Value
	85,  // 140: openconfig.Components.Component.OpticalChannel.State.PolarizationModeDispersion.max_time:type_name -> ywrapper.UintValue
	91,  // 141: openconfig.Components.Component.OpticalChannel.State.PolarizationModeDispersion.min:type_name -> ywrapper.Decimal64Value
	85,  // 142: openconfig.Components.Component.OpticalChannel.State.PolarizationModeDispersion.min_time:type_name -> ywrapper.UintValue
	91,  // 143: openconfig.Components.Component.OpticalChannel.State.SecondOrderPolarizationModeDispersion.avg:type_name -> ywrapper.Decimal64Value
	91,  // 144: openconfig.Components.Component.OpticalChannel.State.SecondOrderPolarizationModeDispersion.instant:type_name -> ywrapper.Decimal64Value
	85,  // 145: openconfig.Components.Component.OpticalChannel.State.SecondOrderPolarizationModeDispersion.interval:type_name -> ywrapper.UintValue
	91,  // 146: openconfig.Components.Component.OpticalChannel.State.SecondOrderPolarizationModeDispersion.max:type_name -> ywrapper.Decimal64Value
	85,  // 147: openconfig.Components.Component.OpticalChannel.State.SecondOrderPolarizationModeDispersion.max_time:type_name -> ywrapper.UintValue
	91,  // 148: openconfig.Components.Component.OpticalChannel.State.SecondOrderPolarizationModeDispersion.min:type_name -> ywrapper.Decimal64Value
	85,  // 149: openconfig.Components.Component.OpticalChannel.State.SecondOrderPolarizationModeDispersion.min_time:type_name -> ywrapper.UintValue
	49,  // 150: openconfig.Components.Component.Port.BreakoutMode.config:type_name -> openconfig.Components.Component.Port.BreakoutMode.Config
	50,  // 151: openconfig.Components.Component.Port.BreakoutMode.state:type_name -> openconfig.Components.Component.Port.BreakoutMode.State
	51,  // 152: openconfig.Components.Component.Port.OpticalPort.config:type_name -> openconfig.Components.Component.Port.OpticalPort.Config
	52,  // 153: openconfig.Components.Component.Port.OpticalPort.state:type_name -> openconfig.Components.Component.Port.OpticalPort.State
	92,  // 154: openconfig.Components.Component.Port.BreakoutMode.Config.channel_speed:type_name -> openconfig.OpenconfigIfEthernetETHERNETSPEED
	85,  // 155: openconfig.Components.Component.Port.BreakoutMode.Config.num_channels:type_name -> ywrapper.UintValue
	92,  // 156: openconfig.Components.Component.Port.BreakoutMode.State.channel_speed:type_name -> openconfig.OpenconfigIfEthernetETHERNETSPEED
	85,  // 157: openconfig.Components.Component.Port.BreakoutMode.State.num_channels:type_name -> ywrapper.UintValue
	93,  // 158: openconfig.Components.Component.Port.OpticalPort.Config.admin_state:type_name -> openconfig.OpenconfigTransportLineCommonAdminStateType
	93,  // 159: openconfig.Components.Component.Port.OpticalPort.State.admin_state:type_name -> openconfig.OpenconfigTransportLineCommonAdminStateType
	53,  // 160: openconfig.Components.Component.Port.OpticalPort.State.input_power:type_name -> openconfig.Components.Component.Port.OpticalPort.State.InputPower
	94,  // 161: openconfig.Components.Component.Port.OpticalPort.State.optical_port_type:type_name -> openconfig.OpenconfigTransportTypesOPTICALPORTTYPE
	54,  // 162: openconfig.Components.Component.Port.OpticalPort.State.output_power:type_name -> openconfig.Components.Component.Port.OpticalPort.State.OutputPower
	91,  // 163: openconfig.Components.Component.Port.OpticalPort.State.tilt:type_name -> ywrapper.Decimal64Value
	91,  // 164: openconfig.Components.Component.Port.OpticalPort.State.InputPower.avg:type_name -> ywrapper.Decimal64Value
	91,  // 165: openconfig.Components.Component.Port.OpticalPort.State.InputPower.instant:type_name -> ywrapper.Decimal64Value
	85,  // 166: openconfig.Components.Component.Port.OpticalPort.State.InputPower.interval:type_name -> ywrapper.UintValue
	91,  // 167: openconfig.Components.Component.Port.OpticalPort.State.InputPower.max:type_name -> ywrapper.Decimal64Value
	85,  // 168: openconfig.Components.Component.Port.OpticalPort.State.InputPower.max_time:type_name -> ywrapper.UintValue
	91,  // 169: openconfig.Components.Component.Port.OpticalPort.State.InputPower.min:type_name -> ywrapper.Decimal64Value
	85,  // 170: openconfig.Components.Component.Port.OpticalPort.State.InputPower.min_time:type_name -> ywrapper.UintValue
	91,  // 171: openconfig.Components.Component.Port.OpticalPort.State.OutputPower.avg:type_name -> ywrapper.Decimal64Value
	91,  // 172: openconfig.Components.Component.Port.OpticalPort.State.OutputPower.instant:type_name -> ywrapper.Decimal64Value
	85,  // 173: openconfig.Components.Component.Port.OpticalPort.State.OutputPower.interval:type_name -> ywrapper.UintValue
	91,  // 174: openconfig.Components.Component.Port.OpticalPort.State.OutputPower.max:type_name -> ywrapper.Decimal64Value
	85,  // 175: openconfig.Components.Component.Port.OpticalPort.State.OutputPower.max_time:type_name -> ywrapper.UintValue
	91,  // 176: openconfig.Components.Component.Port.OpticalPort.State.OutputPower.min:type_name -> ywrapper.Decimal64Value
	85,  // 177: openconfig.Components.Component.Port.OpticalPort.State.OutputPower.min_time:type_name -> ywrapper.UintValue
	86,  // 178: openconfig.Components.Component.PowerSupply.Config.enabled:type_name -> ywrapper.BoolValue
	95,  // 179: openconfig.Components.Component.PowerSupply.State.capacity:type_name -> ywrapper.BytesValue
	86,  // 180: openconfig.Components.Component.PowerSupply.State.enabled:type_name -> ywrapper.BoolValue
	95,  // 181: openconfig.Components.Component.PowerSupply.State.input_current:type_name -> ywrapper.BytesValue
	95,  // 182: openconfig.Components.Component.PowerSupply.State.input_voltage:type_name -> ywrapper.BytesValue
	95,  // 183: openconfig.Components.Component.PowerSupply.State.output_current:type_name -> ywrapper.BytesValue
	95,  // 184: openconfig.Components.Component.PowerSupply.State.output_power:type_name -> ywrapper.BytesValue
	95,  // 185: openconfig.Components.Component.PowerSupply.State.output_voltage:type_name -> ywrapper.BytesValue
	59,  // 186: openconfig.Components.Component.Properties.Property.config:type_name -> openconfig.Components.Component.Properties.Property.Config
	60,  // 187: openconfig.Components.Component.Properties.Property.state:type_name -> openconfig.Components.Component.Properties.Property.State
	57,  // 188: openconfig.Components.Component.Properties.PropertyKey.property:type_name -> openconfig.Components.Component.Properties.Property
	84,  // 189: openconfig.Components.Component.Properties.Property.Config.name:type_name -> ywrapper.StringValue
	91,  // 190: openconfig.Components.Component.Properties.Property.Config.value_decimal64value:type_name -> ywrapper.Decimal64Value
	86,  // 191: openconfig.Components.Component.Properties.Property.State.configurable:type_name -> ywrapper.BoolValue
	84,  // 192: openconfig.Components.Component.Properties.Property.State.name:type_name -> ywrapper.StringValue
	91,  // 193: openconfig.Components.Component.Properties.Property.State.value_decimal64value:type_name -> ywrapper.Decimal64Value
	85,  // 194: openconfig.Components.Component.State.Memory.available:type_name -> ywrapper.UintValue
	85,  // 195: openconfig.Components.Component.State.Memory.utilized:type_name -> ywrapper.UintValue
	96,  // 196: openconfig.Components.Component.State.Temperature.alarm_severity:type_name -> openconfig.OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY
	86,  // 197: openconfig.Components.Component.State.Temperature.alarm_status:type_name -> ywrapper.BoolValue
	85,  // 198: openconfig.Components.Component.State.Temperature.alarm_threshold:type_name -> ywrapper.UintValue
	91,  // 199: openconfig.Components.Component.State.Temperature.avg:type_name -> ywrapper.Decimal64Value
	91,  // 200: openconfig.Components.Component.State.Temperature.instant:type_name -> ywrapper.Decimal64Value
	85,  // 201: openconfig.Components.Component.State.Temperature.interval:type_name -> ywrapper.UintValue
	91,  // 202: openconfig.Components.Component.State.Temperature.max:type_name -> ywrapper.Decimal64Value
	85,  // 203: openconfig.Components.Component.State.Temperature.max_time:type_name -> ywrapper.UintValue
	91,  // 204: openconfig.Components.Component.State.Temperature.min:type_name -> ywrapper.Decimal64Value
	85,  // 205: openconfig.Components.Component.State.Temperature.min_time:type_name -> ywrapper.UintValue
	67,  // 206: openconfig.Components.Component.Subcomponents.Subcomponent.config:type_name -> openconfig.Components.Component.Subcomponents.Subcomponent.Config
	68,  // 207: openconfig.Components.Component.Subcomponents.Subcomponent.state:type_name -> openconfig.Components.Component.Subcomponents.Subcomponent.State
	65,  // 208: openconfig.Components.Component.Subcomponents.SubcomponentKey.subcomponent:type_name -> openconfig.Components.Component.Subcomponents.Subcomponent
	84,  // 209: openconfig.Components.Component.Subcomponents.Subcomponent.Config.name:type_name -> ywrapper.StringValue
	84,  // 210: openconfig.Components.Component.Subcomponents.Subcomponent.State.name:type_name -> ywrapper.StringValue
	86,  // 211: openconfig.Components.Component.Transceiver.Config.enabled:type_name -> ywrapper.BoolValue
	97,  // 212: openconfig.Components.Component.Transceiver.Config.ethernet_pmd_preconf:type_name -> openconfig.OpenconfigTransportTypesETHERNETPMDTYPE
	98,  // 213: openconfig.Components.Component.Transceiver.Config.fec_mode:type_name -> openconfig.OpenconfigPlatformTypesFECMODETYPE
	99,  // 214: openconfig.Components.Component.Transceiver.Config.form_factor_preconf:type_name -> openconfig.OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE
	73,  // 215: openconfig.Components.Component.Transceiver.PhysicalChannels.channel:type_name -> openconfig.Components.Component.Transceiver.PhysicalChannels.ChannelKey
	100, // 216: openconfig.Components.Component.Transceiver.State.connector_type:type_name -> openconfig.OpenconfigTransportTypesFIBERCONNECTORTYPE
	84,  // 217: openconfig.Components.Component.Transceiver.State.date_code:type_name -> ywrapper.StringValue
	86,  // 218: openconfig.Components.Component.Transceiver.State.enabled:type_name -> ywrapper.BoolValue
	97,  // 219: openconfig.Components.Component.Transceiver.State.ethernet_pmd:type_name -> openconfig.OpenconfigTransportTypesETHERNETPMDTYPE
	97,  // 220: openconfig.Components.Component.Transceiver.State.ethernet_pmd_preconf:type_name -> openconfig.OpenconfigTransportTypesETHERNETPMDTYPE
	86,  // 221: openconfig.Components.Component.Transceiver.State.fault_condition:type_name -> ywrapper.BoolValue
	85,  // 222: openconfig.Components.Component.Transceiver.State.fec_corrected_bits:type_name -> ywrapper.UintValue
	85,  // 223: openconfig.Components.Component.Transceiver.State.fec_corrected_bytes:type_name -> ywrapper.UintValue
	98,  // 224: openconfig.Components.Component.Transceiver.State.fec_mode:type_name -> openconfig.OpenconfigPlatformTypesFECMODETYPE
	101, // 225: openconfig.Components.Component.Transceiver.State.fec_status:type_name -> openconfig.OpenconfigPlatformTypesFECSTATUSTYPE
	85,  // 226: openconfig.Components.Component.Transceiver.State.fec_uncorrectable_blocks:type_name -> ywrapper.UintValue
	85,  // 227: openconfig.Components.Component.Transceiver.State.fec_uncorrectable_words:type_name -> ywrapper.UintValue
	99,  // 228: openconfig.Components.Component.Transceiver.State.form_factor:type_name -> openconfig.OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE
	99,  // 229: openconfig.Components.Component.Transceiver.State.form_factor_preconf:type_name -> openconfig.OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE
	79,  // 230: openconfig.Components.Component.Transceiver.State.input_power:type_name -> openconfig.Components.Component.Transceiver.State.InputPower
	80,  // 231: openconfig.Components.Component.Transceiver.State.laser_bias_current:type_name -> openconfig.Components.Component.Transceiver.State.LaserBiasCurrent
	102, // 232: openconfig.Components.Component.Transceiver.State.otn_compliance_code:type_name -> openconfig.OpenconfigTransportTypesOTNAPPLICATIONCODE
	81,  // 233: openconfig.Components.Component.Transceiver.State.output_power:type_name -> openconfig.Components.Component.Transceiver.State.OutputPower
	82,  // 234: openconfig.Components.Component.Transceiver.State.post_fec_ber:type_name -> openconfig.Components.Component.Transceiver.State.PostFecBer
	83,  // 235: openconfig.Components.Component.Transceiver.State.pre_fec_ber:type_name -> openconfig.Components.Component.Transceiver.State.PreFecBer
	0,   // 236: openconfig.Components.Component.Transceiver.State.present:type_name -> openconfig.Components.Component.Transceiver.State.Present
	84,  // 237: openconfig.Components.Component.Transceiver.State.serial_no:type_name -> ywrapper.StringValue
	103, // 238: openconfig.Components.Component.Transceiver.State.sonet_sdh_compliance_code:type_name -> openconfig.OpenconfigTransportTypesSONETAPPLICATIONCODE
	84,  // 239: openconfig.Components.Component.Transceiver.State.vendor:type_name -> ywrapper.StringValue
	84,  // 240: openconfig.Components.Component.Transceiver.State.vendor_part:type_name -> ywrapper.StringValue
	84,  // 241: openconfig.Components.Component.Transceiver.State.vendor_rev:type_name -> ywrapper.StringValue
	74,  // 242: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.config:type_name -> openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.Config
	75,  // 243: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.state:type_name -> openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State
	72,  // 244: openconfig.Components.Component.Transceiver.PhysicalChannels.ChannelKey.channel:type_name -> openconfig.Components.Component.Transceiver.PhysicalChannels.Channel
	84,  // 245: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.Config.description:type_name -> ywrapper.StringValue
	85,  // 246: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.Config.index:type_name -> ywrapper.UintValue
	91,  // 247: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.Config.target_output_power:type_name -> ywrapper.Decimal64Value
	86,  // 248: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.Config.tx_laser:type_name -> ywrapper.BoolValue
	84,  // 249: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.description:type_name -> ywrapper.StringValue
	85,  // 250: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.index:type_name -> ywrapper.UintValue
	76,  // 251: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.input_power:type_name -> openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.InputPower
	77,  // 252: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.laser_bias_current:type_name -> openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.LaserBiasCurrent
	85,  // 253: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.output_frequency:type_name -> ywrapper.UintValue
	78,  // 254: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.output_power:type_name -> openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.OutputPower
	91,  // 255: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.target_output_power:type_name -> ywrapper.Decimal64Value
	86,  // 256: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.tx_laser:type_name -> ywrapper.BoolValue
	91,  // 257: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.InputPower.avg:type_name -> ywrapper.Decimal64Value
	91,  // 258: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.InputPower.instant:type_name -> ywrapper.Decimal64Value
	85,  // 259: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.InputPower.interval:type_name -> ywrapper.UintValue
	91,  // 260: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.InputPower.max:type_name -> ywrapper.Decimal64Value
	85,  // 261: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.InputPower.max_time:type_name -> ywrapper.UintValue
	91,  // 262: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.InputPower.min:type_name -> ywrapper.Decimal64Value
	85,  // 263: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.InputPower.min_time:type_name -> ywrapper.UintValue
	91,  // 264: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.LaserBiasCurrent.avg:type_name -> ywrapper.Decimal64Value
	91,  // 265: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.LaserBiasCurrent.instant:type_name -> ywrapper.Decimal64Value
	85,  // 266: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.LaserBiasCurrent.interval:type_name -> ywrapper.UintValue
	91,  // 267: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.LaserBiasCurrent.max:type_name -> ywrapper.Decimal64Value
	85,  // 268: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.LaserBiasCurrent.max_time:type_name -> ywrapper.UintValue
	91,  // 269: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.LaserBiasCurrent.min:type_name -> ywrapper.Decimal64Value
	85,  // 270: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.LaserBiasCurrent.min_time:type_name -> ywrapper.UintValue
	91,  // 271: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.OutputPower.avg:type_name -> ywrapper.Decimal64Value
	91,  // 272: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.OutputPower.instant:type_name -> ywrapper.Decimal64Value
	85,  // 273: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.OutputPower.interval:type_name -> ywrapper.UintValue
	91,  // 274: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.OutputPower.max:type_name -> ywrapper.Decimal64Value
	85,  // 275: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.OutputPower.max_time:type_name -> ywrapper.UintValue
	91,  // 276: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.OutputPower.min:type_name -> ywrapper.Decimal64Value
	85,  // 277: openconfig.Components.Component.Transceiver.PhysicalChannels.Channel.State.OutputPower.min_time:type_name -> ywrapper.UintValue
	91,  // 278: openconfig.Components.Component.Transceiver.State.InputPower.avg:type_name -> ywrapper.Decimal64Value
	91,  // 279: openconfig.Components.Component.Transceiver.State.InputPower.instant:type_name -> ywrapper.Decimal64Value
	85,  // 280: openconfig.Components.Component.Transceiver.State.InputPower.interval:type_name -> ywrapper.UintValue
	91,  // 281: openconfig.Components.Component.Transceiver.State.InputPower.max:type_name -> ywrapper.Decimal64Value
	85,  // 282: openconfig.Components.Component.Transceiver.State.InputPower.max_time:type_name -> ywrapper.UintValue
	91,  // 283: openconfig.Components.Component.Transceiver.State.InputPower.min:type_name -> ywrapper.Decimal64Value
	85,  // 284: openconfig.Components.Component.Transceiver.State.InputPower.min_time:type_name -> ywrapper.UintValue
	91,  // 285: openconfig.Components.Component.Transceiver.State.LaserBiasCurrent.avg:type_name -> ywrapper.Decimal64Value
	91,  // 286: openconfig.Components.Component.Transceiver.State.LaserBiasCurrent.instant:type_name -> ywrapper.Decimal64Value
	85,  // 287: openconfig.Components.Component.Transceiver.State.LaserBiasCurrent.interval:type_name -> ywrapper.UintValue
	91,  // 288: openconfig.Components.Component.Transceiver.State.LaserBiasCurrent.max:type_name -> ywrapper.Decimal64Value
	85,  // 289: openconfig.Components.Component.Transceiver.State.LaserBiasCurrent.max_time:type_name -> ywrapper.UintValue
	91,  // 290: openconfig.Components.Component.Transceiver.State.LaserBiasCurrent.min:type_name -> ywrapper.Decimal64Value
	85,  // 291: openconfig.Components.Component.Transceiver.State.LaserBiasCurrent.min_time:type_name -> ywrapper.UintValue
	91,  // 292: openconfig.Components.Component.Transceiver.State.OutputPower.avg:type_name -> ywrapper.Decimal64Value
	91,  // 293: openconfig.Components.Component.Transceiver.State.OutputPower.instant:type_name -> ywrapper.Decimal64Value
	85,  // 294: openconfig.Components.Component.Transceiver.State.OutputPower.interval:type_name -> ywrapper.UintValue
	91,  // 295: openconfig.Components.Component.Transceiver.State.OutputPower.max:type_name -> ywrapper.Decimal64Value
	85,  // 296: openconfig.Components.Component.Transceiver.State.OutputPower.max_time:type_name -> ywrapper.UintValue
	91,  // 297: openconfig.Components.Component.Transceiver.State.OutputPower.min:type_name -> ywrapper.Decimal64Value
	85,  // 298: openconfig.Components.Component.Transceiver.State.OutputPower.min_time:type_name -> ywrapper.UintValue
	91,  // 299: openconfig.Components.Component.Transceiver.State.PostFecBer.avg:type_name -> ywrapper.Decimal64Value
	91,  // 300: openconfig.Components.Component.Transceiver.State.PostFecBer.instant:type_name -> ywrapper.Decimal64Value
	85,  // 301: openconfig.Components.Component.Transceiver.State.PostFecBer.interval:type_name -> ywrapper.UintValue
	91,  // 302: openconfig.Components.Component.Transceiver.State.PostFecBer.max:type_name -> ywrapper.Decimal64Value
	85,  // 303: openconfig.Components.Component.Transceiver.State.PostFecBer.max_time:type_name -> ywrapper.UintValue
	91,  // 304: openconfig.Components.Component.Transceiver.State.PostFecBer.min:type_name -> ywrapper.Decimal64Value
	85,  // 305: openconfig.Components.Component.Transceiver.State.PostFecBer.min_time:type_name -> ywrapper.UintValue
	91,  // 306: openconfig.Components.Component.Transceiver.State.PreFecBer.avg:type_name -> ywrapper.Decimal64Value
	91,  // 307: openconfig.Components.Component.Transceiver.State.PreFecBer.instant:type_name -> ywrapper.Decimal64Value
	85,  // 308: openconfig.Components.Component.Transceiver.State.PreFecBer.interval:type_name -> ywrapper.UintValue
	91,  // 309: openconfig.Components.Component.Transceiver.State.PreFecBer.max:type_name -> ywrapper.Decimal64Value
	85,  // 310: openconfig.Components.Component.Transceiver.State.PreFecBer.max_time:type_name -> ywrapper.UintValue
	91,  // 311: openconfig.Components.Component.Transceiver.State.PreFecBer.min:type_name -> ywrapper.Decimal64Value
	85,  // 312: openconfig.Components.Component.Transceiver.State.PreFecBer.min_time:type_name -> ywrapper.UintValue
	313, // [313:313] is the sub-list for method output_type
	313, // [313:313] is the sub-list for method input_type
	313, // [313:313] is the sub-list for extension type_name
	313, // [313:313] is the sub-list for extension extendee
	0,   // [0:313] is the sub-list for field type_name
}

func init() { file_openconfig_platform_proto_init() }
func file_openconfig_platform_proto_init() {
	if File_openconfig_platform_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_platform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_ComponentKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Backplane); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Chassis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Cpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Fabric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Fan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_IntegratedCircuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Linecard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_OpticalChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_PowerSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Properties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Subcomponents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Backplane_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Backplane_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Chassis_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Chassis_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Cpu_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Cpu_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Cpu_Utilization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Cpu_Utilization_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Fabric_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Fabric_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Fan_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Fan_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_IntegratedCircuit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_IntegratedCircuit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Linecard_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Linecard_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_OpticalChannel_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_OpticalChannel_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_OpticalChannel_State_ChromaticDispersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_OpticalChannel_State_InputPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_OpticalChannel_State_LaserBiasCurrent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_OpticalChannel_State_OutputPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_OpticalChannel_State_PolarizationDependentLoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_OpticalChannel_State_PolarizationModeDispersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Port_BreakoutMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Port_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Port_OpticalPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Port_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Port_BreakoutMode_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Port_BreakoutMode_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Port_OpticalPort_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Port_OpticalPort_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Port_OpticalPort_State_InputPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Port_OpticalPort_State_OutputPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_PowerSupply_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_PowerSupply_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Properties_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Properties_PropertyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Properties_Property_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Properties_Property_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_State_Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_State_Temperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Storage_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Storage_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Subcomponents_Subcomponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Subcomponents_SubcomponentKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Subcomponents_Subcomponent_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Subcomponents_Subcomponent_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_PhysicalChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_PhysicalChannels_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_PhysicalChannels_ChannelKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_PhysicalChannels_Channel_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_PhysicalChannels_Channel_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_State_InputPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_State_LaserBiasCurrent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_State_OutputPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_State_PostFecBer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components_Component_Transceiver_State_PreFecBer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openconfig_platform_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Components_Component_State_TypeOpenconfigplatformtypesopenconfighardwarecomponent)(nil),
		(*Components_Component_State_TypeOpenconfigplatformtypesopenconfigsoftwarecomponent)(nil),
	}
	file_openconfig_platform_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*Components_Component_Properties_Property_Config_ValueBool)(nil),
		(*Components_Component_Properties_Property_Config_ValueSint64)(nil),
		(*Components_Component_Properties_Property_Config_ValueString)(nil),
		(*Components_Component_Properties_Property_Config_ValueUint64)(nil),
		(*Components_Component_Properties_Property_Config_ValueDecimal64Value)(nil),
	}
	file_openconfig_platform_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*Components_Component_Properties_Property_State_ValueBool)(nil),
		(*Components_Component_Properties_Property_State_ValueSint64)(nil),
		(*Components_Component_Properties_Property_State_ValueString)(nil),
		(*Components_Component_Properties_Property_State_ValueUint64)(nil),
		(*Components_Component_Properties_Property_State_ValueDecimal64Value)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_platform_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   83,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_platform_proto_goTypes,
		DependencyIndexes: file_openconfig_platform_proto_depIdxs,
		EnumInfos:         file_openconfig_platform_proto_enumTypes,
		MessageInfos:      file_openconfig_platform_proto_msgTypes,
	}.Build()
	File_openconfig_platform_proto = out.File
	file_openconfig_platform_proto_rawDesc = nil
	file_openconfig_platform_proto_goTypes = nil
	file_openconfig_platform_proto_depIdxs = nil
}
