// openconfig.openconfig_access_points is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_access_points.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_STATUS_UNSET                 AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_STATUS_AUTHENTICATED         AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status = 1
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_STATUS_AUTHENTICATING        AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status = 2
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_STATUS_FAILED_AUTHENTICATION AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status = 3
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_STATUS_SUPPLICANT_TIMEOUT    AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status = 4
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "STATUS_AUTHENTICATED",
		2: "STATUS_AUTHENTICATING",
		3: "STATUS_FAILED_AUTHENTICATION",
		4: "STATUS_SUPPLICANT_TIMEOUT",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status_value = map[string]int32{
		"STATUS_UNSET":                 0,
		"STATUS_AUTHENTICATED":         1,
		"STATUS_AUTHENTICATING":        2,
		"STATUS_FAILED_AUTHENTICATION": 3,
		"STATUS_SUPPLICANT_TIMEOUT":    4,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[0].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[0]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 0, 0, 0, 0}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DUPLEXMODE_UNSET AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DUPLEXMODE_FULL  AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode = 1
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DUPLEXMODE_HALF  AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode = 2
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode_name = map[int32]string{
		0: "DUPLEXMODE_UNSET",
		1: "DUPLEXMODE_FULL",
		2: "DUPLEXMODE_HALF",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode_value = map[string]int32{
		"DUPLEXMODE_UNSET": 0,
		"DUPLEXMODE_FULL":  1,
		"DUPLEXMODE_HALF":  2,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[1].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[1]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 1, 0}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HOSTMODE_UNSET        AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HOSTMODE_SINGLE_HOST  AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode = 1
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HOSTMODE_MULTI_HOST   AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode = 2
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HOSTMODE_MULTI_DOMAIN AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode = 3
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode_name = map[int32]string{
		0: "HOSTMODE_UNSET",
		1: "HOSTMODE_SINGLE_HOST",
		2: "HOSTMODE_MULTI_HOST",
		3: "HOSTMODE_MULTI_DOMAIN",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode_value = map[string]int32{
		"HOSTMODE_UNSET":        0,
		"HOSTMODE_SINGLE_HOST":  1,
		"HOSTMODE_MULTI_HOST":   2,
		"HOSTMODE_MULTI_DOMAIN": 3,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[2].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[2]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 2, 0, 0}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HOSTMODE_UNSET        AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HOSTMODE_SINGLE_HOST  AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode = 1
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HOSTMODE_MULTI_HOST   AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode = 2
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HOSTMODE_MULTI_DOMAIN AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode = 3
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode_name = map[int32]string{
		0: "HOSTMODE_UNSET",
		1: "HOSTMODE_SINGLE_HOST",
		2: "HOSTMODE_MULTI_HOST",
		3: "HOSTMODE_MULTI_DOMAIN",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode_value = map[string]int32{
		"HOSTMODE_UNSET":        0,
		"HOSTMODE_SINGLE_HOST":  1,
		"HOSTMODE_MULTI_HOST":   2,
		"HOSTMODE_MULTI_DOMAIN": 3,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[3].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[3]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 2, 1, 0}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DUPLEXMODE_UNSET AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DUPLEXMODE_FULL  AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode = 1
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DUPLEXMODE_HALF  AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode = 2
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode_name = map[int32]string{
		0: "DUPLEXMODE_UNSET",
		1: "DUPLEXMODE_FULL",
		2: "DUPLEXMODE_HALF",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode_value = map[string]int32{
		"DUPLEXMODE_UNSET": 0,
		"DUPLEXMODE_FULL":  1,
		"DUPLEXMODE_HALF":  2,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[4].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[4]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 4, 0}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NEGOTIATEDDUPLEXMODE_UNSET AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NEGOTIATEDDUPLEXMODE_FULL  AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode = 1
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NEGOTIATEDDUPLEXMODE_HALF  AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode = 2
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode_name = map[int32]string{
		0: "NEGOTIATEDDUPLEXMODE_UNSET",
		1: "NEGOTIATEDDUPLEXMODE_FULL",
		2: "NEGOTIATEDDUPLEXMODE_HALF",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode_value = map[string]int32{
		"NEGOTIATEDDUPLEXMODE_UNSET": 0,
		"NEGOTIATEDDUPLEXMODE_FULL":  1,
		"NEGOTIATEDDUPLEXMODE_HALF":  2,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[5].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[5]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 4, 1}
}

type AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_State_ADMINSTATUS_UNSET   AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus = 0
	AccessPoints_AccessPoint_Interfaces_Interface_State_ADMINSTATUS_UP      AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus = 1
	AccessPoints_AccessPoint_Interfaces_Interface_State_ADMINSTATUS_DOWN    AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus = 2
	AccessPoints_AccessPoint_Interfaces_Interface_State_ADMINSTATUS_TESTING AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus = 3
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus_name = map[int32]string{
		0: "ADMINSTATUS_UNSET",
		1: "ADMINSTATUS_UP",
		2: "ADMINSTATUS_DOWN",
		3: "ADMINSTATUS_TESTING",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus_value = map[string]int32{
		"ADMINSTATUS_UNSET":   0,
		"ADMINSTATUS_UP":      1,
		"ADMINSTATUS_DOWN":    2,
		"ADMINSTATUS_TESTING": 3,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[6].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[6]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3, 0}
}

type AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_State_OPERSTATUS_UNSET            AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus = 0
	AccessPoints_AccessPoint_Interfaces_Interface_State_OPERSTATUS_UP               AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus = 2
	AccessPoints_AccessPoint_Interfaces_Interface_State_OPERSTATUS_DOWN             AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus = 3
	AccessPoints_AccessPoint_Interfaces_Interface_State_OPERSTATUS_TESTING          AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus = 4
	AccessPoints_AccessPoint_Interfaces_Interface_State_OPERSTATUS_UNKNOWN          AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus = 5
	AccessPoints_AccessPoint_Interfaces_Interface_State_OPERSTATUS_DORMANT          AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus = 6
	AccessPoints_AccessPoint_Interfaces_Interface_State_OPERSTATUS_NOT_PRESENT      AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus = 7
	AccessPoints_AccessPoint_Interfaces_Interface_State_OPERSTATUS_LOWER_LAYER_DOWN AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus = 8
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus_name = map[int32]string{
		0: "OPERSTATUS_UNSET",
		2: "OPERSTATUS_UP",
		3: "OPERSTATUS_DOWN",
		4: "OPERSTATUS_TESTING",
		5: "OPERSTATUS_UNKNOWN",
		6: "OPERSTATUS_DORMANT",
		7: "OPERSTATUS_NOT_PRESENT",
		8: "OPERSTATUS_LOWER_LAYER_DOWN",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus_value = map[string]int32{
		"OPERSTATUS_UNSET":            0,
		"OPERSTATUS_UP":               2,
		"OPERSTATUS_DOWN":             3,
		"OPERSTATUS_TESTING":          4,
		"OPERSTATUS_UNKNOWN":          5,
		"OPERSTATUS_DORMANT":          6,
		"OPERSTATUS_NOT_PRESENT":      7,
		"OPERSTATUS_LOWER_LAYER_DOWN": 8,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[7].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[7]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3, 1}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_MODE_DISABLE     AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_MODE_REMOTE_ONLY AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode = 2
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_MODE_ALL         AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode = 3
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode_name = map[int32]string{
		0: "MODE_DISABLE",
		2: "MODE_REMOTE_ONLY",
		3: "MODE_ALL",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode_value = map[string]int32{
		"MODE_DISABLE":     0,
		"MODE_REMOTE_ONLY": 2,
		"MODE_ALL":         3,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[8].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[8]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 3, 0, 0}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_MODE_DISABLE     AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_MODE_REMOTE_ONLY AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode = 2
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_MODE_ALL         AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode = 3
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode_name = map[int32]string{
		0: "MODE_DISABLE",
		2: "MODE_REMOTE_ONLY",
		3: "MODE_ALL",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode_value = map[string]int32{
		"MODE_DISABLE":     0,
		"MODE_REMOTE_ONLY": 2,
		"MODE_ALL":         3,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[9].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[9]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 3, 1, 0}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_UNSET        AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_PREFERRED    AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 1
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_DEPRECATED   AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 2
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_INVALID      AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 3
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_INACCESSIBLE AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 4
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_UNKNOWN      AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 5
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_TENTATIVE    AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 6
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_DUPLICATE    AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 7
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_OPTIMISTIC   AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 8
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "STATUS_PREFERRED",
		2: "STATUS_DEPRECATED",
		3: "STATUS_INVALID",
		4: "STATUS_INACCESSIBLE",
		5: "STATUS_UNKNOWN",
		6: "STATUS_TENTATIVE",
		7: "STATUS_DUPLICATE",
		8: "STATUS_OPTIMISTIC",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status_value = map[string]int32{
		"STATUS_UNSET":        0,
		"STATUS_PREFERRED":    1,
		"STATUS_DEPRECATED":   2,
		"STATUS_INVALID":      3,
		"STATUS_INACCESSIBLE": 4,
		"STATUS_UNKNOWN":      5,
		"STATUS_TENTATIVE":    6,
		"STATUS_DUPLICATE":    7,
		"STATUS_OPTIMISTIC":   8,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[10].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[10]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 0, 0, 1, 0}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_UNSET      AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_INCOMPLETE AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState = 1
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_REACHABLE  AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState = 2
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_STALE      AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState = 3
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_DELAY      AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState = 4
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_PROBE      AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState = 5
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState_name = map[int32]string{
		0: "NEIGHBORSTATE_UNSET",
		1: "NEIGHBORSTATE_INCOMPLETE",
		2: "NEIGHBORSTATE_REACHABLE",
		3: "NEIGHBORSTATE_STALE",
		4: "NEIGHBORSTATE_DELAY",
		5: "NEIGHBORSTATE_PROBE",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState_value = map[string]int32{
		"NEIGHBORSTATE_UNSET":      0,
		"NEIGHBORSTATE_INCOMPLETE": 1,
		"NEIGHBORSTATE_REACHABLE":  2,
		"NEIGHBORSTATE_STALE":      3,
		"NEIGHBORSTATE_DELAY":      4,
		"NEIGHBORSTATE_PROBE":      5,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[11].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[11]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 2, 0, 1, 0}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_ADMINSTATUS_UNSET   AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_ADMINSTATUS_UP      AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus = 1
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_ADMINSTATUS_DOWN    AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus = 2
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_ADMINSTATUS_TESTING AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus = 3
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus_name = map[int32]string{
		0: "ADMINSTATUS_UNSET",
		1: "ADMINSTATUS_UP",
		2: "ADMINSTATUS_DOWN",
		3: "ADMINSTATUS_TESTING",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus_value = map[string]int32{
		"ADMINSTATUS_UNSET":   0,
		"ADMINSTATUS_UP":      1,
		"ADMINSTATUS_DOWN":    2,
		"ADMINSTATUS_TESTING": 3,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[12].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[12]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 3, 0}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_UNSET            AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_UP               AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 2
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_DOWN             AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 3
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_TESTING          AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 4
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_UNKNOWN          AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 5
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_DORMANT          AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 6
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_NOT_PRESENT      AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 7
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_LOWER_LAYER_DOWN AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 8
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus_name = map[int32]string{
		0: "OPERSTATUS_UNSET",
		2: "OPERSTATUS_UP",
		3: "OPERSTATUS_DOWN",
		4: "OPERSTATUS_TESTING",
		5: "OPERSTATUS_UNKNOWN",
		6: "OPERSTATUS_DORMANT",
		7: "OPERSTATUS_NOT_PRESENT",
		8: "OPERSTATUS_LOWER_LAYER_DOWN",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus_value = map[string]int32{
		"OPERSTATUS_UNSET":            0,
		"OPERSTATUS_UP":               2,
		"OPERSTATUS_DOWN":             3,
		"OPERSTATUS_TESTING":          4,
		"OPERSTATUS_UNKNOWN":          5,
		"OPERSTATUS_DORMANT":          6,
		"OPERSTATUS_NOT_PRESENT":      7,
		"OPERSTATUS_LOWER_LAYER_DOWN": 8,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[13].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[13]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 3, 1}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_MODE_DISABLE     AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_MODE_REMOTE_ONLY AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode = 2
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_MODE_ALL         AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode = 3
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode_name = map[int32]string{
		0: "MODE_DISABLE",
		2: "MODE_REMOTE_ONLY",
		3: "MODE_ALL",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode_value = map[string]int32{
		"MODE_DISABLE":     0,
		"MODE_REMOTE_ONLY": 2,
		"MODE_ALL":         3,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[14].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[14]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 3, 0, 0}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_MODE_DISABLE     AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_MODE_REMOTE_ONLY AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode = 2
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_MODE_ALL         AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode = 3
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode_name = map[int32]string{
		0: "MODE_DISABLE",
		2: "MODE_REMOTE_ONLY",
		3: "MODE_ALL",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode_value = map[string]int32{
		"MODE_DISABLE":     0,
		"MODE_REMOTE_ONLY": 2,
		"MODE_ALL":         3,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[15].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[15]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 3, 1, 0}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_UNSET        AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_PREFERRED    AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 1
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_DEPRECATED   AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 2
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_INVALID      AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 3
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_INACCESSIBLE AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 4
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_UNKNOWN      AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 5
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_TENTATIVE    AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 6
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_DUPLICATE    AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 7
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_OPTIMISTIC   AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 8
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "STATUS_PREFERRED",
		2: "STATUS_DEPRECATED",
		3: "STATUS_INVALID",
		4: "STATUS_INACCESSIBLE",
		5: "STATUS_UNKNOWN",
		6: "STATUS_TENTATIVE",
		7: "STATUS_DUPLICATE",
		8: "STATUS_OPTIMISTIC",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status_value = map[string]int32{
		"STATUS_UNSET":        0,
		"STATUS_PREFERRED":    1,
		"STATUS_DEPRECATED":   2,
		"STATUS_INVALID":      3,
		"STATUS_INACCESSIBLE": 4,
		"STATUS_UNKNOWN":      5,
		"STATUS_TENTATIVE":    6,
		"STATUS_DUPLICATE":    7,
		"STATUS_OPTIMISTIC":   8,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[16].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[16]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 0, 0, 1, 0}
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState int32

const (
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_UNSET      AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState = 0
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_INCOMPLETE AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState = 1
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_REACHABLE  AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState = 2
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_STALE      AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState = 3
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_DELAY      AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState = 4
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_PROBE      AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState = 5
)

// Enum value maps for AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState.
var (
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState_name = map[int32]string{
		0: "NEIGHBORSTATE_UNSET",
		1: "NEIGHBORSTATE_INCOMPLETE",
		2: "NEIGHBORSTATE_REACHABLE",
		3: "NEIGHBORSTATE_STALE",
		4: "NEIGHBORSTATE_DELAY",
		5: "NEIGHBORSTATE_PROBE",
	}
	AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState_value = map[string]int32{
		"NEIGHBORSTATE_UNSET":      0,
		"NEIGHBORSTATE_INCOMPLETE": 1,
		"NEIGHBORSTATE_REACHABLE":  2,
		"NEIGHBORSTATE_STALE":      3,
		"NEIGHBORSTATE_DELAY":      4,
		"NEIGHBORSTATE_PROBE":      5,
	}
)

func (x AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState) Enum() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState {
	p := new(AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[17].Descriptor()
}

func (AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[17]
}

func (x AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState.Descriptor instead.
func (AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 2, 0, 1, 0}
}

type AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode int32

const (
	AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_OPMODE_UNSET           AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode = 0
	AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_OPMODE_OPEN            AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode = 1
	AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_OPMODE_WPA2_PERSONAL   AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode = 2
	AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_OPMODE_WPA2_ENTERPRISE AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode = 3
	AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_OPMODE_WPA_PERSONAL    AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode = 4
	AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_OPMODE_WPA_ENTERPRISE  AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode = 5
	AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_OPMODE_WEP             AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode = 6
)

// Enum value maps for AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode.
var (
	AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_name = map[int32]string{
		0: "OPMODE_UNSET",
		1: "OPMODE_OPEN",
		2: "OPMODE_WPA2_PERSONAL",
		3: "OPMODE_WPA2_ENTERPRISE",
		4: "OPMODE_WPA_PERSONAL",
		5: "OPMODE_WPA_ENTERPRISE",
		6: "OPMODE_WEP",
	}
	AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_value = map[string]int32{
		"OPMODE_UNSET":           0,
		"OPMODE_OPEN":            1,
		"OPMODE_WPA2_PERSONAL":   2,
		"OPMODE_WPA2_ENTERPRISE": 3,
		"OPMODE_WPA_PERSONAL":    4,
		"OPMODE_WPA_ENTERPRISE":  5,
		"OPMODE_WEP":             6,
	}
)

func (x AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode) Enum() *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode {
	p := new(AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[18].Descriptor()
}

func (AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[18]
}

func (x AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode.Descriptor instead.
func (AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 3, 0, 1, 0, 0, 0}
}

type AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode int32

const (
	AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_CONNECTIONMODE_UNSET AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 0
	AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_CONNECTIONMODE_A     AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 1
	AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_CONNECTIONMODE_B     AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 2
	AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_CONNECTIONMODE_G     AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 3
	AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_CONNECTIONMODE_N     AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 4
	AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_CONNECTIONMODE_AC    AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 5
)

// Enum value maps for AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode.
var (
	AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_name = map[int32]string{
		0: "CONNECTIONMODE_UNSET",
		1: "CONNECTIONMODE_A",
		2: "CONNECTIONMODE_B",
		3: "CONNECTIONMODE_G",
		4: "CONNECTIONMODE_N",
		5: "CONNECTIONMODE_AC",
	}
	AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_value = map[string]int32{
		"CONNECTIONMODE_UNSET": 0,
		"CONNECTIONMODE_A":     1,
		"CONNECTIONMODE_B":     2,
		"CONNECTIONMODE_G":     3,
		"CONNECTIONMODE_N":     4,
		"CONNECTIONMODE_AC":    5,
	}
)

func (x AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) Enum() *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode {
	p := new(AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[19].Descriptor()
}

func (AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[19]
}

func (x AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode.Descriptor instead.
func (AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2, 0, 2, 0, 0}
}

type AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode int32

const (
	AccessPoints_AccessPoint_Ssids_Ssid_Config_OPMODE_OPEN            AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode = 0
	AccessPoints_AccessPoint_Ssids_Ssid_Config_OPMODE_WPA2_PERSONAL   AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode = 2
	AccessPoints_AccessPoint_Ssids_Ssid_Config_OPMODE_WPA2_ENTERPRISE AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode = 3
)

// Enum value maps for AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode.
var (
	AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_name = map[int32]string{
		0: "OPMODE_OPEN",
		2: "OPMODE_WPA2_PERSONAL",
		3: "OPMODE_WPA2_ENTERPRISE",
	}
	AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_value = map[string]int32{
		"OPMODE_OPEN":            0,
		"OPMODE_WPA2_PERSONAL":   2,
		"OPMODE_WPA2_ENTERPRISE": 3,
	}
)

func (x AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode) Enum() *AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode {
	p := new(AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[20].Descriptor()
}

func (AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[20]
}

func (x AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode.Descriptor instead.
func (AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 3, 0}
}

type AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod int32

const (
	AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_DOT11RMETHOD_OVA AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod = 0
	AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_DOT11RMETHOD_ODS AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod = 2
)

// Enum value maps for AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod.
var (
	AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_name = map[int32]string{
		0: "DOT11RMETHOD_OVA",
		2: "DOT11RMETHOD_ODS",
	}
	AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_value = map[string]int32{
		"DOT11RMETHOD_OVA": 0,
		"DOT11RMETHOD_ODS": 2,
	}
)

func (x AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod) Enum() *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod {
	p := new(AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[21].Descriptor()
}

func (AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[21]
}

func (x AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod.Descriptor instead.
func (AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 4, 0, 0}
}

type AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod int32

const (
	AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_DOT11RMETHOD_OVA AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod = 0
	AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_DOT11RMETHOD_ODS AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod = 2
)

// Enum value maps for AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod.
var (
	AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod_name = map[int32]string{
		0: "DOT11RMETHOD_OVA",
		2: "DOT11RMETHOD_ODS",
	}
	AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod_value = map[string]int32{
		"DOT11RMETHOD_OVA": 0,
		"DOT11RMETHOD_ODS": 2,
	}
)

func (x AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod) Enum() *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod {
	p := new(AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[22].Descriptor()
}

func (AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[22]
}

func (x AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod.Descriptor instead.
func (AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 4, 1, 0}
}

type AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode int32

const (
	AccessPoints_AccessPoint_Ssids_Ssid_State_OPMODE_OPEN            AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode = 0
	AccessPoints_AccessPoint_Ssids_Ssid_State_OPMODE_WPA2_PERSONAL   AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode = 2
	AccessPoints_AccessPoint_Ssids_Ssid_State_OPMODE_WPA2_ENTERPRISE AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode = 3
)

// Enum value maps for AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode.
var (
	AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode_name = map[int32]string{
		0: "OPMODE_OPEN",
		2: "OPMODE_WPA2_PERSONAL",
		3: "OPMODE_WPA2_ENTERPRISE",
	}
	AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode_value = map[string]int32{
		"OPMODE_OPEN":            0,
		"OPMODE_WPA2_PERSONAL":   2,
		"OPMODE_WPA2_ENTERPRISE": 3,
	}
)

func (x AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode) Enum() *AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode {
	p := new(AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[23].Descriptor()
}

func (AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[23]
}

func (x AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode.Descriptor instead.
func (AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 7, 0}
}

type AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record int32

const (
	AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_RECORD_UNSET      AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record = 0
	AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_RECORD_START_STOP AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record = 1
	AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_RECORD_STOP       AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record = 2
)

// Enum value maps for AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record.
var (
	AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_name = map[int32]string{
		0: "RECORD_UNSET",
		1: "RECORD_START_STOP",
		2: "RECORD_STOP",
	}
	AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_value = map[string]int32{
		"RECORD_UNSET":      0,
		"RECORD_START_STOP": 1,
		"RECORD_STOP":       2,
	}
)

func (x AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record) Enum() *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record {
	p := new(AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[24].Descriptor()
}

func (AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[24]
}

func (x AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record.Descriptor instead.
func (AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 0, 1, 0, 0, 0}
}

type AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record int32

const (
	AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_RECORD_UNSET      AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record = 0
	AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_RECORD_START_STOP AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record = 1
	AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_RECORD_STOP       AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record = 2
)

// Enum value maps for AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record.
var (
	AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record_name = map[int32]string{
		0: "RECORD_UNSET",
		1: "RECORD_START_STOP",
		2: "RECORD_STOP",
	}
	AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record_value = map[string]int32{
		"RECORD_UNSET":      0,
		"RECORD_START_STOP": 1,
		"RECORD_STOP":       2,
	}
)

func (x AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record) Enum() *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record {
	p := new(AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[25].Descriptor()
}

func (AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[25]
}

func (x AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record.Descriptor instead.
func (AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 0, 1, 0, 1, 0}
}

type AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index int32

const (
	AccessPoints_AccessPoint_System_Cpus_Cpu_State_INDEX_UNSET AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index = 0
	AccessPoints_AccessPoint_System_Cpus_Cpu_State_INDEX_ALL   AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index = 1
)

// Enum value maps for AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index.
var (
	AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_name = map[int32]string{
		0: "INDEX_UNSET",
		1: "INDEX_ALL",
	}
	AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_value = map[string]int32{
		"INDEX_UNSET": 0,
		"INDEX_ALL":   1,
	}
)

func (x AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index) Enum() *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index {
	p := new(AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[26].Descriptor()
}

func (AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[26]
}

func (x AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index.Descriptor instead.
func (AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 4, 0, 0, 0}
}

type AccessPoints_AccessPoint_System_Cpus_CpuKey_Index int32

const (
	AccessPoints_AccessPoint_System_Cpus_CpuKey_INDEX_UNSET AccessPoints_AccessPoint_System_Cpus_CpuKey_Index = 0
	AccessPoints_AccessPoint_System_Cpus_CpuKey_INDEX_ALL   AccessPoints_AccessPoint_System_Cpus_CpuKey_Index = 1
)

// Enum value maps for AccessPoints_AccessPoint_System_Cpus_CpuKey_Index.
var (
	AccessPoints_AccessPoint_System_Cpus_CpuKey_Index_name = map[int32]string{
		0: "INDEX_UNSET",
		1: "INDEX_ALL",
	}
	AccessPoints_AccessPoint_System_Cpus_CpuKey_Index_value = map[string]int32{
		"INDEX_UNSET": 0,
		"INDEX_ALL":   1,
	}
)

func (x AccessPoints_AccessPoint_System_Cpus_CpuKey_Index) Enum() *AccessPoints_AccessPoint_System_Cpus_CpuKey_Index {
	p := new(AccessPoints_AccessPoint_System_Cpus_CpuKey_Index)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_System_Cpus_CpuKey_Index) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_System_Cpus_CpuKey_Index) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[27].Descriptor()
}

func (AccessPoints_AccessPoint_System_Cpus_CpuKey_Index) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[27]
}

func (x AccessPoints_AccessPoint_System_Cpus_CpuKey_Index) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Cpus_CpuKey_Index.Descriptor instead.
func (AccessPoints_AccessPoint_System_Cpus_CpuKey_Index) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 4, 1, 0}
}

type AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses int32

const (
	AccessPoints_AccessPoint_System_GrpcServer_Config_LISTENADDRESSES_UNSET AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses = 0
	AccessPoints_AccessPoint_System_GrpcServer_Config_LISTENADDRESSES_ANY   AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses = 1
)

// Enum value maps for AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses.
var (
	AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses_name = map[int32]string{
		0: "LISTENADDRESSES_UNSET",
		1: "LISTENADDRESSES_ANY",
	}
	AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses_value = map[string]int32{
		"LISTENADDRESSES_UNSET": 0,
		"LISTENADDRESSES_ANY":   1,
	}
)

func (x AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses) Enum() *AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses {
	p := new(AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[28].Descriptor()
}

func (AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[28]
}

func (x AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses.Descriptor instead.
func (AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 6, 0, 0}
}

type AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses int32

const (
	AccessPoints_AccessPoint_System_GrpcServer_State_LISTENADDRESSES_UNSET AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses = 0
	AccessPoints_AccessPoint_System_GrpcServer_State_LISTENADDRESSES_ANY   AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses = 1
)

// Enum value maps for AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses.
var (
	AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses_name = map[int32]string{
		0: "LISTENADDRESSES_UNSET",
		1: "LISTENADDRESSES_ANY",
	}
	AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses_value = map[string]int32{
		"LISTENADDRESSES_UNSET": 0,
		"LISTENADDRESSES_ANY":   1,
	}
)

func (x AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses) Enum() *AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses {
	p := new(AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[29].Descriptor()
}

func (AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[29]
}

func (x AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses.Descriptor instead.
func (AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 6, 1, 0}
}

type AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType int32

const (
	AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_ASSOCIATIONTYPE_SERVER AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType = 0
	AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_ASSOCIATIONTYPE_PEER   AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType = 2
	AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_ASSOCIATIONTYPE_POOL   AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType = 3
)

// Enum value maps for AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType.
var (
	AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_name = map[int32]string{
		0: "ASSOCIATIONTYPE_SERVER",
		2: "ASSOCIATIONTYPE_PEER",
		3: "ASSOCIATIONTYPE_POOL",
	}
	AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_value = map[string]int32{
		"ASSOCIATIONTYPE_SERVER": 0,
		"ASSOCIATIONTYPE_PEER":   2,
		"ASSOCIATIONTYPE_POOL":   3,
	}
)

func (x AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType) Enum() *AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType {
	p := new(AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[30].Descriptor()
}

func (AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[30]
}

func (x AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType.Descriptor instead.
func (AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11, 2, 0, 0, 0}
}

type AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType int32

const (
	AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_ASSOCIATIONTYPE_SERVER AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType = 0
	AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_ASSOCIATIONTYPE_PEER   AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType = 2
	AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_ASSOCIATIONTYPE_POOL   AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType = 3
)

// Enum value maps for AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType.
var (
	AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType_name = map[int32]string{
		0: "ASSOCIATIONTYPE_SERVER",
		2: "ASSOCIATIONTYPE_PEER",
		3: "ASSOCIATIONTYPE_POOL",
	}
	AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType_value = map[string]int32{
		"ASSOCIATIONTYPE_SERVER": 0,
		"ASSOCIATIONTYPE_PEER":   2,
		"ASSOCIATIONTYPE_POOL":   3,
	}
)

func (x AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType) Enum() *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType {
	p := new(AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[31].Descriptor()
}

func (AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[31]
}

func (x AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType.Descriptor instead.
func (AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11, 2, 0, 1, 0}
}

type AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion int32

const (
	AccessPoints_AccessPoint_System_SshServer_Config_PROTOCOLVERSION_V2    AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion = 0
	AccessPoints_AccessPoint_System_SshServer_Config_PROTOCOLVERSION_V1    AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion = 2
	AccessPoints_AccessPoint_System_SshServer_Config_PROTOCOLVERSION_V1_V2 AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion = 3
)

// Enum value maps for AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion.
var (
	AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_name = map[int32]string{
		0: "PROTOCOLVERSION_V2",
		2: "PROTOCOLVERSION_V1",
		3: "PROTOCOLVERSION_V1_V2",
	}
	AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_value = map[string]int32{
		"PROTOCOLVERSION_V2":    0,
		"PROTOCOLVERSION_V1":    2,
		"PROTOCOLVERSION_V1_V2": 3,
	}
)

func (x AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion) Enum() *AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion {
	p := new(AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[32].Descriptor()
}

func (AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[32]
}

func (x AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion.Descriptor instead.
func (AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 13, 0, 0}
}

type AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion int32

const (
	AccessPoints_AccessPoint_System_SshServer_State_PROTOCOLVERSION_V2    AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion = 0
	AccessPoints_AccessPoint_System_SshServer_State_PROTOCOLVERSION_V1    AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion = 2
	AccessPoints_AccessPoint_System_SshServer_State_PROTOCOLVERSION_V1_V2 AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion = 3
)

// Enum value maps for AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion.
var (
	AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion_name = map[int32]string{
		0: "PROTOCOLVERSION_V2",
		2: "PROTOCOLVERSION_V1",
		3: "PROTOCOLVERSION_V1_V2",
	}
	AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion_value = map[string]int32{
		"PROTOCOLVERSION_V2":    0,
		"PROTOCOLVERSION_V1":    2,
		"PROTOCOLVERSION_V1_V2": 3,
	}
)

func (x AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion) Enum() *AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion {
	p := new(AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion)
	*p = x
	return p
}

func (x AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_access_points_proto_enumTypes[33].Descriptor()
}

func (AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion) Type() protoreflect.EnumType {
	return &file_openconfig_access_points_proto_enumTypes[33]
}

func (x AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion.Descriptor instead.
func (AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 13, 1, 0}
}

type AccessPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessPoint []*AccessPoints_AccessPointKey `protobuf:"bytes,107793100,rep,name=access_point,json=accessPoint,proto3" json:"access_point,omitempty"`
}

func (x *AccessPoints) Reset() {
	*x = AccessPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints) ProtoMessage() {}

func (x *AccessPoints) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints.ProtoReflect.Descriptor instead.
func (*AccessPoints) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0}
}

func (x *AccessPoints) GetAccessPoint() []*AccessPoints_AccessPointKey {
	if x != nil {
		return x.AccessPoint
	}
	return nil
}

type AccessPoints_AccessPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignedApManagers *AccessPoints_AccessPoint_AssignedApManagers `protobuf:"bytes,478163348,opt,name=assigned_ap_managers,json=assignedApManagers,proto3" json:"assigned_ap_managers,omitempty"`
	Config             *AccessPoints_AccessPoint_Config             `protobuf:"bytes,520662849,opt,name=config,proto3" json:"config,omitempty"`
	Interfaces         *AccessPoints_AccessPoint_Interfaces         `protobuf:"bytes,317906415,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	Radios             *AccessPoints_AccessPoint_Radios             `protobuf:"bytes,276746939,opt,name=radios,proto3" json:"radios,omitempty"`
	Ssids              *AccessPoints_AccessPoint_Ssids              `protobuf:"bytes,318993297,opt,name=ssids,proto3" json:"ssids,omitempty"`
	System             *AccessPoints_AccessPoint_System             `protobuf:"bytes,118923792,opt,name=system,proto3" json:"system,omitempty"`
}

func (x *AccessPoints_AccessPoint) Reset() {
	*x = AccessPoints_AccessPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint) ProtoMessage() {}

func (x *AccessPoints_AccessPoint) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AccessPoints_AccessPoint) GetAssignedApManagers() *AccessPoints_AccessPoint_AssignedApManagers {
	if x != nil {
		return x.AssignedApManagers
	}
	return nil
}

func (x *AccessPoints_AccessPoint) GetConfig() *AccessPoints_AccessPoint_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint) GetInterfaces() *AccessPoints_AccessPoint_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *AccessPoints_AccessPoint) GetRadios() *AccessPoints_AccessPoint_Radios {
	if x != nil {
		return x.Radios
	}
	return nil
}

func (x *AccessPoints_AccessPoint) GetSsids() *AccessPoints_AccessPoint_Ssids {
	if x != nil {
		return x.Ssids
	}
	return nil
}

func (x *AccessPoints_AccessPoint) GetSystem() *AccessPoints_AccessPoint_System {
	if x != nil {
		return x.System
	}
	return nil
}

type AccessPoints_AccessPointKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname    string                    `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	AccessPoint *AccessPoints_AccessPoint `protobuf:"bytes,2,opt,name=access_point,json=accessPoint,proto3" json:"access_point,omitempty"`
}

func (x *AccessPoints_AccessPointKey) Reset() {
	*x = AccessPoints_AccessPointKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPointKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPointKey) ProtoMessage() {}

func (x *AccessPoints_AccessPointKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPointKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPointKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AccessPoints_AccessPointKey) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *AccessPoints_AccessPointKey) GetAccessPoint() *AccessPoints_AccessPoint {
	if x != nil {
		return x.AccessPoint
	}
	return nil
}

type AccessPoints_AccessPoint_AssignedApManagers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApManager []*AccessPoints_AccessPoint_AssignedApManagers_ApManagerKey `protobuf:"bytes,57137442,rep,name=ap_manager,json=apManager,proto3" json:"ap_manager,omitempty"`
}

func (x *AccessPoints_AccessPoint_AssignedApManagers) Reset() {
	*x = AccessPoints_AccessPoint_AssignedApManagers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_AssignedApManagers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_AssignedApManagers) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_AssignedApManagers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_AssignedApManagers.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_AssignedApManagers) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *AccessPoints_AccessPoint_AssignedApManagers) GetApManager() []*AccessPoints_AccessPoint_AssignedApManagers_ApManagerKey {
	if x != nil {
		return x.ApManager
	}
	return nil
}

type AccessPoints_AccessPoint_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname *ywrapper.StringValue `protobuf:"bytes,8891303,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *AccessPoints_AccessPoint_Config) Reset() {
	*x = AccessPoints_AccessPoint_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *AccessPoints_AccessPoint_Config) GetHostname() *ywrapper.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*AccessPoints_AccessPoint_Interfaces_InterfaceKey `protobuf:"bytes,38557199,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *AccessPoints_AccessPoint_Interfaces) GetInterface() []*AccessPoints_AccessPoint_Interfaces_InterfaceKey {
	if x != nil {
		return x.Interface
	}
	return nil
}

type AccessPoints_AccessPoint_Radios struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Radio []*AccessPoints_AccessPoint_Radios_RadioKey `protobuf:"bytes,488065651,rep,name=radio,proto3" json:"radio,omitempty"`
}

func (x *AccessPoints_AccessPoint_Radios) Reset() {
	*x = AccessPoints_AccessPoint_Radios{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Radios) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Radios) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Radios) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Radios.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Radios) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *AccessPoints_AccessPoint_Radios) GetRadio() []*AccessPoints_AccessPoint_Radios_RadioKey {
	if x != nil {
		return x.Radio
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid []*AccessPoints_AccessPoint_Ssids_SsidKey `protobuf:"bytes,25773317,rep,name=ssid,proto3" json:"ssid,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids) Reset() {
	*x = AccessPoints_AccessPoint_Ssids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *AccessPoints_AccessPoint_Ssids) GetSsid() []*AccessPoints_AccessPoint_Ssids_SsidKey {
	if x != nil {
		return x.Ssid
	}
	return nil
}

type AccessPoints_AccessPoint_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aaa          *AccessPoints_AccessPoint_System_Aaa          `protobuf:"bytes,310301406,opt,name=aaa,proto3" json:"aaa,omitempty"`
	Alarms       *AccessPoints_AccessPoint_System_Alarms       `protobuf:"bytes,428484193,opt,name=alarms,proto3" json:"alarms,omitempty"`
	Clock        *AccessPoints_AccessPoint_System_Clock        `protobuf:"bytes,273230439,opt,name=clock,proto3" json:"clock,omitempty"`
	Config       *AccessPoints_AccessPoint_System_Config       `protobuf:"bytes,154349349,opt,name=config,proto3" json:"config,omitempty"`
	Cpus         *AccessPoints_AccessPoint_System_Cpus         `protobuf:"bytes,16333042,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Dns          *AccessPoints_AccessPoint_System_Dns          `protobuf:"bytes,427303308,opt,name=dns,proto3" json:"dns,omitempty"`
	GrpcServer   *AccessPoints_AccessPoint_System_GrpcServer   `protobuf:"bytes,357773193,opt,name=grpc_server,json=grpcServer,proto3" json:"grpc_server,omitempty"`
	License      *AccessPoints_AccessPoint_System_License      `protobuf:"bytes,208825252,opt,name=license,proto3" json:"license,omitempty"`
	Logging      *AccessPoints_AccessPoint_System_Logging      `protobuf:"bytes,310453074,opt,name=logging,proto3" json:"logging,omitempty"`
	Memory       *AccessPoints_AccessPoint_System_Memory       `protobuf:"bytes,162584754,opt,name=memory,proto3" json:"memory,omitempty"`
	Messages     *AccessPoints_AccessPoint_System_Messages     `protobuf:"bytes,259372031,opt,name=messages,proto3" json:"messages,omitempty"`
	Ntp          *AccessPoints_AccessPoint_System_Ntp          `protobuf:"bytes,258554471,opt,name=ntp,proto3" json:"ntp,omitempty"`
	Processes    *AccessPoints_AccessPoint_System_Processes    `protobuf:"bytes,376522710,opt,name=processes,proto3" json:"processes,omitempty"`
	SshServer    *AccessPoints_AccessPoint_System_SshServer    `protobuf:"bytes,92192453,opt,name=ssh_server,json=sshServer,proto3" json:"ssh_server,omitempty"`
	State        *AccessPoints_AccessPoint_System_State        `protobuf:"bytes,84065178,opt,name=state,proto3" json:"state,omitempty"`
	TelnetServer *AccessPoints_AccessPoint_System_TelnetServer `protobuf:"bytes,151243057,opt,name=telnet_server,json=telnetServer,proto3" json:"telnet_server,omitempty"`
}

func (x *AccessPoints_AccessPoint_System) Reset() {
	*x = AccessPoints_AccessPoint_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (x *AccessPoints_AccessPoint_System) GetAaa() *AccessPoints_AccessPoint_System_Aaa {
	if x != nil {
		return x.Aaa
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetAlarms() *AccessPoints_AccessPoint_System_Alarms {
	if x != nil {
		return x.Alarms
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetClock() *AccessPoints_AccessPoint_System_Clock {
	if x != nil {
		return x.Clock
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetConfig() *AccessPoints_AccessPoint_System_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetCpus() *AccessPoints_AccessPoint_System_Cpus {
	if x != nil {
		return x.Cpus
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetDns() *AccessPoints_AccessPoint_System_Dns {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetGrpcServer() *AccessPoints_AccessPoint_System_GrpcServer {
	if x != nil {
		return x.GrpcServer
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetLicense() *AccessPoints_AccessPoint_System_License {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetLogging() *AccessPoints_AccessPoint_System_Logging {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetMemory() *AccessPoints_AccessPoint_System_Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetMessages() *AccessPoints_AccessPoint_System_Messages {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetNtp() *AccessPoints_AccessPoint_System_Ntp {
	if x != nil {
		return x.Ntp
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetProcesses() *AccessPoints_AccessPoint_System_Processes {
	if x != nil {
		return x.Processes
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetSshServer() *AccessPoints_AccessPoint_System_SshServer {
	if x != nil {
		return x.SshServer
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetState() *AccessPoints_AccessPoint_System_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System) GetTelnetServer() *AccessPoints_AccessPoint_System_TelnetServer {
	if x != nil {
		return x.TelnetServer
	}
	return nil
}

type AccessPoints_AccessPoint_AssignedApManagers_ApManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config `protobuf:"bytes,401060675,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_AssignedApManagers_ApManager_State  `protobuf:"bytes,83170980,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager) Reset() {
	*x = AccessPoints_AccessPoint_AssignedApManagers_ApManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_AssignedApManagers_ApManager) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_AssignedApManagers_ApManager.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_AssignedApManagers_ApManager) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager) GetConfig() *AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager) GetState() *AccessPoints_AccessPoint_AssignedApManagers_ApManager_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_AssignedApManagers_ApManagerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                                                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApManager *AccessPoints_AccessPoint_AssignedApManagers_ApManager `protobuf:"bytes,2,opt,name=ap_manager,json=apManager,proto3" json:"ap_manager,omitempty"`
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManagerKey) Reset() {
	*x = AccessPoints_AccessPoint_AssignedApManagers_ApManagerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManagerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_AssignedApManagers_ApManagerKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManagerKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_AssignedApManagers_ApManagerKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_AssignedApManagers_ApManagerKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManagerKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManagerKey) GetApManager() *AccessPoints_AccessPoint_AssignedApManagers_ApManager {
	if x != nil {
		return x.ApManager
	}
	return nil
}

type AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApManagerIpv4Address *ywrapper.StringValue   `protobuf:"bytes,420165418,opt,name=ap_manager_ipv4_address,json=apManagerIpv4Address,proto3" json:"ap_manager_ipv4_address,omitempty"`
	ApManagerIpv6Address []*ywrapper.StringValue `protobuf:"bytes,35007832,rep,name=ap_manager_ipv6_address,json=apManagerIpv6Address,proto3" json:"ap_manager_ipv6_address,omitempty"`
	Fqdn                 *ywrapper.StringValue   `protobuf:"bytes,235081911,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	Id                   *ywrapper.StringValue   `protobuf:"bytes,34871349,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) Reset() {
	*x = AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) GetApManagerIpv4Address() *ywrapper.StringValue {
	if x != nil {
		return x.ApManagerIpv4Address
	}
	return nil
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) GetApManagerIpv6Address() []*ywrapper.StringValue {
	if x != nil {
		return x.ApManagerIpv6Address
	}
	return nil
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) GetFqdn() *ywrapper.StringValue {
	if x != nil {
		return x.Fqdn
	}
	return nil
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type AccessPoints_AccessPoint_AssignedApManagers_ApManager_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApManagerIpv4Address *ywrapper.StringValue   `protobuf:"bytes,328704945,opt,name=ap_manager_ipv4_address,json=apManagerIpv4Address,proto3" json:"ap_manager_ipv4_address,omitempty"`
	ApManagerIpv6Address []*ywrapper.StringValue `protobuf:"bytes,454146723,rep,name=ap_manager_ipv6_address,json=apManagerIpv6Address,proto3" json:"ap_manager_ipv6_address,omitempty"`
	Fqdn                 *ywrapper.StringValue   `protobuf:"bytes,321879454,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	Id                   *ywrapper.StringValue   `protobuf:"bytes,43308820,opt,name=id,proto3" json:"id,omitempty"`
	Joined               *ywrapper.BoolValue     `protobuf:"bytes,518346540,opt,name=joined,proto3" json:"joined,omitempty"`
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) Reset() {
	*x = AccessPoints_AccessPoint_AssignedApManagers_ApManager_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_AssignedApManagers_ApManager_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) GetApManagerIpv4Address() *ywrapper.StringValue {
	if x != nil {
		return x.ApManagerIpv4Address
	}
	return nil
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) GetApManagerIpv6Address() []*ywrapper.StringValue {
	if x != nil {
		return x.ApManagerIpv6Address
	}
	return nil
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) GetFqdn() *ywrapper.StringValue {
	if x != nil {
		return x.Fqdn
	}
	return nil
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) GetJoined() *ywrapper.BoolValue {
	if x != nil {
		return x.Joined
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregation   *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation   `protobuf:"bytes,15975804,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	Config        *AccessPoints_AccessPoint_Interfaces_Interface_Config        `protobuf:"bytes,134106224,opt,name=config,proto3" json:"config,omitempty"`
	Ethernet      *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet      `protobuf:"bytes,104253835,opt,name=ethernet,proto3" json:"ethernet,omitempty"`
	State         *AccessPoints_AccessPoint_Interfaces_Interface_State         `protobuf:"bytes,304134889,opt,name=state,proto3" json:"state,omitempty"`
	Subinterfaces *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces `protobuf:"bytes,363246420,opt,name=subinterfaces,proto3" json:"subinterfaces,omitempty"`
	Tunnel        *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel        `protobuf:"bytes,116954896,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface) GetAggregation() *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface) GetEthernet() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface) GetSubinterfaces() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces {
	if x != nil {
		return x.Subinterfaces
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface) GetTunnel() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_InterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Interface *AccessPoints_AccessPoint_Interfaces_Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_InterfaceKey) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_InterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_InterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_InterfaceKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_InterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_InterfaceKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_InterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_InterfaceKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_InterfaceKey) GetInterface() *AccessPoints_AccessPoint_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_Config       `protobuf:"bytes,121571153,opt,name=config,proto3" json:"config,omitempty"`
	State        *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State        `protobuf:"bytes,298580038,opt,name=state,proto3" json:"state,omitempty"`
	SwitchedVlan *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan `protobuf:"bytes,357107438,opt,name=switched_vlan,json=switchedVlan,proto3" json:"switched_vlan,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Aggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Aggregation.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation) GetSwitchedVlan() *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan {
	if x != nil {
		return x.SwitchedVlan
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description  *ywrapper.StringValue       `protobuf:"bytes,131359419,opt,name=description,proto3" json:"description,omitempty"`
	Enabled      *ywrapper.BoolValue         `protobuf:"bytes,237319538,opt,name=enabled,proto3" json:"enabled,omitempty"`
	LoopbackMode *ywrapper.BoolValue         `protobuf:"bytes,365911860,opt,name=loopback_mode,json=loopbackMode,proto3" json:"loopback_mode,omitempty"`
	Mtu          *ywrapper.UintValue         `protobuf:"bytes,289416809,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Name         *ywrapper.StringValue       `protobuf:"bytes,517866778,opt,name=name,proto3" json:"name,omitempty"`
	Type         IETFInterfacesInterfaceType `protobuf:"varint,148338599,opt,name=type,proto3,enum=openconfig.IETFInterfacesInterfaceType" json:"type,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Config) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Config) GetLoopbackMode() *ywrapper.BoolValue {
	if x != nil {
		return x.LoopbackMode
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Config) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Config) GetType() IETFInterfacesInterfaceType {
	if x != nil {
		return x.Type
	}
	return IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_UNSET
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticatedSessions *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions `protobuf:"bytes,508734427,opt,name=authenticated_sessions,json=authenticatedSessions,proto3" json:"authenticated_sessions,omitempty"`
	Config                *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config                `protobuf:"bytes,282942428,opt,name=config,proto3" json:"config,omitempty"`
	Dot1X                 *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X                 `protobuf:"bytes,15068200,opt,name=dot1x,proto3" json:"dot1x,omitempty"`
	Poe                   *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe                   `protobuf:"bytes,439855622,opt,name=poe,proto3" json:"poe,omitempty"`
	State                 *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State                 `protobuf:"bytes,527304789,opt,name=state,proto3" json:"state,omitempty"`
	SwitchedVlan          *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan          `protobuf:"bytes,367018709,opt,name=switched_vlan,json=switchedVlan,proto3" json:"switched_vlan,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet) GetAuthenticatedSessions() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions {
	if x != nil {
		return x.AuthenticatedSessions
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet) GetDot1X() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X {
	if x != nil {
		return x.Dot1X
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet) GetPoe() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe {
	if x != nil {
		return x.Poe
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet) GetSwitchedVlan() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan {
	if x != nil {
		return x.SwitchedVlan
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminStatus  AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus `protobuf:"varint,151457212,opt,name=admin_status,json=adminStatus,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus" json:"admin_status,omitempty"`
	Counters     *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters   `protobuf:"bytes,139012067,opt,name=counters,proto3" json:"counters,omitempty"`
	Description  *ywrapper.StringValue                                           `protobuf:"bytes,506968610,opt,name=description,proto3" json:"description,omitempty"`
	Enabled      *ywrapper.BoolValue                                             `protobuf:"bytes,301962543,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Ifindex      *ywrapper.UintValue                                             `protobuf:"bytes,137227115,opt,name=ifindex,proto3" json:"ifindex,omitempty"`
	LastChange   *ywrapper.UintValue                                             `protobuf:"bytes,82708029,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	Logical      *ywrapper.BoolValue                                             `protobuf:"bytes,498386853,opt,name=logical,proto3" json:"logical,omitempty"`
	LoopbackMode *ywrapper.BoolValue                                             `protobuf:"bytes,380443437,opt,name=loopback_mode,json=loopbackMode,proto3" json:"loopback_mode,omitempty"`
	Mtu          *ywrapper.UintValue                                             `protobuf:"bytes,129408336,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Name         *ywrapper.StringValue                                           `protobuf:"bytes,417432477,opt,name=name,proto3" json:"name,omitempty"`
	OperStatus   AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus  `protobuf:"varint,28661619,opt,name=oper_status,json=operStatus,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus" json:"oper_status,omitempty"`
	Type         IETFInterfacesInterfaceType                                     `protobuf:"varint,489332428,opt,name=type,proto3,enum=openconfig.IETFInterfacesInterfaceType" json:"type,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) GetAdminStatus() AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_State_ADMINSTATUS_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) GetCounters() *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) GetIfindex() *ywrapper.UintValue {
	if x != nil {
		return x.Ifindex
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) GetLastChange() *ywrapper.UintValue {
	if x != nil {
		return x.LastChange
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) GetLogical() *ywrapper.BoolValue {
	if x != nil {
		return x.Logical
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) GetLoopbackMode() *ywrapper.BoolValue {
	if x != nil {
		return x.LoopbackMode
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) GetOperStatus() AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus {
	if x != nil {
		return x.OperStatus
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_State_OPERSTATUS_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State) GetType() IETFInterfacesInterfaceType {
	if x != nil {
		return x.Type
	}
	return IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_UNSET
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subinterface []*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_SubinterfaceKey `protobuf:"bytes,231671388,rep,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces) GetSubinterface() []*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_SubinterfaceKey {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config `protobuf:"bytes,415917605,opt,name=config,proto3" json:"config,omitempty"`
	Ipv4   *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4   `protobuf:"bytes,356794162,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6   *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6   `protobuf:"bytes,356794160,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State  `protobuf:"bytes,70060186,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel) GetIpv4() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel) GetIpv6() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LagType  OpenconfigIfAggregateAggregationType `protobuf:"varint,407651281,opt,name=lag_type,json=lagType,proto3,enum=openconfig.OpenconfigIfAggregateAggregationType" json:"lag_type,omitempty"`
	MinLinks *ywrapper.UintValue                  `protobuf:"bytes,150119952,opt,name=min_links,json=minLinks,proto3" json:"min_links,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_Config) GetLagType() OpenconfigIfAggregateAggregationType {
	if x != nil {
		return x.LagType
	}
	return OpenconfigIfAggregateAggregationType_OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_Config) GetMinLinks() *ywrapper.UintValue {
	if x != nil {
		return x.MinLinks
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LagSpeed *ywrapper.UintValue                  `protobuf:"bytes,502450577,opt,name=lag_speed,json=lagSpeed,proto3" json:"lag_speed,omitempty"`
	LagType  OpenconfigIfAggregateAggregationType `protobuf:"varint,194939904,opt,name=lag_type,json=lagType,proto3,enum=openconfig.OpenconfigIfAggregateAggregationType" json:"lag_type,omitempty"`
	Member   []*ywrapper.StringValue              `protobuf:"bytes,411636903,rep,name=member,proto3" json:"member,omitempty"`
	MinLinks *ywrapper.UintValue                  `protobuf:"bytes,185132615,opt,name=min_links,json=minLinks,proto3" json:"min_links,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State) GetLagSpeed() *ywrapper.UintValue {
	if x != nil {
		return x.LagSpeed
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State) GetLagType() OpenconfigIfAggregateAggregationType {
	if x != nil {
		return x.LagType
	}
	return OpenconfigIfAggregateAggregationType_OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State) GetMember() []*ywrapper.StringValue {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State) GetMinLinks() *ywrapper.UintValue {
	if x != nil {
		return x.MinLinks
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config `protobuf:"bytes,64682655,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State  `protobuf:"bytes,11098192,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0, 2}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessVlan    *ywrapper.UintValue                                                                              `protobuf:"bytes,12209450,opt,name=access_vlan,json=accessVlan,proto3" json:"access_vlan,omitempty"`
	InterfaceMode OpenconfigVlanVlanModeType                                                                       `protobuf:"varint,385339521,opt,name=interface_mode,json=interfaceMode,proto3,enum=openconfig.OpenconfigVlanVlanModeType" json:"interface_mode,omitempty"`
	NativeVlan    *ywrapper.UintValue                                                                              `protobuf:"bytes,246789107,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	TrunkVlans    []*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion `protobuf:"bytes,128650609,rep,name=trunk_vlans,json=trunkVlans,proto3" json:"trunk_vlans,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0, 2, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config) GetAccessVlan() *ywrapper.UintValue {
	if x != nil {
		return x.AccessVlan
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config) GetInterfaceMode() OpenconfigVlanVlanModeType {
	if x != nil {
		return x.InterfaceMode
	}
	return OpenconfigVlanVlanModeType_OPENCONFIGVLANVLANMODETYPE_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config) GetNativeVlan() *ywrapper.UintValue {
	if x != nil {
		return x.NativeVlan
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config) GetTrunkVlans() []*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion {
	if x != nil {
		return x.TrunkVlans
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessVlan    *ywrapper.UintValue                                                                             `protobuf:"bytes,312588917,opt,name=access_vlan,json=accessVlan,proto3" json:"access_vlan,omitempty"`
	InterfaceMode OpenconfigVlanVlanModeType                                                                      `protobuf:"varint,347731208,opt,name=interface_mode,json=interfaceMode,proto3,enum=openconfig.OpenconfigVlanVlanModeType" json:"interface_mode,omitempty"`
	NativeVlan    *ywrapper.UintValue                                                                             `protobuf:"bytes,75179916,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	TrunkVlans    []*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion `protobuf:"bytes,374471462,rep,name=trunk_vlans,json=trunkVlans,proto3" json:"trunk_vlans,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0, 2, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State) GetAccessVlan() *ywrapper.UintValue {
	if x != nil {
		return x.AccessVlan
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State) GetInterfaceMode() OpenconfigVlanVlanModeType {
	if x != nil {
		return x.InterfaceMode
	}
	return OpenconfigVlanVlanModeType_OPENCONFIGVLANVLANMODETYPE_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State) GetNativeVlan() *ywrapper.UintValue {
	if x != nil {
		return x.NativeVlan
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State) GetTrunkVlans() []*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion {
	if x != nil {
		return x.TrunkVlans
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrunkVlansString string `protobuf:"bytes,172306103,opt,name=trunk_vlans_string,json=trunkVlansString,proto3" json:"trunk_vlans_string,omitempty"`
	TrunkVlansUint64 uint64 `protobuf:"varint,134554250,opt,name=trunk_vlans_uint64,json=trunkVlansUint64,proto3" json:"trunk_vlans_uint64,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0, 2, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion) GetTrunkVlansString() string {
	if x != nil {
		return x.TrunkVlansString
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion) GetTrunkVlansUint64() uint64 {
	if x != nil {
		return x.TrunkVlansUint64
	}
	return 0
}

type AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrunkVlansString string `protobuf:"bytes,365409878,opt,name=trunk_vlans_string,json=trunkVlansString,proto3" json:"trunk_vlans_string,omitempty"`
	TrunkVlansUint64 uint64 `protobuf:"varint,230717591,opt,name=trunk_vlans_uint64,json=trunkVlansUint64,proto3" json:"trunk_vlans_uint64,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0, 2, 1, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion) GetTrunkVlansString() string {
	if x != nil {
		return x.TrunkVlansString
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion) GetTrunkVlansUint64() uint64 {
	if x != nil {
		return x.TrunkVlansUint64
	}
	return 0
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticatedSession []*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey `protobuf:"bytes,57791656,rep,name=authenticated_session,json=authenticatedSession,proto3" json:"authenticated_session,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions) GetAuthenticatedSession() []*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey {
	if x != nil {
		return x.AuthenticatedSession
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoNegotiate     *ywrapper.BoolValue                                                      `protobuf:"bytes,401705185,opt,name=auto_negotiate,json=autoNegotiate,proto3" json:"auto_negotiate,omitempty"`
	DuplexMode        AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode `protobuf:"varint,127376535,opt,name=duplex_mode,json=duplexMode,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode" json:"duplex_mode,omitempty"`
	EnableFlowControl *ywrapper.BoolValue                                                      `protobuf:"bytes,349251951,opt,name=enable_flow_control,json=enableFlowControl,proto3" json:"enable_flow_control,omitempty"`
	MacAddress        *ywrapper.StringValue                                                    `protobuf:"bytes,336950819,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	PortSpeed         OpenconfigIfEthernetETHERNETSPEED                                        `protobuf:"varint,383849496,opt,name=port_speed,json=portSpeed,proto3,enum=openconfig.OpenconfigIfEthernetETHERNETSPEED" json:"port_speed,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config) GetAutoNegotiate() *ywrapper.BoolValue {
	if x != nil {
		return x.AutoNegotiate
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config) GetDuplexMode() AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode {
	if x != nil {
		return x.DuplexMode
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DUPLEXMODE_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config) GetEnableFlowControl() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableFlowControl
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config) GetMacAddress() *ywrapper.StringValue {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config) GetPortSpeed() OpenconfigIfEthernetETHERNETSPEED {
	if x != nil {
		return x.PortSpeed
	}
	return OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_UNSET
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config `protobuf:"bytes,309423885,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State  `protobuf:"bytes,281422402,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 2}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_Config `protobuf:"bytes,137952519,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State  `protobuf:"bytes,25382520,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 3}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoNegotiate        *ywrapper.BoolValue                                                               `protobuf:"bytes,300504750,opt,name=auto_negotiate,json=autoNegotiate,proto3" json:"auto_negotiate,omitempty"`
	Counters             *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters            `protobuf:"bytes,274525591,opt,name=counters,proto3" json:"counters,omitempty"`
	DuplexMode           AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode           `protobuf:"varint,526153430,opt,name=duplex_mode,json=duplexMode,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode" json:"duplex_mode,omitempty"`
	EnableFlowControl    *ywrapper.BoolValue                                                               `protobuf:"bytes,26903746,opt,name=enable_flow_control,json=enableFlowControl,proto3" json:"enable_flow_control,omitempty"`
	HwMacAddress         *ywrapper.StringValue                                                             `protobuf:"bytes,126729014,opt,name=hw_mac_address,json=hwMacAddress,proto3" json:"hw_mac_address,omitempty"`
	MacAddress           *ywrapper.StringValue                                                             `protobuf:"bytes,24382086,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	NegotiatedDuplexMode AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode `protobuf:"varint,94144353,opt,name=negotiated_duplex_mode,json=negotiatedDuplexMode,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode" json:"negotiated_duplex_mode,omitempty"`
	NegotiatedPortSpeed  OpenconfigIfEthernetETHERNETSPEED                                                 `protobuf:"varint,512239390,opt,name=negotiated_port_speed,json=negotiatedPortSpeed,proto3,enum=openconfig.OpenconfigIfEthernetETHERNETSPEED" json:"negotiated_port_speed,omitempty"`
	PortSpeed            OpenconfigIfEthernetETHERNETSPEED                                                 `protobuf:"varint,512796919,opt,name=port_speed,json=portSpeed,proto3,enum=openconfig.OpenconfigIfEthernetETHERNETSPEED" json:"port_speed,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 4}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State) GetAutoNegotiate() *ywrapper.BoolValue {
	if x != nil {
		return x.AutoNegotiate
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State) GetCounters() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State) GetDuplexMode() AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode {
	if x != nil {
		return x.DuplexMode
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DUPLEXMODE_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State) GetEnableFlowControl() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableFlowControl
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State) GetHwMacAddress() *ywrapper.StringValue {
	if x != nil {
		return x.HwMacAddress
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State) GetMacAddress() *ywrapper.StringValue {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State) GetNegotiatedDuplexMode() AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode {
	if x != nil {
		return x.NegotiatedDuplexMode
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NEGOTIATEDDUPLEXMODE_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State) GetNegotiatedPortSpeed() OpenconfigIfEthernetETHERNETSPEED {
	if x != nil {
		return x.NegotiatedPortSpeed
	}
	return OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State) GetPortSpeed() OpenconfigIfEthernetETHERNETSPEED {
	if x != nil {
		return x.PortSpeed
	}
	return OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_UNSET
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config       `protobuf:"bytes,406466682,opt,name=config,proto3" json:"config,omitempty"`
	Dot1XVlanMap *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap `protobuf:"bytes,96872933,opt,name=dot1x_vlan_map,json=dot1xVlanMap,proto3" json:"dot1x_vlan_map,omitempty"`
	State        *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State        `protobuf:"bytes,36517783,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 5}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan) GetDot1XVlanMap() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap {
	if x != nil {
		return x.Dot1XVlanMap
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State `protobuf:"bytes,447663810,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac                  string                                                                                             `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	AuthenticatedSession *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession `protobuf:"bytes,2,opt,name=authenticated_session,json=authenticatedSession,proto3" json:"authenticated_session,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey) GetAuthenticatedSession() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession {
	if x != nil {
		return x.AuthenticatedSession
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac       *ywrapper.StringValue                                                                                          `protobuf:"bytes,364398602,opt,name=mac,proto3" json:"mac,omitempty"`
	SessionId *ywrapper.StringValue                                                                                          `protobuf:"bytes,203466711,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Status    AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status `protobuf:"varint,243239887,opt,name=status,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status" json:"status,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) GetMac() *ywrapper.StringValue {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) GetSessionId() *ywrapper.StringValue {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) GetStatus() AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status {
	if x != nil {
		return x.Status
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_STATUS_UNSET
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AuthFailVlan:
	//	*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanString
	//	*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanUint64
	AuthFailVlan           isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlan `protobuf_oneof:"auth_fail_vlan"`
	AuthenticatePort       *ywrapper.BoolValue                                                                `protobuf:"bytes,498796017,opt,name=authenticate_port,json=authenticatePort,proto3" json:"authenticate_port,omitempty"`
	HostMode               AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode       `protobuf:"varint,289940534,opt,name=host_mode,json=hostMode,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode" json:"host_mode,omitempty"`
	MaxRequests            *ywrapper.UintValue                                                                `protobuf:"bytes,44807989,opt,name=max_requests,json=maxRequests,proto3" json:"max_requests,omitempty"`
	ReauthenticateInterval *ywrapper.UintValue                                                                `protobuf:"bytes,58357890,opt,name=reauthenticate_interval,json=reauthenticateInterval,proto3" json:"reauthenticate_interval,omitempty"`
	RetransmitInterval     *ywrapper.UintValue                                                                `protobuf:"bytes,309853979,opt,name=retransmit_interval,json=retransmitInterval,proto3" json:"retransmit_interval,omitempty"`
	// Types that are assignable to ServerFailVlan:
	//	*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanString
	//	*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanUint64
	ServerFailVlan    isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlan `protobuf_oneof:"server_fail_vlan"`
	SupplicantTimeout *ywrapper.UintValue                                                                  `protobuf:"bytes,54773685,opt,name=supplicant_timeout,json=supplicantTimeout,proto3" json:"supplicant_timeout,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 2, 0}
}

func (m *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) GetAuthFailVlan() isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlan {
	if m != nil {
		return m.AuthFailVlan
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) GetAuthFailVlanString() string {
	if x, ok := x.GetAuthFailVlan().(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanString); ok {
		return x.AuthFailVlanString
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) GetAuthFailVlanUint64() uint64 {
	if x, ok := x.GetAuthFailVlan().(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanUint64); ok {
		return x.AuthFailVlanUint64
	}
	return 0
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) GetAuthenticatePort() *ywrapper.BoolValue {
	if x != nil {
		return x.AuthenticatePort
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) GetHostMode() AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode {
	if x != nil {
		return x.HostMode
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HOSTMODE_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) GetMaxRequests() *ywrapper.UintValue {
	if x != nil {
		return x.MaxRequests
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) GetReauthenticateInterval() *ywrapper.UintValue {
	if x != nil {
		return x.ReauthenticateInterval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) GetRetransmitInterval() *ywrapper.UintValue {
	if x != nil {
		return x.RetransmitInterval
	}
	return nil
}

func (m *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) GetServerFailVlan() isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlan {
	if m != nil {
		return m.ServerFailVlan
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) GetServerFailVlanString() string {
	if x, ok := x.GetServerFailVlan().(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanString); ok {
		return x.ServerFailVlanString
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) GetServerFailVlanUint64() uint64 {
	if x, ok := x.GetServerFailVlan().(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanUint64); ok {
		return x.ServerFailVlanUint64
	}
	return 0
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config) GetSupplicantTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.SupplicantTimeout
	}
	return nil
}

type isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlan interface {
	isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlan()
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanString struct {
	AuthFailVlanString string `protobuf:"bytes,76696769,opt,name=auth_fail_vlan_string,json=authFailVlanString,proto3,oneof"`
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanUint64 struct {
	AuthFailVlanUint64 uint64 `protobuf:"varint,322217188,opt,name=auth_fail_vlan_uint64,json=authFailVlanUint64,proto3,oneof"`
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanString) isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlan() {
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanUint64) isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlan() {
}

type isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlan interface {
	isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlan()
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanString struct {
	ServerFailVlanString string `protobuf:"bytes,66560012,opt,name=server_fail_vlan_string,json=serverFailVlanString,proto3,oneof"`
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanUint64 struct {
	ServerFailVlanUint64 uint64 `protobuf:"varint,178876181,opt,name=server_fail_vlan_uint64,json=serverFailVlanUint64,proto3,oneof"`
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanString) isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlan() {
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanUint64) isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlan() {
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AuthFailVlan:
	//	*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanString
	//	*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanUint64
	AuthFailVlan           isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlan `protobuf_oneof:"auth_fail_vlan"`
	AuthenticatePort       *ywrapper.BoolValue                                                               `protobuf:"bytes,338695010,opt,name=authenticate_port,json=authenticatePort,proto3" json:"authenticate_port,omitempty"`
	HostMode               AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode       `protobuf:"varint,419646393,opt,name=host_mode,json=hostMode,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode" json:"host_mode,omitempty"`
	MaxRequests            *ywrapper.UintValue                                                               `protobuf:"bytes,20014196,opt,name=max_requests,json=maxRequests,proto3" json:"max_requests,omitempty"`
	ReauthenticateInterval *ywrapper.UintValue                                                               `protobuf:"bytes,279556105,opt,name=reauthenticate_interval,json=reauthenticateInterval,proto3" json:"reauthenticate_interval,omitempty"`
	RetransmitInterval     *ywrapper.UintValue                                                               `protobuf:"bytes,260659556,opt,name=retransmit_interval,json=retransmitInterval,proto3" json:"retransmit_interval,omitempty"`
	// Types that are assignable to ServerFailVlan:
	//	*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanString
	//	*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanUint64
	ServerFailVlan    isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlan `protobuf_oneof:"server_fail_vlan"`
	SupplicantTimeout *ywrapper.UintValue                                                                 `protobuf:"bytes,87284336,opt,name=supplicant_timeout,json=supplicantTimeout,proto3" json:"supplicant_timeout,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 2, 1}
}

func (m *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) GetAuthFailVlan() isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlan {
	if m != nil {
		return m.AuthFailVlan
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) GetAuthFailVlanString() string {
	if x, ok := x.GetAuthFailVlan().(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanString); ok {
		return x.AuthFailVlanString
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) GetAuthFailVlanUint64() uint64 {
	if x, ok := x.GetAuthFailVlan().(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanUint64); ok {
		return x.AuthFailVlanUint64
	}
	return 0
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) GetAuthenticatePort() *ywrapper.BoolValue {
	if x != nil {
		return x.AuthenticatePort
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) GetHostMode() AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode {
	if x != nil {
		return x.HostMode
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HOSTMODE_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) GetMaxRequests() *ywrapper.UintValue {
	if x != nil {
		return x.MaxRequests
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) GetReauthenticateInterval() *ywrapper.UintValue {
	if x != nil {
		return x.ReauthenticateInterval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) GetRetransmitInterval() *ywrapper.UintValue {
	if x != nil {
		return x.RetransmitInterval
	}
	return nil
}

func (m *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) GetServerFailVlan() isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlan {
	if m != nil {
		return m.ServerFailVlan
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) GetServerFailVlanString() string {
	if x, ok := x.GetServerFailVlan().(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanString); ok {
		return x.ServerFailVlanString
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) GetServerFailVlanUint64() uint64 {
	if x, ok := x.GetServerFailVlan().(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanUint64); ok {
		return x.ServerFailVlanUint64
	}
	return 0
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State) GetSupplicantTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.SupplicantTimeout
	}
	return nil
}

type isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlan interface {
	isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlan()
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanString struct {
	AuthFailVlanString string `protobuf:"bytes,385697254,opt,name=auth_fail_vlan_string,json=authFailVlanString,proto3,oneof"`
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanUint64 struct {
	AuthFailVlanUint64 uint64 `protobuf:"varint,397968263,opt,name=auth_fail_vlan_uint64,json=authFailVlanUint64,proto3,oneof"`
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanString) isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlan() {
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanUint64) isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlan() {
}

type isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlan interface {
	isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlan()
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanString struct {
	ServerFailVlanString string `protobuf:"bytes,387093707,opt,name=server_fail_vlan_string,json=serverFailVlanString,proto3,oneof"`
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanUint64 struct {
	ServerFailVlanUint64 uint64 `protobuf:"varint,48390894,opt,name=server_fail_vlan_uint64,json=serverFailVlanUint64,proto3,oneof"`
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanString) isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlan() {
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanUint64) isAccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlan() {
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,210274841,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 3, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    *ywrapper.BoolValue      `protobuf:"bytes,278321706,opt,name=enabled,proto3" json:"enabled,omitempty"`
	PowerClass *ywrapper.UintValue      `protobuf:"bytes,284089465,opt,name=power_class,json=powerClass,proto3" json:"power_class,omitempty"`
	PowerUsed  *ywrapper.Decimal64Value `protobuf:"bytes,514956220,opt,name=power_used,json=powerUsed,proto3" json:"power_used,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 3, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State) GetPowerClass() *ywrapper.UintValue {
	if x != nil {
		return x.PowerClass
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State) GetPowerUsed() *ywrapper.Decimal64Value {
	if x != nil {
		return x.PowerUsed
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	In_8021QFrames      *ywrapper.UintValue `protobuf:"bytes,57029791,opt,name=in_8021q_frames,json=in8021qFrames,proto3" json:"in_8021q_frames,omitempty"`
	InBlockErrors       *ywrapper.UintValue `protobuf:"bytes,82551381,opt,name=in_block_errors,json=inBlockErrors,proto3" json:"in_block_errors,omitempty"`
	InCrcErrors         *ywrapper.UintValue `protobuf:"bytes,37111466,opt,name=in_crc_errors,json=inCrcErrors,proto3" json:"in_crc_errors,omitempty"`
	InFragmentFrames    *ywrapper.UintValue `protobuf:"bytes,518837987,opt,name=in_fragment_frames,json=inFragmentFrames,proto3" json:"in_fragment_frames,omitempty"`
	InJabberFrames      *ywrapper.UintValue `protobuf:"bytes,416271525,opt,name=in_jabber_frames,json=inJabberFrames,proto3" json:"in_jabber_frames,omitempty"`
	InMacControlFrames  *ywrapper.UintValue `protobuf:"bytes,428361416,opt,name=in_mac_control_frames,json=inMacControlFrames,proto3" json:"in_mac_control_frames,omitempty"`
	InMacPauseFrames    *ywrapper.UintValue `protobuf:"bytes,115734583,opt,name=in_mac_pause_frames,json=inMacPauseFrames,proto3" json:"in_mac_pause_frames,omitempty"`
	InOversizeFrames    *ywrapper.UintValue `protobuf:"bytes,236856572,opt,name=in_oversize_frames,json=inOversizeFrames,proto3" json:"in_oversize_frames,omitempty"`
	InUndersizeFrames   *ywrapper.UintValue `protobuf:"bytes,195733376,opt,name=in_undersize_frames,json=inUndersizeFrames,proto3" json:"in_undersize_frames,omitempty"`
	Out_8021QFrames     *ywrapper.UintValue `protobuf:"bytes,135357780,opt,name=out_8021q_frames,json=out8021qFrames,proto3" json:"out_8021q_frames,omitempty"`
	OutMacControlFrames *ywrapper.UintValue `protobuf:"bytes,508103095,opt,name=out_mac_control_frames,json=outMacControlFrames,proto3" json:"out_mac_control_frames,omitempty"`
	OutMacPauseFrames   *ywrapper.UintValue `protobuf:"bytes,345998060,opt,name=out_mac_pause_frames,json=outMacPauseFrames,proto3" json:"out_mac_pause_frames,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 4, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) GetIn_8021QFrames() *ywrapper.UintValue {
	if x != nil {
		return x.In_8021QFrames
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) GetInBlockErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InBlockErrors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) GetInCrcErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InCrcErrors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) GetInFragmentFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InFragmentFrames
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) GetInJabberFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InJabberFrames
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) GetInMacControlFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InMacControlFrames
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) GetInMacPauseFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InMacPauseFrames
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) GetInOversizeFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InOversizeFrames
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) GetInUndersizeFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InUndersizeFrames
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) GetOut_8021QFrames() *ywrapper.UintValue {
	if x != nil {
		return x.Out_8021QFrames
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) GetOutMacControlFrames() *ywrapper.UintValue {
	if x != nil {
		return x.OutMacControlFrames
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters) GetOutMacPauseFrames() *ywrapper.UintValue {
	if x != nil {
		return x.OutMacPauseFrames
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessVlan    *ywrapper.UintValue                                                                           `protobuf:"bytes,131890891,opt,name=access_vlan,json=accessVlan,proto3" json:"access_vlan,omitempty"`
	InterfaceMode OpenconfigVlanVlanModeType                                                                    `protobuf:"varint,40241390,opt,name=interface_mode,json=interfaceMode,proto3,enum=openconfig.OpenconfigVlanVlanModeType" json:"interface_mode,omitempty"`
	NativeVlan    *ywrapper.UintValue                                                                           `protobuf:"bytes,422222618,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	TrunkVlans    []*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion `protobuf:"bytes,429065660,rep,name=trunk_vlans,json=trunkVlans,proto3" json:"trunk_vlans,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 5, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config) GetAccessVlan() *ywrapper.UintValue {
	if x != nil {
		return x.AccessVlan
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config) GetInterfaceMode() OpenconfigVlanVlanModeType {
	if x != nil {
		return x.InterfaceMode
	}
	return OpenconfigVlanVlanModeType_OPENCONFIGVLANVLANMODETYPE_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config) GetNativeVlan() *ywrapper.UintValue {
	if x != nil {
		return x.NativeVlan
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config) GetTrunkVlans() []*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion {
	if x != nil {
		return x.TrunkVlans
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanName []*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey `protobuf:"bytes,170859681,rep,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 5, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap) GetVlanName() []*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey {
	if x != nil {
		return x.VlanName
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessVlan    *ywrapper.UintValue                                                                          `protobuf:"bytes,330834818,opt,name=access_vlan,json=accessVlan,proto3" json:"access_vlan,omitempty"`
	InterfaceMode OpenconfigVlanVlanModeType                                                                   `protobuf:"varint,279335049,opt,name=interface_mode,json=interfaceMode,proto3,enum=openconfig.OpenconfigVlanVlanModeType" json:"interface_mode,omitempty"`
	NativeVlan    *ywrapper.UintValue                                                                          `protobuf:"bytes,340022731,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	TrunkVlans    []*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion `protobuf:"bytes,503602025,rep,name=trunk_vlans,json=trunkVlans,proto3" json:"trunk_vlans,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 5, 2}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State) GetAccessVlan() *ywrapper.UintValue {
	if x != nil {
		return x.AccessVlan
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State) GetInterfaceMode() OpenconfigVlanVlanModeType {
	if x != nil {
		return x.InterfaceMode
	}
	return OpenconfigVlanVlanModeType_OPENCONFIGVLANVLANMODETYPE_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State) GetNativeVlan() *ywrapper.UintValue {
	if x != nil {
		return x.NativeVlan
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State) GetTrunkVlans() []*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion {
	if x != nil {
		return x.TrunkVlans
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrunkVlansString string `protobuf:"bytes,233110532,opt,name=trunk_vlans_string,json=trunkVlansString,proto3" json:"trunk_vlans_string,omitempty"`
	TrunkVlansUint64 uint64 `protobuf:"varint,145492141,opt,name=trunk_vlans_uint64,json=trunkVlansUint64,proto3" json:"trunk_vlans_uint64,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 5, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion) GetTrunkVlansString() string {
	if x != nil {
		return x.TrunkVlansString
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion) GetTrunkVlansUint64() uint64 {
	if x != nil {
		return x.TrunkVlansUint64
	}
	return 0
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config `protobuf:"bytes,133972262,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State  `protobuf:"bytes,185906323,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 5, 1, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanNameKey string                                                                                     `protobuf:"bytes,1,opt,name=vlan_name_key,json=vlanNameKey,proto3" json:"vlan_name_key,omitempty"`
	VlanName    *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName `protobuf:"bytes,2,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 5, 1, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey) GetVlanNameKey() string {
	if x != nil {
		return x.VlanNameKey
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey) GetVlanName() *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName {
	if x != nil {
		return x.VlanName
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *ywrapper.UintValue   `protobuf:"bytes,503517198,opt,name=id,proto3" json:"id,omitempty"`
	VlanName *ywrapper.StringValue `protobuf:"bytes,512938086,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 5, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config) GetId() *ywrapper.UintValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config) GetVlanName() *ywrapper.StringValue {
	if x != nil {
		return x.VlanName
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *ywrapper.UintValue   `protobuf:"bytes,101659685,opt,name=id,proto3" json:"id,omitempty"`
	VlanName *ywrapper.StringValue `protobuf:"bytes,518117551,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 5, 1, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State) GetId() *ywrapper.UintValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State) GetVlanName() *ywrapper.StringValue {
	if x != nil {
		return x.VlanName
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrunkVlansString string `protobuf:"bytes,242105999,opt,name=trunk_vlans_string,json=trunkVlansString,proto3" json:"trunk_vlans_string,omitempty"`
	TrunkVlansUint64 uint64 `protobuf:"varint,460529794,opt,name=trunk_vlans_uint64,json=trunkVlansUint64,proto3" json:"trunk_vlans_uint64,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 5, 2, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion) GetTrunkVlansString() string {
	if x != nil {
		return x.TrunkVlansString
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion) GetTrunkVlansUint64() uint64 {
	if x != nil {
		return x.TrunkVlansUint64
	}
	return 0
}

type AccessPoints_AccessPoint_Interfaces_Interface_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarrierTransitions *ywrapper.UintValue `protobuf:"bytes,300013113,opt,name=carrier_transitions,json=carrierTransitions,proto3" json:"carrier_transitions,omitempty"`
	InBroadcastPkts    *ywrapper.UintValue `protobuf:"bytes,216194730,opt,name=in_broadcast_pkts,json=inBroadcastPkts,proto3" json:"in_broadcast_pkts,omitempty"`
	InDiscards         *ywrapper.UintValue `protobuf:"bytes,423706057,opt,name=in_discards,json=inDiscards,proto3" json:"in_discards,omitempty"`
	InErrors           *ywrapper.UintValue `protobuf:"bytes,397138517,opt,name=in_errors,json=inErrors,proto3" json:"in_errors,omitempty"`
	InFcsErrors        *ywrapper.UintValue `protobuf:"bytes,529701156,opt,name=in_fcs_errors,json=inFcsErrors,proto3" json:"in_fcs_errors,omitempty"`
	InMulticastPkts    *ywrapper.UintValue `protobuf:"bytes,398632159,opt,name=in_multicast_pkts,json=inMulticastPkts,proto3" json:"in_multicast_pkts,omitempty"`
	InOctets           *ywrapper.UintValue `protobuf:"bytes,234525368,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts             *ywrapper.UintValue `protobuf:"bytes,14330524,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	InUnicastPkts      *ywrapper.UintValue `protobuf:"bytes,252991780,opt,name=in_unicast_pkts,json=inUnicastPkts,proto3" json:"in_unicast_pkts,omitempty"`
	InUnknownProtos    *ywrapper.UintValue `protobuf:"bytes,443363762,opt,name=in_unknown_protos,json=inUnknownProtos,proto3" json:"in_unknown_protos,omitempty"`
	LastClear          *ywrapper.UintValue `protobuf:"bytes,443062258,opt,name=last_clear,json=lastClear,proto3" json:"last_clear,omitempty"`
	OutBroadcastPkts   *ywrapper.UintValue `protobuf:"bytes,531385225,opt,name=out_broadcast_pkts,json=outBroadcastPkts,proto3" json:"out_broadcast_pkts,omitempty"`
	OutDiscards        *ywrapper.UintValue `protobuf:"bytes,209140870,opt,name=out_discards,json=outDiscards,proto3" json:"out_discards,omitempty"`
	OutErrors          *ywrapper.UintValue `protobuf:"bytes,93124374,opt,name=out_errors,json=outErrors,proto3" json:"out_errors,omitempty"`
	OutMulticastPkts   *ywrapper.UintValue `protobuf:"bytes,92621084,opt,name=out_multicast_pkts,json=outMulticastPkts,proto3" json:"out_multicast_pkts,omitempty"`
	OutOctets          *ywrapper.UintValue `protobuf:"bytes,305942359,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts            *ywrapper.UintValue `protobuf:"bytes,524665527,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
	OutUnicastPkts     *ywrapper.UintValue `protobuf:"bytes,256548471,opt,name=out_unicast_pkts,json=outUnicastPkts,proto3" json:"out_unicast_pkts,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_State_Counters.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetCarrierTransitions() *ywrapper.UintValue {
	if x != nil {
		return x.CarrierTransitions
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetInBroadcastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InBroadcastPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetInDiscards() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscards
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetInErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InErrors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetInFcsErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InFcsErrors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetInMulticastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InMulticastPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetInUnicastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InUnicastPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetInUnknownProtos() *ywrapper.UintValue {
	if x != nil {
		return x.InUnknownProtos
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetLastClear() *ywrapper.UintValue {
	if x != nil {
		return x.LastClear
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetOutBroadcastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutBroadcastPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetOutDiscards() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscards
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetOutErrors() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetOutMulticastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutMulticastPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_State_Counters) GetOutUnicastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutUnicastPkts
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config `protobuf:"bytes,11731761,opt,name=config,proto3" json:"config,omitempty"`
	Ipv4   *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4   `protobuf:"bytes,518303166,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6   *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6   `protobuf:"bytes,518303164,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State  `protobuf:"bytes,338679718,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface) GetIpv4() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface) GetIpv6() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_SubinterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        uint64                                                                    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Subinterface *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface `protobuf:"bytes,2,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_SubinterfaceKey) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_SubinterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_SubinterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_SubinterfaceKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_SubinterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_SubinterfaceKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_SubinterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_SubinterfaceKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_SubinterfaceKey) GetSubinterface() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *ywrapper.StringValue `protobuf:"bytes,206251674,opt,name=description,proto3" json:"description,omitempty"`
	Enabled     *ywrapper.BoolValue   `protobuf:"bytes,367063143,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Index       *ywrapper.UintValue   `protobuf:"bytes,325808544,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses `protobuf:"bytes,489818347,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Config    *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config    `protobuf:"bytes,449673743,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors `protobuf:"bytes,107440794,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	ProxyArp  *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp  `protobuf:"bytes,178406783,opt,name=proxy_arp,json=proxyArp,proto3" json:"proxy_arp,omitempty"`
	State     *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State     `protobuf:"bytes,71314176,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) GetAddresses() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) GetNeighbors() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) GetProxyArp() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp {
	if x != nil {
		return x.ProxyArp
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses           *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses           `protobuf:"bytes,164472573,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Config              *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config              `protobuf:"bytes,59358481,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors           *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors           `protobuf:"bytes,87833332,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	RouterAdvertisement *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement `protobuf:"bytes,226792692,opt,name=router_advertisement,json=routerAdvertisement,proto3" json:"router_advertisement,omitempty"`
	State               *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State               `protobuf:"bytes,443633670,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) GetAddresses() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) GetNeighbors() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) GetRouterAdvertisement() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement {
	if x != nil {
		return x.RouterAdvertisement
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminStatus AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus `protobuf:"varint,459957681,opt,name=admin_status,json=adminStatus,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus" json:"admin_status,omitempty"`
	Counters    *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters   `protobuf:"bytes,408078586,opt,name=counters,proto3" json:"counters,omitempty"`
	Description *ywrapper.StringValue                                                                      `protobuf:"bytes,230948169,opt,name=description,proto3" json:"description,omitempty"`
	Enabled     *ywrapper.BoolValue                                                                        `protobuf:"bytes,226293268,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Ifindex     *ywrapper.UintValue                                                                        `protobuf:"bytes,244839968,opt,name=ifindex,proto3" json:"ifindex,omitempty"`
	Index       *ywrapper.UintValue                                                                        `protobuf:"bytes,339319263,opt,name=index,proto3" json:"index,omitempty"`
	LastChange  *ywrapper.UintValue                                                                        `protobuf:"bytes,299619614,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	Logical     *ywrapper.BoolValue                                                                        `protobuf:"bytes,154122162,opt,name=logical,proto3" json:"logical,omitempty"`
	Name        *ywrapper.StringValue                                                                      `protobuf:"bytes,517671852,opt,name=name,proto3" json:"name,omitempty"`
	OperStatus  AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus  `protobuf:"varint,211351800,opt,name=oper_status,json=operStatus,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus" json:"oper_status,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 3}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) GetAdminStatus() AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_ADMINSTATUS_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) GetCounters() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) GetIfindex() *ywrapper.UintValue {
	if x != nil {
		return x.Ifindex
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) GetLastChange() *ywrapper.UintValue {
	if x != nil {
		return x.LastChange
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) GetLogical() *ywrapper.BoolValue {
	if x != nil {
		return x.Logical
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State) GetOperStatus() AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus {
	if x != nil {
		return x.OperStatus
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_UNSET
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey `protobuf:"bytes,525449126,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses) GetAddress() []*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey {
	if x != nil {
		return x.Address
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DhcpClient *ywrapper.BoolValue `protobuf:"bytes,167245681,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	Enabled    *ywrapper.BoolValue `protobuf:"bytes,23444337,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu        *ywrapper.UintValue `protobuf:"bytes,512433946,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey `protobuf:"bytes,481943807,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 2}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors) GetNeighbor() []*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config `protobuf:"bytes,421692608,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State  `protobuf:"bytes,462783161,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 3}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters   *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters `protobuf:"bytes,307091192,opt,name=counters,proto3" json:"counters,omitempty"`
	DhcpClient *ywrapper.BoolValue                                                                           `protobuf:"bytes,535895402,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	Enabled    *ywrapper.BoolValue                                                                           `protobuf:"bytes,30147906,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu        *ywrapper.UintValue                                                                           `protobuf:"bytes,136627961,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 4}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) GetCounters() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config `protobuf:"bytes,163713831,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State  `protobuf:"bytes,231935000,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string                                                                                           `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Address *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey) GetAddress() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue `protobuf:"bytes,218519109,opt,name=ip,proto3" json:"ip,omitempty"`
	PrefixLength *ywrapper.UintValue   `protobuf:"bytes,13243071,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue         `protobuf:"bytes,220619604,opt,name=ip,proto3" json:"ip,omitempty"`
	Origin       OpenconfigIfIpIpAddressOrigin `protobuf:"varint,414834293,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpIpAddressOrigin" json:"origin,omitempty"`
	PrefixLength *ywrapper.UintValue           `protobuf:"bytes,81919104,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 0, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) GetOrigin() OpenconfigIfIpIpAddressOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config `protobuf:"bytes,329907008,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State  `protobuf:"bytes,487866937,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 2, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string                                                                                            `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Neighbor *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 2, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey) GetNeighbor() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue `protobuf:"bytes,175044940,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue `protobuf:"bytes,329042844,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 2, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue        `protobuf:"bytes,185727487,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue        `protobuf:"bytes,511580619,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
	Origin           OpenconfigIfIpNeighborOrigin `protobuf:"varint,312036994,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpNeighborOrigin" json:"origin,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 2, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) GetOrigin() OpenconfigIfIpNeighborOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpNeighborOrigin_OPENCONFIGIFIPNEIGHBORORIGIN_UNSET
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode `protobuf:"varint,164777326,opt,name=mode,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode" json:"mode,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 3, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config) GetMode() AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode {
	if x != nil {
		return x.Mode
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_MODE_DISABLE
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode `protobuf:"varint,124722565,opt,name=mode,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode" json:"mode,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 3, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State) GetMode() AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode {
	if x != nil {
		return x.Mode
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_MODE_DISABLE
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InDiscardedPkts    *ywrapper.UintValue `protobuf:"bytes,309126989,opt,name=in_discarded_pkts,json=inDiscardedPkts,proto3" json:"in_discarded_pkts,omitempty"`
	InErrorPkts        *ywrapper.UintValue `protobuf:"bytes,191529500,opt,name=in_error_pkts,json=inErrorPkts,proto3" json:"in_error_pkts,omitempty"`
	InForwardedOctets  *ywrapper.UintValue `protobuf:"bytes,127120446,opt,name=in_forwarded_octets,json=inForwardedOctets,proto3" json:"in_forwarded_octets,omitempty"`
	InForwardedPkts    *ywrapper.UintValue `protobuf:"bytes,399144614,opt,name=in_forwarded_pkts,json=inForwardedPkts,proto3" json:"in_forwarded_pkts,omitempty"`
	InOctets           *ywrapper.UintValue `protobuf:"bytes,80356863,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts             *ywrapper.UintValue `protobuf:"bytes,298621119,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	OutDiscardedPkts   *ywrapper.UintValue `protobuf:"bytes,204708880,opt,name=out_discarded_pkts,json=outDiscardedPkts,proto3" json:"out_discarded_pkts,omitempty"`
	OutErrorPkts       *ywrapper.UintValue `protobuf:"bytes,458147081,opt,name=out_error_pkts,json=outErrorPkts,proto3" json:"out_error_pkts,omitempty"`
	OutForwardedOctets *ywrapper.UintValue `protobuf:"bytes,113558003,opt,name=out_forwarded_octets,json=outForwardedOctets,proto3" json:"out_forwarded_octets,omitempty"`
	OutForwardedPkts   *ywrapper.UintValue `protobuf:"bytes,209986027,opt,name=out_forwarded_pkts,json=outForwardedPkts,proto3" json:"out_forwarded_pkts,omitempty"`
	OutOctets          *ywrapper.UintValue `protobuf:"bytes,336478214,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts            *ywrapper.UintValue `protobuf:"bytes,51754126,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 1, 4, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetInDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetInErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InErrorPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetInForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetInForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetOutDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetOutErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrorPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetOutForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetOutForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey `protobuf:"bytes,15074296,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses) GetAddress() []*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey {
	if x != nil {
		return x.Address
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DhcpClient             *ywrapper.BoolValue `protobuf:"bytes,122400915,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	DupAddrDetectTransmits *ywrapper.UintValue `protobuf:"bytes,165474995,opt,name=dup_addr_detect_transmits,json=dupAddrDetectTransmits,proto3" json:"dup_addr_detect_transmits,omitempty"`
	Enabled                *ywrapper.BoolValue `protobuf:"bytes,386709703,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu                    *ywrapper.UintValue `protobuf:"bytes,377859288,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) GetDupAddrDetectTransmits() *ywrapper.UintValue {
	if x != nil {
		return x.DupAddrDetectTransmits
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey `protobuf:"bytes,97965813,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 2}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors) GetNeighbor() []*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config `protobuf:"bytes,131898489,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State  `protobuf:"bytes,80511694,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 3}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters               *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters `protobuf:"bytes,23510234,opt,name=counters,proto3" json:"counters,omitempty"`
	DhcpClient             *ywrapper.BoolValue                                                                           `protobuf:"bytes,149313752,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	DupAddrDetectTransmits *ywrapper.UintValue                                                                           `protobuf:"bytes,21744192,opt,name=dup_addr_detect_transmits,json=dupAddrDetectTransmits,proto3" json:"dup_addr_detect_transmits,omitempty"`
	Enabled                *ywrapper.BoolValue                                                                           `protobuf:"bytes,208715892,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu                    *ywrapper.UintValue                                                                           `protobuf:"bytes,426553227,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 4}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) GetCounters() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) GetDupAddrDetectTransmits() *ywrapper.UintValue {
	if x != nil {
		return x.DupAddrDetectTransmits
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config `protobuf:"bytes,442061693,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State  `protobuf:"bytes,184230386,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string                                                                                           `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Address *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey) GetAddress() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue `protobuf:"bytes,355191795,opt,name=ip,proto3" json:"ip,omitempty"`
	PrefixLength *ywrapper.UintValue   `protobuf:"bytes,94169825,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue                                                                                        `protobuf:"bytes,343134854,opt,name=ip,proto3" json:"ip,omitempty"`
	Origin       OpenconfigIfIpIpAddressOrigin                                                                                `protobuf:"varint,352613831,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpIpAddressOrigin" json:"origin,omitempty"`
	PrefixLength *ywrapper.UintValue                                                                                          `protobuf:"bytes,303714502,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	Status       AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status `protobuf:"varint,390624319,opt,name=status,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status" json:"status,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 0, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) GetOrigin() OpenconfigIfIpIpAddressOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) GetStatus() AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status {
	if x != nil {
		return x.Status
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_UNSET
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config `protobuf:"bytes,76051354,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State  `protobuf:"bytes,471322679,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 2, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string                                                                                            `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Neighbor *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 2, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey) GetNeighbor() *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue `protobuf:"bytes,498786366,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue `protobuf:"bytes,491864182,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 2, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue                                                                                                `protobuf:"bytes,475392149,opt,name=ip,proto3" json:"ip,omitempty"`
	IsRouter         *ywrapper.BoolValue                                                                                                  `protobuf:"bytes,308960708,opt,name=is_router,json=isRouter,proto3" json:"is_router,omitempty"`
	LinkLayerAddress *ywrapper.StringValue                                                                                                `protobuf:"bytes,144172641,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
	NeighborState    AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState `protobuf:"varint,305485940,opt,name=neighbor_state,json=neighborState,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState" json:"neighbor_state,omitempty"`
	Origin           OpenconfigIfIpNeighborOrigin                                                                                         `protobuf:"varint,175404136,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpNeighborOrigin" json:"origin,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 2, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) GetIsRouter() *ywrapper.BoolValue {
	if x != nil {
		return x.IsRouter
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) GetNeighborState() AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState {
	if x != nil {
		return x.NeighborState
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) GetOrigin() OpenconfigIfIpNeighborOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpNeighborOrigin_OPENCONFIGIFIPNEIGHBORORIGIN_UNSET
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval *ywrapper.UintValue `protobuf:"bytes,164105791,opt,name=interval,proto3" json:"interval,omitempty"`
	Lifetime *ywrapper.UintValue `protobuf:"bytes,434758853,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	Suppress *ywrapper.BoolValue `protobuf:"bytes,6790917,opt,name=suppress,proto3" json:"suppress,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 3, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) GetLifetime() *ywrapper.UintValue {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) GetSuppress() *ywrapper.BoolValue {
	if x != nil {
		return x.Suppress
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval *ywrapper.UintValue `protobuf:"bytes,393731594,opt,name=interval,proto3" json:"interval,omitempty"`
	Lifetime *ywrapper.UintValue `protobuf:"bytes,227252828,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	Suppress *ywrapper.BoolValue `protobuf:"bytes,313990792,opt,name=suppress,proto3" json:"suppress,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 3, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) GetLifetime() *ywrapper.UintValue {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) GetSuppress() *ywrapper.BoolValue {
	if x != nil {
		return x.Suppress
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InDiscardedPkts    *ywrapper.UintValue `protobuf:"bytes,434819771,opt,name=in_discarded_pkts,json=inDiscardedPkts,proto3" json:"in_discarded_pkts,omitempty"`
	InErrorPkts        *ywrapper.UintValue `protobuf:"bytes,326831190,opt,name=in_error_pkts,json=inErrorPkts,proto3" json:"in_error_pkts,omitempty"`
	InForwardedOctets  *ywrapper.UintValue `protobuf:"bytes,203147328,opt,name=in_forwarded_octets,json=inForwardedOctets,proto3" json:"in_forwarded_octets,omitempty"`
	InForwardedPkts    *ywrapper.UintValue `protobuf:"bytes,234005028,opt,name=in_forwarded_pkts,json=inForwardedPkts,proto3" json:"in_forwarded_pkts,omitempty"`
	InOctets           *ywrapper.UintValue `protobuf:"bytes,340132477,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts             *ywrapper.UintValue `protobuf:"bytes,384110345,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	OutDiscardedPkts   *ywrapper.UintValue `protobuf:"bytes,21491042,opt,name=out_discarded_pkts,json=outDiscardedPkts,proto3" json:"out_discarded_pkts,omitempty"`
	OutErrorPkts       *ywrapper.UintValue `protobuf:"bytes,315194879,opt,name=out_error_pkts,json=outErrorPkts,proto3" json:"out_error_pkts,omitempty"`
	OutForwardedOctets *ywrapper.UintValue `protobuf:"bytes,395721617,opt,name=out_forwarded_octets,json=outForwardedOctets,proto3" json:"out_forwarded_octets,omitempty"`
	OutForwardedPkts   *ywrapper.UintValue `protobuf:"bytes,453476917,opt,name=out_forwarded_pkts,json=outForwardedPkts,proto3" json:"out_forwarded_pkts,omitempty"`
	OutOctets          *ywrapper.UintValue `protobuf:"bytes,388666992,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts            *ywrapper.UintValue `protobuf:"bytes,112978260,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 2, 4, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetInDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetInErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InErrorPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetInForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetInForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetOutDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetOutErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrorPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetOutForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetOutForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarrierTransitions *ywrapper.UintValue `protobuf:"bytes,322217988,opt,name=carrier_transitions,json=carrierTransitions,proto3" json:"carrier_transitions,omitempty"`
	InBroadcastPkts    *ywrapper.UintValue `protobuf:"bytes,458634743,opt,name=in_broadcast_pkts,json=inBroadcastPkts,proto3" json:"in_broadcast_pkts,omitempty"`
	InDiscards         *ywrapper.UintValue `protobuf:"bytes,161387864,opt,name=in_discards,json=inDiscards,proto3" json:"in_discards,omitempty"`
	InErrors           *ywrapper.UintValue `protobuf:"bytes,535147860,opt,name=in_errors,json=inErrors,proto3" json:"in_errors,omitempty"`
	InFcsErrors        *ywrapper.UintValue `protobuf:"bytes,400304777,opt,name=in_fcs_errors,json=inFcsErrors,proto3" json:"in_fcs_errors,omitempty"`
	InMulticastPkts    *ywrapper.UintValue `protobuf:"bytes,290615694,opt,name=in_multicast_pkts,json=inMulticastPkts,proto3" json:"in_multicast_pkts,omitempty"`
	InOctets           *ywrapper.UintValue `protobuf:"bytes,432730013,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts             *ywrapper.UintValue `protobuf:"bytes,372973097,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	InUnicastPkts      *ywrapper.UintValue `protobuf:"bytes,11980997,opt,name=in_unicast_pkts,json=inUnicastPkts,proto3" json:"in_unicast_pkts,omitempty"`
	InUnknownProtos    *ywrapper.UintValue `protobuf:"bytes,484971999,opt,name=in_unknown_protos,json=inUnknownProtos,proto3" json:"in_unknown_protos,omitempty"`
	LastClear          *ywrapper.UintValue `protobuf:"bytes,459679121,opt,name=last_clear,json=lastClear,proto3" json:"last_clear,omitempty"`
	OutBroadcastPkts   *ywrapper.UintValue `protobuf:"bytes,113348514,opt,name=out_broadcast_pkts,json=outBroadcastPkts,proto3" json:"out_broadcast_pkts,omitempty"`
	OutDiscards        *ywrapper.UintValue `protobuf:"bytes,246095169,opt,name=out_discards,json=outDiscards,proto3" json:"out_discards,omitempty"`
	OutErrors          *ywrapper.UintValue `protobuf:"bytes,205760589,opt,name=out_errors,json=outErrors,proto3" json:"out_errors,omitempty"`
	OutMulticastPkts   *ywrapper.UintValue `protobuf:"bytes,500905911,opt,name=out_multicast_pkts,json=outMulticastPkts,proto3" json:"out_multicast_pkts,omitempty"`
	OutOctets          *ywrapper.UintValue `protobuf:"bytes,54578448,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts            *ywrapper.UintValue `protobuf:"bytes,400620788,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
	OutUnicastPkts     *ywrapper.UintValue `protobuf:"bytes,318738668,opt,name=out_unicast_pkts,json=outUnicastPkts,proto3" json:"out_unicast_pkts,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0, 3, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetCarrierTransitions() *ywrapper.UintValue {
	if x != nil {
		return x.CarrierTransitions
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInBroadcastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InBroadcastPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInDiscards() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscards
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InErrors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInFcsErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InFcsErrors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInMulticastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InMulticastPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInUnicastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InUnicastPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInUnknownProtos() *ywrapper.UintValue {
	if x != nil {
		return x.InUnknownProtos
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetLastClear() *ywrapper.UintValue {
	if x != nil {
		return x.LastClear
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutBroadcastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutBroadcastPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutDiscards() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscards
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutErrors() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutMulticastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutMulticastPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutUnicastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutUnicastPkts
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dst    *ywrapper.StringValue `protobuf:"bytes,300829993,opt,name=dst,proto3" json:"dst,omitempty"`
	GreKey *ywrapper.UintValue   `protobuf:"bytes,457830426,opt,name=gre_key,json=greKey,proto3" json:"gre_key,omitempty"`
	Src    *ywrapper.StringValue `protobuf:"bytes,180576562,opt,name=src,proto3" json:"src,omitempty"`
	Ttl    *ywrapper.UintValue   `protobuf:"bytes,180826756,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config) GetDst() *ywrapper.StringValue {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config) GetGreKey() *ywrapper.UintValue {
	if x != nil {
		return x.GreKey
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config) GetSrc() *ywrapper.StringValue {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config) GetTtl() *ywrapper.UintValue {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses `protobuf:"bytes,496190023,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Config    *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config    `protobuf:"bytes,48829555,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors `protobuf:"bytes,364902566,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	ProxyArp  *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp  `protobuf:"bytes,495493835,opt,name=proxy_arp,json=proxyArp,proto3" json:"proxy_arp,omitempty"`
	State     *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State     `protobuf:"bytes,166830548,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4) GetAddresses() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4) GetNeighbors() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4) GetProxyArp() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp {
	if x != nil {
		return x.ProxyArp
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses           *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses           `protobuf:"bytes,16850585,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Config              *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config              `protobuf:"bytes,78491589,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors           *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors           `protobuf:"bytes,471974944,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	RouterAdvertisement *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement `protobuf:"bytes,450396824,opt,name=router_advertisement,json=routerAdvertisement,proto3" json:"router_advertisement,omitempty"`
	State               *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State               `protobuf:"bytes,101914810,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6) GetAddresses() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6) GetNeighbors() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6) GetRouterAdvertisement() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement {
	if x != nil {
		return x.RouterAdvertisement
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dst    *ywrapper.StringValue `protobuf:"bytes,281088102,opt,name=dst,proto3" json:"dst,omitempty"`
	GreKey *ywrapper.UintValue   `protobuf:"bytes,307118709,opt,name=gre_key,json=greKey,proto3" json:"gre_key,omitempty"`
	Src    *ywrapper.StringValue `protobuf:"bytes,126293557,opt,name=src,proto3" json:"src,omitempty"`
	Ttl    *ywrapper.UintValue   `protobuf:"bytes,194536879,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 3}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State) GetDst() *ywrapper.StringValue {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State) GetGreKey() *ywrapper.UintValue {
	if x != nil {
		return x.GreKey
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State) GetSrc() *ywrapper.StringValue {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State) GetTtl() *ywrapper.UintValue {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey `protobuf:"bytes,83265746,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses) GetAddress() []*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey {
	if x != nil {
		return x.Address
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DhcpClient *ywrapper.BoolValue `protobuf:"bytes,146016957,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	Enabled    *ywrapper.BoolValue `protobuf:"bytes,146834053,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu        *ywrapper.UintValue `protobuf:"bytes,456796142,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey `protobuf:"bytes,254042619,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 2}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors) GetNeighbor() []*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config `protobuf:"bytes,56534428,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State  `protobuf:"bytes,216725525,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 3}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters   *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters `protobuf:"bytes,398698772,opt,name=counters,proto3" json:"counters,omitempty"`
	DhcpClient *ywrapper.BoolValue                                                       `protobuf:"bytes,30144198,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	Enabled    *ywrapper.BoolValue                                                       `protobuf:"bytes,168313974,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu        *ywrapper.UintValue                                                       `protobuf:"bytes,174180701,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 4}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State) GetCounters() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config `protobuf:"bytes,267929747,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State  `protobuf:"bytes,347219316,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string                                                                       `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Address *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey) GetAddress() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue `protobuf:"bytes,221745201,opt,name=ip,proto3" json:"ip,omitempty"`
	PrefixLength *ywrapper.UintValue   `protobuf:"bytes,69233635,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue         `protobuf:"bytes,533844880,opt,name=ip,proto3" json:"ip,omitempty"`
	Origin       OpenconfigIfIpIpAddressOrigin `protobuf:"varint,415607001,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpIpAddressOrigin" json:"origin,omitempty"`
	PrefixLength *ywrapper.UintValue           `protobuf:"bytes,142739108,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 0, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) GetOrigin() OpenconfigIfIpIpAddressOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config `protobuf:"bytes,50670380,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State  `protobuf:"bytes,329276197,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 2, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string                                                                        `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Neighbor *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 2, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey) GetNeighbor() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue `protobuf:"bytes,43746232,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue `protobuf:"bytes,54494304,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 2, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue        `protobuf:"bytes,125786731,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue        `protobuf:"bytes,257562335,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
	Origin           OpenconfigIfIpNeighborOrigin `protobuf:"varint,318001510,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpNeighborOrigin" json:"origin,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 2, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) GetOrigin() OpenconfigIfIpNeighborOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpNeighborOrigin_OPENCONFIGIFIPNEIGHBORORIGIN_UNSET
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode `protobuf:"varint,51495562,opt,name=mode,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode" json:"mode,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 3, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config) GetMode() AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode {
	if x != nil {
		return x.Mode
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_MODE_DISABLE
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode `protobuf:"varint,213139617,opt,name=mode,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode" json:"mode,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 3, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State) GetMode() AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode {
	if x != nil {
		return x.Mode
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_MODE_DISABLE
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InDiscardedPkts    *ywrapper.UintValue `protobuf:"bytes,183694497,opt,name=in_discarded_pkts,json=inDiscardedPkts,proto3" json:"in_discarded_pkts,omitempty"`
	InErrorPkts        *ywrapper.UintValue `protobuf:"bytes,53917936,opt,name=in_error_pkts,json=inErrorPkts,proto3" json:"in_error_pkts,omitempty"`
	InForwardedOctets  *ywrapper.UintValue `protobuf:"bytes,372630346,opt,name=in_forwarded_octets,json=inForwardedOctets,proto3" json:"in_forwarded_octets,omitempty"`
	InForwardedPkts    *ywrapper.UintValue `protobuf:"bytes,358696586,opt,name=in_forwarded_pkts,json=inForwardedPkts,proto3" json:"in_forwarded_pkts,omitempty"`
	InOctets           *ywrapper.UintValue `protobuf:"bytes,445538019,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts             *ywrapper.UintValue `protobuf:"bytes,391410139,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	OutDiscardedPkts   *ywrapper.UintValue `protobuf:"bytes,186160588,opt,name=out_discarded_pkts,json=outDiscardedPkts,proto3" json:"out_discarded_pkts,omitempty"`
	OutErrorPkts       *ywrapper.UintValue `protobuf:"bytes,300705941,opt,name=out_error_pkts,json=outErrorPkts,proto3" json:"out_error_pkts,omitempty"`
	OutForwardedOctets *ywrapper.UintValue `protobuf:"bytes,451247207,opt,name=out_forwarded_octets,json=outForwardedOctets,proto3" json:"out_forwarded_octets,omitempty"`
	OutForwardedPkts   *ywrapper.UintValue `protobuf:"bytes,461243783,opt,name=out_forwarded_pkts,json=outForwardedPkts,proto3" json:"out_forwarded_pkts,omitempty"`
	OutOctets          *ywrapper.UintValue `protobuf:"bytes,295030786,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts            *ywrapper.UintValue `protobuf:"bytes,509324706,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 1, 4, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetInDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetInErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InErrorPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetInForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetInForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetOutDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetOutErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrorPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetOutForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetOutForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey `protobuf:"bytes,384925380,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses) GetAddress() []*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey {
	if x != nil {
		return x.Address
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DhcpClient             *ywrapper.BoolValue `protobuf:"bytes,521580911,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	DupAddrDetectTransmits *ywrapper.UintValue `protobuf:"bytes,480793791,opt,name=dup_addr_detect_transmits,json=dupAddrDetectTransmits,proto3" json:"dup_addr_detect_transmits,omitempty"`
	Enabled                *ywrapper.BoolValue `protobuf:"bytes,522302443,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu                    *ywrapper.UintValue `protobuf:"bytes,470158908,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config) GetDupAddrDetectTransmits() *ywrapper.UintValue {
	if x != nil {
		return x.DupAddrDetectTransmits
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey `protobuf:"bytes,217740529,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 2}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors) GetNeighbor() []*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config `protobuf:"bytes,431305629,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State  `protobuf:"bytes,329077650,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 3}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters               *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters `protobuf:"bytes,495297014,opt,name=counters,proto3" json:"counters,omitempty"`
	DhcpClient             *ywrapper.BoolValue                                                       `protobuf:"bytes,48776052,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	DupAddrDetectTransmits *ywrapper.UintValue                                                       `protobuf:"bytes,262496684,opt,name=dup_addr_detect_transmits,json=dupAddrDetectTransmits,proto3" json:"dup_addr_detect_transmits,omitempty"`
	Enabled                *ywrapper.BoolValue                                                       `protobuf:"bytes,367652632,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu                    *ywrapper.UintValue                                                       `protobuf:"bytes,467377919,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 4}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State) GetCounters() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State) GetDupAddrDetectTransmits() *ywrapper.UintValue {
	if x != nil {
		return x.DupAddrDetectTransmits
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config `protobuf:"bytes,314239977,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State  `protobuf:"bytes,476201406,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string                                                                       `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Address *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey) GetAddress() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue `protobuf:"bytes,4872751,opt,name=ip,proto3" json:"ip,omitempty"`
	PrefixLength *ywrapper.UintValue   `protobuf:"bytes,132366165,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue                                                                    `protobuf:"bytes,314007554,opt,name=ip,proto3" json:"ip,omitempty"`
	Origin       OpenconfigIfIpIpAddressOrigin                                                            `protobuf:"varint,76332475,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpIpAddressOrigin" json:"origin,omitempty"`
	PrefixLength *ywrapper.UintValue                                                                      `protobuf:"bytes,19988186,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	Status       AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status `protobuf:"varint,273933891,opt,name=status,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status" json:"status,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 0, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) GetOrigin() OpenconfigIfIpIpAddressOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) GetStatus() AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status {
	if x != nil {
		return x.Status
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_UNSET
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config `protobuf:"bytes,515688982,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State  `protobuf:"bytes,480238531,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 2, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor) GetConfig() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor) GetState() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string                                                                        `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Neighbor *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 2, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey) GetNeighbor() *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue `protobuf:"bytes,254541770,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue `protobuf:"bytes,304113866,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 2, 0, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue                                                                            `protobuf:"bytes,190412193,opt,name=ip,proto3" json:"ip,omitempty"`
	IsRouter         *ywrapper.BoolValue                                                                              `protobuf:"bytes,478039984,opt,name=is_router,json=isRouter,proto3" json:"is_router,omitempty"`
	LinkLayerAddress *ywrapper.StringValue                                                                            `protobuf:"bytes,323314869,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
	NeighborState    AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState `protobuf:"varint,38200144,opt,name=neighbor_state,json=neighborState,proto3,enum=openconfig.AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState" json:"neighbor_state,omitempty"`
	Origin           OpenconfigIfIpNeighborOrigin                                                                     `protobuf:"varint,91731532,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpNeighborOrigin" json:"origin,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 2, 0, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) GetIsRouter() *ywrapper.BoolValue {
	if x != nil {
		return x.IsRouter
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) GetNeighborState() AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState {
	if x != nil {
		return x.NeighborState
	}
	return AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_UNSET
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) GetOrigin() OpenconfigIfIpNeighborOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpNeighborOrigin_OPENCONFIGIFIPNEIGHBORORIGIN_UNSET
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval *ywrapper.UintValue `protobuf:"bytes,507074395,opt,name=interval,proto3" json:"interval,omitempty"`
	Lifetime *ywrapper.UintValue `protobuf:"bytes,112629577,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	Suppress *ywrapper.BoolValue `protobuf:"bytes,145864393,opt,name=suppress,proto3" json:"suppress,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 3, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) GetLifetime() *ywrapper.UintValue {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) GetSuppress() *ywrapper.BoolValue {
	if x != nil {
		return x.Suppress
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval *ywrapper.UintValue `protobuf:"bytes,147489318,opt,name=interval,proto3" json:"interval,omitempty"`
	Lifetime *ywrapper.UintValue `protobuf:"bytes,334517824,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	Suppress *ywrapper.BoolValue `protobuf:"bytes,483488540,opt,name=suppress,proto3" json:"suppress,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 3, 1}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) GetLifetime() *ywrapper.UintValue {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) GetSuppress() *ywrapper.BoolValue {
	if x != nil {
		return x.Suppress
	}
	return nil
}

type AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InDiscardedPkts    *ywrapper.UintValue `protobuf:"bytes,36080911,opt,name=in_discarded_pkts,json=inDiscardedPkts,proto3" json:"in_discarded_pkts,omitempty"`
	InErrorPkts        *ywrapper.UintValue `protobuf:"bytes,295176490,opt,name=in_error_pkts,json=inErrorPkts,proto3" json:"in_error_pkts,omitempty"`
	InForwardedOctets  *ywrapper.UintValue `protobuf:"bytes,329880588,opt,name=in_forwarded_octets,json=inForwardedOctets,proto3" json:"in_forwarded_octets,omitempty"`
	InForwardedPkts    *ywrapper.UintValue `protobuf:"bytes,174736040,opt,name=in_forwarded_pkts,json=inForwardedPkts,proto3" json:"in_forwarded_pkts,omitempty"`
	InOctets           *ywrapper.UintValue `protobuf:"bytes,381267585,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts             *ywrapper.UintValue `protobuf:"bytes,36508005,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	OutDiscardedPkts   *ywrapper.UintValue `protobuf:"bytes,517246398,opt,name=out_discarded_pkts,json=outDiscardedPkts,proto3" json:"out_discarded_pkts,omitempty"`
	OutErrorPkts       *ywrapper.UintValue `protobuf:"bytes,516925867,opt,name=out_error_pkts,json=outErrorPkts,proto3" json:"out_error_pkts,omitempty"`
	OutForwardedOctets *ywrapper.UintValue `protobuf:"bytes,462310341,opt,name=out_forwarded_octets,json=outForwardedOctets,proto3" json:"out_forwarded_octets,omitempty"`
	OutForwardedPkts   *ywrapper.UintValue `protobuf:"bytes,227930449,opt,name=out_forwarded_pkts,json=outForwardedPkts,proto3" json:"out_forwarded_pkts,omitempty"`
	OutOctets          *ywrapper.UintValue `protobuf:"bytes,86311084,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts            *ywrapper.UintValue `protobuf:"bytes,102894408,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) Reset() {
	*x = AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 2, 0, 5, 2, 4, 0}
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetInDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetInErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InErrorPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetInForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetInForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetOutDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetOutErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrorPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetOutForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetOutForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedPkts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

type AccessPoints_AccessPoint_Radios_Radio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config    *AccessPoints_AccessPoint_Radios_Radio_Config    `protobuf:"bytes,340450580,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors *AccessPoints_AccessPoint_Radios_Radio_Neighbors `protobuf:"bytes,292366027,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	State     *AccessPoints_AccessPoint_Radios_Radio_State     `protobuf:"bytes,381530797,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Radios_Radio) Reset() {
	*x = AccessPoints_AccessPoint_Radios_Radio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Radios_Radio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Radios_Radio) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Radios_Radio) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Radios_Radio.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Radios_Radio) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

func (x *AccessPoints_AccessPoint_Radios_Radio) GetConfig() *AccessPoints_AccessPoint_Radios_Radio_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio) GetNeighbors() *AccessPoints_AccessPoint_Radios_Radio_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio) GetState() *AccessPoints_AccessPoint_Radios_Radio_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Radios_RadioKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OperatingFrequency OpenconfigWifiTypesOPERATINGFREQUENCY  `protobuf:"varint,2,opt,name=operating_frequency,json=operatingFrequency,proto3,enum=openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY" json:"operating_frequency,omitempty"`
	Radio              *AccessPoints_AccessPoint_Radios_Radio `protobuf:"bytes,3,opt,name=radio,proto3" json:"radio,omitempty"`
}

func (x *AccessPoints_AccessPoint_Radios_RadioKey) Reset() {
	*x = AccessPoints_AccessPoint_Radios_RadioKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Radios_RadioKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Radios_RadioKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Radios_RadioKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Radios_RadioKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Radios_RadioKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 3, 1}
}

func (x *AccessPoints_AccessPoint_Radios_RadioKey) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccessPoints_AccessPoint_Radios_RadioKey) GetOperatingFrequency() OpenconfigWifiTypesOPERATINGFREQUENCY {
	if x != nil {
		return x.OperatingFrequency
	}
	return OpenconfigWifiTypesOPERATINGFREQUENCY_OPENCONFIGWIFITYPESOPERATINGFREQUENCY_UNSET
}

func (x *AccessPoints_AccessPoint_Radios_RadioKey) GetRadio() *AccessPoints_AccessPoint_Radios_Radio {
	if x != nil {
		return x.Radio
	}
	return nil
}

type AccessPoints_AccessPoint_Radios_Radio_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedChannels      []*ywrapper.UintValue                 `protobuf:"bytes,377176594,rep,name=allowed_channels,json=allowedChannels,proto3" json:"allowed_channels,omitempty"`
	AntennaGain          *ywrapper.IntValue                    `protobuf:"bytes,395589676,opt,name=antenna_gain,json=antennaGain,proto3" json:"antenna_gain,omitempty"`
	Channel              *ywrapper.UintValue                   `protobuf:"bytes,142234560,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelWidth         *ywrapper.UintValue                   `protobuf:"bytes,312377251,opt,name=channel_width,json=channelWidth,proto3" json:"channel_width,omitempty"`
	Dca                  *ywrapper.BoolValue                   `protobuf:"bytes,121063389,opt,name=dca,proto3" json:"dca,omitempty"`
	Dtp                  *ywrapper.BoolValue                   `protobuf:"bytes,372714633,opt,name=dtp,proto3" json:"dtp,omitempty"`
	DtpMax               *ywrapper.IntValue                    `protobuf:"bytes,436592188,opt,name=dtp_max,json=dtpMax,proto3" json:"dtp_max,omitempty"`
	DtpMin               *ywrapper.IntValue                    `protobuf:"bytes,302371266,opt,name=dtp_min,json=dtpMin,proto3" json:"dtp_min,omitempty"`
	Enabled              *ywrapper.BoolValue                   `protobuf:"bytes,61757750,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Id                   *ywrapper.UintValue                   `protobuf:"bytes,51792420,opt,name=id,proto3" json:"id,omitempty"`
	OperatingFrequency   OpenconfigWifiTypesOPERATINGFREQUENCY `protobuf:"varint,326739705,opt,name=operating_frequency,json=operatingFrequency,proto3,enum=openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY" json:"operating_frequency,omitempty"`
	Scanning             *ywrapper.BoolValue                   `protobuf:"bytes,120410214,opt,name=scanning,proto3" json:"scanning,omitempty"`
	ScanningDeferClients *ywrapper.UintValue                   `protobuf:"bytes,508920778,opt,name=scanning_defer_clients,json=scanningDeferClients,proto3" json:"scanning_defer_clients,omitempty"`
	ScanningDeferTraffic *ywrapper.BoolValue                   `protobuf:"bytes,201270109,opt,name=scanning_defer_traffic,json=scanningDeferTraffic,proto3" json:"scanning_defer_traffic,omitempty"`
	ScanningDwellTime    *ywrapper.UintValue                   `protobuf:"bytes,301364873,opt,name=scanning_dwell_time,json=scanningDwellTime,proto3" json:"scanning_dwell_time,omitempty"`
	ScanningInterval     *ywrapper.UintValue                   `protobuf:"bytes,227708400,opt,name=scanning_interval,json=scanningInterval,proto3" json:"scanning_interval,omitempty"`
	TransmitEirp         *ywrapper.UintValue                   `protobuf:"bytes,265464192,opt,name=transmit_eirp,json=transmitEirp,proto3" json:"transmit_eirp,omitempty"`
	TransmitPower        *ywrapper.IntValue                    `protobuf:"bytes,13864931,opt,name=transmit_power,json=transmitPower,proto3" json:"transmit_power,omitempty"`
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) Reset() {
	*x = AccessPoints_AccessPoint_Radios_Radio_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Radios_Radio_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Radios_Radio_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Radios_Radio_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 3, 0, 0}
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetAllowedChannels() []*ywrapper.UintValue {
	if x != nil {
		return x.AllowedChannels
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetAntennaGain() *ywrapper.IntValue {
	if x != nil {
		return x.AntennaGain
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetChannel() *ywrapper.UintValue {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetChannelWidth() *ywrapper.UintValue {
	if x != nil {
		return x.ChannelWidth
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetDca() *ywrapper.BoolValue {
	if x != nil {
		return x.Dca
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetDtp() *ywrapper.BoolValue {
	if x != nil {
		return x.Dtp
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetDtpMax() *ywrapper.IntValue {
	if x != nil {
		return x.DtpMax
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetDtpMin() *ywrapper.IntValue {
	if x != nil {
		return x.DtpMin
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetId() *ywrapper.UintValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetOperatingFrequency() OpenconfigWifiTypesOPERATINGFREQUENCY {
	if x != nil {
		return x.OperatingFrequency
	}
	return OpenconfigWifiTypesOPERATINGFREQUENCY_OPENCONFIGWIFITYPESOPERATINGFREQUENCY_UNSET
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetScanning() *ywrapper.BoolValue {
	if x != nil {
		return x.Scanning
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetScanningDeferClients() *ywrapper.UintValue {
	if x != nil {
		return x.ScanningDeferClients
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetScanningDeferTraffic() *ywrapper.BoolValue {
	if x != nil {
		return x.ScanningDeferTraffic
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetScanningDwellTime() *ywrapper.UintValue {
	if x != nil {
		return x.ScanningDwellTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetScanningInterval() *ywrapper.UintValue {
	if x != nil {
		return x.ScanningInterval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetTransmitEirp() *ywrapper.UintValue {
	if x != nil {
		return x.TransmitEirp
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Config) GetTransmitPower() *ywrapper.IntValue {
	if x != nil {
		return x.TransmitPower
	}
	return nil
}

type AccessPoints_AccessPoint_Radios_Radio_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*AccessPoints_AccessPoint_Radios_Radio_Neighbors_NeighborKey `protobuf:"bytes,69564256,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors) Reset() {
	*x = AccessPoints_AccessPoint_Radios_Radio_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Radios_Radio_Neighbors) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Radios_Radio_Neighbors.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Radios_Radio_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 3, 0, 1}
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors) GetNeighbor() []*AccessPoints_AccessPoint_Radios_Radio_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type AccessPoints_AccessPoint_Radios_Radio_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedChannels           []*ywrapper.UintValue                                 `protobuf:"bytes,262666109,rep,name=allowed_channels,json=allowedChannels,proto3" json:"allowed_channels,omitempty"`
	AllowedRegulatoryChannels []*ywrapper.UintValue                                 `protobuf:"bytes,362801992,rep,name=allowed_regulatory_channels,json=allowedRegulatoryChannels,proto3" json:"allowed_regulatory_channels,omitempty"`
	AntennaGain               *ywrapper.IntValue                                    `protobuf:"bytes,57872087,opt,name=antenna_gain,json=antennaGain,proto3" json:"antenna_gain,omitempty"`
	BaseRadioMac              *ywrapper.StringValue                                 `protobuf:"bytes,260970223,opt,name=base_radio_mac,json=baseRadioMac,proto3" json:"base_radio_mac,omitempty"`
	Channel                   *ywrapper.UintValue                                   `protobuf:"bytes,248347633,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelChangeReason       OpenconfigWifiTypesCHANGEREASONTYPE                   `protobuf:"varint,457538455,opt,name=channel_change_reason,json=channelChangeReason,proto3,enum=openconfig.OpenconfigWifiTypesCHANGEREASONTYPE" json:"channel_change_reason,omitempty"`
	ChannelWidth              *ywrapper.UintValue                                   `protobuf:"bytes,145442034,opt,name=channel_width,json=channelWidth,proto3" json:"channel_width,omitempty"`
	Counters                  *AccessPoints_AccessPoint_Radios_Radio_State_Counters `protobuf:"bytes,85857871,opt,name=counters,proto3" json:"counters,omitempty"`
	Dca                       *ywrapper.BoolValue                                   `protobuf:"bytes,220593508,opt,name=dca,proto3" json:"dca,omitempty"`
	DfsHitTime                *ywrapper.UintValue                                   `protobuf:"bytes,217001949,opt,name=dfs_hit_time,json=dfsHitTime,proto3" json:"dfs_hit_time,omitempty"`
	Dtp                       *ywrapper.BoolValue                                   `protobuf:"bytes,371592000,opt,name=dtp,proto3" json:"dtp,omitempty"`
	DtpMax                    *ywrapper.IntValue                                    `protobuf:"bytes,114225861,opt,name=dtp_max,json=dtpMax,proto3" json:"dtp_max,omitempty"`
	DtpMin                    *ywrapper.IntValue                                    `protobuf:"bytes,516875851,opt,name=dtp_min,json=dtpMin,proto3" json:"dtp_min,omitempty"`
	Enabled                   *ywrapper.BoolValue                                   `protobuf:"bytes,129422531,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Id                        *ywrapper.UintValue                                   `protobuf:"bytes,440497527,opt,name=id,proto3" json:"id,omitempty"`
	OperatingFrequency        OpenconfigWifiTypesOPERATINGFREQUENCY                 `protobuf:"varint,383131064,opt,name=operating_frequency,json=operatingFrequency,proto3,enum=openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY" json:"operating_frequency,omitempty"`
	RxDot11ChannelUtilization *ywrapper.UintValue                                   `protobuf:"bytes,292487107,opt,name=rx_dot11_channel_utilization,json=rxDot11ChannelUtilization,proto3" json:"rx_dot11_channel_utilization,omitempty"`
	RxNoiseChannelUtilization *ywrapper.UintValue                                   `protobuf:"bytes,169818606,opt,name=rx_noise_channel_utilization,json=rxNoiseChannelUtilization,proto3" json:"rx_noise_channel_utilization,omitempty"`
	Scanning                  *ywrapper.BoolValue                                   `protobuf:"bytes,140421665,opt,name=scanning,proto3" json:"scanning,omitempty"`
	ScanningDeferClients      *ywrapper.UintValue                                   `protobuf:"bytes,144804173,opt,name=scanning_defer_clients,json=scanningDeferClients,proto3" json:"scanning_defer_clients,omitempty"`
	ScanningDeferTraffic      *ywrapper.BoolValue                                   `protobuf:"bytes,212283074,opt,name=scanning_defer_traffic,json=scanningDeferTraffic,proto3" json:"scanning_defer_traffic,omitempty"`
	ScanningDwellTime         *ywrapper.UintValue                                   `protobuf:"bytes,271355480,opt,name=scanning_dwell_time,json=scanningDwellTime,proto3" json:"scanning_dwell_time,omitempty"`
	ScanningInterval          *ywrapper.UintValue                                   `protobuf:"bytes,224778997,opt,name=scanning_interval,json=scanningInterval,proto3" json:"scanning_interval,omitempty"`
	SoftwareSelectable        *ywrapper.BoolValue                                   `protobuf:"bytes,232735040,opt,name=software_selectable,json=softwareSelectable,proto3" json:"software_selectable,omitempty"`
	SupportedChannels         []*ywrapper.UintValue                                 `protobuf:"bytes,514528035,rep,name=supported_channels,json=supportedChannels,proto3" json:"supported_channels,omitempty"`
	TotalChannelUtilization   *ywrapper.UintValue                                   `protobuf:"bytes,304999823,opt,name=total_channel_utilization,json=totalChannelUtilization,proto3" json:"total_channel_utilization,omitempty"`
	TransmitEirp              *ywrapper.UintValue                                   `protobuf:"bytes,17758933,opt,name=transmit_eirp,json=transmitEirp,proto3" json:"transmit_eirp,omitempty"`
	TransmitPower             *ywrapper.IntValue                                    `protobuf:"bytes,109974624,opt,name=transmit_power,json=transmitPower,proto3" json:"transmit_power,omitempty"`
	TxDot11ChannelUtilization *ywrapper.UintValue                                   `protobuf:"bytes,200526165,opt,name=tx_dot11_channel_utilization,json=txDot11ChannelUtilization,proto3" json:"tx_dot11_channel_utilization,omitempty"`
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) Reset() {
	*x = AccessPoints_AccessPoint_Radios_Radio_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Radios_Radio_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Radios_Radio_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Radios_Radio_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 3, 0, 2}
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetAllowedChannels() []*ywrapper.UintValue {
	if x != nil {
		return x.AllowedChannels
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetAllowedRegulatoryChannels() []*ywrapper.UintValue {
	if x != nil {
		return x.AllowedRegulatoryChannels
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetAntennaGain() *ywrapper.IntValue {
	if x != nil {
		return x.AntennaGain
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetBaseRadioMac() *ywrapper.StringValue {
	if x != nil {
		return x.BaseRadioMac
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetChannel() *ywrapper.UintValue {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetChannelChangeReason() OpenconfigWifiTypesCHANGEREASONTYPE {
	if x != nil {
		return x.ChannelChangeReason
	}
	return OpenconfigWifiTypesCHANGEREASONTYPE_OPENCONFIGWIFITYPESCHANGEREASONTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetChannelWidth() *ywrapper.UintValue {
	if x != nil {
		return x.ChannelWidth
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetCounters() *AccessPoints_AccessPoint_Radios_Radio_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetDca() *ywrapper.BoolValue {
	if x != nil {
		return x.Dca
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetDfsHitTime() *ywrapper.UintValue {
	if x != nil {
		return x.DfsHitTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetDtp() *ywrapper.BoolValue {
	if x != nil {
		return x.Dtp
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetDtpMax() *ywrapper.IntValue {
	if x != nil {
		return x.DtpMax
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetDtpMin() *ywrapper.IntValue {
	if x != nil {
		return x.DtpMin
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetId() *ywrapper.UintValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetOperatingFrequency() OpenconfigWifiTypesOPERATINGFREQUENCY {
	if x != nil {
		return x.OperatingFrequency
	}
	return OpenconfigWifiTypesOPERATINGFREQUENCY_OPENCONFIGWIFITYPESOPERATINGFREQUENCY_UNSET
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetRxDot11ChannelUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.RxDot11ChannelUtilization
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetRxNoiseChannelUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.RxNoiseChannelUtilization
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetScanning() *ywrapper.BoolValue {
	if x != nil {
		return x.Scanning
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetScanningDeferClients() *ywrapper.UintValue {
	if x != nil {
		return x.ScanningDeferClients
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetScanningDeferTraffic() *ywrapper.BoolValue {
	if x != nil {
		return x.ScanningDeferTraffic
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetScanningDwellTime() *ywrapper.UintValue {
	if x != nil {
		return x.ScanningDwellTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetScanningInterval() *ywrapper.UintValue {
	if x != nil {
		return x.ScanningInterval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetSoftwareSelectable() *ywrapper.BoolValue {
	if x != nil {
		return x.SoftwareSelectable
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetSupportedChannels() []*ywrapper.UintValue {
	if x != nil {
		return x.SupportedChannels
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetTotalChannelUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.TotalChannelUtilization
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetTransmitEirp() *ywrapper.UintValue {
	if x != nil {
		return x.TransmitEirp
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetTransmitPower() *ywrapper.IntValue {
	if x != nil {
		return x.TransmitPower
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State) GetTxDot11ChannelUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.TxDot11ChannelUtilization
	}
	return nil
}

type AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State `protobuf:"bytes,508862922,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor) Reset() {
	*x = AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 3, 0, 1, 0}
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor) GetState() *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Radios_Radio_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bssid    string                                                    `protobuf:"bytes,1,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Neighbor *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_NeighborKey) Reset() {
	*x = AccessPoints_AccessPoint_Radios_Radio_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Radios_Radio_Neighbors_NeighborKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Radios_Radio_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Radios_Radio_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 3, 0, 1, 1}
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_NeighborKey) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_NeighborKey) GetNeighbor() *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bssid          *ywrapper.StringValue                                                 `protobuf:"bytes,401305860,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Channel        *ywrapper.UintValue                                                   `protobuf:"bytes,528074318,opt,name=channel,proto3" json:"channel,omitempty"`
	LastSeen       *ywrapper.UintValue                                                   `protobuf:"bytes,4425411,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	Opmode         AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode `protobuf:"varint,231602661,opt,name=opmode,proto3,enum=openconfig.AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode" json:"opmode,omitempty"`
	PrimaryChannel *ywrapper.UintValue                                                   `protobuf:"bytes,458175343,opt,name=primary_channel,json=primaryChannel,proto3" json:"primary_channel,omitempty"`
	Rssi           *ywrapper.IntValue                                                    `protobuf:"bytes,162047120,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Ssid           *ywrapper.StringValue                                                 `protobuf:"bytes,320899124,opt,name=ssid,proto3" json:"ssid,omitempty"`
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) Reset() {
	*x = AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 3, 0, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) GetBssid() *ywrapper.StringValue {
	if x != nil {
		return x.Bssid
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) GetChannel() *ywrapper.UintValue {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) GetLastSeen() *ywrapper.UintValue {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) GetOpmode() AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode {
	if x != nil {
		return x.Opmode
	}
	return AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_OPMODE_UNSET
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) GetPrimaryChannel() *ywrapper.UintValue {
	if x != nil {
		return x.PrimaryChannel
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) GetRssi() *ywrapper.IntValue {
	if x != nil {
		return x.Rssi
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) GetSsid() *ywrapper.StringValue {
	if x != nil {
		return x.Ssid
	}
	return nil
}

type AccessPoints_AccessPoint_Radios_Radio_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedFcsFrames *ywrapper.UintValue `protobuf:"bytes,471565761,opt,name=failed_fcs_frames,json=failedFcsFrames,proto3" json:"failed_fcs_frames,omitempty"`
	NoiseFloor      *ywrapper.IntValue  `protobuf:"bytes,382544921,opt,name=noise_floor,json=noiseFloor,proto3" json:"noise_floor,omitempty"`
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State_Counters) Reset() {
	*x = AccessPoints_AccessPoint_Radios_Radio_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Radios_Radio_State_Counters) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Radios_Radio_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Radios_Radio_State_Counters.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Radios_Radio_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 3, 0, 2, 0}
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State_Counters) GetFailedFcsFrames() *ywrapper.UintValue {
	if x != nil {
		return x.FailedFcsFrames
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Radios_Radio_State_Counters) GetNoiseFloor() *ywrapper.IntValue {
	if x != nil {
		return x.NoiseFloor
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BandSteering *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering `protobuf:"bytes,206115007,opt,name=band_steering,json=bandSteering,proto3" json:"band_steering,omitempty"`
	Bssids       *AccessPoints_AccessPoint_Ssids_Ssid_Bssids       `protobuf:"bytes,271117434,opt,name=bssids,proto3" json:"bssids,omitempty"`
	Clients      *AccessPoints_AccessPoint_Ssids_Ssid_Clients      `protobuf:"bytes,9423148,opt,name=clients,proto3" json:"clients,omitempty"`
	Config       *AccessPoints_AccessPoint_Ssids_Ssid_Config       `protobuf:"bytes,66897482,opt,name=config,proto3" json:"config,omitempty"`
	Dot11R       *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R       `protobuf:"bytes,235232059,opt,name=dot11r,proto3" json:"dot11r,omitempty"`
	Dot11V       *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V       `protobuf:"bytes,235232063,opt,name=dot11v,proto3" json:"dot11v,omitempty"`
	Dot1XTimers  *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers  `protobuf:"bytes,474480117,opt,name=dot1x_timers,json=dot1xTimers,proto3" json:"dot1x_timers,omitempty"`
	State        *AccessPoints_AccessPoint_Ssids_Ssid_State        `protobuf:"bytes,314036711,opt,name=state,proto3" json:"state,omitempty"`
	Wmm          *AccessPoints_AccessPoint_Ssids_Ssid_Wmm          `protobuf:"bytes,148999029,opt,name=wmm,proto3" json:"wmm,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid) GetBandSteering() *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering {
	if x != nil {
		return x.BandSteering
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid) GetBssids() *AccessPoints_AccessPoint_Ssids_Ssid_Bssids {
	if x != nil {
		return x.Bssids
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid) GetClients() *AccessPoints_AccessPoint_Ssids_Ssid_Clients {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid) GetConfig() *AccessPoints_AccessPoint_Ssids_Ssid_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid) GetDot11R() *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R {
	if x != nil {
		return x.Dot11R
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid) GetDot11V() *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V {
	if x != nil {
		return x.Dot11V
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid) GetDot1XTimers() *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers {
	if x != nil {
		return x.Dot1XTimers
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid) GetState() *AccessPoints_AccessPoint_Ssids_Ssid_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid) GetWmm() *AccessPoints_AccessPoint_Ssids_Ssid_Wmm {
	if x != nil {
		return x.Wmm
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_SsidKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ssid *AccessPoints_AccessPoint_Ssids_Ssid `protobuf:"bytes,2,opt,name=ssid,proto3" json:"ssid,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_SsidKey) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_SsidKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_SsidKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_SsidKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_SsidKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_SsidKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_SsidKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 1}
}

func (x *AccessPoints_AccessPoint_Ssids_SsidKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Ssids_SsidKey) GetSsid() *AccessPoints_AccessPoint_Ssids_Ssid {
	if x != nil {
		return x.Ssid
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_BandSteering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config `protobuf:"bytes,480153216,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State  `protobuf:"bytes,45444217,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_BandSteering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_BandSteering) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_BandSteering.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_BandSteering) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering) GetConfig() *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering) GetState() *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Bssids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bssid []*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey `protobuf:"bytes,480381172,rep,name=bssid,proto3" json:"bssid,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Bssids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Bssids.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids) GetBssid() []*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey {
	if x != nil {
		return x.Bssid
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Clients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client []*AccessPoints_AccessPoint_Ssids_Ssid_Clients_ClientKey `protobuf:"bytes,49373022,rep,name=client,proto3" json:"client,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Clients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Clients.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients) GetClient() []*AccessPoints_AccessPoint_Ssids_Ssid_Clients_ClientKey {
	if x != nil {
		return x.Client
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertiseApname       *ywrapper.BoolValue                               `protobuf:"bytes,430443627,opt,name=advertise_apname,json=advertiseApname,proto3" json:"advertise_apname,omitempty"`
	BasicDataRates_2G     []OpenconfigWifiTypesDATARATE                     `protobuf:"varint,396661060,rep,packed,name=basic_data_rates_2g,json=basicDataRates2g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"basic_data_rates_2g,omitempty"`
	BasicDataRates_5G     []OpenconfigWifiTypesDATARATE                     `protobuf:"varint,480549221,rep,packed,name=basic_data_rates_5g,json=basicDataRates5g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"basic_data_rates_5g,omitempty"`
	BroadcastFilter       *ywrapper.BoolValue                               `protobuf:"bytes,380494917,opt,name=broadcast_filter,json=broadcastFilter,proto3" json:"broadcast_filter,omitempty"`
	Csa                   *ywrapper.BoolValue                               `protobuf:"bytes,10921288,opt,name=csa,proto3" json:"csa,omitempty"`
	DefaultVlan           *ywrapper.UintValue                               `protobuf:"bytes,178568366,opt,name=default_vlan,json=defaultVlan,proto3" json:"default_vlan,omitempty"`
	DhcpRequired          *ywrapper.BoolValue                               `protobuf:"bytes,495414066,opt,name=dhcp_required,json=dhcpRequired,proto3" json:"dhcp_required,omitempty"`
	Dot11K                *ywrapper.BoolValue                               `protobuf:"bytes,122548655,opt,name=dot11k,proto3" json:"dot11k,omitempty"`
	Dva                   *ywrapper.BoolValue                               `protobuf:"bytes,95942216,opt,name=dva,proto3" json:"dva,omitempty"`
	Enabled               *ywrapper.BoolValue                               `protobuf:"bytes,243311784,opt,name=enabled,proto3" json:"enabled,omitempty"`
	GtkTimeout            *ywrapper.UintValue                               `protobuf:"bytes,241734605,opt,name=gtk_timeout,json=gtkTimeout,proto3" json:"gtk_timeout,omitempty"`
	Hidden                *ywrapper.BoolValue                               `protobuf:"bytes,59524017,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Ipv6NdpFilter         *ywrapper.BoolValue                               `protobuf:"bytes,299064706,opt,name=ipv6_ndp_filter,json=ipv6NdpFilter,proto3" json:"ipv6_ndp_filter,omitempty"`
	Ipv6NdpFilterTimer    *ywrapper.UintValue                               `protobuf:"bytes,497415066,opt,name=ipv6_ndp_filter_timer,json=ipv6NdpFilterTimer,proto3" json:"ipv6_ndp_filter_timer,omitempty"`
	MulticastFilter       *ywrapper.BoolValue                               `protobuf:"bytes,126597300,opt,name=multicast_filter,json=multicastFilter,proto3" json:"multicast_filter,omitempty"`
	Name                  *ywrapper.StringValue                             `protobuf:"bytes,377095704,opt,name=name,proto3" json:"name,omitempty"`
	Okc                   *ywrapper.BoolValue                               `protobuf:"bytes,12892766,opt,name=okc,proto3" json:"okc,omitempty"`
	OperatingFrequency    OpenconfigWifiTypesOPERATINGFREQUENCY             `protobuf:"varint,231725667,opt,name=operating_frequency,json=operatingFrequency,proto3,enum=openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY" json:"operating_frequency,omitempty"`
	Opmode                AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode `protobuf:"varint,88589157,opt,name=opmode,proto3,enum=openconfig.AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode" json:"opmode,omitempty"`
	PtkTimeout            *ywrapper.UintValue                               `protobuf:"bytes,206828754,opt,name=ptk_timeout,json=ptkTimeout,proto3" json:"ptk_timeout,omitempty"`
	QbssLoad              *ywrapper.BoolValue                               `protobuf:"bytes,373022163,opt,name=qbss_load,json=qbssLoad,proto3" json:"qbss_load,omitempty"`
	ServerGroup           *ywrapper.StringValue                             `protobuf:"bytes,4432650,opt,name=server_group,json=serverGroup,proto3" json:"server_group,omitempty"`
	StationIsolation      *ywrapper.BoolValue                               `protobuf:"bytes,479304948,opt,name=station_isolation,json=stationIsolation,proto3" json:"station_isolation,omitempty"`
	SupportedDataRates_2G []OpenconfigWifiTypesDATARATE                     `protobuf:"varint,276563176,rep,packed,name=supported_data_rates_2g,json=supportedDataRates2g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"supported_data_rates_2g,omitempty"`
	SupportedDataRates_5G []OpenconfigWifiTypesDATARATE                     `protobuf:"varint,226230193,rep,packed,name=supported_data_rates_5g,json=supportedDataRates5g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"supported_data_rates_5g,omitempty"`
	VlanList              []*ywrapper.UintValue                             `protobuf:"bytes,442344243,rep,name=vlan_list,json=vlanList,proto3" json:"vlan_list,omitempty"`
	Wpa2Psk               *ywrapper.StringValue                             `protobuf:"bytes,29027968,opt,name=wpa2_psk,json=wpa2Psk,proto3" json:"wpa2_psk,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 3}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetAdvertiseApname() *ywrapper.BoolValue {
	if x != nil {
		return x.AdvertiseApname
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetBasicDataRates_2G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.BasicDataRates_2G
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetBasicDataRates_5G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.BasicDataRates_5G
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetBroadcastFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.BroadcastFilter
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetCsa() *ywrapper.BoolValue {
	if x != nil {
		return x.Csa
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetDefaultVlan() *ywrapper.UintValue {
	if x != nil {
		return x.DefaultVlan
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetDhcpRequired() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpRequired
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetDot11K() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11K
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetDva() *ywrapper.BoolValue {
	if x != nil {
		return x.Dva
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetGtkTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.GtkTimeout
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetHidden() *ywrapper.BoolValue {
	if x != nil {
		return x.Hidden
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetIpv6NdpFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.Ipv6NdpFilter
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetIpv6NdpFilterTimer() *ywrapper.UintValue {
	if x != nil {
		return x.Ipv6NdpFilterTimer
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetMulticastFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.MulticastFilter
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetOkc() *ywrapper.BoolValue {
	if x != nil {
		return x.Okc
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetOperatingFrequency() OpenconfigWifiTypesOPERATINGFREQUENCY {
	if x != nil {
		return x.OperatingFrequency
	}
	return OpenconfigWifiTypesOPERATINGFREQUENCY_OPENCONFIGWIFITYPESOPERATINGFREQUENCY_UNSET
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetOpmode() AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode {
	if x != nil {
		return x.Opmode
	}
	return AccessPoints_AccessPoint_Ssids_Ssid_Config_OPMODE_OPEN
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetPtkTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.PtkTimeout
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetQbssLoad() *ywrapper.BoolValue {
	if x != nil {
		return x.QbssLoad
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetServerGroup() *ywrapper.StringValue {
	if x != nil {
		return x.ServerGroup
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetStationIsolation() *ywrapper.BoolValue {
	if x != nil {
		return x.StationIsolation
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetSupportedDataRates_2G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.SupportedDataRates_2G
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetSupportedDataRates_5G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.SupportedDataRates_5G
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetVlanList() []*ywrapper.UintValue {
	if x != nil {
		return x.VlanList
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Config) GetWpa2Psk() *ywrapper.StringValue {
	if x != nil {
		return x.Wpa2Psk
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Dot11R struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config `protobuf:"bytes,365623788,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State  `protobuf:"bytes,187410917,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Dot11R{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot11R) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Dot11R.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot11R) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 4}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R) GetConfig() *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R) GetState() *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Dot11V struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config `protobuf:"bytes,394369536,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State  `protobuf:"bytes,456876793,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Dot11V{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot11V) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Dot11V.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot11V) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 5}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V) GetConfig() *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V) GetState() *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config `protobuf:"bytes,41791642,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State  `protobuf:"bytes,264748855,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 6}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers) GetConfig() *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers) GetState() *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertiseApname       *ywrapper.BoolValue                              `protobuf:"bytes,412181604,opt,name=advertise_apname,json=advertiseApname,proto3" json:"advertise_apname,omitempty"`
	BasicDataRates_2G     []OpenconfigWifiTypesDATARATE                    `protobuf:"varint,340553005,rep,packed,name=basic_data_rates_2g,json=basicDataRates2g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"basic_data_rates_2g,omitempty"`
	BasicDataRates_5G     []OpenconfigWifiTypesDATARATE                    `protobuf:"varint,256664844,rep,packed,name=basic_data_rates_5g,json=basicDataRates5g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"basic_data_rates_5g,omitempty"`
	BroadcastFilter       *ywrapper.BoolValue                              `protobuf:"bytes,133669362,opt,name=broadcast_filter,json=broadcastFilter,proto3" json:"broadcast_filter,omitempty"`
	Csa                   *ywrapper.BoolValue                              `protobuf:"bytes,59256861,opt,name=csa,proto3" json:"csa,omitempty"`
	DefaultVlan           *ywrapper.UintValue                              `protobuf:"bytes,201476549,opt,name=default_vlan,json=defaultVlan,proto3" json:"default_vlan,omitempty"`
	DhcpRequired          *ywrapper.BoolValue                              `protobuf:"bytes,236914407,opt,name=dhcp_required,json=dhcpRequired,proto3" json:"dhcp_required,omitempty"`
	Dot11K                *ywrapper.BoolValue                              `protobuf:"bytes,319747484,opt,name=dot11k,proto3" json:"dot11k,omitempty"`
	Dva                   *ywrapper.BoolValue                              `protobuf:"bytes,243369577,opt,name=dva,proto3" json:"dva,omitempty"`
	Enabled               *ywrapper.BoolValue                              `protobuf:"bytes,225551097,opt,name=enabled,proto3" json:"enabled,omitempty"`
	GtkTimeout            *ywrapper.UintValue                              `protobuf:"bytes,495434912,opt,name=gtk_timeout,json=gtkTimeout,proto3" json:"gtk_timeout,omitempty"`
	Hidden                *ywrapper.BoolValue                              `protobuf:"bytes,331176626,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Ipv6NdpFilter         *ywrapper.BoolValue                              `protobuf:"bytes,176007639,opt,name=ipv6_ndp_filter,json=ipv6NdpFilter,proto3" json:"ipv6_ndp_filter,omitempty"`
	Ipv6NdpFilterTimer    *ywrapper.UintValue                              `protobuf:"bytes,262242867,opt,name=ipv6_ndp_filter_timer,json=ipv6NdpFilterTimer,proto3" json:"ipv6_ndp_filter_timer,omitempty"`
	MulticastFilter       *ywrapper.BoolValue                              `protobuf:"bytes,119570051,opt,name=multicast_filter,json=multicastFilter,proto3" json:"multicast_filter,omitempty"`
	Name                  *ywrapper.StringValue                            `protobuf:"bytes,479156751,opt,name=name,proto3" json:"name,omitempty"`
	Okc                   *ywrapper.BoolValue                              `protobuf:"bytes,325817691,opt,name=okc,proto3" json:"okc,omitempty"`
	OperatingFrequency    OpenconfigWifiTypesOPERATINGFREQUENCY            `protobuf:"varint,198036886,opt,name=operating_frequency,json=operatingFrequency,proto3,enum=openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY" json:"operating_frequency,omitempty"`
	Opmode                AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode `protobuf:"varint,84890626,opt,name=opmode,proto3,enum=openconfig.AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode" json:"opmode,omitempty"`
	PtkTimeout            *ywrapper.UintValue                              `protobuf:"bytes,297425039,opt,name=ptk_timeout,json=ptkTimeout,proto3" json:"ptk_timeout,omitempty"`
	QbssLoad              *ywrapper.BoolValue                              `protobuf:"bytes,495740174,opt,name=qbss_load,json=qbssLoad,proto3" json:"qbss_load,omitempty"`
	ServerGroup           *ywrapper.StringValue                            `protobuf:"bytes,419194997,opt,name=server_group,json=serverGroup,proto3" json:"server_group,omitempty"`
	StationIsolation      *ywrapper.BoolValue                              `protobuf:"bytes,526443173,opt,name=station_isolation,json=stationIsolation,proto3" json:"station_isolation,omitempty"`
	SupportedDataRates_2G []OpenconfigWifiTypesDATARATE                    `protobuf:"varint,3254805,rep,packed,name=supported_data_rates_2g,json=supportedDataRates2g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"supported_data_rates_2g,omitempty"`
	SupportedDataRates_5G []OpenconfigWifiTypesDATARATE                    `protobuf:"varint,456237812,rep,packed,name=supported_data_rates_5g,json=supportedDataRates5g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"supported_data_rates_5g,omitempty"`
	VlanList              []*ywrapper.UintValue                            `protobuf:"bytes,341315386,rep,name=vlan_list,json=vlanList,proto3" json:"vlan_list,omitempty"`
	Wpa2Psk               *ywrapper.StringValue                            `protobuf:"bytes,400666171,opt,name=wpa2_psk,json=wpa2Psk,proto3" json:"wpa2_psk,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 7}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetAdvertiseApname() *ywrapper.BoolValue {
	if x != nil {
		return x.AdvertiseApname
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetBasicDataRates_2G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.BasicDataRates_2G
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetBasicDataRates_5G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.BasicDataRates_5G
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetBroadcastFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.BroadcastFilter
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetCsa() *ywrapper.BoolValue {
	if x != nil {
		return x.Csa
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetDefaultVlan() *ywrapper.UintValue {
	if x != nil {
		return x.DefaultVlan
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetDhcpRequired() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpRequired
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetDot11K() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11K
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetDva() *ywrapper.BoolValue {
	if x != nil {
		return x.Dva
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetGtkTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.GtkTimeout
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetHidden() *ywrapper.BoolValue {
	if x != nil {
		return x.Hidden
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetIpv6NdpFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.Ipv6NdpFilter
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetIpv6NdpFilterTimer() *ywrapper.UintValue {
	if x != nil {
		return x.Ipv6NdpFilterTimer
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetMulticastFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.MulticastFilter
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetOkc() *ywrapper.BoolValue {
	if x != nil {
		return x.Okc
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetOperatingFrequency() OpenconfigWifiTypesOPERATINGFREQUENCY {
	if x != nil {
		return x.OperatingFrequency
	}
	return OpenconfigWifiTypesOPERATINGFREQUENCY_OPENCONFIGWIFITYPESOPERATINGFREQUENCY_UNSET
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetOpmode() AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode {
	if x != nil {
		return x.Opmode
	}
	return AccessPoints_AccessPoint_Ssids_Ssid_State_OPMODE_OPEN
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetPtkTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.PtkTimeout
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetQbssLoad() *ywrapper.BoolValue {
	if x != nil {
		return x.QbssLoad
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetServerGroup() *ywrapper.StringValue {
	if x != nil {
		return x.ServerGroup
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetStationIsolation() *ywrapper.BoolValue {
	if x != nil {
		return x.StationIsolation
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetSupportedDataRates_2G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.SupportedDataRates_2G
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetSupportedDataRates_5G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.SupportedDataRates_5G
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetVlanList() []*ywrapper.UintValue {
	if x != nil {
		return x.VlanList
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_State) GetWpa2Psk() *ywrapper.StringValue {
	if x != nil {
		return x.Wpa2Psk
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Wmm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config `protobuf:"bytes,124087578,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State  `protobuf:"bytes,338223287,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Wmm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Wmm) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Wmm.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Wmm) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 8}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm) GetConfig() *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm) GetState() *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BandSteering *ywrapper.BoolValue `protobuf:"bytes,533262210,opt,name=band_steering,json=bandSteering,proto3" json:"band_steering,omitempty"`
	SteeringRssi *ywrapper.IntValue  `protobuf:"bytes,241689858,opt,name=steering_rssi,json=steeringRssi,proto3" json:"steering_rssi,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config) GetBandSteering() *ywrapper.BoolValue {
	if x != nil {
		return x.BandSteering
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config) GetSteeringRssi() *ywrapper.IntValue {
	if x != nil {
		return x.SteeringRssi
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BandSteering *ywrapper.BoolValue `protobuf:"bytes,446209579,opt,name=band_steering,json=bandSteering,proto3" json:"band_steering,omitempty"`
	SteeringRssi *ywrapper.IntValue  `protobuf:"bytes,414866207,opt,name=steering_rssi,json=steeringRssi,proto3" json:"steering_rssi,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 0, 1}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State) GetBandSteering() *ywrapper.BoolValue {
	if x != nil {
		return x.BandSteering
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State) GetSteeringRssi() *ywrapper.IntValue {
	if x != nil {
		return x.SteeringRssi
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State `protobuf:"bytes,123623118,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid) GetState() *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RadioId  uint64                                            `protobuf:"varint,1,opt,name=radio_id,json=radioId,proto3" json:"radio_id,omitempty"`
	BssidKey string                                            `protobuf:"bytes,2,opt,name=bssid_key,json=bssidKey,proto3" json:"bssid_key,omitempty"`
	Bssid    *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid `protobuf:"bytes,3,opt,name=bssid,proto3" json:"bssid,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 1}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey) GetRadioId() uint64 {
	if x != nil {
		return x.RadioId
	}
	return 0
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey) GetBssidKey() string {
	if x != nil {
		return x.BssidKey
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey) GetBssid() *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid {
	if x != nil {
		return x.Bssid
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bssid                *ywrapper.StringValue                                            `protobuf:"bytes,89781944,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Counters             *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters `protobuf:"bytes,498562050,opt,name=counters,proto3" json:"counters,omitempty"`
	NumAssociatedClients *ywrapper.UintValue                                              `protobuf:"bytes,143606477,opt,name=num_associated_clients,json=numAssociatedClients,proto3" json:"num_associated_clients,omitempty"`
	RadioId              *ywrapper.UintValue                                              `protobuf:"bytes,376147872,opt,name=radio_id,json=radioId,proto3" json:"radio_id,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State) GetBssid() *ywrapper.StringValue {
	if x != nil {
		return x.Bssid
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State) GetCounters() *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State) GetNumAssociatedClients() *ywrapper.UintValue {
	if x != nil {
		return x.NumAssociatedClients
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State) GetRadioId() *ywrapper.UintValue {
	if x != nil {
		return x.RadioId
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BssChannelUtilization        *ywrapper.UintValue                                                         `protobuf:"bytes,334350406,opt,name=bss_channel_utilization,json=bssChannelUtilization,proto3" json:"bss_channel_utilization,omitempty"`
	RxBssDot11ChannelUtilization *ywrapper.UintValue                                                         `protobuf:"bytes,60286305,opt,name=rx_bss_dot11_channel_utilization,json=rxBssDot11ChannelUtilization,proto3" json:"rx_bss_dot11_channel_utilization,omitempty"`
	RxBytesData                  *ywrapper.UintValue                                                         `protobuf:"bytes,502017618,opt,name=rx_bytes_data,json=rxBytesData,proto3" json:"rx_bytes_data,omitempty"`
	RxControl                    *ywrapper.UintValue                                                         `protobuf:"bytes,295793275,opt,name=rx_control,json=rxControl,proto3" json:"rx_control,omitempty"`
	RxDataDist                   *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist `protobuf:"bytes,414560297,opt,name=rx_data_dist,json=rxDataDist,proto3" json:"rx_data_dist,omitempty"`
	RxDataWmm                    *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm  `protobuf:"bytes,245811702,opt,name=rx_data_wmm,json=rxDataWmm,proto3" json:"rx_data_wmm,omitempty"`
	RxMcs                        *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs      `protobuf:"bytes,69464819,opt,name=rx_mcs,json=rxMcs,proto3" json:"rx_mcs,omitempty"`
	RxMgmt                       *ywrapper.UintValue                                                         `protobuf:"bytes,295724295,opt,name=rx_mgmt,json=rxMgmt,proto3" json:"rx_mgmt,omitempty"`
	RxRetries                    *ywrapper.UintValue                                                         `protobuf:"bytes,84713658,opt,name=rx_retries,json=rxRetries,proto3" json:"rx_retries,omitempty"`
	RxRetriesData                *ywrapper.UintValue                                                         `protobuf:"bytes,265913715,opt,name=rx_retries_data,json=rxRetriesData,proto3" json:"rx_retries_data,omitempty"`
	RxRetriesSubframe            *ywrapper.UintValue                                                         `protobuf:"bytes,154923742,opt,name=rx_retries_subframe,json=rxRetriesSubframe,proto3" json:"rx_retries_subframe,omitempty"`
	TxBssDot11ChannelUtilization *ywrapper.UintValue                                                         `protobuf:"bytes,209826939,opt,name=tx_bss_dot11_channel_utilization,json=txBssDot11ChannelUtilization,proto3" json:"tx_bss_dot11_channel_utilization,omitempty"`
	TxBytesData                  *ywrapper.UintValue                                                         `protobuf:"bytes,225159288,opt,name=tx_bytes_data,json=txBytesData,proto3" json:"tx_bytes_data,omitempty"`
	TxControl                    *ywrapper.UintValue                                                         `protobuf:"bytes,276037193,opt,name=tx_control,json=txControl,proto3" json:"tx_control,omitempty"`
	TxDataDist                   *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist `protobuf:"bytes,246816103,opt,name=tx_data_dist,json=txDataDist,proto3" json:"tx_data_dist,omitempty"`
	TxDataWmm                    *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm  `protobuf:"bytes,174850624,opt,name=tx_data_wmm,json=txDataWmm,proto3" json:"tx_data_wmm,omitempty"`
	TxMcs                        *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs      `protobuf:"bytes,71259781,opt,name=tx_mcs,json=txMcs,proto3" json:"tx_mcs,omitempty"`
	TxMgmt                       *ywrapper.UintValue                                                         `protobuf:"bytes,180334729,opt,name=tx_mgmt,json=txMgmt,proto3" json:"tx_mgmt,omitempty"`
	TxRetries                    *ywrapper.UintValue                                                         `protobuf:"bytes,215053128,opt,name=tx_retries,json=txRetries,proto3" json:"tx_retries,omitempty"`
	TxRetriesData                *ywrapper.UintValue                                                         `protobuf:"bytes,61190349,opt,name=tx_retries_data,json=txRetriesData,proto3" json:"tx_retries_data,omitempty"`
	TxRetriesSubframe            *ywrapper.UintValue                                                         `protobuf:"bytes,505440120,opt,name=tx_retries_subframe,json=txRetriesSubframe,proto3" json:"tx_retries_subframe,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetBssChannelUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.BssChannelUtilization
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxBssDot11ChannelUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.RxBssDot11ChannelUtilization
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxBytesData() *ywrapper.UintValue {
	if x != nil {
		return x.RxBytesData
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxControl() *ywrapper.UintValue {
	if x != nil {
		return x.RxControl
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxDataDist() *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist {
	if x != nil {
		return x.RxDataDist
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxDataWmm() *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm {
	if x != nil {
		return x.RxDataWmm
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxMcs() *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs {
	if x != nil {
		return x.RxMcs
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxMgmt() *ywrapper.UintValue {
	if x != nil {
		return x.RxMgmt
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxRetries() *ywrapper.UintValue {
	if x != nil {
		return x.RxRetries
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxRetriesData() *ywrapper.UintValue {
	if x != nil {
		return x.RxRetriesData
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxRetriesSubframe() *ywrapper.UintValue {
	if x != nil {
		return x.RxRetriesSubframe
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxBssDot11ChannelUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.TxBssDot11ChannelUtilization
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxBytesData() *ywrapper.UintValue {
	if x != nil {
		return x.TxBytesData
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxControl() *ywrapper.UintValue {
	if x != nil {
		return x.TxControl
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxDataDist() *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist {
	if x != nil {
		return x.TxDataDist
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxDataWmm() *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm {
	if x != nil {
		return x.TxDataWmm
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxMcs() *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs {
	if x != nil {
		return x.TxMcs
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxMgmt() *ywrapper.UintValue {
	if x != nil {
		return x.TxMgmt
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxRetries() *ywrapper.UintValue {
	if x != nil {
		return x.TxRetries
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxRetriesData() *ywrapper.UintValue {
	if x != nil {
		return x.TxRetriesData
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxRetriesSubframe() *ywrapper.UintValue {
	if x != nil {
		return x.TxRetriesSubframe
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rx_0_64           *ywrapper.UintValue `protobuf:"bytes,345442000,opt,name=rx_0_64,json=rx064,proto3" json:"rx_0_64,omitempty"`
	Rx_1025_2048      *ywrapper.UintValue `protobuf:"bytes,291519142,opt,name=rx_1025_2048,json=rx10252048,proto3" json:"rx_1025_2048,omitempty"`
	Rx_129_256        *ywrapper.UintValue `protobuf:"bytes,57363423,opt,name=rx_129_256,json=rx129256,proto3" json:"rx_129_256,omitempty"`
	Rx_131073_262144  *ywrapper.UintValue `protobuf:"bytes,264985816,opt,name=rx_131073_262144,json=rx131073262144,proto3" json:"rx_131073_262144,omitempty"`
	Rx_16385_32768    *ywrapper.UintValue `protobuf:"bytes,377610423,opt,name=rx_16385_32768,json=rx1638532768,proto3" json:"rx_16385_32768,omitempty"`
	Rx_2049_4096      *ywrapper.UintValue `protobuf:"bytes,485537156,opt,name=rx_2049_4096,json=rx20494096,proto3" json:"rx_2049_4096,omitempty"`
	Rx_257_512        *ywrapper.UintValue `protobuf:"bytes,217082668,opt,name=rx_257_512,json=rx257512,proto3" json:"rx_257_512,omitempty"`
	Rx_262145_524288  *ywrapper.UintValue `protobuf:"bytes,292736709,opt,name=rx_262145_524288,json=rx262145524288,proto3" json:"rx_262145_524288,omitempty"`
	Rx_32769_65536    *ywrapper.UintValue `protobuf:"bytes,38798200,opt,name=rx_32769_65536,json=rx3276965536,proto3" json:"rx_32769_65536,omitempty"`
	Rx_4097_8192      *ywrapper.UintValue `protobuf:"bytes,206970464,opt,name=rx_4097_8192,json=rx40978192,proto3" json:"rx_4097_8192,omitempty"`
	Rx_513_1024       *ywrapper.UintValue `protobuf:"bytes,352786996,opt,name=rx_513_1024,json=rx5131024,proto3" json:"rx_513_1024,omitempty"`
	Rx_524289_1048576 *ywrapper.UintValue `protobuf:"bytes,78107565,opt,name=rx_524289_1048576,json=rx5242891048576,proto3" json:"rx_524289_1048576,omitempty"`
	Rx_65_128         *ywrapper.UintValue `protobuf:"bytes,51959176,opt,name=rx_65_128,json=rx65128,proto3" json:"rx_65_128,omitempty"`
	Rx_65537_131072   *ywrapper.UintValue `protobuf:"bytes,254934980,opt,name=rx_65537_131072,json=rx65537131072,proto3" json:"rx_65537_131072,omitempty"`
	Rx_8193_16384     *ywrapper.UintValue `protobuf:"bytes,111451009,opt,name=rx_8193_16384,json=rx819316384,proto3" json:"rx_8193_16384,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_0_64() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_0_64
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_1025_2048() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_1025_2048
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_129_256() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_129_256
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_131073_262144() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_131073_262144
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_16385_32768() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_16385_32768
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_2049_4096() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_2049_4096
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_257_512() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_257_512
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_262145_524288() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_262145_524288
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_32769_65536() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_32769_65536
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_4097_8192() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_4097_8192
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_513_1024() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_513_1024
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_524289_1048576() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_524289_1048576
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_65_128() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_65_128
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_65537_131072() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_65537_131072
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_8193_16384() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_8193_16384
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Be *ywrapper.UintValue `protobuf:"bytes,293818570,opt,name=be,proto3" json:"be,omitempty"`
	Bk *ywrapper.UintValue `protobuf:"bytes,293818564,opt,name=bk,proto3" json:"bk,omitempty"`
	Vi *ywrapper.UintValue `protobuf:"bytes,495137114,opt,name=vi,proto3" json:"vi,omitempty"`
	Vo *ywrapper.UintValue `protobuf:"bytes,495137116,opt,name=vo,proto3" json:"vo,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 0, 0, 1}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) GetBe() *ywrapper.UintValue {
	if x != nil {
		return x.Be
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) GetBk() *ywrapper.UintValue {
	if x != nil {
		return x.Bk
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) GetVi() *ywrapper.UintValue {
	if x != nil {
		return x.Vi
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) GetVo() *ywrapper.UintValue {
	if x != nil {
		return x.Vo
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mcs0 *ywrapper.UintValue `protobuf:"bytes,226359051,opt,name=mcs0,proto3" json:"mcs0,omitempty"`
	Mcs1 *ywrapper.UintValue `protobuf:"bytes,226359050,opt,name=mcs1,proto3" json:"mcs1,omitempty"`
	Mcs2 *ywrapper.UintValue `protobuf:"bytes,226359049,opt,name=mcs2,proto3" json:"mcs2,omitempty"`
	Mcs3 *ywrapper.UintValue `protobuf:"bytes,226359048,opt,name=mcs3,proto3" json:"mcs3,omitempty"`
	Mcs4 *ywrapper.UintValue `protobuf:"bytes,226359055,opt,name=mcs4,proto3" json:"mcs4,omitempty"`
	Mcs5 *ywrapper.UintValue `protobuf:"bytes,226359054,opt,name=mcs5,proto3" json:"mcs5,omitempty"`
	Mcs6 *ywrapper.UintValue `protobuf:"bytes,226359053,opt,name=mcs6,proto3" json:"mcs6,omitempty"`
	Mcs7 *ywrapper.UintValue `protobuf:"bytes,226359052,opt,name=mcs7,proto3" json:"mcs7,omitempty"`
	Mcs8 *ywrapper.UintValue `protobuf:"bytes,226359043,opt,name=mcs8,proto3" json:"mcs8,omitempty"`
	Mcs9 *ywrapper.UintValue `protobuf:"bytes,226359042,opt,name=mcs9,proto3" json:"mcs9,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 0, 0, 2}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs0() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs0
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs1() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs1
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs2() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs2
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs3() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs3
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs4() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs4
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs5() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs5
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs6() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs6
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs7() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs7
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs8() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs8
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs9() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs9
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx_0_64           *ywrapper.UintValue `protobuf:"bytes,240577740,opt,name=tx_0_64,json=tx064,proto3" json:"tx_0_64,omitempty"`
	Tx_1025_2048      *ywrapper.UintValue `protobuf:"bytes,7167834,opt,name=tx_1025_2048,json=tx10252048,proto3" json:"tx_1025_2048,omitempty"`
	Tx_129_256        *ywrapper.UintValue `protobuf:"bytes,327872755,opt,name=tx_129_256,json=tx129256,proto3" json:"tx_129_256,omitempty"`
	Tx_131073_262144  *ywrapper.UintValue `protobuf:"bytes,491319740,opt,name=tx_131073_262144,json=tx131073262144,proto3" json:"tx_131073_262144,omitempty"`
	Tx_16385_32768    *ywrapper.UintValue `protobuf:"bytes,248648843,opt,name=tx_16385_32768,json=tx1638532768,proto3" json:"tx_16385_32768,omitempty"`
	Tx_2049_4096      *ywrapper.UintValue `protobuf:"bytes,211362928,opt,name=tx_2049_4096,json=tx20494096,proto3" json:"tx_2049_4096,omitempty"`
	Tx_257_512        *ywrapper.UintValue `protobuf:"bytes,214556808,opt,name=tx_257_512,json=tx257512,proto3" json:"tx_257_512,omitempty"`
	Tx_262145_524288  *ywrapper.UintValue `protobuf:"bytes,280448161,opt,name=tx_262145_524288,json=tx262145524288,proto3" json:"tx_262145_524288,omitempty"`
	Tx_32769_65536    *ywrapper.UintValue `protobuf:"bytes,133553132,opt,name=tx_32769_65536,json=tx3276965536,proto3" json:"tx_32769_65536,omitempty"`
	Tx_4097_8192      *ywrapper.UintValue `protobuf:"bytes,93101348,opt,name=tx_4097_8192,json=tx40978192,proto3" json:"tx_4097_8192,omitempty"`
	Tx_513_1024       *ywrapper.UintValue `protobuf:"bytes,481125488,opt,name=tx_513_1024,json=tx5131024,proto3" json:"tx_513_1024,omitempty"`
	Tx_524289_1048576 *ywrapper.UintValue `protobuf:"bytes,14403593,opt,name=tx_524289_1048576,json=tx5242891048576,proto3" json:"tx_524289_1048576,omitempty"`
	Tx_65_128         *ywrapper.UintValue `protobuf:"bytes,94112564,opt,name=tx_65_128,json=tx65128,proto3" json:"tx_65_128,omitempty"`
	Tx_65537_131072   *ywrapper.UintValue `protobuf:"bytes,410663832,opt,name=tx_65537_131072,json=tx65537131072,proto3" json:"tx_65537_131072,omitempty"`
	Tx_8193_16384     *ywrapper.UintValue `protobuf:"bytes,365643709,opt,name=tx_8193_16384,json=tx819316384,proto3" json:"tx_8193_16384,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 0, 0, 3}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_0_64() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_0_64
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_1025_2048() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_1025_2048
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_129_256() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_129_256
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_131073_262144() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_131073_262144
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_16385_32768() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_16385_32768
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_2049_4096() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_2049_4096
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_257_512() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_257_512
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_262145_524288() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_262145_524288
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_32769_65536() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_32769_65536
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_4097_8192() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_4097_8192
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_513_1024() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_513_1024
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_524289_1048576() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_524289_1048576
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_65_128() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_65_128
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_65537_131072() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_65537_131072
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_8193_16384() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_8193_16384
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Be *ywrapper.UintValue `protobuf:"bytes,355211240,opt,name=be,proto3" json:"be,omitempty"`
	Bk *ywrapper.UintValue `protobuf:"bytes,355211238,opt,name=bk,proto3" json:"bk,omitempty"`
	Vi *ywrapper.UintValue `protobuf:"bytes,19658872,opt,name=vi,proto3" json:"vi,omitempty"`
	Vo *ywrapper.UintValue `protobuf:"bytes,19658878,opt,name=vo,proto3" json:"vo,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 0, 0, 4}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) GetBe() *ywrapper.UintValue {
	if x != nil {
		return x.Be
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) GetBk() *ywrapper.UintValue {
	if x != nil {
		return x.Bk
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) GetVi() *ywrapper.UintValue {
	if x != nil {
		return x.Vi
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) GetVo() *ywrapper.UintValue {
	if x != nil {
		return x.Vo
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mcs0 *ywrapper.UintValue `protobuf:"bytes,95922941,opt,name=mcs0,proto3" json:"mcs0,omitempty"`
	Mcs1 *ywrapper.UintValue `protobuf:"bytes,95922940,opt,name=mcs1,proto3" json:"mcs1,omitempty"`
	Mcs2 *ywrapper.UintValue `protobuf:"bytes,95922943,opt,name=mcs2,proto3" json:"mcs2,omitempty"`
	Mcs3 *ywrapper.UintValue `protobuf:"bytes,95922942,opt,name=mcs3,proto3" json:"mcs3,omitempty"`
	Mcs4 *ywrapper.UintValue `protobuf:"bytes,95922937,opt,name=mcs4,proto3" json:"mcs4,omitempty"`
	Mcs5 *ywrapper.UintValue `protobuf:"bytes,95922936,opt,name=mcs5,proto3" json:"mcs5,omitempty"`
	Mcs6 *ywrapper.UintValue `protobuf:"bytes,95922939,opt,name=mcs6,proto3" json:"mcs6,omitempty"`
	Mcs7 *ywrapper.UintValue `protobuf:"bytes,95922938,opt,name=mcs7,proto3" json:"mcs7,omitempty"`
	Mcs8 *ywrapper.UintValue `protobuf:"bytes,95922933,opt,name=mcs8,proto3" json:"mcs8,omitempty"`
	Mcs9 *ywrapper.UintValue `protobuf:"bytes,95922932,opt,name=mcs9,proto3" json:"mcs9,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 0, 0, 5}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs0() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs0
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs1() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs1
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs2() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs2
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs3() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs3
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs4() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs4
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs5() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs5
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs6() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs6
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs7() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs7
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs8() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs8
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs9() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs9
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientCapabilities *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities `protobuf:"bytes,426048559,opt,name=client_capabilities,json=clientCapabilities,proto3" json:"client_capabilities,omitempty"`
	ClientConnection   *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection   `protobuf:"bytes,143477045,opt,name=client_connection,json=clientConnection,proto3" json:"client_connection,omitempty"`
	ClientRf           *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf           `protobuf:"bytes,367682393,opt,name=client_rf,json=clientRf,proto3" json:"client_rf,omitempty"`
	Dot11KNeighbors    *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors    `protobuf:"bytes,383304525,opt,name=dot11k_neighbors,json=dot11kNeighbors,proto3" json:"dot11k_neighbors,omitempty"`
	State              *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State              `protobuf:"bytes,49326624,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) GetClientCapabilities() *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities {
	if x != nil {
		return x.ClientCapabilities
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) GetClientConnection() *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection {
	if x != nil {
		return x.ClientConnection
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) GetClientRf() *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf {
	if x != nil {
		return x.ClientRf
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) GetDot11KNeighbors() *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors {
	if x != nil {
		return x.Dot11KNeighbors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) GetState() *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Clients_ClientKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac    string                                              `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Client *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_ClientKey) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Clients_ClientKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_ClientKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_ClientKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_ClientKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Clients_ClientKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_ClientKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2, 1}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_ClientKey) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_ClientKey) GetClient() *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client {
	if x != nil {
		return x.Client
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State `protobuf:"bytes,249137545,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2, 0, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities) GetState() *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State `protobuf:"bytes,248348919,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2, 0, 1}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection) GetState() *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State `protobuf:"bytes,62147291,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2, 0, 2}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf) GetState() *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State `protobuf:"bytes,63168671,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2, 0, 3}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors) GetState() *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters `protobuf:"bytes,366574872,opt,name=counters,proto3" json:"counters,omitempty"`
	Mac      *ywrapper.StringValue                                              `protobuf:"bytes,244865024,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2, 0, 4}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State) GetCounters() *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State) GetMac() *ywrapper.StringValue {
	if x != nil {
		return x.Mac
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelSupport     []*ywrapper.UintValue                   `protobuf:"bytes,101977719,rep,name=channel_support,json=channelSupport,proto3" json:"channel_support,omitempty"`
	ClientCapabilities []OpenconfigWifiTypesCLIENTCAPABILITIES `protobuf:"varint,373949492,rep,packed,name=client_capabilities,json=clientCapabilities,proto3,enum=openconfig.OpenconfigWifiTypesCLIENTCAPABILITIES" json:"client_capabilities,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State) GetChannelSupport() []*ywrapper.UintValue {
	if x != nil {
		return x.ChannelSupport
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State) GetClientCapabilities() []OpenconfigWifiTypesCLIENTCAPABILITIES {
	if x != nil {
		return x.ClientCapabilities
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientState     OpenconfigWifiTypesCLIENTSTATE `protobuf:"varint,178171191,opt,name=client_state,json=clientState,proto3,enum=openconfig.OpenconfigWifiTypesCLIENTSTATE" json:"client_state,omitempty"`
	ConnectionTime  *ywrapper.UintValue            `protobuf:"bytes,299049484,opt,name=connection_time,json=connectionTime,proto3" json:"connection_time,omitempty"`
	Hostname        *ywrapper.StringValue          `protobuf:"bytes,70608921,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ipv4Address     []*ywrapper.StringValue        `protobuf:"bytes,97222160,rep,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Addresses   []*ywrapper.StringValue        `protobuf:"bytes,266498826,rep,name=ipv6_addresses,json=ipv6Addresses,proto3" json:"ipv6_addresses,omitempty"`
	OperatingSystem *ywrapper.StringValue          `protobuf:"bytes,302484799,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	Username        *ywrapper.StringValue          `protobuf:"bytes,146636734,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2, 0, 1, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) GetClientState() OpenconfigWifiTypesCLIENTSTATE {
	if x != nil {
		return x.ClientState
	}
	return OpenconfigWifiTypesCLIENTSTATE_OPENCONFIGWIFITYPESCLIENTSTATE_UNSET
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) GetConnectionTime() *ywrapper.UintValue {
	if x != nil {
		return x.ConnectionTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) GetHostname() *ywrapper.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) GetIpv4Address() []*ywrapper.StringValue {
	if x != nil {
		return x.Ipv4Address
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) GetIpv6Addresses() []*ywrapper.StringValue {
	if x != nil {
		return x.Ipv6Addresses
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) GetOperatingSystem() *ywrapper.StringValue {
	if x != nil {
		return x.OperatingSystem
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) GetUsername() *ywrapper.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionMode AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode `protobuf:"varint,383209746,opt,name=connection_mode,json=connectionMode,proto3,enum=openconfig.AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode" json:"connection_mode,omitempty"`
	Frequency      *ywrapper.UintValue                                                              `protobuf:"bytes,286587908,opt,name=frequency,proto3" json:"frequency,omitempty"`
	PhyRate        *ywrapper.UintValue                                                              `protobuf:"bytes,382033986,opt,name=phy_rate,json=phyRate,proto3" json:"phy_rate,omitempty"`
	Rssi           *ywrapper.IntValue                                                               `protobuf:"bytes,323836415,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Snr            *ywrapper.UintValue                                                              `protobuf:"bytes,235628765,opt,name=snr,proto3" json:"snr,omitempty"`
	Ss             *ywrapper.UintValue                                                              `protobuf:"bytes,240836072,opt,name=ss,proto3" json:"ss,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2, 0, 2, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) GetConnectionMode() AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode {
	if x != nil {
		return x.ConnectionMode
	}
	return AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_CONNECTIONMODE_UNSET
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) GetFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.Frequency
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) GetPhyRate() *ywrapper.UintValue {
	if x != nil {
		return x.PhyRate
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) GetRssi() *ywrapper.IntValue {
	if x != nil {
		return x.Rssi
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) GetSnr() *ywrapper.UintValue {
	if x != nil {
		return x.Snr
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) GetSs() *ywrapper.UintValue {
	if x != nil {
		return x.Ss
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelLoadReport *ywrapper.UintValue   `protobuf:"bytes,489610331,opt,name=channel_load_report,json=channelLoadReport,proto3" json:"channel_load_report,omitempty"`
	NeighborAntenna   *ywrapper.UintValue   `protobuf:"bytes,507846906,opt,name=neighbor_antenna,json=neighborAntenna,proto3" json:"neighbor_antenna,omitempty"`
	NeighborBssid     *ywrapper.StringValue `protobuf:"bytes,498949236,opt,name=neighbor_bssid,json=neighborBssid,proto3" json:"neighbor_bssid,omitempty"`
	NeighborChannel   *ywrapper.UintValue   `protobuf:"bytes,53393662,opt,name=neighbor_channel,json=neighborChannel,proto3" json:"neighbor_channel,omitempty"`
	NeighborRssi      *ywrapper.IntValue    `protobuf:"bytes,173899328,opt,name=neighbor_rssi,json=neighborRssi,proto3" json:"neighbor_rssi,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2, 0, 3, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) GetChannelLoadReport() *ywrapper.UintValue {
	if x != nil {
		return x.ChannelLoadReport
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) GetNeighborAntenna() *ywrapper.UintValue {
	if x != nil {
		return x.NeighborAntenna
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) GetNeighborBssid() *ywrapper.StringValue {
	if x != nil {
		return x.NeighborBssid
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) GetNeighborChannel() *ywrapper.UintValue {
	if x != nil {
		return x.NeighborChannel
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) GetNeighborRssi() *ywrapper.IntValue {
	if x != nil {
		return x.NeighborRssi
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RxBytes   *ywrapper.UintValue `protobuf:"bytes,374808599,opt,name=rx_bytes,json=rxBytes,proto3" json:"rx_bytes,omitempty"`
	RxRetries *ywrapper.UintValue `protobuf:"bytes,459608640,opt,name=rx_retries,json=rxRetries,proto3" json:"rx_retries,omitempty"`
	TxBytes   *ywrapper.UintValue `protobuf:"bytes,529493213,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	TxRetries *ywrapper.UintValue `protobuf:"bytes,421101202,opt,name=tx_retries,json=txRetries,proto3" json:"tx_retries,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2, 0, 4, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) GetRxBytes() *ywrapper.UintValue {
	if x != nil {
		return x.RxBytes
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) GetRxRetries() *ywrapper.UintValue {
	if x != nil {
		return x.RxRetries
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) GetTxBytes() *ywrapper.UintValue {
	if x != nil {
		return x.TxBytes
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) GetTxRetries() *ywrapper.UintValue {
	if x != nil {
		return x.TxRetries
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dot11R             *ywrapper.BoolValue                                            `protobuf:"bytes,196944768,opt,name=dot11r,proto3" json:"dot11r,omitempty"`
	Dot11RDomainid     *ywrapper.UintValue                                            `protobuf:"bytes,381501970,opt,name=dot11r_domainid,json=dot11rDomainid,proto3" json:"dot11r_domainid,omitempty"`
	Dot11RMethod       AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod `protobuf:"varint,145788970,opt,name=dot11r_method,json=dot11rMethod,proto3,enum=openconfig.AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod" json:"dot11r_method,omitempty"`
	Dot11RR1KeyTimeout *ywrapper.UintValue                                            `protobuf:"bytes,205779077,opt,name=dot11r_r1key_timeout,json=dot11rR1keyTimeout,proto3" json:"dot11r_r1key_timeout,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 4, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) GetDot11R() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11R
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) GetDot11RDomainid() *ywrapper.UintValue {
	if x != nil {
		return x.Dot11RDomainid
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) GetDot11RMethod() AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod {
	if x != nil {
		return x.Dot11RMethod
	}
	return AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_DOT11RMETHOD_OVA
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) GetDot11RR1KeyTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Dot11RR1KeyTimeout
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dot11R             *ywrapper.BoolValue                                           `protobuf:"bytes,372456859,opt,name=dot11r,proto3" json:"dot11r,omitempty"`
	Dot11RDomainid     *ywrapper.UintValue                                           `protobuf:"bytes,126600447,opt,name=dot11r_domainid,json=dot11rDomainid,proto3" json:"dot11r_domainid,omitempty"`
	Dot11RMethod       AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod `protobuf:"varint,127604447,opt,name=dot11r_method,json=dot11rMethod,proto3,enum=openconfig.AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod" json:"dot11r_method,omitempty"`
	Dot11RR1KeyTimeout *ywrapper.UintValue                                           `protobuf:"bytes,438778830,opt,name=dot11r_r1key_timeout,json=dot11rR1keyTimeout,proto3" json:"dot11r_r1key_timeout,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 4, 1}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) GetDot11R() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11R
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) GetDot11RDomainid() *ywrapper.UintValue {
	if x != nil {
		return x.Dot11RDomainid
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) GetDot11RMethod() AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod {
	if x != nil {
		return x.Dot11RMethod
	}
	return AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_DOT11RMETHOD_OVA
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) GetDot11RR1KeyTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Dot11RR1KeyTimeout
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dot11VBssidle        *ywrapper.BoolValue `protobuf:"bytes,434441385,opt,name=dot11v_bssidle,json=dot11vBssidle,proto3" json:"dot11v_bssidle,omitempty"`
	Dot11VBssidleTimeout *ywrapper.UintValue `protobuf:"bytes,110172327,opt,name=dot11v_bssidle_timeout,json=dot11vBssidleTimeout,proto3" json:"dot11v_bssidle_timeout,omitempty"`
	Dot11VBsstransition  *ywrapper.BoolValue `protobuf:"bytes,43017806,opt,name=dot11v_bsstransition,json=dot11vBsstransition,proto3" json:"dot11v_bsstransition,omitempty"`
	Dot11VDms            *ywrapper.BoolValue `protobuf:"bytes,279296311,opt,name=dot11v_dms,json=dot11vDms,proto3" json:"dot11v_dms,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 5, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) GetDot11VBssidle() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11VBssidle
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) GetDot11VBssidleTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Dot11VBssidleTimeout
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) GetDot11VBsstransition() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11VBsstransition
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) GetDot11VDms() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11VDms
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dot11VBssidle        *ywrapper.BoolValue `protobuf:"bytes,401777646,opt,name=dot11v_bssidle,json=dot11vBssidle,proto3" json:"dot11v_bssidle,omitempty"`
	Dot11VBssidleTimeout *ywrapper.UintValue `protobuf:"bytes,457719704,opt,name=dot11v_bssidle_timeout,json=dot11vBssidleTimeout,proto3" json:"dot11v_bssidle_timeout,omitempty"`
	Dot11VBsstransition  *ywrapper.BoolValue `protobuf:"bytes,122720233,opt,name=dot11v_bsstransition,json=dot11vBsstransition,proto3" json:"dot11v_bsstransition,omitempty"`
	Dot11VDms            *ywrapper.BoolValue `protobuf:"bytes,483158428,opt,name=dot11v_dms,json=dot11vDms,proto3" json:"dot11v_dms,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 5, 1}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) GetDot11VBssidle() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11VBssidle
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) GetDot11VBssidleTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Dot11VBssidleTimeout
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) GetDot11VBsstransition() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11VBsstransition
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) GetDot11VDms() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11VDms
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlacklistTime   *ywrapper.UintValue `protobuf:"bytes,191265768,opt,name=blacklist_time,json=blacklistTime,proto3" json:"blacklist_time,omitempty"`
	MaxAuthFailures *ywrapper.UintValue `protobuf:"bytes,83251860,opt,name=max_auth_failures,json=maxAuthFailures,proto3" json:"max_auth_failures,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 6, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config) GetBlacklistTime() *ywrapper.UintValue {
	if x != nil {
		return x.BlacklistTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config) GetMaxAuthFailures() *ywrapper.UintValue {
	if x != nil {
		return x.MaxAuthFailures
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlacklistTime   *ywrapper.UintValue `protobuf:"bytes,125053003,opt,name=blacklist_time,json=blacklistTime,proto3" json:"blacklist_time,omitempty"`
	MaxAuthFailures *ywrapper.UintValue `protobuf:"bytes,359065421,opt,name=max_auth_failures,json=maxAuthFailures,proto3" json:"max_auth_failures,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 6, 1}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State) GetBlacklistTime() *ywrapper.UintValue {
	if x != nil {
		return x.BlacklistTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State) GetMaxAuthFailures() *ywrapper.UintValue {
	if x != nil {
		return x.MaxAuthFailures
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDscp   *ywrapper.BoolValue   `protobuf:"bytes,382380892,opt,name=trust_dscp,json=trustDscp,proto3" json:"trust_dscp,omitempty"`
	WmmBeRemark []*ywrapper.UintValue `protobuf:"bytes,236406069,rep,name=wmm_be_remark,json=wmmBeRemark,proto3" json:"wmm_be_remark,omitempty"`
	WmmBkRemark []*ywrapper.UintValue `protobuf:"bytes,117664315,rep,name=wmm_bk_remark,json=wmmBkRemark,proto3" json:"wmm_bk_remark,omitempty"`
	WmmViRemark []*ywrapper.UintValue `protobuf:"bytes,287728309,rep,name=wmm_vi_remark,json=wmmViRemark,proto3" json:"wmm_vi_remark,omitempty"`
	WmmVoRemark []*ywrapper.UintValue `protobuf:"bytes,306763731,rep,name=wmm_vo_remark,json=wmmVoRemark,proto3" json:"wmm_vo_remark,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 8, 0}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) GetTrustDscp() *ywrapper.BoolValue {
	if x != nil {
		return x.TrustDscp
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) GetWmmBeRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmBeRemark
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) GetWmmBkRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmBkRemark
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) GetWmmViRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmViRemark
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) GetWmmVoRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmVoRemark
	}
	return nil
}

type AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDscp   *ywrapper.BoolValue   `protobuf:"bytes,80790179,opt,name=trust_dscp,json=trustDscp,proto3" json:"trust_dscp,omitempty"`
	WmmBeRemark []*ywrapper.UintValue `protobuf:"bytes,330589176,rep,name=wmm_be_remark,json=wmmBeRemark,proto3" json:"wmm_be_remark,omitempty"`
	WmmBkRemark []*ywrapper.UintValue `protobuf:"bytes,54639554,rep,name=wmm_bk_remark,json=wmmBkRemark,proto3" json:"wmm_bk_remark,omitempty"`
	WmmViRemark []*ywrapper.UintValue `protobuf:"bytes,239314016,rep,name=wmm_vi_remark,json=wmmViRemark,proto3" json:"wmm_vi_remark,omitempty"`
	WmmVoRemark []*ywrapper.UintValue `protobuf:"bytes,442297762,rep,name=wmm_vo_remark,json=wmmVoRemark,proto3" json:"wmm_vo_remark,omitempty"`
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) Reset() {
	*x = AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 4, 0, 8, 1}
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) GetTrustDscp() *ywrapper.BoolValue {
	if x != nil {
		return x.TrustDscp
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) GetWmmBeRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmBeRemark
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) GetWmmBkRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmBkRemark
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) GetWmmViRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmViRemark
	}
	return nil
}

func (x *AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) GetWmmVoRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmVoRemark
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounting     *AccessPoints_AccessPoint_System_Aaa_Accounting     `protobuf:"bytes,395184962,opt,name=accounting,proto3" json:"accounting,omitempty"`
	Authentication *AccessPoints_AccessPoint_System_Aaa_Authentication `protobuf:"bytes,207938209,opt,name=authentication,proto3" json:"authentication,omitempty"`
	Authorization  *AccessPoints_AccessPoint_System_Aaa_Authorization  `protobuf:"bytes,324795208,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Config         *AccessPoints_AccessPoint_System_Aaa_Config         `protobuf:"bytes,93673007,opt,name=config,proto3" json:"config,omitempty"`
	ServerGroups   *AccessPoints_AccessPoint_System_Aaa_ServerGroups   `protobuf:"bytes,493042737,opt,name=server_groups,json=serverGroups,proto3" json:"server_groups,omitempty"`
	State          *AccessPoints_AccessPoint_System_Aaa_State          `protobuf:"bytes,393642400,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa) GetAccounting() *AccessPoints_AccessPoint_System_Aaa_Accounting {
	if x != nil {
		return x.Accounting
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa) GetAuthentication() *AccessPoints_AccessPoint_System_Aaa_Authentication {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa) GetAuthorization() *AccessPoints_AccessPoint_System_Aaa_Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa) GetConfig() *AccessPoints_AccessPoint_System_Aaa_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa) GetServerGroups() *AccessPoints_AccessPoint_System_Aaa_ServerGroups {
	if x != nil {
		return x.ServerGroups
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa) GetState() *AccessPoints_AccessPoint_System_Aaa_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Alarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alarm []*AccessPoints_AccessPoint_System_Alarms_AlarmKey `protobuf:"bytes,426633251,rep,name=alarm,proto3" json:"alarm,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Alarms) Reset() {
	*x = AccessPoints_AccessPoint_System_Alarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Alarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Alarms) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Alarms) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Alarms.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Alarms) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 1}
}

func (x *AccessPoints_AccessPoint_System_Alarms) GetAlarm() []*AccessPoints_AccessPoint_System_Alarms_AlarmKey {
	if x != nil {
		return x.Alarm
	}
	return nil
}

type AccessPoints_AccessPoint_System_Clock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Clock_Config `protobuf:"bytes,291331576,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Clock_State  `protobuf:"bytes,102347281,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Clock) Reset() {
	*x = AccessPoints_AccessPoint_System_Clock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Clock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Clock) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Clock) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Clock.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Clock) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 2}
}

func (x *AccessPoints_AccessPoint_System_Clock) GetConfig() *AccessPoints_AccessPoint_System_Clock_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Clock) GetState() *AccessPoints_AccessPoint_System_Clock_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainName  *ywrapper.StringValue `protobuf:"bytes,341586104,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	Hostname    *ywrapper.StringValue `protobuf:"bytes,381963539,opt,name=hostname,proto3" json:"hostname,omitempty"`
	LoginBanner *ywrapper.StringValue `protobuf:"bytes,277642138,opt,name=login_banner,json=loginBanner,proto3" json:"login_banner,omitempty"`
	MotdBanner  *ywrapper.StringValue `protobuf:"bytes,468517355,opt,name=motd_banner,json=motdBanner,proto3" json:"motd_banner,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 3}
}

func (x *AccessPoints_AccessPoint_System_Config) GetDomainName() *ywrapper.StringValue {
	if x != nil {
		return x.DomainName
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Config) GetHostname() *ywrapper.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Config) GetLoginBanner() *ywrapper.StringValue {
	if x != nil {
		return x.LoginBanner
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Config) GetMotdBanner() *ywrapper.StringValue {
	if x != nil {
		return x.MotdBanner
	}
	return nil
}

type AccessPoints_AccessPoint_System_Cpus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu []*AccessPoints_AccessPoint_System_Cpus_CpuKey `protobuf:"bytes,233570493,rep,name=cpu,proto3" json:"cpu,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Cpus) Reset() {
	*x = AccessPoints_AccessPoint_System_Cpus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Cpus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Cpus) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Cpus) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Cpus.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Cpus) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 4}
}

func (x *AccessPoints_AccessPoint_System_Cpus) GetCpu() []*AccessPoints_AccessPoint_System_Cpus_CpuKey {
	if x != nil {
		return x.Cpu
	}
	return nil
}

type AccessPoints_AccessPoint_System_Dns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *AccessPoints_AccessPoint_System_Dns_Config      `protobuf:"bytes,352454017,opt,name=config,proto3" json:"config,omitempty"`
	HostEntries *AccessPoints_AccessPoint_System_Dns_HostEntries `protobuf:"bytes,119095278,opt,name=host_entries,json=hostEntries,proto3" json:"host_entries,omitempty"`
	Servers     *AccessPoints_AccessPoint_System_Dns_Servers     `protobuf:"bytes,411148645,opt,name=servers,proto3" json:"servers,omitempty"`
	State       *AccessPoints_AccessPoint_System_Dns_State       `protobuf:"bytes,27768566,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Dns) Reset() {
	*x = AccessPoints_AccessPoint_System_Dns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Dns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Dns) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Dns) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Dns.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Dns) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 5}
}

func (x *AccessPoints_AccessPoint_System_Dns) GetConfig() *AccessPoints_AccessPoint_System_Dns_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Dns) GetHostEntries() *AccessPoints_AccessPoint_System_Dns_HostEntries {
	if x != nil {
		return x.HostEntries
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Dns) GetServers() *AccessPoints_AccessPoint_System_Dns_Servers {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Dns) GetState() *AccessPoints_AccessPoint_System_Dns_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_GrpcServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_GrpcServer_Config `protobuf:"bytes,334266110,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_GrpcServer_State  `protobuf:"bytes,102445291,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_GrpcServer) Reset() {
	*x = AccessPoints_AccessPoint_System_GrpcServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_GrpcServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_GrpcServer) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_GrpcServer) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_GrpcServer.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_GrpcServer) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 6}
}

func (x *AccessPoints_AccessPoint_System_GrpcServer) GetConfig() *AccessPoints_AccessPoint_System_GrpcServer_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_GrpcServer) GetState() *AccessPoints_AccessPoint_System_GrpcServer_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Licenses *AccessPoints_AccessPoint_System_License_Licenses `protobuf:"bytes,525732723,opt,name=licenses,proto3" json:"licenses,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_License) Reset() {
	*x = AccessPoints_AccessPoint_System_License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_License) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_License) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_License.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_License) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 7}
}

func (x *AccessPoints_AccessPoint_System_License) GetLicenses() *AccessPoints_AccessPoint_System_License_Licenses {
	if x != nil {
		return x.Licenses
	}
	return nil
}

type AccessPoints_AccessPoint_System_Logging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Console       *AccessPoints_AccessPoint_System_Logging_Console       `protobuf:"bytes,194524352,opt,name=console,proto3" json:"console,omitempty"`
	RemoteServers *AccessPoints_AccessPoint_System_Logging_RemoteServers `protobuf:"bytes,179471252,opt,name=remote_servers,json=remoteServers,proto3" json:"remote_servers,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8}
}

func (x *AccessPoints_AccessPoint_System_Logging) GetConsole() *AccessPoints_AccessPoint_System_Logging_Console {
	if x != nil {
		return x.Console
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Logging) GetRemoteServers() *AccessPoints_AccessPoint_System_Logging_RemoteServers {
	if x != nil {
		return x.RemoteServers
	}
	return nil
}

type AccessPoints_AccessPoint_System_Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Memory_Config `protobuf:"bytes,135107827,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Memory_State  `protobuf:"bytes,120418132,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Memory) Reset() {
	*x = AccessPoints_AccessPoint_System_Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Memory) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Memory) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Memory.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Memory) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 9}
}

func (x *AccessPoints_AccessPoint_System_Memory) GetConfig() *AccessPoints_AccessPoint_System_Memory_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Memory) GetState() *AccessPoints_AccessPoint_System_Memory_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Messages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *AccessPoints_AccessPoint_System_Messages_Config       `protobuf:"bytes,10869824,opt,name=config,proto3" json:"config,omitempty"`
	DebugEntries *AccessPoints_AccessPoint_System_Messages_DebugEntries `protobuf:"bytes,283830324,opt,name=debug_entries,json=debugEntries,proto3" json:"debug_entries,omitempty"`
	State        *AccessPoints_AccessPoint_System_Messages_State        `protobuf:"bytes,492404025,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Messages) Reset() {
	*x = AccessPoints_AccessPoint_System_Messages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Messages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Messages) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Messages) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Messages.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Messages) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 10}
}

func (x *AccessPoints_AccessPoint_System_Messages) GetConfig() *AccessPoints_AccessPoint_System_Messages_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Messages) GetDebugEntries() *AccessPoints_AccessPoint_System_Messages_DebugEntries {
	if x != nil {
		return x.DebugEntries
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Messages) GetState() *AccessPoints_AccessPoint_System_Messages_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Ntp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config  *AccessPoints_AccessPoint_System_Ntp_Config  `protobuf:"bytes,193793528,opt,name=config,proto3" json:"config,omitempty"`
	NtpKeys *AccessPoints_AccessPoint_System_Ntp_NtpKeys `protobuf:"bytes,156599249,opt,name=ntp_keys,json=ntpKeys,proto3" json:"ntp_keys,omitempty"`
	Servers *AccessPoints_AccessPoint_System_Ntp_Servers `protobuf:"bytes,328283498,opt,name=servers,proto3" json:"servers,omitempty"`
	State   *AccessPoints_AccessPoint_System_Ntp_State   `protobuf:"bytes,196690449,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Ntp) Reset() {
	*x = AccessPoints_AccessPoint_System_Ntp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Ntp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Ntp) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Ntp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Ntp) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11}
}

func (x *AccessPoints_AccessPoint_System_Ntp) GetConfig() *AccessPoints_AccessPoint_System_Ntp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp) GetNtpKeys() *AccessPoints_AccessPoint_System_Ntp_NtpKeys {
	if x != nil {
		return x.NtpKeys
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp) GetServers() *AccessPoints_AccessPoint_System_Ntp_Servers {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp) GetState() *AccessPoints_AccessPoint_System_Ntp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Processes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process []*AccessPoints_AccessPoint_System_Processes_ProcessKey `protobuf:"bytes,209967788,rep,name=process,proto3" json:"process,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Processes) Reset() {
	*x = AccessPoints_AccessPoint_System_Processes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Processes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Processes) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Processes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Processes.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Processes) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 12}
}

func (x *AccessPoints_AccessPoint_System_Processes) GetProcess() []*AccessPoints_AccessPoint_System_Processes_ProcessKey {
	if x != nil {
		return x.Process
	}
	return nil
}

type AccessPoints_AccessPoint_System_SshServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_SshServer_Config `protobuf:"bytes,143078026,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_SshServer_State  `protobuf:"bytes,322762023,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_SshServer) Reset() {
	*x = AccessPoints_AccessPoint_System_SshServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_SshServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_SshServer) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_SshServer) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_SshServer.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_SshServer) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 13}
}

func (x *AccessPoints_AccessPoint_System_SshServer) GetConfig() *AccessPoints_AccessPoint_System_SshServer_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_SshServer) GetState() *AccessPoints_AccessPoint_System_SshServer_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BootTime        *ywrapper.UintValue   `protobuf:"bytes,307549397,opt,name=boot_time,json=bootTime,proto3" json:"boot_time,omitempty"`
	CurrentDatetime *ywrapper.StringValue `protobuf:"bytes,8121154,opt,name=current_datetime,json=currentDatetime,proto3" json:"current_datetime,omitempty"`
	DomainName      *ywrapper.StringValue `protobuf:"bytes,344996527,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	Hostname        *ywrapper.StringValue `protobuf:"bytes,317134122,opt,name=hostname,proto3" json:"hostname,omitempty"`
	LoginBanner     *ywrapper.StringValue `protobuf:"bytes,455717739,opt,name=login_banner,json=loginBanner,proto3" json:"login_banner,omitempty"`
	MotdBanner      *ywrapper.StringValue `protobuf:"bytes,505008348,opt,name=motd_banner,json=motdBanner,proto3" json:"motd_banner,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_State) Reset() {
	*x = AccessPoints_AccessPoint_System_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 14}
}

func (x *AccessPoints_AccessPoint_System_State) GetBootTime() *ywrapper.UintValue {
	if x != nil {
		return x.BootTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_State) GetCurrentDatetime() *ywrapper.StringValue {
	if x != nil {
		return x.CurrentDatetime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_State) GetDomainName() *ywrapper.StringValue {
	if x != nil {
		return x.DomainName
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_State) GetHostname() *ywrapper.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_State) GetLoginBanner() *ywrapper.StringValue {
	if x != nil {
		return x.LoginBanner
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_State) GetMotdBanner() *ywrapper.StringValue {
	if x != nil {
		return x.MotdBanner
	}
	return nil
}

type AccessPoints_AccessPoint_System_TelnetServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_TelnetServer_Config `protobuf:"bytes,533189078,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_TelnetServer_State  `protobuf:"bytes,389693315,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_TelnetServer) Reset() {
	*x = AccessPoints_AccessPoint_System_TelnetServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_TelnetServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_TelnetServer) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_TelnetServer) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_TelnetServer.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_TelnetServer) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 15}
}

func (x *AccessPoints_AccessPoint_System_TelnetServer) GetConfig() *AccessPoints_AccessPoint_System_TelnetServer_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_TelnetServer) GetState() *AccessPoints_AccessPoint_System_TelnetServer_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Accounting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Aaa_Accounting_Config `protobuf:"bytes,132887907,opt,name=config,proto3" json:"config,omitempty"`
	Events *AccessPoints_AccessPoint_System_Aaa_Accounting_Events `protobuf:"bytes,93725866,opt,name=events,proto3" json:"events,omitempty"`
	State  *AccessPoints_AccessPoint_System_Aaa_Accounting_State  `protobuf:"bytes,166257476,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Accounting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Accounting) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Accounting.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Accounting) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting) GetConfig() *AccessPoints_AccessPoint_System_Aaa_Accounting_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting) GetEvents() *AccessPoints_AccessPoint_System_Aaa_Accounting_Events {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting) GetState() *AccessPoints_AccessPoint_System_Aaa_Accounting_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminUser *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser `protobuf:"bytes,314899031,opt,name=admin_user,json=adminUser,proto3" json:"admin_user,omitempty"`
	Config    *AccessPoints_AccessPoint_System_Aaa_Authentication_Config    `protobuf:"bytes,64840486,opt,name=config,proto3" json:"config,omitempty"`
	State     *AccessPoints_AccessPoint_System_Aaa_Authentication_State     `protobuf:"bytes,292309651,opt,name=state,proto3" json:"state,omitempty"`
	Users     *AccessPoints_AccessPoint_System_Aaa_Authentication_Users     `protobuf:"bytes,431869828,opt,name=users,proto3" json:"users,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authentication.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authentication) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication) GetAdminUser() *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser {
	if x != nil {
		return x.AdminUser
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication) GetConfig() *AccessPoints_AccessPoint_System_Aaa_Authentication_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication) GetState() *AccessPoints_AccessPoint_System_Aaa_Authentication_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication) GetUsers() *AccessPoints_AccessPoint_System_Aaa_Authentication_Users {
	if x != nil {
		return x.Users
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Aaa_Authorization_Config `protobuf:"bytes,24305581,opt,name=config,proto3" json:"config,omitempty"`
	Events *AccessPoints_AccessPoint_System_Aaa_Authorization_Events `protobuf:"bytes,138538492,opt,name=events,proto3" json:"events,omitempty"`
	State  *AccessPoints_AccessPoint_System_Aaa_Authorization_State  `protobuf:"bytes,50349922,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authorization) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authorization.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authorization) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 2}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization) GetConfig() *AccessPoints_AccessPoint_System_Aaa_Authorization_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization) GetEvents() *AccessPoints_AccessPoint_System_Aaa_Authorization_Events {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization) GetState() *AccessPoints_AccessPoint_System_Aaa_Authorization_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessPoints_AccessPoint_System_Aaa_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 3}
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerGroup []*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroupKey `protobuf:"bytes,154202187,rep,name=server_group,json=serverGroup,proto3" json:"server_group,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups) GetServerGroup() []*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroupKey {
	if x != nil {
		return x.ServerGroup
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessPoints_AccessPoint_System_Aaa_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 5}
}

type AccessPoints_AccessPoint_System_Aaa_Accounting_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountingMethod []*AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethodUnion `protobuf:"bytes,89955965,rep,name=accounting_method,json=accountingMethod,proto3" json:"accounting_method,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Accounting_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Accounting_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Accounting_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Accounting_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Config) GetAccountingMethod() []*AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethodUnion {
	if x != nil {
		return x.AccountingMethod
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Accounting_Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event []*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_EventKey `protobuf:"bytes,443644363,rep,name=event,proto3" json:"event,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Accounting_Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Accounting_Events) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Accounting_Events.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Accounting_Events) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events) GetEvent() []*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_EventKey {
	if x != nil {
		return x.Event
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Accounting_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountingMethod []*AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethodUnion `protobuf:"bytes,251482186,rep,name=accounting_method,json=accountingMethod,proto3" json:"accounting_method,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Accounting_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Accounting_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Accounting_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Accounting_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 0, 2}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_State) GetAccountingMethod() []*AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethodUnion {
	if x != nil {
		return x.AccountingMethod
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethodUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountingMethodOpenconfigaaatypesaaamethodtype OpenconfigAaaTypesAAAMETHODTYPE `protobuf:"varint,420046428,opt,name=accounting_method_openconfigaaatypesaaamethodtype,json=accountingMethodOpenconfigaaatypesaaamethodtype,proto3,enum=openconfig.OpenconfigAaaTypesAAAMETHODTYPE" json:"accounting_method_openconfigaaatypesaaamethodtype,omitempty"`
	AccountingMethodString                          string                          `protobuf:"bytes,29221163,opt,name=accounting_method_string,json=accountingMethodString,proto3" json:"accounting_method_string,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethodUnion) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethodUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethodUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethodUnion) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethodUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethodUnion.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethodUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethodUnion) GetAccountingMethodOpenconfigaaatypesaaamethodtype() OpenconfigAaaTypesAAAMETHODTYPE {
	if x != nil {
		return x.AccountingMethodOpenconfigaaatypesaaamethodtype
	}
	return OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethodUnion) GetAccountingMethodString() string {
	if x != nil {
		return x.AccountingMethodString
	}
	return ""
}

type AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config `protobuf:"bytes,200110748,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State  `protobuf:"bytes,366286613,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 0, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) GetConfig() *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) GetState() *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Accounting_Events_EventKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE                     `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE" json:"event_type,omitempty"`
	Event     *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_EventKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Accounting_Events_EventKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_EventKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_EventKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_EventKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Accounting_Events_EventKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_EventKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 0, 1, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_EventKey) GetEventType() OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE {
	if x != nil {
		return x.EventType
	}
	return OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_EventKey) GetEvent() *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE                                  `protobuf:"varint,170629062,opt,name=event_type,json=eventType,proto3,enum=openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE" json:"event_type,omitempty"`
	Record    AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record `protobuf:"varint,33835424,opt,name=record,proto3,enum=openconfig.AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record" json:"record,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 0, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config) GetEventType() OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE {
	if x != nil {
		return x.EventType
	}
	return OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config) GetRecord() AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record {
	if x != nil {
		return x.Record
	}
	return AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_RECORD_UNSET
}

type AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE                                 `protobuf:"varint,31161949,opt,name=event_type,json=eventType,proto3,enum=openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE" json:"event_type,omitempty"`
	Record    AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record `protobuf:"varint,297836839,opt,name=record,proto3,enum=openconfig.AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record" json:"record,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 0, 1, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State) GetEventType() OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE {
	if x != nil {
		return x.EventType
	}
	return OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State) GetRecord() AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record {
	if x != nil {
		return x.Record
	}
	return AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_RECORD_UNSET
}

type AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethodUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountingMethodOpenconfigaaatypesaaamethodtype OpenconfigAaaTypesAAAMETHODTYPE `protobuf:"varint,173595271,opt,name=accounting_method_openconfigaaatypesaaamethodtype,json=accountingMethodOpenconfigaaatypesaaamethodtype,proto3,enum=openconfig.OpenconfigAaaTypesAAAMETHODTYPE" json:"accounting_method_openconfigaaatypesaaamethodtype,omitempty"`
	AccountingMethodString                          string                          `protobuf:"bytes,295262802,opt,name=accounting_method_string,json=accountingMethodString,proto3" json:"accounting_method_string,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethodUnion) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethodUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethodUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethodUnion) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethodUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethodUnion.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethodUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 0, 2, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethodUnion) GetAccountingMethodOpenconfigaaatypesaaamethodtype() OpenconfigAaaTypesAAAMETHODTYPE {
	if x != nil {
		return x.AccountingMethodOpenconfigaaatypesaaamethodtype
	}
	return OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethodUnion) GetAccountingMethodString() string {
	if x != nil {
		return x.AccountingMethodString
	}
	return ""
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config `protobuf:"bytes,25796552,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State  `protobuf:"bytes,534560865,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser) GetConfig() *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser) GetState() *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticationMethod []*AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethodUnion `protobuf:"bytes,475262069,rep,name=authentication_method,json=authenticationMethod,proto3" json:"authentication_method,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authentication_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authentication_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 1, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Config) GetAuthenticationMethod() []*AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethodUnion {
	if x != nil {
		return x.AuthenticationMethod
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticationMethod []*AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethodUnion `protobuf:"bytes,155400636,rep,name=authentication_method,json=authenticationMethod,proto3" json:"authentication_method,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authentication_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authentication_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authentication_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 1, 2}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_State) GetAuthenticationMethod() []*AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethodUnion {
	if x != nil {
		return x.AuthenticationMethod
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User []*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_UserKey `protobuf:"bytes,160115618,rep,name=user,proto3" json:"user,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authentication_Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Users) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authentication_Users.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Users) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 1, 3}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users) GetUser() []*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_UserKey {
	if x != nil {
		return x.User
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminPassword       *ywrapper.StringValue `protobuf:"bytes,518884846,opt,name=admin_password,json=adminPassword,proto3" json:"admin_password,omitempty"`
	AdminPasswordHashed *ywrapper.StringValue `protobuf:"bytes,77802616,opt,name=admin_password_hashed,json=adminPasswordHashed,proto3" json:"admin_password_hashed,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config) GetAdminPassword() *ywrapper.StringValue {
	if x != nil {
		return x.AdminPassword
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config) GetAdminPasswordHashed() *ywrapper.StringValue {
	if x != nil {
		return x.AdminPasswordHashed
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminPassword       *ywrapper.StringValue `protobuf:"bytes,509711845,opt,name=admin_password,json=adminPassword,proto3" json:"admin_password,omitempty"`
	AdminPasswordHashed *ywrapper.StringValue `protobuf:"bytes,329646473,opt,name=admin_password_hashed,json=adminPasswordHashed,proto3" json:"admin_password_hashed,omitempty"`
	AdminUsername       *ywrapper.StringValue `protobuf:"bytes,160058898,opt,name=admin_username,json=adminUsername,proto3" json:"admin_username,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 1, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State) GetAdminPassword() *ywrapper.StringValue {
	if x != nil {
		return x.AdminPassword
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State) GetAdminPasswordHashed() *ywrapper.StringValue {
	if x != nil {
		return x.AdminPasswordHashed
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State) GetAdminUsername() *ywrapper.StringValue {
	if x != nil {
		return x.AdminUsername
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethodUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticationMethodOpenconfigaaatypesaaamethodtype OpenconfigAaaTypesAAAMETHODTYPE `protobuf:"varint,260528356,opt,name=authentication_method_openconfigaaatypesaaamethodtype,json=authenticationMethodOpenconfigaaatypesaaamethodtype,proto3,enum=openconfig.OpenconfigAaaTypesAAAMETHODTYPE" json:"authentication_method_openconfigaaatypesaaamethodtype,omitempty"`
	AuthenticationMethodString                          string                          `protobuf:"bytes,139696963,opt,name=authentication_method_string,json=authenticationMethodString,proto3" json:"authentication_method_string,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethodUnion) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethodUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethodUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethodUnion) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethodUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethodUnion.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethodUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 1, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethodUnion) GetAuthenticationMethodOpenconfigaaatypesaaamethodtype() OpenconfigAaaTypesAAAMETHODTYPE {
	if x != nil {
		return x.AuthenticationMethodOpenconfigaaatypesaaamethodtype
	}
	return OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethodUnion) GetAuthenticationMethodString() string {
	if x != nil {
		return x.AuthenticationMethodString
	}
	return ""
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethodUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticationMethodOpenconfigaaatypesaaamethodtype OpenconfigAaaTypesAAAMETHODTYPE `protobuf:"varint,409512449,opt,name=authentication_method_openconfigaaatypesaaamethodtype,json=authenticationMethodOpenconfigaaatypesaaamethodtype,proto3,enum=openconfig.OpenconfigAaaTypesAAAMETHODTYPE" json:"authentication_method_openconfigaaatypesaaamethodtype,omitempty"`
	AuthenticationMethodString                          string                          `protobuf:"bytes,106428420,opt,name=authentication_method_string,json=authenticationMethodString,proto3" json:"authentication_method_string,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethodUnion) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethodUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethodUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethodUnion) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethodUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethodUnion.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethodUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 1, 2, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethodUnion) GetAuthenticationMethodOpenconfigaaatypesaaamethodtype() OpenconfigAaaTypesAAAMETHODTYPE {
	if x != nil {
		return x.AuthenticationMethodOpenconfigaaatypesaaamethodtype
	}
	return OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethodUnion) GetAuthenticationMethodString() string {
	if x != nil {
		return x.AuthenticationMethodString
	}
	return ""
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config `protobuf:"bytes,313497283,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State  `protobuf:"bytes,376034596,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 1, 3, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) GetConfig() *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) GetState() *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_Users_UserKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string                                                         `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	User     *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_UserKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authentication_Users_UserKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_UserKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_UserKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_UserKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authentication_Users_UserKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_UserKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 1, 3, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_UserKey) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_UserKey) GetUser() *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User {
	if x != nil {
		return x.User
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password       *ywrapper.StringValue `protobuf:"bytes,216967253,opt,name=password,proto3" json:"password,omitempty"`
	PasswordHashed *ywrapper.StringValue `protobuf:"bytes,514123577,opt,name=password_hashed,json=passwordHashed,proto3" json:"password_hashed,omitempty"`
	// Types that are assignable to Role:
	//	*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_RoleOpenconfigaaatypessystemdefinedroles
	//	*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_RoleString
	Role     isAccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role `protobuf_oneof:"role"`
	SshKey   *ywrapper.StringValue                                                       `protobuf:"bytes,527474434,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	Username *ywrapper.StringValue                                                       `protobuf:"bytes,421473794,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 1, 3, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) GetPassword() *ywrapper.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) GetPasswordHashed() *ywrapper.StringValue {
	if x != nil {
		return x.PasswordHashed
	}
	return nil
}

func (m *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) GetRole() isAccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) GetRoleOpenconfigaaatypessystemdefinedroles() OpenconfigAaaTypesSYSTEMDEFINEDROLES {
	if x, ok := x.GetRole().(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_RoleOpenconfigaaatypessystemdefinedroles); ok {
		return x.RoleOpenconfigaaatypessystemdefinedroles
	}
	return OpenconfigAaaTypesSYSTEMDEFINEDROLES_OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_UNSET
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) GetRoleString() string {
	if x, ok := x.GetRole().(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_RoleString); ok {
		return x.RoleString
	}
	return ""
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) GetSshKey() *ywrapper.StringValue {
	if x != nil {
		return x.SshKey
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) GetUsername() *ywrapper.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

type isAccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role interface {
	isAccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role()
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_RoleOpenconfigaaatypessystemdefinedroles struct {
	RoleOpenconfigaaatypessystemdefinedroles OpenconfigAaaTypesSYSTEMDEFINEDROLES `protobuf:"varint,226065840,opt,name=role_openconfigaaatypessystemdefinedroles,json=roleOpenconfigaaatypessystemdefinedroles,proto3,enum=openconfig.OpenconfigAaaTypesSYSTEMDEFINEDROLES,oneof"`
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_RoleString struct {
	RoleString string `protobuf:"bytes,78412198,opt,name=role_string,json=roleString,proto3,oneof"`
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_RoleOpenconfigaaatypessystemdefinedroles) isAccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role() {
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_RoleString) isAccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role() {
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password       *ywrapper.StringValue `protobuf:"bytes,152993100,opt,name=password,proto3" json:"password,omitempty"`
	PasswordHashed *ywrapper.StringValue `protobuf:"bytes,309387054,opt,name=password_hashed,json=passwordHashed,proto3" json:"password_hashed,omitempty"`
	// Types that are assignable to Role:
	//	*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_RoleOpenconfigaaatypessystemdefinedroles
	//	*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_RoleString
	Role     isAccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role `protobuf_oneof:"role"`
	SshKey   *ywrapper.StringValue                                                      `protobuf:"bytes,300451941,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	Username *ywrapper.StringValue                                                      `protobuf:"bytes,463826631,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 1, 3, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) GetPassword() *ywrapper.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) GetPasswordHashed() *ywrapper.StringValue {
	if x != nil {
		return x.PasswordHashed
	}
	return nil
}

func (m *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) GetRole() isAccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) GetRoleOpenconfigaaatypessystemdefinedroles() OpenconfigAaaTypesSYSTEMDEFINEDROLES {
	if x, ok := x.GetRole().(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_RoleOpenconfigaaatypessystemdefinedroles); ok {
		return x.RoleOpenconfigaaatypessystemdefinedroles
	}
	return OpenconfigAaaTypesSYSTEMDEFINEDROLES_OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_UNSET
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) GetRoleString() string {
	if x, ok := x.GetRole().(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_RoleString); ok {
		return x.RoleString
	}
	return ""
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) GetSshKey() *ywrapper.StringValue {
	if x != nil {
		return x.SshKey
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) GetUsername() *ywrapper.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

type isAccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role interface {
	isAccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role()
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_RoleOpenconfigaaatypessystemdefinedroles struct {
	RoleOpenconfigaaatypessystemdefinedroles OpenconfigAaaTypesSYSTEMDEFINEDROLES `protobuf:"varint,513153959,opt,name=role_openconfigaaatypessystemdefinedroles,json=roleOpenconfigaaatypessystemdefinedroles,proto3,enum=openconfig.OpenconfigAaaTypesSYSTEMDEFINEDROLES,oneof"`
}

type AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_RoleString struct {
	RoleString string `protobuf:"bytes,142700581,opt,name=role_string,json=roleString,proto3,oneof"`
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_RoleOpenconfigaaatypessystemdefinedroles) isAccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role() {
}

func (*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_RoleString) isAccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role() {
}

type AccessPoints_AccessPoint_System_Aaa_Authorization_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationMethod []*AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethodUnion `protobuf:"bytes,398580847,rep,name=authorization_method,json=authorizationMethod,proto3" json:"authorization_method,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authorization_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authorization_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authorization_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authorization_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 2, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Config) GetAuthorizationMethod() []*AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethodUnion {
	if x != nil {
		return x.AuthorizationMethod
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authorization_Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event []*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_EventKey `protobuf:"bytes,156638937,rep,name=event,proto3" json:"event,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authorization_Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authorization_Events) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authorization_Events.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authorization_Events) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 2, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events) GetEvent() []*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_EventKey {
	if x != nil {
		return x.Event
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authorization_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationMethod []*AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethodUnion `protobuf:"bytes,490535254,rep,name=authorization_method,json=authorizationMethod,proto3" json:"authorization_method,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authorization_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authorization_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authorization_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authorization_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 2, 2}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_State) GetAuthorizationMethod() []*AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethodUnion {
	if x != nil {
		return x.AuthorizationMethod
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethodUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationMethodOpenconfigaaatypesaaamethodtype OpenconfigAaaTypesAAAMETHODTYPE `protobuf:"varint,146504790,opt,name=authorization_method_openconfigaaatypesaaamethodtype,json=authorizationMethodOpenconfigaaatypesaaamethodtype,proto3,enum=openconfig.OpenconfigAaaTypesAAAMETHODTYPE" json:"authorization_method_openconfigaaatypesaaamethodtype,omitempty"`
	AuthorizationMethodString                          string                          `protobuf:"bytes,126230445,opt,name=authorization_method_string,json=authorizationMethodString,proto3" json:"authorization_method_string,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethodUnion) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethodUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethodUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethodUnion) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethodUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethodUnion.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethodUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 2, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethodUnion) GetAuthorizationMethodOpenconfigaaatypesaaamethodtype() OpenconfigAaaTypesAAAMETHODTYPE {
	if x != nil {
		return x.AuthorizationMethodOpenconfigaaatypesaaamethodtype
	}
	return OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethodUnion) GetAuthorizationMethodString() string {
	if x != nil {
		return x.AuthorizationMethodString
	}
	return ""
}

type AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config `protobuf:"bytes,149762094,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State  `protobuf:"bytes,451291739,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 2, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) GetConfig() *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) GetState() *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authorization_Events_EventKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE                     `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE" json:"event_type,omitempty"`
	Event     *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_EventKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authorization_Events_EventKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_EventKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_EventKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_EventKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authorization_Events_EventKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_EventKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 2, 1, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_EventKey) GetEventType() OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE {
	if x != nil {
		return x.EventType
	}
	return OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_EventKey) GetEvent() *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE `protobuf:"varint,100418984,opt,name=event_type,json=eventType,proto3,enum=openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE" json:"event_type,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 2, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config) GetEventType() OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE {
	if x != nil {
		return x.EventType
	}
	return OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_UNSET
}

type AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE `protobuf:"varint,533070691,opt,name=event_type,json=eventType,proto3,enum=openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE" json:"event_type,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 2, 1, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State) GetEventType() OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE {
	if x != nil {
		return x.EventType
	}
	return OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_UNSET
}

type AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethodUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationMethodOpenconfigaaatypesaaamethodtype OpenconfigAaaTypesAAAMETHODTYPE `protobuf:"varint,168314187,opt,name=authorization_method_openconfigaaatypesaaamethodtype,json=authorizationMethodOpenconfigaaatypesaaamethodtype,proto3,enum=openconfig.OpenconfigAaaTypesAAAMETHODTYPE" json:"authorization_method_openconfigaaatypesaaamethodtype,omitempty"`
	AuthorizationMethodString                          string                          `protobuf:"bytes,119170598,opt,name=authorization_method_string,json=authorizationMethodString,proto3" json:"authorization_method_string,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethodUnion) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethodUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethodUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethodUnion) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethodUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethodUnion.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethodUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 2, 2, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethodUnion) GetAuthorizationMethodOpenconfigaaatypesaaamethodtype() OpenconfigAaaTypesAAAMETHODTYPE {
	if x != nil {
		return x.AuthorizationMethodOpenconfigaaatypesaaamethodtype
	}
	return OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethodUnion) GetAuthorizationMethodString() string {
	if x != nil {
		return x.AuthorizationMethodString
	}
	return ""
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config  *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config  `protobuf:"bytes,146579996,opt,name=config,proto3" json:"config,omitempty"`
	Servers *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers `protobuf:"bytes,38152126,opt,name=servers,proto3" json:"servers,omitempty"`
	State   *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State   `protobuf:"bytes,31775125,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) GetConfig() *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) GetServers() *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) GetState() *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ServerGroup *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup `protobuf:"bytes,2,opt,name=server_group,json=serverGroup,proto3" json:"server_group,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroupKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroupKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroupKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroupKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroupKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroupKey) GetServerGroup() *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup {
	if x != nil {
		return x.ServerGroup
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue           `protobuf:"bytes,296555646,opt,name=name,proto3" json:"name,omitempty"`
	Type OpenconfigAaaTypesAAASERVERTYPE `protobuf:"varint,103335891,opt,name=type,proto3,enum=openconfig.OpenconfigAaaTypesAAASERVERTYPE" json:"type,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config) GetType() OpenconfigAaaTypesAAASERVERTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigAaaTypesAAASERVERTYPE_OPENCONFIGAAATYPESAAASERVERTYPE_UNSET
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server []*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey `protobuf:"bytes,285625548,rep,name=server,proto3" json:"server,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers) GetServer() []*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey {
	if x != nil {
		return x.Server
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue           `protobuf:"bytes,383233521,opt,name=name,proto3" json:"name,omitempty"`
	Type OpenconfigAaaTypesAAASERVERTYPE `protobuf:"varint,53007000,opt,name=type,proto3,enum=openconfig.OpenconfigAaaTypesAAASERVERTYPE" json:"type,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0, 2}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State) GetType() OpenconfigAaaTypesAAASERVERTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigAaaTypesAAASERVERTYPE_OPENCONFIGAAATYPESAAASERVERTYPE_UNSET
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config `protobuf:"bytes,407053633,opt,name=config,proto3" json:"config,omitempty"`
	Radius *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius `protobuf:"bytes,330901077,opt,name=radius,proto3" json:"radius,omitempty"`
	State  *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State  `protobuf:"bytes,250100150,opt,name=state,proto3" json:"state,omitempty"`
	Tacacs *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs `protobuf:"bytes,335333156,opt,name=tacacs,proto3" json:"tacacs,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetConfig() *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetRadius() *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius {
	if x != nil {
		return x.Radius
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetState() *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetTacacs() *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs {
	if x != nil {
		return x.Tacacs
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string                                                                       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Server  *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0, 1, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey) GetServer() *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *ywrapper.StringValue `protobuf:"bytes,188242844,opt,name=address,proto3" json:"address,omitempty"`
	Name    *ywrapper.StringValue `protobuf:"bytes,344432501,opt,name=name,proto3" json:"name,omitempty"`
	Timeout *ywrapper.UintValue   `protobuf:"bytes,507780629,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) GetTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config `protobuf:"bytes,388185850,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State  `protobuf:"bytes,388169495,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0, 1, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetConfig() *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetState() *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address            *ywrapper.StringValue `protobuf:"bytes,49562407,opt,name=address,proto3" json:"address,omitempty"`
	ConnectionAborts   *ywrapper.UintValue   `protobuf:"bytes,101939779,opt,name=connection_aborts,json=connectionAborts,proto3" json:"connection_aborts,omitempty"`
	ConnectionCloses   *ywrapper.UintValue   `protobuf:"bytes,217614545,opt,name=connection_closes,json=connectionCloses,proto3" json:"connection_closes,omitempty"`
	ConnectionFailures *ywrapper.UintValue   `protobuf:"bytes,25825311,opt,name=connection_failures,json=connectionFailures,proto3" json:"connection_failures,omitempty"`
	ConnectionOpens    *ywrapper.UintValue   `protobuf:"bytes,304511893,opt,name=connection_opens,json=connectionOpens,proto3" json:"connection_opens,omitempty"`
	ConnectionTimeouts *ywrapper.UintValue   `protobuf:"bytes,383937474,opt,name=connection_timeouts,json=connectionTimeouts,proto3" json:"connection_timeouts,omitempty"`
	ErrorsReceived     *ywrapper.UintValue   `protobuf:"bytes,301845204,opt,name=errors_received,json=errorsReceived,proto3" json:"errors_received,omitempty"`
	MessagesReceived   *ywrapper.UintValue   `protobuf:"bytes,65026887,opt,name=messages_received,json=messagesReceived,proto3" json:"messages_received,omitempty"`
	MessagesSent       *ywrapper.UintValue   `protobuf:"bytes,216615924,opt,name=messages_sent,json=messagesSent,proto3" json:"messages_sent,omitempty"`
	Name               *ywrapper.StringValue `protobuf:"bytes,340916252,opt,name=name,proto3" json:"name,omitempty"`
	Timeout            *ywrapper.UintValue   `protobuf:"bytes,242975150,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0, 1, 0, 2}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionAborts() *ywrapper.UintValue {
	if x != nil {
		return x.ConnectionAborts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionCloses() *ywrapper.UintValue {
	if x != nil {
		return x.ConnectionCloses
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionFailures() *ywrapper.UintValue {
	if x != nil {
		return x.ConnectionFailures
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionOpens() *ywrapper.UintValue {
	if x != nil {
		return x.ConnectionOpens
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionTimeouts() *ywrapper.UintValue {
	if x != nil {
		return x.ConnectionTimeouts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetErrorsReceived() *ywrapper.UintValue {
	if x != nil {
		return x.ErrorsReceived
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetMessagesReceived() *ywrapper.UintValue {
	if x != nil {
		return x.MessagesReceived
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetMessagesSent() *ywrapper.UintValue {
	if x != nil {
		return x.MessagesSent
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config `protobuf:"bytes,8144329,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State  `protobuf:"bytes,400839454,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0, 1, 0, 3}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetConfig() *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetState() *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcctPort           *ywrapper.UintValue   `protobuf:"bytes,115672160,opt,name=acct_port,json=acctPort,proto3" json:"acct_port,omitempty"`
	AuthPort           *ywrapper.UintValue   `protobuf:"bytes,16438073,opt,name=auth_port,json=authPort,proto3" json:"auth_port,omitempty"`
	RetransmitAttempts *ywrapper.UintValue   `protobuf:"bytes,73522529,opt,name=retransmit_attempts,json=retransmitAttempts,proto3" json:"retransmit_attempts,omitempty"`
	SecretKey          *ywrapper.StringValue `protobuf:"bytes,287001387,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SourceAddress      *ywrapper.StringValue `protobuf:"bytes,531710485,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0, 1, 0, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetAcctPort() *ywrapper.UintValue {
	if x != nil {
		return x.AcctPort
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetAuthPort() *ywrapper.UintValue {
	if x != nil {
		return x.AuthPort
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetRetransmitAttempts() *ywrapper.UintValue {
	if x != nil {
		return x.RetransmitAttempts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetSecretKey() *ywrapper.StringValue {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcctPort           *ywrapper.UintValue                                                                                `protobuf:"bytes,66298825,opt,name=acct_port,json=acctPort,proto3" json:"acct_port,omitempty"`
	AuthPort           *ywrapper.UintValue                                                                                `protobuf:"bytes,111419964,opt,name=auth_port,json=authPort,proto3" json:"auth_port,omitempty"`
	Counters           *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters `protobuf:"bytes,45048429,opt,name=counters,proto3" json:"counters,omitempty"`
	RetransmitAttempts *ywrapper.UintValue                                                                                `protobuf:"bytes,487947612,opt,name=retransmit_attempts,json=retransmitAttempts,proto3" json:"retransmit_attempts,omitempty"`
	SecretKey          *ywrapper.StringValue                                                                              `protobuf:"bytes,196524168,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SourceAddress      *ywrapper.StringValue                                                                              `protobuf:"bytes,488251670,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0, 1, 0, 1, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetAcctPort() *ywrapper.UintValue {
	if x != nil {
		return x.AcctPort
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetAuthPort() *ywrapper.UintValue {
	if x != nil {
		return x.AuthPort
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetCounters() *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetRetransmitAttempts() *ywrapper.UintValue {
	if x != nil {
		return x.RetransmitAttempts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetSecretKey() *ywrapper.StringValue {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessAccepts         *ywrapper.UintValue `protobuf:"bytes,49842154,opt,name=access_accepts,json=accessAccepts,proto3" json:"access_accepts,omitempty"`
	AccessRejects         *ywrapper.UintValue `protobuf:"bytes,316878341,opt,name=access_rejects,json=accessRejects,proto3" json:"access_rejects,omitempty"`
	RetriedAccessRequests *ywrapper.UintValue `protobuf:"bytes,208605655,opt,name=retried_access_requests,json=retriedAccessRequests,proto3" json:"retried_access_requests,omitempty"`
	TimeoutAccessRequests *ywrapper.UintValue `protobuf:"bytes,160672391,opt,name=timeout_access_requests,json=timeoutAccessRequests,proto3" json:"timeout_access_requests,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0, 1, 0, 1, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetAccessAccepts() *ywrapper.UintValue {
	if x != nil {
		return x.AccessAccepts
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetAccessRejects() *ywrapper.UintValue {
	if x != nil {
		return x.AccessRejects
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetRetriedAccessRequests() *ywrapper.UintValue {
	if x != nil {
		return x.RetriedAccessRequests
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetTimeoutAccessRequests() *ywrapper.UintValue {
	if x != nil {
		return x.TimeoutAccessRequests
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port          *ywrapper.UintValue   `protobuf:"bytes,481578045,opt,name=port,proto3" json:"port,omitempty"`
	SecretKey     *ywrapper.StringValue `protobuf:"bytes,96506218,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SourceAddress *ywrapper.StringValue `protobuf:"bytes,532576068,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0, 1, 0, 3, 0}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) GetSecretKey() *ywrapper.StringValue {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port          *ywrapper.UintValue   `protobuf:"bytes,202052552,opt,name=port,proto3" json:"port,omitempty"`
	SecretKey     *ywrapper.StringValue `protobuf:"bytes,495537223,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SourceAddress *ywrapper.StringValue `protobuf:"bytes,265865697,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 0, 4, 0, 1, 0, 3, 1}
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) GetSecretKey() *ywrapper.StringValue {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type AccessPoints_AccessPoint_System_Alarms_Alarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Alarms_Alarm_Config `protobuf:"bytes,333970724,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Alarms_Alarm_State  `protobuf:"bytes,208778173,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm) Reset() {
	*x = AccessPoints_AccessPoint_System_Alarms_Alarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Alarms_Alarm) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Alarms_Alarm.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Alarms_Alarm) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm) GetConfig() *AccessPoints_AccessPoint_System_Alarms_Alarm_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm) GetState() *AccessPoints_AccessPoint_System_Alarms_Alarm_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Alarms_AlarmKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string                                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Alarm *AccessPoints_AccessPoint_System_Alarms_Alarm `protobuf:"bytes,2,opt,name=alarm,proto3" json:"alarm,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Alarms_AlarmKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Alarms_AlarmKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Alarms_AlarmKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Alarms_AlarmKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Alarms_AlarmKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Alarms_AlarmKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Alarms_AlarmKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 1, 1}
}

func (x *AccessPoints_AccessPoint_System_Alarms_AlarmKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccessPoints_AccessPoint_System_Alarms_AlarmKey) GetAlarm() *AccessPoints_AccessPoint_System_Alarms_Alarm {
	if x != nil {
		return x.Alarm
	}
	return nil
}

type AccessPoints_AccessPoint_System_Alarms_Alarm_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Alarms_Alarm_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Alarms_Alarm_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Alarms_Alarm_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Alarms_Alarm_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 1, 0, 0}
}

type AccessPoints_AccessPoint_System_Alarms_Alarm_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *ywrapper.StringValue                       `protobuf:"bytes,119272615,opt,name=id,proto3" json:"id,omitempty"`
	Resource    *ywrapper.StringValue                       `protobuf:"bytes,301853076,opt,name=resource,proto3" json:"resource,omitempty"`
	Severity    OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY `protobuf:"varint,118081445,opt,name=severity,proto3,enum=openconfig.OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY" json:"severity,omitempty"`
	Text        *ywrapper.StringValue                       `protobuf:"bytes,53216517,opt,name=text,proto3" json:"text,omitempty"`
	TimeCreated *ywrapper.UintValue                         `protobuf:"bytes,419949028,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	// Types that are assignable to TypeId:
	//	*AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeIdOpenconfigalarmtypesopenconfigalarmtypeid
	//	*AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeIdString
	TypeId isAccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId `protobuf_oneof:"type_id"`
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Alarms_Alarm_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Alarms_Alarm_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Alarms_Alarm_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Alarms_Alarm_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 1, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm_State) GetResource() *ywrapper.StringValue {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm_State) GetSeverity() OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY {
	if x != nil {
		return x.Severity
	}
	return OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNSET
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm_State) GetText() *ywrapper.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm_State) GetTimeCreated() *ywrapper.UintValue {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (m *AccessPoints_AccessPoint_System_Alarms_Alarm_State) GetTypeId() isAccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId {
	if m != nil {
		return m.TypeId
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm_State) GetTypeIdOpenconfigalarmtypesopenconfigalarmtypeid() OpenconfigAlarmTypesOPENCONFIGALARMTYPEID {
	if x, ok := x.GetTypeId().(*AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeIdOpenconfigalarmtypesopenconfigalarmtypeid); ok {
		return x.TypeIdOpenconfigalarmtypesopenconfigalarmtypeid
	}
	return OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_UNSET
}

func (x *AccessPoints_AccessPoint_System_Alarms_Alarm_State) GetTypeIdString() string {
	if x, ok := x.GetTypeId().(*AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeIdString); ok {
		return x.TypeIdString
	}
	return ""
}

type isAccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId interface {
	isAccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId()
}

type AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeIdOpenconfigalarmtypesopenconfigalarmtypeid struct {
	TypeIdOpenconfigalarmtypesopenconfigalarmtypeid OpenconfigAlarmTypesOPENCONFIGALARMTYPEID `protobuf:"varint,237876297,opt,name=type_id_openconfigalarmtypesopenconfigalarmtypeid,json=typeIdOpenconfigalarmtypesopenconfigalarmtypeid,proto3,enum=openconfig.OpenconfigAlarmTypesOPENCONFIGALARMTYPEID,oneof"`
}

type AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeIdString struct {
	TypeIdString string `protobuf:"bytes,77451230,opt,name=type_id_string,json=typeIdString,proto3,oneof"`
}

func (*AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeIdOpenconfigalarmtypesopenconfigalarmtypeid) isAccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId() {
}

func (*AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeIdString) isAccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId() {
}

type AccessPoints_AccessPoint_System_Clock_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimezoneName *ywrapper.StringValue `protobuf:"bytes,494706602,opt,name=timezone_name,json=timezoneName,proto3" json:"timezone_name,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Clock_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Clock_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Clock_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Clock_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Clock_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Clock_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Clock_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 2, 0}
}

func (x *AccessPoints_AccessPoint_System_Clock_Config) GetTimezoneName() *ywrapper.StringValue {
	if x != nil {
		return x.TimezoneName
	}
	return nil
}

type AccessPoints_AccessPoint_System_Clock_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimezoneName *ywrapper.StringValue `protobuf:"bytes,331890991,opt,name=timezone_name,json=timezoneName,proto3" json:"timezone_name,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Clock_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Clock_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Clock_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Clock_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Clock_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Clock_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Clock_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 2, 1}
}

func (x *AccessPoints_AccessPoint_System_Clock_State) GetTimezoneName() *ywrapper.StringValue {
	if x != nil {
		return x.TimezoneName
	}
	return nil
}

type AccessPoints_AccessPoint_System_Cpus_Cpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *AccessPoints_AccessPoint_System_Cpus_Cpu_State `protobuf:"bytes,23253231,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu) Reset() {
	*x = AccessPoints_AccessPoint_System_Cpus_Cpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Cpus_Cpu) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Cpus_Cpu.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Cpus_Cpu) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 4, 0}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu) GetState() *AccessPoints_AccessPoint_System_Cpus_Cpu_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Cpus_CpuKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Index:
	//	*AccessPoints_AccessPoint_System_Cpus_CpuKey_IndexIndex
	//	*AccessPoints_AccessPoint_System_Cpus_CpuKey_IndexUint64
	Index isAccessPoints_AccessPoint_System_Cpus_CpuKey_Index `protobuf_oneof:"index"`
	Cpu   *AccessPoints_AccessPoint_System_Cpus_Cpu           `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Cpus_CpuKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Cpus_CpuKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Cpus_CpuKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Cpus_CpuKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Cpus_CpuKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Cpus_CpuKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Cpus_CpuKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 4, 1}
}

func (m *AccessPoints_AccessPoint_System_Cpus_CpuKey) GetIndex() isAccessPoints_AccessPoint_System_Cpus_CpuKey_Index {
	if m != nil {
		return m.Index
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_CpuKey) GetIndexIndex() AccessPoints_AccessPoint_System_Cpus_CpuKey_Index {
	if x, ok := x.GetIndex().(*AccessPoints_AccessPoint_System_Cpus_CpuKey_IndexIndex); ok {
		return x.IndexIndex
	}
	return AccessPoints_AccessPoint_System_Cpus_CpuKey_INDEX_UNSET
}

func (x *AccessPoints_AccessPoint_System_Cpus_CpuKey) GetIndexUint64() uint64 {
	if x, ok := x.GetIndex().(*AccessPoints_AccessPoint_System_Cpus_CpuKey_IndexUint64); ok {
		return x.IndexUint64
	}
	return 0
}

func (x *AccessPoints_AccessPoint_System_Cpus_CpuKey) GetCpu() *AccessPoints_AccessPoint_System_Cpus_Cpu {
	if x != nil {
		return x.Cpu
	}
	return nil
}

type isAccessPoints_AccessPoint_System_Cpus_CpuKey_Index interface {
	isAccessPoints_AccessPoint_System_Cpus_CpuKey_Index()
}

type AccessPoints_AccessPoint_System_Cpus_CpuKey_IndexIndex struct {
	IndexIndex AccessPoints_AccessPoint_System_Cpus_CpuKey_Index `protobuf:"varint,4399175,opt,name=index_index,json=indexIndex,proto3,enum=openconfig.AccessPoints_AccessPoint_System_Cpus_CpuKey_Index,oneof"`
}

type AccessPoints_AccessPoint_System_Cpus_CpuKey_IndexUint64 struct {
	IndexUint64 uint64 `protobuf:"varint,217042799,opt,name=index_uint64,json=indexUint64,proto3,oneof"`
}

func (*AccessPoints_AccessPoint_System_Cpus_CpuKey_IndexIndex) isAccessPoints_AccessPoint_System_Cpus_CpuKey_Index() {
}

func (*AccessPoints_AccessPoint_System_Cpus_CpuKey_IndexUint64) isAccessPoints_AccessPoint_System_Cpus_CpuKey_Index() {
}

type AccessPoints_AccessPoint_System_Cpus_Cpu_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareInterrupt *AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt `protobuf:"bytes,273227848,opt,name=hardware_interrupt,json=hardwareInterrupt,proto3" json:"hardware_interrupt,omitempty"`
	Idle              *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle              `protobuf:"bytes,37519840,opt,name=idle,proto3" json:"idle,omitempty"`
	// Types that are assignable to Index:
	//	*AccessPoints_AccessPoint_System_Cpus_Cpu_State_IndexIndex
	//	*AccessPoints_AccessPoint_System_Cpus_Cpu_State_IndexUint64
	Index             isAccessPoints_AccessPoint_System_Cpus_Cpu_State_Index            `protobuf_oneof:"index"`
	Kernel            *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel            `protobuf:"bytes,363265477,opt,name=kernel,proto3" json:"kernel,omitempty"`
	Nice              *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice              `protobuf:"bytes,417763829,opt,name=nice,proto3" json:"nice,omitempty"`
	SoftwareInterrupt *AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt `protobuf:"bytes,398277371,opt,name=software_interrupt,json=softwareInterrupt,proto3" json:"software_interrupt,omitempty"`
	Total             *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total             `protobuf:"bytes,387104328,opt,name=total,proto3" json:"total,omitempty"`
	User              *AccessPoints_AccessPoint_System_Cpus_Cpu_State_User              `protobuf:"bytes,8692499,opt,name=user,proto3" json:"user,omitempty"`
	Wait              *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait              `protobuf:"bytes,16659161,opt,name=wait,proto3" json:"wait,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Cpus_Cpu_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Cpus_Cpu_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 4, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State) GetHardwareInterrupt() *AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt {
	if x != nil {
		return x.HardwareInterrupt
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State) GetIdle() *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle {
	if x != nil {
		return x.Idle
	}
	return nil
}

func (m *AccessPoints_AccessPoint_System_Cpus_Cpu_State) GetIndex() isAccessPoints_AccessPoint_System_Cpus_Cpu_State_Index {
	if m != nil {
		return m.Index
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State) GetIndexIndex() AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index {
	if x, ok := x.GetIndex().(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_IndexIndex); ok {
		return x.IndexIndex
	}
	return AccessPoints_AccessPoint_System_Cpus_Cpu_State_INDEX_UNSET
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State) GetIndexUint64() uint64 {
	if x, ok := x.GetIndex().(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_IndexUint64); ok {
		return x.IndexUint64
	}
	return 0
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State) GetKernel() *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel {
	if x != nil {
		return x.Kernel
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State) GetNice() *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice {
	if x != nil {
		return x.Nice
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State) GetSoftwareInterrupt() *AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt {
	if x != nil {
		return x.SoftwareInterrupt
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State) GetTotal() *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State) GetUser() *AccessPoints_AccessPoint_System_Cpus_Cpu_State_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State) GetWait() *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait {
	if x != nil {
		return x.Wait
	}
	return nil
}

type isAccessPoints_AccessPoint_System_Cpus_Cpu_State_Index interface {
	isAccessPoints_AccessPoint_System_Cpus_Cpu_State_Index()
}

type AccessPoints_AccessPoint_System_Cpus_Cpu_State_IndexIndex struct {
	IndexIndex AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index `protobuf:"varint,4399175,opt,name=index_index,json=indexIndex,proto3,enum=openconfig.AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index,oneof"`
}

type AccessPoints_AccessPoint_System_Cpus_Cpu_State_IndexUint64 struct {
	IndexUint64 uint64 `protobuf:"varint,217042799,opt,name=index_uint64,json=indexUint64,proto3,oneof"`
}

func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_IndexIndex) isAccessPoints_AccessPoint_System_Cpus_Cpu_State_Index() {
}

func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_IndexUint64) isAccessPoints_AccessPoint_System_Cpus_Cpu_State_Index() {
}

type AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,97156345,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,80030710,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,209457208,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,282388627,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,461560639,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,148167741,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,405634189,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) Reset() {
	*x = AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 4, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,403987073,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,361046606,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,250660256,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,49698651,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,63253895,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,183919573,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,536471621,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) Reset() {
	*x = AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 4, 0, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,480781416,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,318309203,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,73455187,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,298198954,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,61247264,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,432419844,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,225168110,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) Reset() {
	*x = AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 4, 0, 0, 2}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,401379320,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,208940195,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,334564995,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,218809786,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,253635632,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,353030708,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,368768862,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) Reset() {
	*x = AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 4, 0, 0, 3}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,168369250,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,207373649,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,360892741,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,452987508,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,104581662,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,50337482,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,515586368,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) Reset() {
	*x = AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 4, 0, 0, 4}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,521140985,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,342133238,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,73206328,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,169502355,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,325309759,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,35281469,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,269383309,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) Reset() {
	*x = AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 4, 0, 0, 5}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AccessPoints_AccessPoint_System_Cpus_Cpu_State_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,117185258,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,372414825,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,325729005,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,404363388,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,322483494,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,270142210,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,169407992,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) Reset() {
	*x = AccessPoints_AccessPoint_System_Cpus_Cpu_State_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Cpus_Cpu_State_User.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 4, 0, 0, 6}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,15474052,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,179643359,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,101618335,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,231598750,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,478353660,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,365819664,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,443524402,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) Reset() {
	*x = AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 4, 0, 0, 7}
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AccessPoints_AccessPoint_System_Dns_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search []*ywrapper.StringValue `protobuf:"bytes,458288600,rep,name=search,proto3" json:"search,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Dns_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Dns_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Dns_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Dns_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Dns_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Dns_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Dns_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 5, 0}
}

func (x *AccessPoints_AccessPoint_System_Dns_Config) GetSearch() []*ywrapper.StringValue {
	if x != nil {
		return x.Search
	}
	return nil
}

type AccessPoints_AccessPoint_System_Dns_HostEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostEntry []*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntryKey `protobuf:"bytes,236493120,rep,name=host_entry,json=hostEntry,proto3" json:"host_entry,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries) Reset() {
	*x = AccessPoints_AccessPoint_System_Dns_HostEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Dns_HostEntries) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Dns_HostEntries.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Dns_HostEntries) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 5, 1}
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries) GetHostEntry() []*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntryKey {
	if x != nil {
		return x.HostEntry
	}
	return nil
}

type AccessPoints_AccessPoint_System_Dns_Servers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server []*AccessPoints_AccessPoint_System_Dns_Servers_ServerKey `protobuf:"bytes,533138329,rep,name=server,proto3" json:"server,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers) Reset() {
	*x = AccessPoints_AccessPoint_System_Dns_Servers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Dns_Servers) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Dns_Servers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Dns_Servers.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Dns_Servers) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 5, 2}
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers) GetServer() []*AccessPoints_AccessPoint_System_Dns_Servers_ServerKey {
	if x != nil {
		return x.Server
	}
	return nil
}

type AccessPoints_AccessPoint_System_Dns_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search []*ywrapper.StringValue `protobuf:"bytes,307774829,rep,name=search,proto3" json:"search,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Dns_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Dns_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Dns_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Dns_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Dns_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Dns_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Dns_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 5, 3}
}

func (x *AccessPoints_AccessPoint_System_Dns_State) GetSearch() []*ywrapper.StringValue {
	if x != nil {
		return x.Search
	}
	return nil
}

type AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config `protobuf:"bytes,42898997,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State  `protobuf:"bytes,131102762,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) Reset() {
	*x = AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 5, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) GetConfig() *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) GetState() *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname  string                                                     `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	HostEntry *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry `protobuf:"bytes,2,opt,name=host_entry,json=hostEntry,proto3" json:"host_entry,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntryKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntryKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntryKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntryKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 5, 1, 1}
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntryKey) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntryKey) GetHostEntry() *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry {
	if x != nil {
		return x.HostEntry
	}
	return nil
}

type AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias       []*ywrapper.StringValue `protobuf:"bytes,336343364,rep,name=alias,proto3" json:"alias,omitempty"`
	Hostname    *ywrapper.StringValue   `protobuf:"bytes,126930371,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ipv4Address []*ywrapper.StringValue `protobuf:"bytes,242013126,rep,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address []*ywrapper.StringValue `protobuf:"bytes,224746148,rep,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 5, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) GetAlias() []*ywrapper.StringValue {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) GetHostname() *ywrapper.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) GetIpv4Address() []*ywrapper.StringValue {
	if x != nil {
		return x.Ipv4Address
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) GetIpv6Address() []*ywrapper.StringValue {
	if x != nil {
		return x.Ipv6Address
	}
	return nil
}

type AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias       []*ywrapper.StringValue `protobuf:"bytes,163727759,rep,name=alias,proto3" json:"alias,omitempty"`
	Hostname    *ywrapper.StringValue   `protobuf:"bytes,13351578,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ipv4Address []*ywrapper.StringValue `protobuf:"bytes,40211623,rep,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address []*ywrapper.StringValue `protobuf:"bytes,398588917,rep,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 5, 1, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) GetAlias() []*ywrapper.StringValue {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) GetHostname() *ywrapper.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) GetIpv4Address() []*ywrapper.StringValue {
	if x != nil {
		return x.Ipv4Address
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) GetIpv6Address() []*ywrapper.StringValue {
	if x != nil {
		return x.Ipv6Address
	}
	return nil
}

type AccessPoints_AccessPoint_System_Dns_Servers_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Dns_Servers_Server_Config `protobuf:"bytes,169600110,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Dns_Servers_Server_State  `protobuf:"bytes,119960475,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server) Reset() {
	*x = AccessPoints_AccessPoint_System_Dns_Servers_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Dns_Servers_Server) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Dns_Servers_Server.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Dns_Servers_Server) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 5, 2, 0}
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server) GetConfig() *AccessPoints_AccessPoint_System_Dns_Servers_Server_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server) GetState() *AccessPoints_AccessPoint_System_Dns_Servers_Server_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Dns_Servers_ServerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string                                              `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Server  *AccessPoints_AccessPoint_System_Dns_Servers_Server `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_ServerKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Dns_Servers_ServerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_ServerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Dns_Servers_ServerKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_ServerKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Dns_Servers_ServerKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Dns_Servers_ServerKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 5, 2, 1}
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_ServerKey) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_ServerKey) GetServer() *AccessPoints_AccessPoint_System_Dns_Servers_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type AccessPoints_AccessPoint_System_Dns_Servers_Server_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *ywrapper.StringValue `protobuf:"bytes,499568143,opt,name=address,proto3" json:"address,omitempty"`
	Port    *ywrapper.UintValue   `protobuf:"bytes,279662040,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Dns_Servers_Server_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Dns_Servers_Server_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Dns_Servers_Server_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Dns_Servers_Server_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 5, 2, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server_Config) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server_Config) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

type AccessPoints_AccessPoint_System_Dns_Servers_Server_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *ywrapper.StringValue `protobuf:"bytes,161316790,opt,name=address,proto3" json:"address,omitempty"`
	Port    *ywrapper.UintValue   `protobuf:"bytes,387479239,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Dns_Servers_Server_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Dns_Servers_Server_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Dns_Servers_Server_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Dns_Servers_Server_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 5, 2, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server_State) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Dns_Servers_Server_State) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

type AccessPoints_AccessPoint_System_GrpcServer_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId          *ywrapper.StringValue                                                     `protobuf:"bytes,458049124,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	Enable                 *ywrapper.BoolValue                                                       `protobuf:"bytes,53657448,opt,name=enable,proto3" json:"enable,omitempty"`
	ListenAddresses        []*AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddressesUnion `protobuf:"bytes,530994331,rep,name=listen_addresses,json=listenAddresses,proto3" json:"listen_addresses,omitempty"`
	MetadataAuthentication *ywrapper.BoolValue                                                       `protobuf:"bytes,146208371,opt,name=metadata_authentication,json=metadataAuthentication,proto3" json:"metadata_authentication,omitempty"`
	Port                   *ywrapper.UintValue                                                       `protobuf:"bytes,483261096,opt,name=port,proto3" json:"port,omitempty"`
	TransportSecurity      *ywrapper.BoolValue                                                       `protobuf:"bytes,99708807,opt,name=transport_security,json=transportSecurity,proto3" json:"transport_security,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_GrpcServer_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_GrpcServer_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_GrpcServer_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_GrpcServer_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_GrpcServer_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 6, 0}
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_Config) GetCertificateId() *ywrapper.StringValue {
	if x != nil {
		return x.CertificateId
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_Config) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_Config) GetListenAddresses() []*AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddressesUnion {
	if x != nil {
		return x.ListenAddresses
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_Config) GetMetadataAuthentication() *ywrapper.BoolValue {
	if x != nil {
		return x.MetadataAuthentication
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_Config) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_Config) GetTransportSecurity() *ywrapper.BoolValue {
	if x != nil {
		return x.TransportSecurity
	}
	return nil
}

type AccessPoints_AccessPoint_System_GrpcServer_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId          *ywrapper.StringValue                                                    `protobuf:"bytes,135603191,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	Enable                 *ywrapper.BoolValue                                                      `protobuf:"bytes,333307379,opt,name=enable,proto3" json:"enable,omitempty"`
	ListenAddresses        []*AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddressesUnion `protobuf:"bytes,186157060,rep,name=listen_addresses,json=listenAddresses,proto3" json:"listen_addresses,omitempty"`
	MetadataAuthentication *ywrapper.BoolValue                                                      `protobuf:"bytes,20267502,opt,name=metadata_authentication,json=metadataAuthentication,proto3" json:"metadata_authentication,omitempty"`
	Port                   *ywrapper.UintValue                                                      `protobuf:"bytes,76354455,opt,name=port,proto3" json:"port,omitempty"`
	TransportSecurity      *ywrapper.BoolValue                                                      `protobuf:"bytes,169171720,opt,name=transport_security,json=transportSecurity,proto3" json:"transport_security,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_State) Reset() {
	*x = AccessPoints_AccessPoint_System_GrpcServer_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_GrpcServer_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_GrpcServer_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_GrpcServer_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_GrpcServer_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 6, 1}
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_State) GetCertificateId() *ywrapper.StringValue {
	if x != nil {
		return x.CertificateId
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_State) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_State) GetListenAddresses() []*AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddressesUnion {
	if x != nil {
		return x.ListenAddresses
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_State) GetMetadataAuthentication() *ywrapper.BoolValue {
	if x != nil {
		return x.MetadataAuthentication
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_State) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_State) GetTransportSecurity() *ywrapper.BoolValue {
	if x != nil {
		return x.TransportSecurity
	}
	return nil
}

type AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddressesUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListenAddressesListenaddresses AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses `protobuf:"varint,140375921,opt,name=listen_addresses_listenaddresses,json=listenAddressesListenaddresses,proto3,enum=openconfig.AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses" json:"listen_addresses_listenaddresses,omitempty"`
	ListenAddressesString          string                                                            `protobuf:"bytes,135020641,opt,name=listen_addresses_string,json=listenAddressesString,proto3" json:"listen_addresses_string,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddressesUnion) Reset() {
	*x = AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddressesUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddressesUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddressesUnion) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddressesUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddressesUnion.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddressesUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 6, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddressesUnion) GetListenAddressesListenaddresses() AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses {
	if x != nil {
		return x.ListenAddressesListenaddresses
	}
	return AccessPoints_AccessPoint_System_GrpcServer_Config_LISTENADDRESSES_UNSET
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddressesUnion) GetListenAddressesString() string {
	if x != nil {
		return x.ListenAddressesString
	}
	return ""
}

type AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddressesUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListenAddressesListenaddresses AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses `protobuf:"varint,54906150,opt,name=listen_addresses_listenaddresses,json=listenAddressesListenaddresses,proto3,enum=openconfig.AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses" json:"listen_addresses_listenaddresses,omitempty"`
	ListenAddressesString          string                                                           `protobuf:"bytes,320427756,opt,name=listen_addresses_string,json=listenAddressesString,proto3" json:"listen_addresses_string,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddressesUnion) Reset() {
	*x = AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddressesUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddressesUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddressesUnion) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddressesUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddressesUnion.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddressesUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 6, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddressesUnion) GetListenAddressesListenaddresses() AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses {
	if x != nil {
		return x.ListenAddressesListenaddresses
	}
	return AccessPoints_AccessPoint_System_GrpcServer_State_LISTENADDRESSES_UNSET
}

func (x *AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddressesUnion) GetListenAddressesString() string {
	if x != nil {
		return x.ListenAddressesString
	}
	return ""
}

type AccessPoints_AccessPoint_System_License_Licenses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License []*AccessPoints_AccessPoint_System_License_Licenses_LicenseKey `protobuf:"bytes,141881039,rep,name=license,proto3" json:"license,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_License_Licenses) Reset() {
	*x = AccessPoints_AccessPoint_System_License_Licenses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_License_Licenses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_License_Licenses) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_License_Licenses) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_License_Licenses.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_License_Licenses) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 7, 0}
}

func (x *AccessPoints_AccessPoint_System_License_Licenses) GetLicense() []*AccessPoints_AccessPoint_System_License_Licenses_LicenseKey {
	if x != nil {
		return x.License
	}
	return nil
}

type AccessPoints_AccessPoint_System_License_Licenses_License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_License_Licenses_License_Config `protobuf:"bytes,352870064,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_License_Licenses_License_State  `protobuf:"bytes,176278057,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License) Reset() {
	*x = AccessPoints_AccessPoint_System_License_Licenses_License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_License_Licenses_License) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_License_Licenses_License.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_License_Licenses_License) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 7, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License) GetConfig() *AccessPoints_AccessPoint_System_License_Licenses_License_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License) GetState() *AccessPoints_AccessPoint_System_License_Licenses_License_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_License_Licenses_LicenseKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseId string                                                    `protobuf:"bytes,1,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
	License   *AccessPoints_AccessPoint_System_License_Licenses_License `protobuf:"bytes,2,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_LicenseKey) Reset() {
	*x = AccessPoints_AccessPoint_System_License_Licenses_LicenseKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_LicenseKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_License_Licenses_LicenseKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_License_Licenses_LicenseKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_License_Licenses_LicenseKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_License_Licenses_LicenseKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 7, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_LicenseKey) GetLicenseId() string {
	if x != nil {
		return x.LicenseId
	}
	return ""
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_LicenseKey) GetLicense() *AccessPoints_AccessPoint_System_License_Licenses_License {
	if x != nil {
		return x.License
	}
	return nil
}

type AccessPoints_AccessPoint_System_License_Licenses_License_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active *ywrapper.BoolValue `protobuf:"bytes,337434621,opt,name=active,proto3" json:"active,omitempty"`
	// Types that are assignable to LicenseData:
	//	*AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseDataBytes
	//	*AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseDataString
	LicenseData isAccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData `protobuf_oneof:"license_data"`
	LicenseId   *ywrapper.StringValue                                                         `protobuf:"bytes,272350730,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_License_Licenses_License_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_License_Licenses_License_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_License_Licenses_License_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_License_Licenses_License_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 7, 0, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_Config) GetActive() *ywrapper.BoolValue {
	if x != nil {
		return x.Active
	}
	return nil
}

func (m *AccessPoints_AccessPoint_System_License_Licenses_License_Config) GetLicenseData() isAccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData {
	if m != nil {
		return m.LicenseData
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_Config) GetLicenseDataBytes() []byte {
	if x, ok := x.GetLicenseData().(*AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseDataBytes); ok {
		return x.LicenseDataBytes
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_Config) GetLicenseDataString() string {
	if x, ok := x.GetLicenseData().(*AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseDataString); ok {
		return x.LicenseDataString
	}
	return ""
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_Config) GetLicenseId() *ywrapper.StringValue {
	if x != nil {
		return x.LicenseId
	}
	return nil
}

type isAccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData interface {
	isAccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData()
}

type AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseDataBytes struct {
	LicenseDataBytes []byte `protobuf:"bytes,316543605,opt,name=license_data_bytes,json=licenseDataBytes,proto3,oneof"`
}

type AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseDataString struct {
	LicenseDataString string `protobuf:"bytes,511941055,opt,name=license_data_string,json=licenseDataString,proto3,oneof"`
}

func (*AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseDataBytes) isAccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData() {
}

func (*AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseDataString) isAccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData() {
}

type AccessPoints_AccessPoint_System_License_Licenses_License_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active         *ywrapper.BoolValue   `protobuf:"bytes,351116970,opt,name=active,proto3" json:"active,omitempty"`
	Description    *ywrapper.StringValue `protobuf:"bytes,339613922,opt,name=description,proto3" json:"description,omitempty"`
	ExpirationDate *ywrapper.UintValue   `protobuf:"bytes,95925640,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Expired        *ywrapper.BoolValue   `protobuf:"bytes,473472687,opt,name=expired,proto3" json:"expired,omitempty"`
	InUse          *ywrapper.BoolValue   `protobuf:"bytes,73708575,opt,name=in_use,json=inUse,proto3" json:"in_use,omitempty"`
	IssueDate      *ywrapper.UintValue   `protobuf:"bytes,466413654,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	// Types that are assignable to LicenseData:
	//	*AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseDataBytes
	//	*AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseDataString
	LicenseData isAccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData `protobuf_oneof:"license_data"`
	LicenseId   *ywrapper.StringValue                                                        `protobuf:"bytes,529095297,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
	Valid       *ywrapper.BoolValue                                                          `protobuf:"bytes,377608090,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_State) Reset() {
	*x = AccessPoints_AccessPoint_System_License_Licenses_License_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_License_Licenses_License_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_License_Licenses_License_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_License_Licenses_License_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 7, 0, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_State) GetActive() *ywrapper.BoolValue {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_State) GetExpirationDate() *ywrapper.UintValue {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_State) GetExpired() *ywrapper.BoolValue {
	if x != nil {
		return x.Expired
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_State) GetInUse() *ywrapper.BoolValue {
	if x != nil {
		return x.InUse
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_State) GetIssueDate() *ywrapper.UintValue {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (m *AccessPoints_AccessPoint_System_License_Licenses_License_State) GetLicenseData() isAccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData {
	if m != nil {
		return m.LicenseData
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_State) GetLicenseDataBytes() []byte {
	if x, ok := x.GetLicenseData().(*AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseDataBytes); ok {
		return x.LicenseDataBytes
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_State) GetLicenseDataString() string {
	if x, ok := x.GetLicenseData().(*AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseDataString); ok {
		return x.LicenseDataString
	}
	return ""
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_State) GetLicenseId() *ywrapper.StringValue {
	if x != nil {
		return x.LicenseId
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_License_Licenses_License_State) GetValid() *ywrapper.BoolValue {
	if x != nil {
		return x.Valid
	}
	return nil
}

type isAccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData interface {
	isAccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData()
}

type AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseDataBytes struct {
	LicenseDataBytes []byte `protobuf:"bytes,446539122,opt,name=license_data_bytes,json=licenseDataBytes,proto3,oneof"`
}

type AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseDataString struct {
	LicenseDataString string `protobuf:"bytes,96138786,opt,name=license_data_string,json=licenseDataString,proto3,oneof"`
}

func (*AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseDataBytes) isAccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData() {
}

func (*AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseDataString) isAccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData() {
}

type AccessPoints_AccessPoint_System_Logging_Console struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config    *AccessPoints_AccessPoint_System_Logging_Console_Config    `protobuf:"bytes,202247349,opt,name=config,proto3" json:"config,omitempty"`
	Selectors *AccessPoints_AccessPoint_System_Logging_Console_Selectors `protobuf:"bytes,247149031,opt,name=selectors,proto3" json:"selectors,omitempty"`
	State     *AccessPoints_AccessPoint_System_Logging_Console_State     `protobuf:"bytes,427243434,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_Console) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_Console{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_Console) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_Console) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging_Console) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_Console.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_Console) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 0}
}

func (x *AccessPoints_AccessPoint_System_Logging_Console) GetConfig() *AccessPoints_AccessPoint_System_Logging_Console_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Logging_Console) GetSelectors() *AccessPoints_AccessPoint_System_Logging_Console_Selectors {
	if x != nil {
		return x.Selectors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Logging_Console) GetState() *AccessPoints_AccessPoint_System_Logging_Console_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Logging_RemoteServers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteServer []*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServerKey `protobuf:"bytes,140624747,rep,name=remote_server,json=remoteServer,proto3" json:"remote_server,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_RemoteServers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_RemoteServers) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_RemoteServers.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_RemoteServers) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 1}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers) GetRemoteServer() []*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServerKey {
	if x != nil {
		return x.RemoteServer
	}
	return nil
}

type AccessPoints_AccessPoint_System_Logging_Console_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_Console_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_Console_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_Console_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_Console_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 0, 0}
}

type AccessPoints_AccessPoint_System_Logging_Console_Selectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector []*AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey `protobuf:"bytes,305157817,rep,name=selector,proto3" json:"selector,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_Console_Selectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_Console_Selectors) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_Console_Selectors.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_Console_Selectors) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors) GetSelector() []*AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey {
	if x != nil {
		return x.Selector
	}
	return nil
}

type AccessPoints_AccessPoint_System_Logging_Console_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_Console_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_Console_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging_Console_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_Console_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_Console_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 0, 2}
}

type AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config `protobuf:"bytes,308166286,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State  `protobuf:"bytes,133626427,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 0, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) GetConfig() *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) GetState() *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facility OpenconfigSystemLoggingSYSLOGFACILITY                               `protobuf:"varint,1,opt,name=facility,proto3,enum=openconfig.OpenconfigSystemLoggingSYSLOGFACILITY" json:"facility,omitempty"`
	Severity OpenconfigSystemLoggingSyslogSeverity                               `protobuf:"varint,2,opt,name=severity,proto3,enum=openconfig.OpenconfigSystemLoggingSyslogSeverity" json:"severity,omitempty"`
	Selector *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector `protobuf:"bytes,3,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 0, 1, 1}
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey) GetFacility() OpenconfigSystemLoggingSYSLOGFACILITY {
	if x != nil {
		return x.Facility
	}
	return OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey) GetSeverity() OpenconfigSystemLoggingSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey) GetSelector() *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

type AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facility OpenconfigSystemLoggingSYSLOGFACILITY `protobuf:"varint,513455526,opt,name=facility,proto3,enum=openconfig.OpenconfigSystemLoggingSYSLOGFACILITY" json:"facility,omitempty"`
	Severity OpenconfigSystemLoggingSyslogSeverity `protobuf:"varint,226450800,opt,name=severity,proto3,enum=openconfig.OpenconfigSystemLoggingSyslogSeverity" json:"severity,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 0, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config) GetFacility() OpenconfigSystemLoggingSYSLOGFACILITY {
	if x != nil {
		return x.Facility
	}
	return OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config) GetSeverity() OpenconfigSystemLoggingSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET
}

type AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facility OpenconfigSystemLoggingSYSLOGFACILITY `protobuf:"varint,72001549,opt,name=facility,proto3,enum=openconfig.OpenconfigSystemLoggingSYSLOGFACILITY" json:"facility,omitempty"`
	Severity OpenconfigSystemLoggingSyslogSeverity `protobuf:"varint,37602263,opt,name=severity,proto3,enum=openconfig.OpenconfigSystemLoggingSyslogSeverity" json:"severity,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 0, 1, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State) GetFacility() OpenconfigSystemLoggingSYSLOGFACILITY {
	if x != nil {
		return x.Facility
	}
	return OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET
}

func (x *AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State) GetSeverity() OpenconfigSystemLoggingSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET
}

type AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config    *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config    `protobuf:"bytes,360797500,opt,name=config,proto3" json:"config,omitempty"`
	Selectors *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors `protobuf:"bytes,122951308,opt,name=selectors,proto3" json:"selectors,omitempty"`
	State     *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State     `protobuf:"bytes,486582325,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) GetConfig() *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) GetSelectors() *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors {
	if x != nil {
		return x.Selectors
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) GetState() *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host         string                                                              `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	RemoteServer *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer `protobuf:"bytes,2,opt,name=remote_server,json=remoteServer,proto3" json:"remote_server,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServerKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServerKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServerKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServerKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServerKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 1, 1}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServerKey) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServerKey) GetRemoteServer() *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer {
	if x != nil {
		return x.RemoteServer
	}
	return nil
}

type AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host          *ywrapper.StringValue `protobuf:"bytes,305442361,opt,name=host,proto3" json:"host,omitempty"`
	RemotePort    *ywrapper.UintValue   `protobuf:"bytes,51833171,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
	SourceAddress *ywrapper.StringValue `protobuf:"bytes,476272171,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config) GetHost() *ywrapper.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config) GetRemotePort() *ywrapper.UintValue {
	if x != nil {
		return x.RemotePort
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector []*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey `protobuf:"bytes,44390976,rep,name=selector,proto3" json:"selector,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 1, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors) GetSelector() []*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey {
	if x != nil {
		return x.Selector
	}
	return nil
}

type AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host          *ywrapper.StringValue `protobuf:"bytes,185149766,opt,name=host,proto3" json:"host,omitempty"`
	RemotePort    *ywrapper.UintValue   `protobuf:"bytes,449301846,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
	SourceAddress *ywrapper.StringValue `protobuf:"bytes,248536760,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 1, 0, 2}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State) GetHost() *ywrapper.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State) GetRemotePort() *ywrapper.UintValue {
	if x != nil {
		return x.RemotePort
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config `protobuf:"bytes,317444405,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State  `protobuf:"bytes,133116202,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 1, 0, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetConfig() *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetState() *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facility OpenconfigSystemLoggingSYSLOGFACILITY                                                  `protobuf:"varint,1,opt,name=facility,proto3,enum=openconfig.OpenconfigSystemLoggingSYSLOGFACILITY" json:"facility,omitempty"`
	Severity OpenconfigSystemLoggingSyslogSeverity                                                  `protobuf:"varint,2,opt,name=severity,proto3,enum=openconfig.OpenconfigSystemLoggingSyslogSeverity" json:"severity,omitempty"`
	Selector *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector `protobuf:"bytes,3,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 1, 0, 1, 1}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) GetFacility() OpenconfigSystemLoggingSYSLOGFACILITY {
	if x != nil {
		return x.Facility
	}
	return OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) GetSeverity() OpenconfigSystemLoggingSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) GetSelector() *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

type AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facility OpenconfigSystemLoggingSYSLOGFACILITY `protobuf:"varint,13663423,opt,name=facility,proto3,enum=openconfig.OpenconfigSystemLoggingSYSLOGFACILITY" json:"facility,omitempty"`
	Severity OpenconfigSystemLoggingSyslogSeverity `protobuf:"varint,532975005,opt,name=severity,proto3,enum=openconfig.OpenconfigSystemLoggingSyslogSeverity" json:"severity,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 1, 0, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) GetFacility() OpenconfigSystemLoggingSYSLOGFACILITY {
	if x != nil {
		return x.Facility
	}
	return OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) GetSeverity() OpenconfigSystemLoggingSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET
}

type AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facility OpenconfigSystemLoggingSYSLOGFACILITY `protobuf:"varint,496427258,opt,name=facility,proto3,enum=openconfig.OpenconfigSystemLoggingSYSLOGFACILITY" json:"facility,omitempty"`
	Severity OpenconfigSystemLoggingSyslogSeverity `protobuf:"varint,349549580,opt,name=severity,proto3,enum=openconfig.OpenconfigSystemLoggingSyslogSeverity" json:"severity,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) ProtoMessage() {
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 8, 1, 0, 1, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) GetFacility() OpenconfigSystemLoggingSYSLOGFACILITY {
	if x != nil {
		return x.Facility
	}
	return OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET
}

func (x *AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) GetSeverity() OpenconfigSystemLoggingSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET
}

type AccessPoints_AccessPoint_System_Memory_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessPoints_AccessPoint_System_Memory_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Memory_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Memory_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Memory_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Memory_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Memory_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Memory_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 9, 0}
}

type AccessPoints_AccessPoint_System_Memory_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Physical *ywrapper.UintValue `protobuf:"bytes,26298580,opt,name=physical,proto3" json:"physical,omitempty"`
	Reserved *ywrapper.UintValue `protobuf:"bytes,421913059,opt,name=reserved,proto3" json:"reserved,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Memory_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Memory_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Memory_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Memory_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Memory_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Memory_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Memory_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 9, 1}
}

func (x *AccessPoints_AccessPoint_System_Memory_State) GetPhysical() *ywrapper.UintValue {
	if x != nil {
		return x.Physical
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Memory_State) GetReserved() *ywrapper.UintValue {
	if x != nil {
		return x.Reserved
	}
	return nil
}

type AccessPoints_AccessPoint_System_Messages_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity OpenconfigMessagesSyslogSeverity `protobuf:"varint,103160654,opt,name=severity,proto3,enum=openconfig.OpenconfigMessagesSyslogSeverity" json:"severity,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Messages_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Messages_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Messages_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Messages_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Messages_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Messages_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Messages_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 10, 0}
}

func (x *AccessPoints_AccessPoint_System_Messages_Config) GetSeverity() OpenconfigMessagesSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigMessagesSyslogSeverity_OPENCONFIGMESSAGESSYSLOGSEVERITY_UNSET
}

type AccessPoints_AccessPoint_System_Messages_DebugEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugService []*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugServiceKey `protobuf:"bytes,244012346,rep,name=debug_service,json=debugService,proto3" json:"debug_service,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries) Reset() {
	*x = AccessPoints_AccessPoint_System_Messages_DebugEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Messages_DebugEntries) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Messages_DebugEntries.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Messages_DebugEntries) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 10, 1}
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries) GetDebugService() []*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugServiceKey {
	if x != nil {
		return x.DebugService
	}
	return nil
}

type AccessPoints_AccessPoint_System_Messages_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  *AccessPoints_AccessPoint_System_Messages_State_Message `protobuf:"bytes,26039257,opt,name=message,proto3" json:"message,omitempty"`
	Severity OpenconfigMessagesSyslogSeverity                        `protobuf:"varint,487034833,opt,name=severity,proto3,enum=openconfig.OpenconfigMessagesSyslogSeverity" json:"severity,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Messages_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Messages_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Messages_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Messages_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Messages_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Messages_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Messages_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 10, 2}
}

func (x *AccessPoints_AccessPoint_System_Messages_State) GetMessage() *AccessPoints_AccessPoint_System_Messages_State_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Messages_State) GetSeverity() OpenconfigMessagesSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigMessagesSyslogSeverity_OPENCONFIGMESSAGESSYSLOGSEVERITY_UNSET
}

type AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config `protobuf:"bytes,284602923,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State  `protobuf:"bytes,143643372,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService) Reset() {
	*x = AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 10, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService) GetConfig() *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService) GetState() *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugServiceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service      OpenconfigMessagesDEBUGSERVICE                                      `protobuf:"varint,1,opt,name=service,proto3,enum=openconfig.OpenconfigMessagesDEBUGSERVICE" json:"service,omitempty"`
	DebugService *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService `protobuf:"bytes,2,opt,name=debug_service,json=debugService,proto3" json:"debug_service,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugServiceKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugServiceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugServiceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugServiceKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugServiceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugServiceKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugServiceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 10, 1, 1}
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugServiceKey) GetService() OpenconfigMessagesDEBUGSERVICE {
	if x != nil {
		return x.Service
	}
	return OpenconfigMessagesDEBUGSERVICE_OPENCONFIGMESSAGESDEBUGSERVICE_UNSET
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugServiceKey) GetDebugService() *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService {
	if x != nil {
		return x.DebugService
	}
	return nil
}

type AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue            `protobuf:"bytes,140692397,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Service OpenconfigMessagesDEBUGSERVICE `protobuf:"varint,347466011,opt,name=service,proto3,enum=openconfig.OpenconfigMessagesDEBUGSERVICE" json:"service,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 10, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config) GetService() OpenconfigMessagesDEBUGSERVICE {
	if x != nil {
		return x.Service
	}
	return OpenconfigMessagesDEBUGSERVICE_OPENCONFIGMESSAGESDEBUGSERVICE_UNSET
}

type AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue            `protobuf:"bytes,168829406,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Service OpenconfigMessagesDEBUGSERVICE `protobuf:"varint,457125152,opt,name=service,proto3,enum=openconfig.OpenconfigMessagesDEBUGSERVICE" json:"service,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 10, 1, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State) GetService() OpenconfigMessagesDEBUGSERVICE {
	if x != nil {
		return x.Service
	}
	return OpenconfigMessagesDEBUGSERVICE_OPENCONFIGMESSAGESDEBUGSERVICE_UNSET
}

type AccessPoints_AccessPoint_System_Messages_State_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName  *ywrapper.StringValue `protobuf:"bytes,519927447,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	Msg      *ywrapper.StringValue `protobuf:"bytes,174993815,opt,name=msg,proto3" json:"msg,omitempty"`
	Msgid    *ywrapper.StringValue `protobuf:"bytes,520260144,opt,name=msgid,proto3" json:"msgid,omitempty"`
	Priority *ywrapper.UintValue   `protobuf:"bytes,509614220,opt,name=priority,proto3" json:"priority,omitempty"`
	Procid   *ywrapper.StringValue `protobuf:"bytes,263222859,opt,name=procid,proto3" json:"procid,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Messages_State_Message) Reset() {
	*x = AccessPoints_AccessPoint_System_Messages_State_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Messages_State_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Messages_State_Message) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Messages_State_Message) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Messages_State_Message.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Messages_State_Message) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 10, 2, 0}
}

func (x *AccessPoints_AccessPoint_System_Messages_State_Message) GetAppName() *ywrapper.StringValue {
	if x != nil {
		return x.AppName
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Messages_State_Message) GetMsg() *ywrapper.StringValue {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Messages_State_Message) GetMsgid() *ywrapper.StringValue {
	if x != nil {
		return x.Msgid
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Messages_State_Message) GetPriority() *ywrapper.UintValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Messages_State_Message) GetProcid() *ywrapper.StringValue {
	if x != nil {
		return x.Procid
	}
	return nil
}

type AccessPoints_AccessPoint_System_Ntp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableNtpAuth    *ywrapper.BoolValue   `protobuf:"bytes,442584302,opt,name=enable_ntp_auth,json=enableNtpAuth,proto3" json:"enable_ntp_auth,omitempty"`
	Enabled          *ywrapper.BoolValue   `protobuf:"bytes,157878698,opt,name=enabled,proto3" json:"enabled,omitempty"`
	NtpSourceAddress *ywrapper.StringValue `protobuf:"bytes,526405384,opt,name=ntp_source_address,json=ntpSourceAddress,proto3" json:"ntp_source_address,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Ntp_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Ntp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Ntp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Ntp_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Ntp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Ntp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11, 0}
}

func (x *AccessPoints_AccessPoint_System_Ntp_Config) GetEnableNtpAuth() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableNtpAuth
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Config) GetNtpSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.NtpSourceAddress
	}
	return nil
}

type AccessPoints_AccessPoint_System_Ntp_NtpKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NtpKey []*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKeyKey `protobuf:"bytes,44804836,rep,name=ntp_key,json=ntpKey,proto3" json:"ntp_key,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys) Reset() {
	*x = AccessPoints_AccessPoint_System_Ntp_NtpKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Ntp_NtpKeys) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp_NtpKeys.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Ntp_NtpKeys) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11, 1}
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys) GetNtpKey() []*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKeyKey {
	if x != nil {
		return x.NtpKey
	}
	return nil
}

type AccessPoints_AccessPoint_System_Ntp_Servers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server []*AccessPoints_AccessPoint_System_Ntp_Servers_ServerKey `protobuf:"bytes,521877760,rep,name=server,proto3" json:"server,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers) Reset() {
	*x = AccessPoints_AccessPoint_System_Ntp_Servers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Ntp_Servers) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp_Servers.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Ntp_Servers) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11, 2}
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers) GetServer() []*AccessPoints_AccessPoint_System_Ntp_Servers_ServerKey {
	if x != nil {
		return x.Server
	}
	return nil
}

type AccessPoints_AccessPoint_System_Ntp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthMismatch     *ywrapper.UintValue   `protobuf:"bytes,508665811,opt,name=auth_mismatch,json=authMismatch,proto3" json:"auth_mismatch,omitempty"`
	EnableNtpAuth    *ywrapper.BoolValue   `protobuf:"bytes,434836227,opt,name=enable_ntp_auth,json=enableNtpAuth,proto3" json:"enable_ntp_auth,omitempty"`
	Enabled          *ywrapper.BoolValue   `protobuf:"bytes,210230727,opt,name=enabled,proto3" json:"enabled,omitempty"`
	NtpSourceAddress *ywrapper.StringValue `protobuf:"bytes,81223679,opt,name=ntp_source_address,json=ntpSourceAddress,proto3" json:"ntp_source_address,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Ntp_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Ntp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Ntp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Ntp_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Ntp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Ntp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11, 3}
}

func (x *AccessPoints_AccessPoint_System_Ntp_State) GetAuthMismatch() *ywrapper.UintValue {
	if x != nil {
		return x.AuthMismatch
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_State) GetEnableNtpAuth() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableNtpAuth
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_State) GetNtpSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.NtpSourceAddress
	}
	return nil
}

type AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config `protobuf:"bytes,115789833,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State  `protobuf:"bytes,410663006,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11, 1, 0}
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) GetConfig() *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) GetState() *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKeyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId  uint64                                              `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	NtpKey *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey `protobuf:"bytes,2,opt,name=ntp_key,json=ntpKey,proto3" json:"ntp_key,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKeyKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKeyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKeyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKeyKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKeyKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKeyKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKeyKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11, 1, 1}
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKeyKey) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKeyKey) GetNtpKey() *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey {
	if x != nil {
		return x.NtpKey
	}
	return nil
}

type AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId    *ywrapper.UintValue         `protobuf:"bytes,453095733,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	KeyType  OpenconfigSystemNTPAUTHTYPE `protobuf:"varint,88813766,opt,name=key_type,json=keyType,proto3,enum=openconfig.OpenconfigSystemNTPAUTHTYPE" json:"key_type,omitempty"`
	KeyValue *ywrapper.StringValue       `protobuf:"bytes,176946569,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11, 1, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config) GetKeyId() *ywrapper.UintValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config) GetKeyType() OpenconfigSystemNTPAUTHTYPE {
	if x != nil {
		return x.KeyType
	}
	return OpenconfigSystemNTPAUTHTYPE_OPENCONFIGSYSTEMNTPAUTHTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config) GetKeyValue() *ywrapper.StringValue {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

type AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId    *ywrapper.UintValue         `protobuf:"bytes,15852988,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	KeyType  OpenconfigSystemNTPAUTHTYPE `protobuf:"varint,300551187,opt,name=key_type,json=keyType,proto3,enum=openconfig.OpenconfigSystemNTPAUTHTYPE" json:"key_type,omitempty"`
	KeyValue *ywrapper.StringValue       `protobuf:"bytes,63348218,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11, 1, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State) GetKeyId() *ywrapper.UintValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State) GetKeyType() OpenconfigSystemNTPAUTHTYPE {
	if x != nil {
		return x.KeyType
	}
	return OpenconfigSystemNTPAUTHTYPE_OPENCONFIGSYSTEMNTPAUTHTYPE_UNSET
}

func (x *AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State) GetKeyValue() *ywrapper.StringValue {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

type AccessPoints_AccessPoint_System_Ntp_Servers_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config `protobuf:"bytes,439340661,opt,name=config,proto3" json:"config,omitempty"`
	State  *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State  `protobuf:"bytes,37501290,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server) Reset() {
	*x = AccessPoints_AccessPoint_System_Ntp_Servers_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Ntp_Servers_Server) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp_Servers_Server.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Ntp_Servers_Server) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11, 2, 0}
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server) GetConfig() *AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server) GetState() *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Ntp_Servers_ServerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string                                              `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Server  *AccessPoints_AccessPoint_System_Ntp_Servers_Server `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_ServerKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Ntp_Servers_ServerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_ServerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Ntp_Servers_ServerKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_ServerKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp_Servers_ServerKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Ntp_Servers_ServerKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11, 2, 1}
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_ServerKey) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_ServerKey) GetServer() *AccessPoints_AccessPoint_System_Ntp_Servers_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         *ywrapper.StringValue                                                     `protobuf:"bytes,224303264,opt,name=address,proto3" json:"address,omitempty"`
	AssociationType AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType `protobuf:"varint,252815986,opt,name=association_type,json=associationType,proto3,enum=openconfig.AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType" json:"association_type,omitempty"`
	Iburst          *ywrapper.BoolValue                                                       `protobuf:"bytes,352581413,opt,name=iburst,proto3" json:"iburst,omitempty"`
	Port            *ywrapper.UintValue                                                       `protobuf:"bytes,430227705,opt,name=port,proto3" json:"port,omitempty"`
	Prefer          *ywrapper.BoolValue                                                       `protobuf:"bytes,300736554,opt,name=prefer,proto3" json:"prefer,omitempty"`
	Version         *ywrapper.UintValue                                                       `protobuf:"bytes,480763524,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11, 2, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) GetAssociationType() AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType {
	if x != nil {
		return x.AssociationType
	}
	return AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_ASSOCIATIONTYPE_SERVER
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) GetIburst() *ywrapper.BoolValue {
	if x != nil {
		return x.Iburst
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) GetPrefer() *ywrapper.BoolValue {
	if x != nil {
		return x.Prefer
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) GetVersion() *ywrapper.UintValue {
	if x != nil {
		return x.Version
	}
	return nil
}

type AccessPoints_AccessPoint_System_Ntp_Servers_Server_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         *ywrapper.StringValue                                                    `protobuf:"bytes,499020619,opt,name=address,proto3" json:"address,omitempty"`
	AssociationType AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType `protobuf:"varint,235386659,opt,name=association_type,json=associationType,proto3,enum=openconfig.AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType" json:"association_type,omitempty"`
	Iburst          *ywrapper.BoolValue                                                      `protobuf:"bytes,356088404,opt,name=iburst,proto3" json:"iburst,omitempty"`
	Offset          *ywrapper.UintValue                                                      `protobuf:"bytes,214307632,opt,name=offset,proto3" json:"offset,omitempty"`
	PollInterval    *ywrapper.UintValue                                                      `protobuf:"bytes,335447264,opt,name=poll_interval,json=pollInterval,proto3" json:"poll_interval,omitempty"`
	Port            *ywrapper.UintValue                                                      `protobuf:"bytes,506248948,opt,name=port,proto3" json:"port,omitempty"`
	Prefer          *ywrapper.BoolValue                                                      `protobuf:"bytes,163892659,opt,name=prefer,proto3" json:"prefer,omitempty"`
	RootDelay       *ywrapper.UintValue                                                      `protobuf:"bytes,159513027,opt,name=root_delay,json=rootDelay,proto3" json:"root_delay,omitempty"`
	RootDispersion  *ywrapper.UintValue                                                      `protobuf:"bytes,483188496,opt,name=root_dispersion,json=rootDispersion,proto3" json:"root_dispersion,omitempty"`
	Stratum         *ywrapper.UintValue                                                      `protobuf:"bytes,365726179,opt,name=stratum,proto3" json:"stratum,omitempty"`
	Version         *ywrapper.UintValue                                                      `protobuf:"bytes,461023535,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Ntp_Servers_Server_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Ntp_Servers_Server_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 11, 2, 0, 1}
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) GetAssociationType() AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType {
	if x != nil {
		return x.AssociationType
	}
	return AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_ASSOCIATIONTYPE_SERVER
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) GetIburst() *ywrapper.BoolValue {
	if x != nil {
		return x.Iburst
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) GetOffset() *ywrapper.UintValue {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) GetPollInterval() *ywrapper.UintValue {
	if x != nil {
		return x.PollInterval
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) GetPrefer() *ywrapper.BoolValue {
	if x != nil {
		return x.Prefer
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) GetRootDelay() *ywrapper.UintValue {
	if x != nil {
		return x.RootDelay
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) GetRootDispersion() *ywrapper.UintValue {
	if x != nil {
		return x.RootDispersion
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) GetStratum() *ywrapper.UintValue {
	if x != nil {
		return x.Stratum
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) GetVersion() *ywrapper.UintValue {
	if x != nil {
		return x.Version
	}
	return nil
}

type AccessPoints_AccessPoint_System_Processes_Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *AccessPoints_AccessPoint_System_Processes_Process_State `protobuf:"bytes,305863702,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Processes_Process) Reset() {
	*x = AccessPoints_AccessPoint_System_Processes_Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Processes_Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Processes_Process) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Processes_Process) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Processes_Process.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Processes_Process) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 12, 0}
}

func (x *AccessPoints_AccessPoint_System_Processes_Process) GetState() *AccessPoints_AccessPoint_System_Processes_Process_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AccessPoints_AccessPoint_System_Processes_ProcessKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid     uint64                                             `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Process *AccessPoints_AccessPoint_System_Processes_Process `protobuf:"bytes,2,opt,name=process,proto3" json:"process,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Processes_ProcessKey) Reset() {
	*x = AccessPoints_AccessPoint_System_Processes_ProcessKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Processes_ProcessKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Processes_ProcessKey) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Processes_ProcessKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Processes_ProcessKey.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Processes_ProcessKey) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 12, 1}
}

func (x *AccessPoints_AccessPoint_System_Processes_ProcessKey) GetPid() uint64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *AccessPoints_AccessPoint_System_Processes_ProcessKey) GetProcess() *AccessPoints_AccessPoint_System_Processes_Process {
	if x != nil {
		return x.Process
	}
	return nil
}

type AccessPoints_AccessPoint_System_Processes_Process_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args              []*ywrapper.StringValue `protobuf:"bytes,277927366,rep,name=args,proto3" json:"args,omitempty"`
	CpuUsageSystem    *ywrapper.UintValue     `protobuf:"bytes,5543219,opt,name=cpu_usage_system,json=cpuUsageSystem,proto3" json:"cpu_usage_system,omitempty"`
	CpuUsageUser      *ywrapper.UintValue     `protobuf:"bytes,125748105,opt,name=cpu_usage_user,json=cpuUsageUser,proto3" json:"cpu_usage_user,omitempty"`
	CpuUtilization    *ywrapper.UintValue     `protobuf:"bytes,532305938,opt,name=cpu_utilization,json=cpuUtilization,proto3" json:"cpu_utilization,omitempty"`
	MemoryUsage       *ywrapper.UintValue     `protobuf:"bytes,213458786,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	MemoryUtilization *ywrapper.UintValue     `protobuf:"bytes,349225347,opt,name=memory_utilization,json=memoryUtilization,proto3" json:"memory_utilization,omitempty"`
	Name              *ywrapper.StringValue   `protobuf:"bytes,8483324,opt,name=name,proto3" json:"name,omitempty"`
	Pid               *ywrapper.UintValue     `protobuf:"bytes,312256224,opt,name=pid,proto3" json:"pid,omitempty"`
	StartTime         *ywrapper.UintValue     `protobuf:"bytes,299610995,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_Processes_Process_State) Reset() {
	*x = AccessPoints_AccessPoint_System_Processes_Process_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_Processes_Process_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_Processes_Process_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_Processes_Process_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_Processes_Process_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_Processes_Process_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 12, 0, 0}
}

func (x *AccessPoints_AccessPoint_System_Processes_Process_State) GetArgs() []*ywrapper.StringValue {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Processes_Process_State) GetCpuUsageSystem() *ywrapper.UintValue {
	if x != nil {
		return x.CpuUsageSystem
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Processes_Process_State) GetCpuUsageUser() *ywrapper.UintValue {
	if x != nil {
		return x.CpuUsageUser
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Processes_Process_State) GetCpuUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.CpuUtilization
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Processes_Process_State) GetMemoryUsage() *ywrapper.UintValue {
	if x != nil {
		return x.MemoryUsage
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Processes_Process_State) GetMemoryUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.MemoryUtilization
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Processes_Process_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Processes_Process_State) GetPid() *ywrapper.UintValue {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_Processes_Process_State) GetStartTime() *ywrapper.UintValue {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type AccessPoints_AccessPoint_System_SshServer_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable          *ywrapper.BoolValue                                              `protobuf:"bytes,66718020,opt,name=enable,proto3" json:"enable,omitempty"`
	ProtocolVersion AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion `protobuf:"varint,430598902,opt,name=protocol_version,json=protocolVersion,proto3,enum=openconfig.AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion" json:"protocol_version,omitempty"`
	RateLimit       *ywrapper.UintValue                                              `protobuf:"bytes,135095061,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	SessionLimit    *ywrapper.UintValue                                              `protobuf:"bytes,249309649,opt,name=session_limit,json=sessionLimit,proto3" json:"session_limit,omitempty"`
	Timeout         *ywrapper.UintValue                                              `protobuf:"bytes,167632282,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_SshServer_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_SshServer_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_SshServer_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_SshServer_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_SshServer_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_SshServer_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_SshServer_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 13, 0}
}

func (x *AccessPoints_AccessPoint_System_SshServer_Config) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_SshServer_Config) GetProtocolVersion() AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return AccessPoints_AccessPoint_System_SshServer_Config_PROTOCOLVERSION_V2
}

func (x *AccessPoints_AccessPoint_System_SshServer_Config) GetRateLimit() *ywrapper.UintValue {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_SshServer_Config) GetSessionLimit() *ywrapper.UintValue {
	if x != nil {
		return x.SessionLimit
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_SshServer_Config) GetTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type AccessPoints_AccessPoint_System_SshServer_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable          *ywrapper.BoolValue                                             `protobuf:"bytes,263756495,opt,name=enable,proto3" json:"enable,omitempty"`
	ProtocolVersion AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion `protobuf:"varint,30232905,opt,name=protocol_version,json=protocolVersion,proto3,enum=openconfig.AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion" json:"protocol_version,omitempty"`
	RateLimit       *ywrapper.UintValue                                             `protobuf:"bytes,363549802,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	SessionLimit    *ywrapper.UintValue                                             `protobuf:"bytes,273640868,opt,name=session_limit,json=sessionLimit,proto3" json:"session_limit,omitempty"`
	Timeout         *ywrapper.UintValue                                             `protobuf:"bytes,189306899,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_SshServer_State) Reset() {
	*x = AccessPoints_AccessPoint_System_SshServer_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_SshServer_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_SshServer_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_SshServer_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_SshServer_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_SshServer_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 13, 1}
}

func (x *AccessPoints_AccessPoint_System_SshServer_State) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_SshServer_State) GetProtocolVersion() AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return AccessPoints_AccessPoint_System_SshServer_State_PROTOCOLVERSION_V2
}

func (x *AccessPoints_AccessPoint_System_SshServer_State) GetRateLimit() *ywrapper.UintValue {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_SshServer_State) GetSessionLimit() *ywrapper.UintValue {
	if x != nil {
		return x.SessionLimit
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_SshServer_State) GetTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type AccessPoints_AccessPoint_System_TelnetServer_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable       *ywrapper.BoolValue `protobuf:"bytes,110507488,opt,name=enable,proto3" json:"enable,omitempty"`
	RateLimit    *ywrapper.UintValue `protobuf:"bytes,285478145,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	SessionLimit *ywrapper.UintValue `protobuf:"bytes,363906317,opt,name=session_limit,json=sessionLimit,proto3" json:"session_limit,omitempty"`
	Timeout      *ywrapper.UintValue `protobuf:"bytes,439984974,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_TelnetServer_Config) Reset() {
	*x = AccessPoints_AccessPoint_System_TelnetServer_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_TelnetServer_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_TelnetServer_Config) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_TelnetServer_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_TelnetServer_Config.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_TelnetServer_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 15, 0}
}

func (x *AccessPoints_AccessPoint_System_TelnetServer_Config) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_TelnetServer_Config) GetRateLimit() *ywrapper.UintValue {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_TelnetServer_Config) GetSessionLimit() *ywrapper.UintValue {
	if x != nil {
		return x.SessionLimit
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_TelnetServer_Config) GetTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type AccessPoints_AccessPoint_System_TelnetServer_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable       *ywrapper.BoolValue `protobuf:"bytes,107151659,opt,name=enable,proto3" json:"enable,omitempty"`
	RateLimit    *ywrapper.UintValue `protobuf:"bytes,256816598,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	SessionLimit *ywrapper.UintValue `protobuf:"bytes,522907056,opt,name=session_limit,json=sessionLimit,proto3" json:"session_limit,omitempty"`
	Timeout      *ywrapper.UintValue `protobuf:"bytes,378958423,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *AccessPoints_AccessPoint_System_TelnetServer_State) Reset() {
	*x = AccessPoints_AccessPoint_System_TelnetServer_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_access_points_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPoints_AccessPoint_System_TelnetServer_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPoints_AccessPoint_System_TelnetServer_State) ProtoMessage() {}

func (x *AccessPoints_AccessPoint_System_TelnetServer_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_access_points_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPoints_AccessPoint_System_TelnetServer_State.ProtoReflect.Descriptor instead.
func (*AccessPoints_AccessPoint_System_TelnetServer_State) Descriptor() ([]byte, []int) {
	return file_openconfig_access_points_proto_rawDescGZIP(), []int{0, 0, 5, 15, 1}
}

func (x *AccessPoints_AccessPoint_System_TelnetServer_State) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_TelnetServer_State) GetRateLimit() *ywrapper.UintValue {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_TelnetServer_State) GetSessionLimit() *ywrapper.UintValue {
	if x != nil {
		return x.SessionLimit
	}
	return nil
}

func (x *AccessPoints_AccessPoint_System_TelnetServer_State) GetTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Timeout
	}
	return nil
}

var File_openconfig_access_points_proto protoreflect.FileDescriptor

var file_openconfig_access_points_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65,
	0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa6, 0xc6, 0x0b, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x6d, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0xcc, 0x95, 0xb3, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x1a, 0x84, 0xc4, 0x0b, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0xa2, 0x01, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x61, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x18, 0x94, 0xe3, 0x80, 0xe4,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x41, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x42, 0x33,
	0x82, 0x41, 0x30, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x73, 0x52, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x70, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x6e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xc1, 0xde, 0xa2, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xef, 0xbb, 0xcb, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x18, 0xbb, 0xa5, 0xfb, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x52,
	0x06, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x6a, 0x0a, 0x05, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x18, 0x91, 0xe7, 0x8d, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x52, 0x05, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x12, 0x6d, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x90, 0xc4,
	0xda, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x1a, 0x9b, 0x10, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41,
	0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x0a, 0x61, 0x70,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0xa2, 0xb2, 0x9f, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x41, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x70, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x2d, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x70, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x09, 0x61, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x1a, 0x95, 0x0d, 0x0a, 0x09, 0x41, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0xab, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc3, 0xe6, 0x9e, 0xbf,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x41, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x41,
	0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa6,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa4, 0xad, 0xd4, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x41, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x70, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x2d, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd9, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xaf, 0x01, 0x0a, 0x17, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xaa,
	0xee, 0xac, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x14,
	0x61, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x17, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0xd8, 0xda, 0xd8, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x14, 0x61, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x78, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0xb7, 0xa1,
	0x8c, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82,
	0x41, 0x47, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x73, 0x2f, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66, 0x71, 0x64, 0x6e, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12,
	0x72, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xb5, 0xb0, 0xd0, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d, 0x61,
	0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x70, 0x2d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x1a, 0xd4, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xae, 0x01,
	0x0a, 0x17, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xb1, 0xc7, 0xde, 0x9c, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x2d, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2d, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x14, 0x61, 0x70, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xae,
	0x01, 0x0a, 0x17, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa3, 0xf5, 0xc6, 0xd8, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x2d, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2d, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x14, 0x61, 0x70, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x78, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x9e, 0xfb, 0xbd, 0x99, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x2d, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x70,
	0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66,
	0x71, 0x64, 0x6e, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x71, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x94, 0xae, 0xd3, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x7c, 0x0a, 0x06,
	0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0xac, 0xae, 0x95, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d, 0x61,
	0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x70, 0x2d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x1a, 0xc3, 0x01, 0x0a, 0x0c, 0x41,
	0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x2d, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x70, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x60,
	0x0a, 0x0a, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x41, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x70, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x09, 0x61, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x1a, 0x6e, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x64, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa7, 0xd7, 0x9e, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0xd3, 0xc9, 0x04, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x92, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x8f,
	0xac, 0xb1, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xf6, 0xc6, 0x04, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfc, 0x8a, 0xcf, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x97, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf0, 0x98,
	0xf9, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9f, 0x01, 0x0a,
	0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x8b, 0x93, 0xdb, 0x31, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x94,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe9, 0xf5, 0x82, 0x91, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xd4, 0xe6, 0x9a, 0xad, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0d, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x97, 0x01, 0x0a,
	0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x90, 0xae, 0xe2, 0x37, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x06,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x96, 0x1c, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xaf, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xd1, 0x8e, 0xfc, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xac, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xc6, 0xf0, 0xaf, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x0d, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0xee, 0x8d, 0xa4, 0xaa, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x56, 0x6c, 0x61, 0x6e, 0x1a, 0xb3, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xa0, 0x01, 0x0a, 0x08, 0x6c, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xd1, 0x87, 0xb1,
	0xc2, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6c, 0x61, 0x67, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x90, 0xcc, 0xca, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50,
	0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0xb8, 0x04, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x91, 0x93, 0xcb, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x67, 0x2d, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x52, 0x08, 0x6c, 0x61, 0x67, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x9e, 0x01, 0x0a,
	0x08, 0x6c, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x80, 0x98, 0xfa, 0x5c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x67, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7f, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0xa7, 0xa9, 0xa4, 0xc4, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x84,
	0x01, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0xc7, 0xcc, 0xa3,
	0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0xe7, 0x10, 0x0a, 0x0c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0xca, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x9f, 0xf5, 0xeb, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xc6, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd0, 0xb0,
	0xa5, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe0, 0x06, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0xaa, 0x9a, 0xe9, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56,
	0x6c, 0x61, 0x6e, 0x12, 0xb6, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x81, 0xa1, 0xdf, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c, 0x61, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x99, 0x01, 0x0a,
	0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0xf3, 0xe7, 0xd6,
	0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0xef, 0x01, 0x0a, 0x0b, 0x74, 0x72, 0x75,
	0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0xf1, 0x9a, 0xac, 0x3d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x69, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x60, 0x82, 0x41,
	0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x0a,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x1a, 0x73, 0x0a, 0x0f, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x12, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0xb7, 0xdd, 0x94, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72,
	0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f,
	0x0a, 0x12, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x8a, 0xc5, 0x94, 0x40, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74,
	0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a,
	0xdd, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0xf5, 0xf4, 0x86, 0x95, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0xb5, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x88, 0xea, 0xe7, 0xa5, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c,
	0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x98, 0x01,
	0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x8c, 0xcf,
	0xec, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0xee, 0x01, 0x0a, 0x0b, 0x74, 0x72, 0x75,
	0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0xa6, 0xf6, 0xc7, 0xb2, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x5f, 0x82, 0x41,
	0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x0a, 0x74,
	0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x1a, 0x74, 0x0a, 0x0f, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x12,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0xd6, 0xec, 0x9e, 0xae, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72,
	0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f,
	0x0a, 0x12, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x97, 0xf1, 0x81, 0x6e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74,
	0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a,
	0xe8, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xbb, 0xc5, 0xd1, 0x3e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x74, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xf2, 0xea, 0x94, 0x71, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xb4, 0xbe, 0xbd, 0xae, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x69,
	0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0xe9, 0xcc, 0x80, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x6e, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x9a, 0x8a, 0xf8, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0xa7, 0xef, 0xdd, 0x46, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xf5, 0x7c, 0x0a, 0x08, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0xe8, 0x01, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xdb, 0xd7, 0xca, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xdc, 0xb7,
	0xf5, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xa5, 0x01, 0x0a, 0x05, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x18, 0xa8, 0xd8, 0x97, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x42, 0x42, 0x82, 0x41,
	0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78,
	0x52, 0x05, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x12, 0x9e, 0x01, 0x0a, 0x03, 0x70, 0x6f, 0x65, 0x18,
	0x86, 0xd4, 0xde, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x6f,
	0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x70, 0x6f, 0x65, 0x52, 0x03, 0x70, 0x6f, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xd5, 0x90, 0xb8, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xc4, 0x01, 0x0a, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x18, 0xd5, 0x85, 0x81, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x42, 0x4a,
	0x82, 0x41, 0x47, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0c, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x1a, 0xe5, 0x0d, 0x0a, 0x15, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x93, 0x02, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa8, 0xa9, 0xc7,
	0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xf3, 0x08, 0x0a, 0x14, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0xfe, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc2, 0x9d, 0xbb, 0xd5,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xd9, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa0, 0x01, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x8a, 0x90, 0xe1, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x63, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0xb3, 0x01, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xd7,
	0xcf, 0x82, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7a,
	0x82, 0x41, 0x77, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x8d, 0x02, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0xcf, 0x97, 0xfe, 0x73, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x2a, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x10, 0x82, 0x41,
	0x0d, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x12, 0x2c,
	0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x12, 0x3a, 0x0a, 0x1c,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x18,
	0x82, 0x41, 0x15, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x34, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x53, 0x55, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x1a, 0xbf,
	0x02, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x7f, 0x0a, 0x03, 0x6d, 0x61,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x63, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0xa2, 0x01, 0x0a, 0x15,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x9d, 0x07, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x92, 0x01, 0x0a, 0x0e,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x18, 0xe1,
	0x91, 0xc6, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82,
	0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x12, 0xc9, 0x01, 0x0a, 0x0b, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x97, 0xb9, 0xde, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0xa0, 0x01, 0x0a,
	0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x18, 0xef, 0xd2, 0xc4, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d,
	0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x11, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x8b, 0x01, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xa3, 0xec, 0xd5, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa0, 0x01,
	0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x98, 0xa8, 0x84,
	0xb7, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x22, 0x5e, 0x0a, 0x0a, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x0f, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x46, 0x55,
	0x4c, 0x4c, 0x12, 0x1c, 0x0a, 0x0f, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x48, 0x41, 0x4c, 0x46,
	0x1a, 0xfd, 0x19, 0x0a, 0x05, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x12, 0xb6, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x8d, 0xde, 0xc5, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64,
	0x6f, 0x74, 0x31, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xb2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc2, 0xd4,
	0x98, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x74, 0x31,
	0x58, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc4, 0x0b, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xc1, 0x99, 0xc9,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69,
	0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x15, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0xe4, 0xc9, 0xd2, 0x99, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0xa1, 0x01, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xf1, 0x8b, 0xec, 0xed, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0xce, 0x01, 0x0a, 0x09, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xb6, 0xc8, 0xa0, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0xb5, 0xee, 0xae, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0xb2, 0x01,
	0x0a, 0x17, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x82, 0xf1, 0xe9, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x16, 0x72, 0x65, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0xa7, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x9b, 0xfe, 0xdf, 0x93, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x17,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x8c, 0xc0, 0xde, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x56, 0x6c,
	0x61, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x95, 0xde, 0xa5, 0x55, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x14,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0xa3, 0x01, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xb5, 0x8f, 0x8f, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x08, 0x48,
	0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x4f, 0x53, 0x54, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x14, 0x48,
	0x4f, 0x53, 0x54, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x10, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x5f, 0x48, 0x4f, 0x53, 0x54, 0x12, 0x26, 0x0a, 0x13, 0x48, 0x4f, 0x53, 0x54, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x1a, 0x0d,
	0x82, 0x41, 0x0a, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x12, 0x2a, 0x0a,
	0x15, 0x48, 0x4f, 0x53, 0x54, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f,
	0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x42, 0x10, 0x0a, 0x0e, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x1a,
	0xbe, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0xe6, 0x8b, 0xf5, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12,
	0x61, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x87, 0x87, 0xe2, 0xbd,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69,
	0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0xa0, 0x01, 0x0a, 0x11,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0xe2, 0xa6, 0xc0, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64,
	0x6f, 0x74, 0x31, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x10, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0xcc,
	0x01, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xb9, 0x97, 0x8d,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f,
	0x74, 0x31, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x90, 0x01,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0xf4,
	0xc8, 0xc5, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41,
	0x52, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0xb2, 0x01, 0x0a, 0x17, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x89, 0xe0, 0xa6,
	0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x16, 0x72,
	0x65, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xe4, 0xb2,
	0xa5, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3b, 0x0a,
	0x17, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xcb, 0xa9, 0xca, 0xb8, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c,
	0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x17, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xee, 0xc5, 0x89, 0x17, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01,
	0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x56, 0x6c, 0x61, 0x6e,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0xa2, 0x01, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xf0, 0xb4,
	0xcf, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x08,
	0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x4f, 0x53, 0x54,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x14,
	0x48, 0x4f, 0x53, 0x54, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f,
	0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x53, 0x49, 0x4e, 0x47, 0x4c,
	0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x12, 0x26, 0x0a, 0x13, 0x48, 0x4f, 0x53, 0x54, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x1a,
	0x0d, 0x82, 0x41, 0x0a, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x12, 0x2a,
	0x0a, 0x15, 0x48, 0x4f, 0x53, 0x54, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x42, 0x10, 0x0a, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x42, 0x12, 0x0a, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x1a, 0xa6, 0x07, 0x0a, 0x03, 0x50, 0x6f, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x87, 0xfa, 0xe3, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x50, 0x6f, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x47, 0x82, 0x41, 0x44,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xad, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf8, 0x9c, 0x8d, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x46, 0x82,
	0x41, 0x43, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8c, 0x01, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x99, 0x94, 0xa2, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x70, 0x6f, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xab, 0x03, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0xaa, 0xb4, 0xdb, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x70,
	0x6f, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0xf9, 0xb8, 0xbb, 0x87, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0a, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x0a, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0xbc, 0xb7, 0xc6, 0xf5, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x75, 0x73, 0x65, 0x64, 0x52, 0x09,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x73, 0x65, 0x64, 0x1a, 0xff, 0x1d, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x18, 0xae, 0xad, 0xa5, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x6e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65,
	0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x97, 0xdb, 0xf3, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0xc8, 0x01, 0x0a, 0x0b, 0x64, 0x75, 0x70,
	0x6c, 0x65, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xd6, 0xed, 0xf1, 0xfa, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x75, 0x70,
	0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x75, 0x70, 0x6c,
	0x65, 0x78, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0xc2, 0x89, 0xea, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x2d, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x68, 0x77, 0x5f, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xb6, 0xf6, 0xb6, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x77, 0x2d, 0x6d,
	0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x68, 0x77, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x86, 0x95, 0xd0, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x63,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0xf1, 0x01, 0x0a, 0x16, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0xe1, 0x8e, 0xf2, 0x2c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x75, 0x70,
	0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x52, 0x14, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x75,
	0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x15, 0x6e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x9e, 0xce, 0xa0, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x42, 0x58, 0x82, 0x41, 0x55,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x13, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x9f, 0x01, 0x0a, 0x0a, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0xf7, 0xd1, 0xc2, 0xf4, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x1a, 0xd3, 0x0f, 0x0a,
	0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x69, 0x6e,
	0x5f, 0x38, 0x30, 0x32, 0x31, 0x71, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x9f, 0xe9,
	0x98, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x38, 0x30, 0x32, 0x31,
	0x71, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x38, 0x30, 0x32, 0x31,
	0x71, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xd5, 0xc4, 0xae, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x63,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xaa, 0x8d, 0xd9, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x63, 0x72, 0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x52, 0x0b, 0x69, 0x6e, 0x43, 0x72, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0xa5, 0x01,
	0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0xe3, 0xad, 0xb3, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x10, 0x69, 0x6e, 0x5f, 0x6a, 0x61, 0x62,
	0x62, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xa5, 0x99, 0xbf, 0xc6, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6a, 0x61, 0x62, 0x62, 0x65, 0x72,
	0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x4a, 0x61, 0x62, 0x62, 0x65,
	0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x15, 0x69, 0x6e, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0xc8, 0x8d, 0xa1, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x12, 0x69, 0x6e, 0x4d, 0x61, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0xb7, 0xf0, 0x97, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82,
	0x41, 0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6d, 0x61,
	0x63, 0x2d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x10,
	0x69, 0x6e, 0x4d, 0x61, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0xa4, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xfc, 0xc9, 0xf8, 0x70, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x2d, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x80, 0xcf, 0xaa, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82,
	0x41, 0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x11,
	0x69, 0x6e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x71, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xd4, 0xca, 0xc5, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x38, 0x30, 0x32, 0x31, 0x71, 0x2d, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x38, 0x30, 0x32, 0x31, 0x71, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x16, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xb7, 0x93,
	0xa4, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41,
	0x5f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x61,
	0x63, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x13, 0x6f, 0x75, 0x74, 0x4d, 0x61, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xec,
	0x85, 0xfe, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82,
	0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6d,
	0x61, 0x63, 0x2d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x11, 0x6f, 0x75, 0x74, 0x4d, 0x61, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x5e, 0x0a, 0x0a, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x0f, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x46, 0x55, 0x4c, 0x4c, 0x12, 0x1c, 0x0a, 0x0f, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x48, 0x41,
	0x4c, 0x46, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4e,
	0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x19, 0x4e,
	0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x46,
	0x55, 0x4c, 0x4c, 0x12, 0x26, 0x0a, 0x19, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45,
	0x44, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x4c, 0x46,
	0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x48, 0x41, 0x4c, 0x46, 0x1a, 0xe4, 0x1f, 0x0a, 0x0c,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0xc5, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xfa, 0xe0, 0xe8, 0xc1, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c,
	0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xe0, 0x01, 0x0a, 0x0e, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0xe5, 0xd3, 0x98, 0x2e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61,
	0x6e, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x70, 0x42, 0x59,
	0x82, 0x41, 0x56, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x61, 0x70, 0x52, 0x0c, 0x64, 0x6f, 0x74, 0x31, 0x78,
	0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0xc0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0xef, 0xb4, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd2, 0x06, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x96, 0x01, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0xcb, 0xfd, 0xf1, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0xb2,
	0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0xee, 0x91, 0x98, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x18, 0x9a, 0xb6, 0xaa, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0xea, 0x01,
	0x0a, 0x0b, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0xbc, 0x8b,
	0xcc, 0xcc, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42,
	0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x0a,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x1a, 0x73, 0x0a, 0x0f, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x12, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x84, 0xf8, 0x93, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72,
	0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f,
	0x0a, 0x12, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0xad, 0x91, 0xb0, 0x45, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74,
	0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a,
	0xbe, 0x0d, 0x0a, 0x0c, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x70,
	0x12, 0xed, 0x01, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa1,
	0xb9, 0xbc, 0x51, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x56, 0x6c,
	0x61, 0x6e, 0x4d, 0x61, 0x70, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4b, 0x65,
	0x79, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64, 0x6f,
	0x74, 0x31, 0x78, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x94, 0x09, 0x0a, 0x08, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xf3, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa6, 0x82, 0xf1, 0x3f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x6c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c,
	0x61, 0x6e, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x70, 0x2e,
	0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x6a, 0x82, 0x41, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64, 0x6f, 0x74, 0x31,
	0x78, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xef, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x93, 0xe9,
	0xd2, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x56, 0x6c, 0x61,
	0x6e, 0x4d, 0x61, 0x70, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd0, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x96, 0x01, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x8e, 0xa0, 0x8c, 0xf0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x61,
	0x70, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0xac, 0x01, 0x0a, 0x09, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe6, 0xa0, 0xcb, 0xf4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x6d, 0x61, 0x70, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08,
	0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xcc, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xa5, 0xe8, 0xbc, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d,
	0x61, 0x70, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0xab, 0x01, 0x0a, 0x09, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xaf, 0xb1, 0x87, 0xf7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x6d, 0x61, 0x70, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x76,
	0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xa6, 0x02, 0x0a, 0x0b, 0x56, 0x6c, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64, 0x6f, 0x74, 0x31,
	0x78, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b,
	0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x82, 0x01, 0x0a, 0x09,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e,
	0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x70, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0xcf, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x82, 0xc7, 0xe0, 0x9d, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56,
	0x6c, 0x61, 0x6e, 0x12, 0xb2, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x89, 0xa1, 0x99, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c, 0x61, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0b, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0xcb, 0xab, 0x91, 0xa2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6c, 0x61,
	0x6e, 0x12, 0xe8, 0x01, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x73, 0x18, 0xe9, 0xb6, 0x91, 0xf0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x0a, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x1a, 0x74, 0x0a, 0x0f,
	0x54, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x12, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x8f, 0xfd, 0xb8, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x30, 0x0a, 0x12, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x82, 0xc1, 0xcc, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x1a, 0xd4, 0x24, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb9, 0x01, 0x0a,
	0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xbc, 0x9b,
	0x9c, 0x48, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xe3, 0xcf, 0xa4, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa2, 0xf4, 0xde, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xaf, 0xaa, 0xfe, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x73, 0x0a, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xeb, 0xd6, 0xb7,
	0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x7e, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0xbd, 0x8c, 0xb8, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c,
	0x61, 0x73, 0x74, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x74, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0xa5, 0x8f, 0xd3, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x85, 0x01, 0x0a,
	0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xad,
	0xb6, 0xb4, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82,
	0x41, 0x44, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63,
	0x6b, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x67, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0xd0, 0xba, 0xda, 0x3d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x6d, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x9d, 0x87, 0x86, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xb5, 0x01, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xf3, 0xae, 0xd5,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x7f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xcc, 0xbd, 0xaa,
	0xe9, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xb0, 0x14, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb9, 0xac, 0x87, 0x8f, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x12, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xaa, 0xbd, 0x8b, 0x67,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52,
	0x0f, 0x69, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73,
	0x12, 0x88, 0x01, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0xc9, 0xfb, 0x84, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x0a, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x09,
	0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xd5, 0xb4, 0xaf, 0xbd, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x66, 0x63, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0xa4, 0xb2, 0xca, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x63, 0x73, 0x2d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x46, 0x63, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x99, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xdf, 0xc9, 0x8a, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x81, 0x01, 0x0a,
	0x09, 0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xb8, 0xa5, 0xea, 0x6f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x12, 0x7b, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x9c, 0xd5, 0xea, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x92, 0x01,
	0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0xa4, 0xb2, 0xd1, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70,
	0x6b, 0x74, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b,
	0x74, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0xb2, 0xe3, 0xb4, 0xd3, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x0f, 0x69,
	0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x85,
	0x01, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0xf2, 0xaf,
	0xa2, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41,
	0x4a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x9c, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x89, 0x97,
	0xb1, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41,
	0x52, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70,
	0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x86, 0xf9, 0xdc, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x96, 0xee, 0xb3, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x09,
	0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x12, 0x6f, 0x75,
	0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x9c, 0x92, 0x95, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55,
	0x82, 0x41, 0x52, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xd7, 0x9e, 0xf1, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x7f, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xb7, 0x85, 0x97, 0xfa,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73,
	0x12, 0x95, 0x01, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xf7, 0xbc, 0xaa, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x0e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x50, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x1d, 0x0a, 0x10, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x23, 0x0a, 0x13, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x22, 0xa8,
	0x02, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x10, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x1c, 0x0a,
	0x0f, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x22, 0x0a, 0x12, 0x4f,
	0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x12,
	0x22, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x12, 0x22, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x10, 0x06, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x12, 0x2a, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x10, 0x07, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x54, 0x12, 0x34, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x08, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x1a, 0xda, 0xdd, 0x01, 0x0a, 0x0d, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0xce, 0x01, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xdc, 0x8c,
	0xbc, 0x6e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x42,
	0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xfc, 0xd9,
	0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0xcd, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb1, 0x86, 0xcc, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xc6, 0x01, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0xbe, 0xdb, 0x92, 0xf7, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x42, 0x53, 0x82,
	0x41, 0x50, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0xc6, 0x01, 0x0a, 0x04, 0x69, 0x70, 0x76,
	0x36, 0x18, 0xbc, 0xdb, 0x92, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x52, 0x04, 0x69, 0x70, 0x76,
	0x36, 0x12, 0xca, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa6, 0xaf, 0xbf, 0xa1,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc8,
	0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9d, 0x01, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9a, 0xcd, 0xac, 0x62, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x90, 0x01, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xe7, 0xe0, 0x83, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x8a, 0x01, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xa0, 0xe3, 0xad, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xe8, 0x4a, 0x0a, 0x04, 0x49, 0x70,
	0x76, 0x34, 0x12, 0xe4, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0xeb, 0x91, 0xc8, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42,
	0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xd8, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x8f, 0xf4, 0xb5, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xe3, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x18, 0x9a, 0xd5, 0x9d, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52,
	0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xe1, 0x01, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x72, 0x70, 0x18, 0xff, 0x8a, 0x89, 0x55, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x62, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x41, 0x72, 0x70, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2d, 0x61, 0x72, 0x70, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x12, 0xd3,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x80, 0xd6, 0x80, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x91, 0x0f, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0xf3, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa6,
	0xef, 0xc6, 0xfa, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xfc, 0x0a, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0xfb, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xa7, 0xa6, 0x88, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c, 0x82, 0x41,
	0x69, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xf7, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x98, 0x98, 0xcc,
	0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xde, 0x02, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xc5,
	0xac, 0x99, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f,
	0x82, 0x41, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x52,
	0x02, 0x69, 0x70, 0x12, 0xb7, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xbf, 0xa5, 0xa8, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x7a, 0x82, 0x41, 0x77, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0x97, 0x04,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xd4,
	0xc6, 0x99, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e,
	0x82, 0x41, 0x6b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x52, 0x02,
	0x69, 0x70, 0x12, 0xb9, 0x01, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xf5, 0xbc,
	0xe7, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x66, 0x49, 0x70, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0xb6,
	0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x80, 0xf9, 0x87, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79,
	0x82, 0x41, 0x76, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0x8e, 0x02, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x78, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x85, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xcd, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x9f, 0x01, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0xf1, 0xee, 0xdf, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x68,
	0x63, 0x70, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0xf1, 0xf6, 0x96, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x62, 0x82, 0x41, 0x5f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x89, 0x01, 0x0a,
	0x03, 0x6d, 0x74, 0x75, 0x18, 0x9a, 0xbe, 0xac, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a, 0xc8, 0x0f, 0x0a, 0x09, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xf7, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x18, 0xff, 0xc1, 0xe7, 0xe5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x66,
	0x82, 0x41, 0x63, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x1a, 0xaa, 0x0b, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xfe, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc0, 0xf6, 0xa7, 0x9d, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xfa,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb9, 0x84, 0xd1, 0xe8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf2, 0x02, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9a, 0x01, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xcc, 0xf2,
	0xbb, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82,
	0x41, 0x6d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x52,
	0x02, 0x69, 0x70, 0x12, 0xca, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x9c, 0x97, 0xf3, 0x9c, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x80, 0x01, 0x82, 0x41,
	0x7d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x6b,
	0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10,
	0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0xaa, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0xff, 0xf3, 0xc7, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0xc8, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xcb, 0xb3,
	0xf8, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7f,
	0x82, 0x41, 0x7c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x6e,
	0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0xb9, 0x01, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x82, 0x9d, 0xe5,
	0x94, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66,
	0x49, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x1a, 0x93, 0x02,
	0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x79, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x88, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x1a, 0x9f, 0x09, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70,
	0x12, 0xeb, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc0, 0x89, 0x8a, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xe7,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb9, 0x85, 0xd6, 0xdc, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x63, 0x82, 0x41,
	0x60, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xdd, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xf0, 0x01, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xee, 0x9a, 0xc9,
	0x4e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2d, 0x61, 0x72, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00,
	0x1a, 0x0a, 0x82, 0x41, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x24, 0x0a, 0x10,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x12, 0x14, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03,
	0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4c, 0x4c, 0x1a, 0xda, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xee, 0x01, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x85, 0xbb, 0xbc, 0x3b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61,
	0x72, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x1a, 0x0a, 0x82,
	0x41, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x24, 0x0a, 0x10, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x1a,
	0x0e, 0x82, 0x41, 0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x12,
	0x14, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x06, 0x82,
	0x41, 0x03, 0x41, 0x4c, 0x4c, 0x1a, 0xac, 0x16, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0xec, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xf8, 0xad, 0xb7,
	0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x9f,
	0x01, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0xea,
	0xba, 0xc4, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82,
	0x41, 0x62, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x93, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc2, 0x8a, 0xb0,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0xf9,
	0x8d, 0x93, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41,
	0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75,
	0x1a, 0xf1, 0x10, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0xb9, 0x01,
	0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x18, 0xcd, 0xce, 0xb3, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x0d, 0x69, 0x6e,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x9c, 0x84, 0xaa, 0x5b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x18, 0xbe, 0xe8, 0xce, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x76,
	0x82, 0x41, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x11, 0x69, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18,
	0xa6, 0xed, 0xa9, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74,
	0x82, 0x41, 0x71, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d,
	0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0xff, 0xcb, 0xa8, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52,
	0x08, 0x69, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x07, 0x69, 0x6e,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xbf, 0xb1, 0xb2, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x70, 0x6b, 0x74, 0x73,
	0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18,
	0x90, 0xb8, 0xce, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82,
	0x41, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d,
	0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x89, 0x8a, 0xbb, 0xda, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0c, 0x6f, 0x75, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x14, 0x6f, 0x75,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x18, 0xf3, 0x83, 0x93, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x77, 0x82, 0x41, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0xbb, 0x01,
	0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0xeb, 0xc3, 0x90, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x0a,
	0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x86, 0x80, 0xb9, 0xa0, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75,
	0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x8e, 0xe9, 0xd6, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b,
	0x82, 0x41, 0x68, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x50, 0x6b, 0x74, 0x73, 0x1a, 0xe2, 0x5b, 0x0a, 0x04, 0x49, 0x70, 0x76, 0x36, 0x12, 0xe3, 0x01,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0xfd, 0xcd, 0xb6, 0x4e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0xd7, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x91,
	0xfa, 0xa6, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xe3, 0x01,
	0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0xf4, 0xf5, 0xf0, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x12, 0x8d, 0x02, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xf4, 0xa9, 0x92,
	0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0xd4, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x86, 0xa0,
	0xc5, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xde, 0x13, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xf2, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0xf8, 0x87, 0x98, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x65, 0x82,
	0x41, 0x62, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xca, 0x0f,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xfc, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xfd, 0xa6, 0xe5, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x72,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xf7, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xf2, 0xc3, 0xec, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6b,
	0x82, 0x41, 0x68, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xdf, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9a, 0x01,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0xf3, 0x97, 0xaf, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0xb7, 0x01, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xe1, 0xd5, 0xf3,
	0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7a, 0x82, 0x41, 0x77, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x1a, 0xe3, 0x08, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x99,
	0x01, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x86, 0xa5, 0xcf, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0xb9, 0x01, 0x0a, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xc7, 0xeb, 0x91, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49, 0x70, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0xb7, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xc6, 0xa1, 0xe9, 0x90, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x82, 0x41, 0x76, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x88, 0x02, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xbf, 0xe8, 0xa1, 0xba,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x72, 0x82, 0x41, 0x6f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0c,
	0x82, 0x41, 0x09, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x12, 0x24, 0x0a, 0x11,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x12, 0x1e, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x1a, 0x0f, 0x82, 0x41, 0x0c,
	0x49, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x12, 0x1e, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05,
	0x1a, 0x0a, 0x82, 0x41, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x12, 0x22, 0x0a, 0x10,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x06, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x12, 0x22, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x10, 0x07, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x12, 0x24, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10, 0x08, 0x1a, 0x0d, 0x82, 0x41, 0x0a,
	0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x54, 0x49, 0x43, 0x1a, 0x8e, 0x02, 0x0a, 0x0a, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x78, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x69, 0x70, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x98, 0x05, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9f, 0x01, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x93, 0xe1, 0xae, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68,
	0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0xc7, 0x01, 0x0a, 0x19, 0x64, 0x75, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x18, 0xb3, 0xe5, 0xf3, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x64, 0x75, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x16, 0x64, 0x75, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc7,
	0xf1, 0xb2, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82,
	0x41, 0x5f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x03, 0x6d,
	0x74, 0x75, 0x18, 0xd8, 0xd9, 0x96, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x74,
	0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a, 0x8d, 0x15, 0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x12, 0xf6, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x18, 0xf5, 0xad, 0xdb, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x66, 0x82, 0x41, 0x63,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xf0, 0x10,
	0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xfd, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9a, 0xe7, 0xa1, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xfa, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xb7, 0xa0, 0xdf, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x72,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf3, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xbe, 0xc0, 0xeb, 0xed, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70,
	0x12, 0xca, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xf6, 0x80, 0xc5, 0xea, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x80, 0x01, 0x82, 0x41, 0x7d, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e,
	0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xf0, 0x09,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x95,
	0xd1, 0xd7, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70,
	0x52, 0x02, 0x69, 0x70, 0x12, 0xac, 0x01, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x18, 0xc4, 0xbb, 0xa9, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x73, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x08, 0x69, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x12, 0xc7, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe1, 0xcc, 0xdf, 0x44, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7f, 0x82, 0x41, 0x7c, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e,
	0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa9, 0x02,
	0x0a, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xf4, 0xb0, 0xd5, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x80, 0x01, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x7b, 0x82,
	0x41, 0x78, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0xe8, 0xe8, 0xd1, 0x53, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x22, 0xe9, 0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42,
	0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x2b, 0x0a, 0x18, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x29, 0x0a, 0x17,
	0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x21, 0x0a, 0x13, 0x4e, 0x45, 0x49, 0x47, 0x48,
	0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x10, 0x03,
	0x1a, 0x08, 0x82, 0x41, 0x05, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x12, 0x21, 0x0a, 0x13, 0x4e, 0x45,
	0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x10, 0x04, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x12, 0x21, 0x0a,
	0x13, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x42, 0x45, 0x10, 0x05, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x50, 0x52, 0x4f, 0x42, 0x45,
	0x1a, 0x93, 0x02, 0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x79, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x69, 0x82, 0x41,
	0x66, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x88, 0x01, 0x0a, 0x08,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xc6, 0x0c, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x80,
	0x02, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf9, 0xb8, 0xf2, 0x3e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x74, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xfc, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xce, 0x85, 0xb2, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x96, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xac, 0x01, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xbf, 0x9c, 0xa0, 0x4e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0xad, 0x01, 0x0a, 0x08, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc5, 0xc9, 0xa7, 0xcf, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x08, 0x73,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x85, 0xbe, 0x9e, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x93, 0x04, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x8a, 0xbc, 0xdf, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x77, 0x82, 0x41, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0xab, 0x01, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0xdc, 0xb4, 0xae, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x77, 0x82,
	0x41, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0xac, 0x01, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x88, 0xbd,
	0xdc, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x77, 0x82, 0x41,
	0x74, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x1a,
	0xf7, 0x17, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xeb, 0x01, 0x0a, 0x08, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xda, 0xf9, 0x9a, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x68, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0xd8, 0xb1, 0x99, 0x47, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68,
	0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0xc6, 0x01, 0x0a, 0x19, 0x64, 0x75, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x18, 0xc0, 0x94, 0xaf, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x64, 0x75, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x16, 0x64, 0x75, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x93, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xf4, 0x80,
	0xc3, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18,
	0x8b, 0xdf, 0xb2, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d,
	0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d,
	0x74, 0x75, 0x1a, 0xf4, 0x10, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0xb9, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xbb, 0xa5, 0xab, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x0d,
	0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xd6, 0x98,
	0xec, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41,
	0x6d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0b,
	0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x13,
	0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0xc0, 0x90, 0xef, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0xb8, 0x01, 0x0a,
	0x11, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x18, 0xa4, 0xc4, 0xca, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xfd, 0x84, 0x98, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x9c, 0x01, 0x0a,
	0x07, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x89, 0x9e, 0x94, 0xb7, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x70,
	0x6b, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x12,
	0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x18, 0xe2, 0xda, 0x9f, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x0e, 0x6f, 0x75,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xff, 0xfb, 0xa5,
	0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x6f, 0x75, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0c,
	0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xc2, 0x01, 0x0a,
	0x14, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x91, 0xf7, 0xd8, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x77, 0x82, 0x41, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x12, 0x6f,
	0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x12, 0xbc, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xb5, 0x84, 0x9e, 0xd8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10,
	0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73,
	0x12, 0xa5, 0x01, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18,
	0xf0, 0xac, 0xaa, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d,
	0x82, 0x41, 0x6a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x09, 0x6f,
	0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xd4, 0xd2, 0xef, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x1a, 0xa1, 0x29, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xf0, 0x01, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0xb1, 0xcb, 0xa9, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x66,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xe2, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0xfa, 0x91, 0xcb, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc9, 0xfa, 0x8f, 0x6e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8e, 0x01, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x94, 0xec, 0xf3, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x8e, 0x01, 0x0a, 0x07,
	0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xa0, 0xec, 0xdf, 0x74, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x89, 0x01, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xdf, 0xb3, 0xe6, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x9a, 0x01, 0x0a, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x9e, 0xaa, 0xef, 0x8e, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61,
	0x73, 0x74, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0xb2, 0xef, 0xbe, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x88, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0xac, 0x97, 0xec, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0xeb, 0x01, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0xf8, 0xf1, 0xe3, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x65, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0x9a, 0x18, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0xbb, 0x01, 0x0a,
	0x13, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x84, 0xd0, 0xd2, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb4, 0x01, 0x0a, 0x11, 0x69,
	0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0xf7, 0xeb, 0xd8, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69,
	0x6e, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73,
	0x52, 0x0f, 0x69, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74,
	0x73, 0x12, 0xa2, 0x01, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x18, 0xd8, 0xaa, 0xfa, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x69, 0x82, 0x41, 0x66, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69,
	0x6e, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0xd4, 0xea, 0x96, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x08, 0x69, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x66, 0x63,
	0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x89, 0xd5, 0xf0, 0xbe, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x63, 0x73, 0x2d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x46, 0x63, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0xb4, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x8e, 0xe3, 0xc9, 0x8a, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x9d, 0xdf, 0xab, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x08,
	0x69, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0xa9, 0xbc, 0xec, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b,
	0x74, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xc5, 0xa1, 0xdb, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70,
	0x6b, 0x74, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b,
	0x74, 0x73, 0x12, 0xb4, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0xdf, 0xab, 0xa0, 0xe7, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x91, 0xcb, 0x98, 0xdb, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0xb6, 0x01, 0x0a,
	0x12, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x18, 0xa2, 0x9f, 0x86, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70,
	0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0xc1, 0xba, 0xac, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x9f, 0x01,
	0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xcd, 0xd0, 0x8e,
	0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0xb7, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xb7, 0xef, 0xec, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x0a, 0x6f, 0x75,
	0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x90, 0x9a, 0x83, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xf4, 0xf9, 0x83, 0xbf, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x10, 0x6f, 0x75, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xec, 0xa1,
	0xfe, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41,
	0x6b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0e, 0x6f, 0x75,
	0x74, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x22, 0x83, 0x01, 0x0a,
	0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x0e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x1d,
	0x0a, 0x10, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x23, 0x0a,
	0x13, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x45, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x22, 0xa8, 0x02, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x55,
	0x50, 0x12, 0x1c, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x12,
	0x22, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x45, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x12, 0x22, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x12, 0x22, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x10, 0x06, 0x1a,
	0x0a, 0x82, 0x41, 0x07, 0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x12, 0x2a, 0x0a, 0x16, 0x4f,
	0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4e, 0x4f, 0x54, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x12, 0x34, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x4c, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x1a, 0xf7, 0x01,
	0x0a, 0x0f, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x6a, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x78, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xe4, 0x9d, 0x01, 0x0a, 0x06, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0xa6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa5,
	0xcc, 0xa9, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9e, 0x01, 0x0a,
	0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0xb2, 0xfe, 0x90, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x9e, 0x01,
	0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0xb0, 0xfe, 0x90, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0xa1,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9a, 0x91, 0xb4, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xdd, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x72, 0x0a,
	0x03, 0x64, 0x73, 0x74, 0x18, 0xa9, 0x9a, 0xb9, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x73, 0x74, 0x52, 0x03, 0x64, 0x73,
	0x74, 0x12, 0x7b, 0x0a, 0x07, 0x67, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x9a, 0xe0, 0xa7,
	0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67,
	0x72, 0x65, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x67, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x71,
	0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0xb2, 0xc2, 0x8d, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72,
	0x63, 0x12, 0x6f, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x84, 0xe5, 0x9c, 0x56, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x74, 0x6c, 0x52, 0x03, 0x74,
	0x74, 0x6c, 0x1a, 0xe1, 0x40, 0x0a, 0x04, 0x49, 0x70, 0x76, 0x34, 0x12, 0xbc, 0x01, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0xc7, 0x84, 0xcd, 0xec, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf3, 0xa8, 0xa4, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x46, 0x82, 0x41,
	0x43, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbc, 0x01, 0x0a,
	0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0xa6, 0xf1, 0xff, 0xad, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x72, 0x70, 0x18, 0xcb, 0xc5, 0xa2, 0xec, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x41, 0x72, 0x70, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x12, 0xab, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xd4, 0xc3, 0xc6, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8d, 0x0d, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0xca, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0xd2, 0x91, 0xda, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0xca, 0x09, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xd3, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x93, 0x91, 0xe1, 0x7f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xd0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf4, 0xca,
	0xc8, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb6, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x85, 0x01, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xb1, 0xa0, 0xde, 0x69, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0xa3, 0x01, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xe3, 0xd7, 0x81, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a,
	0xdc, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x90, 0xa7, 0xc7, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69,
	0x70, 0x12, 0xa5, 0x01, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xd9, 0xd1, 0x96,
	0xc6, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66,
	0x49, 0x70, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xa4, 0x8d, 0x88, 0x44,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0xe5,
	0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x64, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x69, 0x70, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x71, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x90, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x8b, 0x01, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0xbd, 0x95, 0xd0, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x80, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x85, 0x85, 0x82, 0x46,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x75, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0xee, 0xcf, 0xe8, 0xd9, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a, 0xbe, 0x0d, 0x0a, 0x09, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xce, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x18, 0xfb, 0xc3, 0x91, 0x79, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xf2, 0x09, 0x0a, 0x08, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xd5, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xac, 0xd6, 0x94, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xd2, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa5, 0xb6, 0x81, 0x9d, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xc8, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x86, 0x01,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0xb8, 0x87, 0xee, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0xb4, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe0, 0x88,
	0xfe, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82,
	0x41, 0x69, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e,
	0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xed, 0x03,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xeb,
	0xb4, 0xfd, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b,
	0x82, 0x41, 0x58, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12,
	0xb3, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xdf, 0xad, 0xe8, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0xe6, 0xa2, 0xd1, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x66, 0x49, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x1a, 0xea, 0x01,
	0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x65, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x69, 0x70,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x74, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xfd, 0x07, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x12, 0xc2, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x9c, 0xcb, 0xfa, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbe, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x95, 0xf0, 0xab, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x02,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc8, 0x01, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x8a, 0x85, 0xc7, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72,
	0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x1a, 0x0a, 0x82,
	0x41, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x24, 0x0a, 0x10, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x1a,
	0x0e, 0x82, 0x41, 0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x12,
	0x14, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x06, 0x82,
	0x41, 0x03, 0x41, 0x4c, 0x4c, 0x1a, 0xb2, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0xc6, 0x01, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xa1, 0x81, 0xd1, 0x65, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72,
	0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x54, 0x82, 0x41,
	0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x00, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x24,
	0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x12, 0x14, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x03, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4c, 0x4c, 0x1a, 0xd9, 0x13, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x94, 0xd2, 0x8e, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0b,
	0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0xc6, 0xed, 0xaf, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68,
	0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0xf6, 0x88, 0xa1, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x73, 0x0a, 0x03, 0x6d, 0x74, 0x75,
	0x18, 0xdd, 0x92, 0x87, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49,
	0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a, 0x85,
	0x0f, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x11,
	0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0xa1, 0xe9, 0xcb, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x60, 0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74,
	0x73, 0x52, 0x0f, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b,
	0x74, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0xf0, 0xf1, 0xda, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74, 0x73,
	0x52, 0x0b, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xab, 0x01,
	0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xca, 0xc6, 0xd7, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x11,
	0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0x8a, 0x8d, 0x85, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b,
	0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50,
	0x6b, 0x74, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x18, 0xe3, 0xbd, 0xb9, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x69, 0x6e, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0xdb, 0xe3, 0xd1, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x56, 0x82, 0x41, 0x53, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x69, 0x6e, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12,
	0xa7, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xcc, 0xab, 0xe2, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x0e, 0x6f, 0x75,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x95, 0xd1, 0xb1,
	0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x14, 0x6f, 0x75, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x18, 0xe7, 0xf8, 0x95, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x12, 0x6f, 0x75,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x87, 0x8b, 0xf8, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x6f, 0x75, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b,
	0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x50, 0x6b, 0x74, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0x82, 0xa0, 0xd7, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x09, 0x6f,
	0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xa2, 0xdb, 0xee, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x1a, 0xab, 0x50, 0x0a, 0x04, 0x49, 0x70, 0x76, 0x36, 0x12,
	0xbb, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x99, 0xbd,
	0x84, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xaf, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc5, 0xdf, 0xb6, 0x25, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xbc, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0xa0, 0x88,
	0x87, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xe6,
	0x01, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x98, 0x85, 0xe2, 0xd6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x54, 0x82, 0x41,
	0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xba, 0xb1, 0xcc, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb0, 0x11, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0xcb, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xc4, 0xfd, 0xc5, 0xb7, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0xec, 0x0d, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xd4, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe9, 0xd7, 0xeb, 0x95, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xd0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbe,
	0x83, 0x89, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb6, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xaf, 0xb4, 0xa9, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0xa3, 0x01, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xd5, 0xfe, 0x8e,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x1a, 0xfd, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x82, 0xc0, 0xdd, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x52, 0x02,
	0x69, 0x70, 0x12, 0xa4, 0x01, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xbb, 0xfb,
	0xb2, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66,
	0x49, 0x70, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xda, 0xfd, 0xc3, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0xe0,
	0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xc3, 0xcc, 0xcf, 0x82, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xbc, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52,
	0x45, 0x44, 0x10, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52,
	0x45, 0x44, 0x12, 0x24, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x50,
	0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x12, 0x1e, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x1a, 0x0a, 0x82, 0x41,
	0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10,
	0x04, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x49, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42,
	0x4c, 0x45, 0x12, 0x1e, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x12, 0x22, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x54, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x12, 0x22, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x07, 0x1a, 0x0c, 0x82, 0x41,
	0x09, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x12, 0x24, 0x0a, 0x11, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10,
	0x08, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x54, 0x49, 0x43,
	0x1a, 0xe5, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12,
	0x64, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x54, 0x82, 0x41, 0x51,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x69,
	0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x71, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xc9, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0xef, 0xe2, 0xda, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0xb4, 0x01, 0x0a, 0x19, 0x64, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73,
	0x18, 0xbf, 0xa9, 0xa1, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x60, 0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x75, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x73, 0x52, 0x16, 0x64, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xeb, 0xe7, 0x86, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x75, 0x0a,
	0x03, 0x6d, 0x74, 0x75, 0x18, 0xbc, 0x9c, 0x98, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x74, 0x75, 0x52,
	0x03, 0x6d, 0x74, 0x75, 0x1a, 0xc9, 0x12, 0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x12, 0xce, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18,
	0xf1, 0xe9, 0xe9, 0x67, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x1a, 0xfd, 0x0e, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x12, 0xd6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x96, 0x94, 0xf3, 0xf5,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xd2, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xc3, 0xb7, 0xff, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x58, 0x82,
	0x41, 0x55, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc9,
	0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0xca, 0xff, 0xaf, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02,
	0x69, 0x70, 0x12, 0xb5, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xca, 0xd1, 0x81, 0x91, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xf6, 0x08, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xa1, 0xeb, 0xe5, 0x5a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x98, 0x01, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0xb0, 0x9f, 0xf9, 0xe3, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x73, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x08, 0x69,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0xb4, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xb5,
	0xc9, 0x95, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6b, 0x82, 0x41, 0x68, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69,
	0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xff,
	0x01, 0x0a, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xd0, 0xc6, 0x9b, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xa4, 0x01, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xcc, 0xec, 0xde, 0x2b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49, 0x70,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x5f,
	0x82, 0x41, 0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0xe9, 0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x49,
	0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x2b, 0x0a, 0x18, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01,
	0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x12,
	0x29, 0x0a, 0x17, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x0c, 0x82, 0x41,
	0x09, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x21, 0x0a, 0x13, 0x4e, 0x45,
	0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4c,
	0x45, 0x10, 0x03, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x12, 0x21, 0x0a,
	0x13, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x41, 0x59, 0x10, 0x04, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x44, 0x45, 0x4c, 0x41, 0x59,
	0x12, 0x21, 0x0a, 0x13, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x05, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x50, 0x52,
	0x4f, 0x42, 0x45, 0x1a, 0xea, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x65, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x55, 0x82, 0x41, 0x52, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x74, 0x0a, 0x08, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x1a, 0x80, 0x0b, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xd9, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x9d, 0xe7, 0xd4, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x5b, 0x82, 0x41, 0x58, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xd5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x92,
	0xa7, 0xf5, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xda, 0x03, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0xdb, 0xae, 0xe5, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x98, 0x01, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xc9, 0xae, 0xda, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64,
	0x82, 0x41, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x98,
	0x01, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0xc9, 0xed, 0xc6, 0x45,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xd7, 0x03, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0xa6, 0x84, 0xaa, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63,
	0x82, 0x41, 0x60, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x98, 0x01,
	0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc0, 0xac, 0xc1, 0x9f, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x08, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x9c, 0xe6, 0xc5, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0x8e, 0x15, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc4, 0x01,
	0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xf6, 0xc3, 0x96, 0xec, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0xf4, 0x86, 0xa1, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0xb2, 0x01, 0x0a, 0x19, 0x64, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0xac, 0xc3, 0x95, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82,
	0x41, 0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x75, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x2d, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x16,
	0x64, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x98, 0xde, 0xa7, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x74, 0x0a, 0x03, 0x6d, 0x74, 0x75,
	0x18, 0xff, 0xbd, 0xee, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a,
	0x82, 0x0f, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa4, 0x01, 0x0a,
	0x11, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x18, 0x8f, 0x9a, 0x9a, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b,
	0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50,
	0x6b, 0x74, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xaa, 0x92, 0xe0, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b,
	0x74, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12,
	0xab, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x8c, 0xa8, 0xa6, 0x9d, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0xa4, 0x01,
	0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x18, 0xa8, 0x85, 0xa9, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70,
	0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x50, 0x6b, 0x74, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x18, 0x81, 0xdd, 0xe6, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x4f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0xe5, 0xa2, 0xb4, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x56, 0x82, 0x41, 0x53, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x69, 0x6e, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12,
	0xa8, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xbe, 0x9b, 0xd2, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x0e, 0x6f,
	0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xab, 0xd3,
	0xbe, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41,
	0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0c, 0x6f, 0x75, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x14, 0x6f, 0x75,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x18, 0xc5, 0x97, 0xb9, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x12, 0x6f,
	0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0xd1, 0xe2, 0xd7, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x6f, 0x75, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b,
	0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x50, 0x6b, 0x74, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0xac, 0x81, 0x94, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x09, 0x6f, 0x75,
	0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0xc8, 0x96, 0x88, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x50, 0x6b, 0x74, 0x73, 0x1a, 0xd8, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x71,
	0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0xe6, 0xa0, 0x84, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73, 0x74, 0x52, 0x03, 0x64, 0x73,
	0x74, 0x12, 0x7a, 0x0a, 0x07, 0x67, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xf5, 0x84, 0xb9,
	0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x72,
	0x65, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x67, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x70, 0x0a,
	0x03, 0x73, 0x72, 0x63, 0x18, 0xb5, 0xac, 0x9c, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12,
	0x6e, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0xaf, 0xcb, 0xe1, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x74, 0x6c, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x1a,
	0xb5, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x4c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38,
	0x82, 0x41, 0x35, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x8d, 0x48, 0x0a, 0x06, 0x52, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x12, 0x7b, 0x0a, 0x05, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x18, 0xf3, 0x94, 0xdd, 0xe8,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x42, 0x2b, 0x82, 0x41, 0x28,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x05, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x1a,
	0xc9, 0x44, 0x0a, 0x05, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x12, 0x88, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x94, 0xba, 0xab, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x18, 0xcb, 0xcd, 0xb4, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xad, 0xe5, 0xf6, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2e, 0x52, 0x61, 0x64,
	0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xdd, 0x11, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x87, 0x01,
	0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x92, 0x84, 0xed, 0xb3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x7a, 0x0a, 0x0c, 0x61, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0xac, 0xf0, 0xd0, 0xbc, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x47,
	0x61, 0x69, 0x6e, 0x12, 0x6c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xc0,
	0xa7, 0xe9, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41,
	0x37, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x7e, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0xa3, 0xff, 0xf9, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x60, 0x0a, 0x03, 0x64, 0x63, 0x61, 0x18, 0xdd, 0x8f, 0xdd, 0x39, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x63, 0x61, 0x52, 0x03,
	0x64, 0x63, 0x61, 0x12, 0x61, 0x0a, 0x03, 0x64, 0x74, 0x70, 0x18, 0x89, 0xd9, 0xdc, 0xb1, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x74,
	0x70, 0x52, 0x03, 0x64, 0x74, 0x70, 0x12, 0x6b, 0x0a, 0x07, 0x64, 0x74, 0x70, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0xbc, 0xbc, 0x97, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x3a, 0x82, 0x41, 0x37, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x64, 0x74, 0x70, 0x2d, 0x6d, 0x61, 0x78, 0x52, 0x06, 0x64, 0x74, 0x70,
	0x4d, 0x61, 0x78, 0x12, 0x6b, 0x0a, 0x07, 0x64, 0x74, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0xc2,
	0xa3, 0x97, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41,
	0x37, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x64, 0x74, 0x70, 0x2d, 0x6d, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x74, 0x70, 0x4d, 0x69, 0x6e,
	0x12, 0x6c, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xb6, 0xb2, 0xb9, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5d,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0xa4, 0x94, 0xd9, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0xae, 0x01,
	0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xf9, 0xcd, 0xe6, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e,
	0x43, 0x59, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x6f,
	0x0a, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0xe6, 0xa0, 0xb5, 0x39, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x63, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x98, 0x01, 0x0a, 0x16, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xca, 0x87, 0xd6, 0xf2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x64, 0x65, 0x66, 0x65, 0x72, 0x2d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x14, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x66, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x16, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0xdd, 0xc6, 0xfc, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x2d, 0x64, 0x65, 0x66, 0x65, 0x72, 0x2d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x14,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x89, 0xed, 0xd9,
	0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x64, 0x77, 0x65, 0x6c, 0x6c, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x77, 0x65,
	0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xf0, 0x9b, 0xca,
	0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x10, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x7d, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x65,
	0x69, 0x72, 0x70, 0x18, 0x80, 0xd3, 0xca, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x65,
	0x69, 0x72, 0x70, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x45, 0x69, 0x72,
	0x70, 0x12, 0x7f, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0xe3, 0x9f, 0xce, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x1a, 0x92, 0x0e, 0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x12, 0xa6, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0xe0, 0xee,
	0x95, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42,
	0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52,
	0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0x8d, 0x0b, 0x0a, 0x08, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xaa, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xca, 0xc3, 0xd2, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xd3, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7b, 0x0a,
	0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x84, 0xe2, 0xad, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x52, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x7f, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xce, 0x8c, 0xe7, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x83, 0x01, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0xc3, 0x8d, 0x8e, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61,
	0x73, 0x74, 0x2d, 0x73, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x12, 0xb9, 0x01, 0x0a, 0x06, 0x6f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xe5, 0xf3, 0xb7,
	0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x70, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x96, 0x01,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0xef, 0xe6, 0xbc, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x74, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x90,
	0xc9, 0xa2, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x72, 0x73, 0x73, 0x69, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x78, 0x0a, 0x04,
	0x73, 0x73, 0x69, 0x64, 0x18, 0xb4, 0x90, 0x82, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x06, 0x4f, 0x70, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x0b, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x12, 0x2a, 0x0a,
	0x14, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x50, 0x45, 0x52,
	0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x57, 0x50, 0x41, 0x32,
	0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x12, 0x2e, 0x0a, 0x16, 0x4f, 0x50, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52,
	0x49, 0x53, 0x45, 0x10, 0x03, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x12, 0x28, 0x0a, 0x13, 0x4f, 0x50, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x57, 0x50, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x04, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x57, 0x50, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x41, 0x4c, 0x12, 0x2c, 0x0a, 0x15, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x50,
	0x41, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x05, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x57, 0x50, 0x41, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53,
	0x45, 0x12, 0x16, 0x0a, 0x0a, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x45, 0x50, 0x10,
	0x06, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x57, 0x45, 0x50, 0x1a, 0xcb, 0x01, 0x0a, 0x0b, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x5a, 0x0a, 0x05, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x52, 0x05,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xa1, 0x21, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0xfd, 0xee, 0x9f, 0x7d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x1b, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0xc8, 0xd6, 0xff, 0xac, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x2d, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x78, 0x0a, 0x0c, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x67, 0x61,
	0x69, 0x6e, 0x18, 0xd7, 0x9d, 0xcc, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x52,
	0x0b, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x80, 0x01, 0x0a,
	0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x63, 0x18,
	0xef, 0xad, 0xb8, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2d, 0x6d, 0x61,
	0x63, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x63, 0x12,
	0x6b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xf1, 0xf7, 0xb5, 0x76, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0xb0, 0x01, 0x0a,
	0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x97, 0xf7, 0x95, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x54, 0x59, 0x50,
	0x45, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x7c, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0xf2, 0x89, 0xad, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x9b, 0x01,
	0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xcf, 0xac, 0xf8, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x03, 0x64,
	0x63, 0x61, 0x18, 0xe4, 0xfa, 0x97, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x64, 0x63, 0x61, 0x52, 0x03, 0x64, 0x63, 0x61, 0x12, 0x78, 0x0a, 0x0c,
	0x64, 0x66, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xdd, 0xdf, 0xbc,
	0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x66,
	0x73, 0x2d, 0x68, 0x69, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x64, 0x66, 0x73, 0x48,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x03, 0x64, 0x74, 0x70, 0x18, 0xc0, 0x96,
	0x98, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41,
	0x32, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x64, 0x74, 0x70, 0x52, 0x03, 0x64, 0x74, 0x70, 0x12, 0x69, 0x0a, 0x07, 0x64, 0x74, 0x70, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0xc5, 0xe5, 0xbb, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x64, 0x74, 0x70, 0x2d, 0x6d, 0x61, 0x78, 0x52, 0x06, 0x64, 0x74, 0x70,
	0x4d, 0x61, 0x78, 0x12, 0x6a, 0x0a, 0x07, 0x64, 0x74, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0xcb,
	0xcc, 0xbb, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41,
	0x36, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x64, 0x74, 0x70, 0x2d, 0x6d, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x74, 0x70, 0x4d, 0x69, 0x6e, 0x12,
	0x6b, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc3, 0xa9, 0xdb, 0x3d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0xf7, 0xea, 0x85, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0xad, 0x01, 0x0a, 0x13,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0xb8, 0xbb, 0xd8, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59,
	0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xa8, 0x01, 0x0a, 0x1c,
	0x72, 0x78, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc3, 0xff, 0xbb,
	0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72,
	0x78, 0x2d, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x72, 0x78, 0x44,
	0x6f, 0x74, 0x31, 0x31, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa7, 0x01, 0x0a, 0x1c, 0x72, 0x78, 0x5f, 0x6e, 0x6f,
	0x69, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xee, 0xf3, 0xfc, 0x50, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x78, 0x2d, 0x6e, 0x6f, 0x69, 0x73,
	0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x72, 0x78, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6e, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0xa1, 0xd4, 0xfa,
	0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x96, 0x01, 0x0a, 0x16, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x66, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xcd, 0x92, 0x86, 0x45,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x63, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x64, 0x65, 0x66, 0x65, 0x72, 0x2d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x14, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66,
	0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x16, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x18, 0xc2, 0xdd, 0x9c, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x64,
	0x65, 0x66, 0x65, 0x72, 0x2d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x14, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x12, 0x8e, 0x01, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd8, 0x9c, 0xb2, 0x81, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x63, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x64, 0x77, 0x65, 0x6c, 0x6c, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x11, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x77, 0x65, 0x6c, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xf5, 0xb5, 0x97, 0x6b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x10, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x8e,
	0x01, 0x0a, 0x13, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xc0, 0x82, 0xfd, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x12, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x8c, 0x01, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0xa3, 0xa6, 0xac, 0xf5, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x11, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0xa0,
	0x01, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8f, 0xdb, 0xb7,
	0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x7c, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x69,
	0x72, 0x70, 0x18, 0xd5, 0xf5, 0xbb, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x65, 0x69, 0x72,
	0x70, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x45, 0x69, 0x72, 0x70, 0x12,
	0x7e, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0xe0, 0xa8, 0xb8, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40,
	0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0xa7, 0x01, 0x0a, 0x1c, 0x74, 0x78, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xd5, 0x92, 0xcf, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e,
	0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19,
	0x74, 0x78, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9f, 0x02, 0x0a, 0x08, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x66, 0x63, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xc1, 0x8b, 0xee,
	0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2d, 0x66,
	0x63, 0x73, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x46, 0x63, 0x73, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x0b, 0x6e, 0x6f,
	0x69, 0x73, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x99, 0xd8, 0xb4, 0xb6, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x2d, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x52,
	0x0a, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x1a, 0xb9, 0x02, 0x0a, 0x08,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0xa3, 0x01, 0x0a, 0x13, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69,
	0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x47,
	0x0a, 0x05, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f,
	0x52, 0x05, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x1a, 0xa9, 0x90, 0x02, 0x0a, 0x05, 0x53, 0x73, 0x69,
	0x64, 0x73, 0x12, 0x74, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x85, 0x8a, 0xa5, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x4b, 0x65, 0x79, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x1a, 0x93, 0x8e, 0x02, 0x0a, 0x04, 0x53, 0x73,
	0x69, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0xbf, 0xa1, 0xa4, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42,
	0x61, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x37, 0x82, 0x41, 0x34,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x74, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x06, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x18, 0xfa, 0xd8,
	0xa3, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73,
	0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x73, 0x42,
	0x30, 0x82, 0x41, 0x2d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x52, 0x06, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x07, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xac, 0x92, 0xbf, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xca,
	0x8c, 0xf3, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73,
	0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x30, 0x82, 0x41, 0x2d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x64, 0x6f,
	0x74, 0x31, 0x31, 0x72, 0x18, 0xbb, 0xb6, 0x95, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x44,
	0x6f, 0x74, 0x31, 0x31, 0x52, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x52, 0x06, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x12,
	0x83, 0x01, 0x0a, 0x06, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x18, 0xbf, 0xb6, 0x95, 0x70, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x56, 0x42, 0x30, 0x82, 0x41, 0x2d,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x52, 0x06, 0x64,
	0x6f, 0x74, 0x31, 0x31, 0x76, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0xf5, 0xfb, 0x9f, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69,
	0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x42, 0x36, 0x82,
	0x41, 0x33, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe7, 0xa3, 0xdf,
	0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69,
	0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2f, 0x82,
	0x41, 0x2c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x77, 0x0a, 0x03, 0x77, 0x6d, 0x6d, 0x18, 0xf5, 0x96, 0x86,
	0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64,
	0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x57, 0x6d, 0x6d, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x52, 0x03, 0x77, 0x6d, 0x6d, 0x1a, 0x91,
	0x07, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x9f, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x80, 0x9d, 0xfa, 0xe4, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x9a, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf9, 0xd8, 0xd5, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa0,
	0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x62, 0x61,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x82, 0xdf, 0xa3, 0xfe,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x74, 0x65, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2d,
	0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x82, 0xca, 0x9f, 0x73, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x72,
	0x73, 0x73, 0x69, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x73,
	0x69, 0x1a, 0x9e, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0d,
	0x62, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xab, 0xbc,
	0xe2, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41,
	0x48, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x74, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x61, 0x6e, 0x64,
	0x2d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x9f, 0xb6, 0xe9, 0xc5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2d,
	0x72, 0x73, 0x73, 0x69, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x73,
	0x73, 0x69, 0x1a, 0xb2, 0x66, 0x0a, 0x06, 0x42, 0x73, 0x73, 0x69, 0x64, 0x73, 0x12, 0x91, 0x01,
	0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0xf4, 0x91, 0x88, 0xe5, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73,
	0x69, 0x64, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x4b,
	0x65, 0x79, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x52, 0x05, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x1a, 0xfb, 0x62, 0x0a, 0x05, 0x42, 0x73, 0x73, 0x69, 0x64, 0x12, 0x99, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xce, 0xad, 0xf9, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e,
	0x42, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd5, 0x61, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x72, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0xb8, 0xed, 0xe7, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x52, 0x05,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0xb2, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x82, 0xe8, 0xdd, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x16, 0x6e,
	0x75, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xcd, 0x85, 0xbd, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6e, 0x75, 0x6d, 0x2d, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x79,
	0x0a, 0x08, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0xa0, 0x9f, 0xae, 0xb3, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2d, 0x69, 0x64,
	0x52, 0x07, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x49, 0x64, 0x1a, 0x83, 0x5d, 0x0a, 0x08, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x17, 0x62, 0x73, 0x73, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xc6, 0x90, 0xb7, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x15, 0x62, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc6, 0x01, 0x0a, 0x20, 0x72, 0x78, 0x5f, 0x62,
	0x73, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe1, 0xca, 0xdf,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x78, 0x2d, 0x62, 0x73, 0x73, 0x2d, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x1c, 0x72, 0x78, 0x42, 0x73, 0x73, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x90, 0x01, 0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0xd2, 0xdc, 0xb0, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x72, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0xfb, 0xe4, 0x85, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x09, 0x72, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0xd0,
	0x01, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x18,
	0xa9, 0xe0, 0xd6, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x78, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73,
	0x74, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x64, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x72, 0x78, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73,
	0x74, 0x12, 0xcb, 0x01, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x6d,
	0x6d, 0x18, 0xf6, 0x93, 0x9b, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x78, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6d,
	0x6d, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x77, 0x6d, 0x6d, 0x52, 0x09, 0x72, 0x78, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6d, 0x6d, 0x12,
	0xb9, 0x01, 0x0a, 0x06, 0x72, 0x78, 0x5f, 0x6d, 0x63, 0x73, 0x18, 0xf3, 0xe5, 0x8f, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69,
	0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x52, 0x78, 0x4d, 0x63, 0x73, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78,
	0x2d, 0x6d, 0x63, 0x73, 0x52, 0x05, 0x72, 0x78, 0x4d, 0x63, 0x73, 0x12, 0x7f, 0x0a, 0x07, 0x72,
	0x78, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x18, 0x87, 0xca, 0x81, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d,
	0x6d, 0x67, 0x6d, 0x74, 0x52, 0x06, 0x72, 0x78, 0x4d, 0x67, 0x6d, 0x74, 0x12, 0x87, 0x01, 0x0a,
	0x0a, 0x72, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0xba, 0xc1, 0xb2, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x72, 0x78, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x09, 0x72, 0x78, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x0f, 0x72, 0x78, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xf3, 0x8a, 0xe6, 0x7e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x72, 0x78, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x72, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0xa1,
	0x01, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75,
	0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0xde, 0xe5, 0xef, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2d, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x11, 0x72, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x20, 0x74, 0x78, 0x5f, 0x62, 0x73, 0x73, 0x5f, 0x64, 0x6f,
	0x74, 0x31, 0x31, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfb, 0xe8, 0x86, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d,
	0x62, 0x73, 0x73, 0x2d, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x74,
	0x78, 0x42, 0x73, 0x73, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x0d,
	0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xf8, 0xd0,
	0xae, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x0b, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x88, 0x01,
	0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0xc9, 0xfc, 0xcf,
	0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x09, 0x74,
	0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0xcf, 0x01, 0x0a, 0x0c, 0x74, 0x78, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x18, 0xe7, 0xba, 0xd8, 0x75, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53,
	0x73, 0x69, 0x64, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x74, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x52, 0x0a,
	0x74, 0x78, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x74, 0x12, 0xcb, 0x01, 0x0a, 0x0b, 0x74,
	0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x6d, 0x6d, 0x18, 0xc0, 0x84, 0xb0, 0x53, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69,
	0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6d, 0x6d, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d, 0x52, 0x09, 0x74,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6d, 0x6d, 0x12, 0xb9, 0x01, 0x0a, 0x06, 0x74, 0x78, 0x5f,
	0x6d, 0x63, 0x73, 0x18, 0x85, 0xad, 0xfd, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x78, 0x4d, 0x63, 0x73, 0x42,
	0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x52, 0x05, 0x74,
	0x78, 0x4d, 0x63, 0x73, 0x12, 0x7e, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x18,
	0x89, 0xe1, 0xfe, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82,
	0x41, 0x4a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x67, 0x6d, 0x74, 0x52, 0x06, 0x74, 0x78,
	0x4d, 0x67, 0x6d, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0xc8, 0xe6, 0xc5, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x09, 0x74, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x95,
	0x01, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0xcd, 0xe1, 0x96, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x74, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0xa2, 0x01, 0x0a, 0x13, 0x74, 0x78, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0xf8,
	0xce, 0x81, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82,
	0x41, 0x56, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2d,
	0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x74, 0x78, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x1a, 0xce, 0x12, 0x0a, 0x0a,
	0x52, 0x78, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x07, 0x72,
	0x78, 0x5f, 0x30, 0x5f, 0x36, 0x34, 0x18, 0xd0, 0x8d, 0xdc, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x30, 0x2d, 0x36,
	0x34, 0x52, 0x05, 0x72, 0x78, 0x30, 0x36, 0x34, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x72, 0x78, 0x5f,
	0x31, 0x30, 0x32, 0x35, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x18, 0xa6, 0xf5, 0x80, 0x8b, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d,
	0x31, 0x30, 0x32, 0x35, 0x2d, 0x32, 0x30, 0x34, 0x38, 0x52, 0x0a, 0x72, 0x78, 0x31, 0x30, 0x32,
	0x35, 0x32, 0x30, 0x34, 0x38, 0x12, 0x93, 0x01, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x31, 0x32, 0x39,
	0x5f, 0x32, 0x35, 0x36, 0x18, 0xdf, 0x97, 0xad, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x31, 0x32, 0x39, 0x2d, 0x32, 0x35,
	0x36, 0x52, 0x08, 0x72, 0x78, 0x31, 0x32, 0x39, 0x32, 0x35, 0x36, 0x12, 0xa5, 0x01, 0x0a, 0x10,
	0x72, 0x78, 0x5f, 0x31, 0x33, 0x31, 0x30, 0x37, 0x33, 0x5f, 0x32, 0x36, 0x32, 0x31, 0x34, 0x34,
	0x18, 0xd8, 0xb9, 0xad, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63,
	0x82, 0x41, 0x60, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69,
	0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x31, 0x33, 0x31, 0x30, 0x37, 0x33, 0x2d, 0x32, 0x36, 0x32,
	0x31, 0x34, 0x34, 0x52, 0x0e, 0x72, 0x78, 0x31, 0x33, 0x31, 0x30, 0x37, 0x33, 0x32, 0x36, 0x32,
	0x31, 0x34, 0x34, 0x12, 0xa0, 0x01, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x31, 0x36, 0x33, 0x38, 0x35,
	0x5f, 0x33, 0x32, 0x37, 0x36, 0x38, 0x18, 0xb7, 0xc1, 0x87, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x31, 0x36, 0x33,
	0x38, 0x35, 0x2d, 0x33, 0x32, 0x37, 0x36, 0x38, 0x52, 0x0c, 0x72, 0x78, 0x31, 0x36, 0x33, 0x38,
	0x35, 0x33, 0x32, 0x37, 0x36, 0x38, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x32, 0x30,
	0x34, 0x39, 0x5f, 0x34, 0x30, 0x39, 0x36, 0x18, 0x84, 0xeb, 0xc2, 0xe7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78,
	0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x32, 0x30,
	0x34, 0x39, 0x2d, 0x34, 0x30, 0x39, 0x36, 0x52, 0x0a, 0x72, 0x78, 0x32, 0x30, 0x34, 0x39, 0x34,
	0x30, 0x39, 0x36, 0x12, 0x93, 0x01, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x32, 0x35, 0x37, 0x5f, 0x35,
	0x31, 0x32, 0x18, 0xac, 0xd6, 0xc1, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x32, 0x35, 0x37, 0x2d, 0x35, 0x31, 0x32, 0x52,
	0x08, 0x72, 0x78, 0x32, 0x35, 0x37, 0x35, 0x31, 0x32, 0x12, 0xa6, 0x01, 0x0a, 0x10, 0x72, 0x78,
	0x5f, 0x32, 0x36, 0x32, 0x31, 0x34, 0x35, 0x5f, 0x35, 0x32, 0x34, 0x32, 0x38, 0x38, 0x18, 0xc5,
	0x9d, 0xcb, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82,
	0x41, 0x60, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73,
	0x74, 0x2f, 0x72, 0x78, 0x2d, 0x32, 0x36, 0x32, 0x31, 0x34, 0x35, 0x2d, 0x35, 0x32, 0x34, 0x32,
	0x38, 0x38, 0x52, 0x0e, 0x72, 0x78, 0x32, 0x36, 0x32, 0x31, 0x34, 0x35, 0x35, 0x32, 0x34, 0x32,
	0x38, 0x38, 0x12, 0x9f, 0x01, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x33, 0x32, 0x37, 0x36, 0x39, 0x5f,
	0x36, 0x35, 0x35, 0x33, 0x36, 0x18, 0xf8, 0x86, 0xc0, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x33, 0x32, 0x37, 0x36, 0x39,
	0x2d, 0x36, 0x35, 0x35, 0x33, 0x36, 0x52, 0x0c, 0x72, 0x78, 0x33, 0x32, 0x37, 0x36, 0x39, 0x36,
	0x35, 0x35, 0x33, 0x36, 0x12, 0x99, 0x01, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x34, 0x30, 0x39, 0x37,
	0x5f, 0x38, 0x31, 0x39, 0x32, 0x18, 0xe0, 0xbc, 0xd8, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x34, 0x30, 0x39, 0x37, 0x2d,
	0x38, 0x31, 0x39, 0x32, 0x52, 0x0a, 0x72, 0x78, 0x34, 0x30, 0x39, 0x37, 0x38, 0x31, 0x39, 0x32,
	0x12, 0x97, 0x01, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x35, 0x31, 0x33, 0x5f, 0x31, 0x30, 0x32, 0x34,
	0x18, 0xb4, 0xb4, 0x9c, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64,
	0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x35, 0x31, 0x33, 0x2d, 0x31, 0x30, 0x32, 0x34, 0x52,
	0x09, 0x72, 0x78, 0x35, 0x31, 0x33, 0x31, 0x30, 0x32, 0x34, 0x12, 0xa8, 0x01, 0x0a, 0x11, 0x72,
	0x78, 0x5f, 0x35, 0x32, 0x34, 0x32, 0x38, 0x39, 0x5f, 0x31, 0x30, 0x34, 0x38, 0x35, 0x37, 0x36,
	0x18, 0xad, 0xa7, 0x9f, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64,
	0x82, 0x41, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69,
	0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x35, 0x32, 0x34, 0x32, 0x38, 0x39, 0x2d, 0x31, 0x30, 0x34,
	0x38, 0x35, 0x37, 0x36, 0x52, 0x0f, 0x72, 0x78, 0x35, 0x32, 0x34, 0x32, 0x38, 0x39, 0x31, 0x30,
	0x34, 0x38, 0x35, 0x37, 0x36, 0x12, 0x90, 0x01, 0x0a, 0x09, 0x72, 0x78, 0x5f, 0x36, 0x35, 0x5f,
	0x31, 0x32, 0x38, 0x18, 0x88, 0xab, 0xe3, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x36, 0x35, 0x2d, 0x31, 0x32, 0x38, 0x52,
	0x07, 0x72, 0x78, 0x36, 0x35, 0x31, 0x32, 0x38, 0x12, 0xa2, 0x01, 0x0a, 0x0f, 0x72, 0x78, 0x5f,
	0x36, 0x35, 0x35, 0x33, 0x37, 0x5f, 0x31, 0x33, 0x31, 0x30, 0x37, 0x32, 0x18, 0xc4, 0xff, 0xc7,
	0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72,
	0x78, 0x2d, 0x36, 0x35, 0x35, 0x33, 0x37, 0x2d, 0x31, 0x33, 0x31, 0x30, 0x37, 0x32, 0x52, 0x0d,
	0x72, 0x78, 0x36, 0x35, 0x35, 0x33, 0x37, 0x31, 0x33, 0x31, 0x30, 0x37, 0x32, 0x12, 0x9c, 0x01,
	0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x38, 0x31, 0x39, 0x33, 0x5f, 0x31, 0x36, 0x33, 0x38, 0x34, 0x18,
	0x81, 0xb7, 0x92, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82,
	0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73,
	0x74, 0x2f, 0x72, 0x78, 0x2d, 0x38, 0x31, 0x39, 0x33, 0x2d, 0x31, 0x36, 0x33, 0x38, 0x34, 0x52,
	0x0b, 0x72, 0x78, 0x38, 0x31, 0x39, 0x33, 0x31, 0x36, 0x33, 0x38, 0x34, 0x1a, 0x87, 0x04, 0x0a,
	0x09, 0x52, 0x78, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6d, 0x6d, 0x12, 0x7d, 0x0a, 0x02, 0x62, 0x65,
	0x18, 0xca, 0xa1, 0x8d, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x54, 0x82, 0x41, 0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x77,
	0x6d, 0x6d, 0x2f, 0x62, 0x65, 0x52, 0x02, 0x62, 0x65, 0x12, 0x7d, 0x0a, 0x02, 0x62, 0x6b, 0x18,
	0xc4, 0xa1, 0x8d, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54,
	0x82, 0x41, 0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d,
	0x6d, 0x2f, 0x62, 0x6b, 0x52, 0x02, 0x62, 0x6b, 0x12, 0x7d, 0x0a, 0x02, 0x76, 0x69, 0x18, 0xda,
	0xe2, 0x8c, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82,
	0x41, 0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d,
	0x2f, 0x76, 0x69, 0x52, 0x02, 0x76, 0x69, 0x12, 0x7d, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0xdc, 0xe2,
	0x8c, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41,
	0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d, 0x2f,
	0x76, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x1a, 0xfd, 0x09, 0x0a, 0x05, 0x52, 0x78, 0x4d, 0x63, 0x73,
	0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x30, 0x18, 0x8b, 0xee, 0xf7, 0x6b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78,
	0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x30, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x30, 0x12,
	0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x31, 0x18, 0x8a, 0xee, 0xf7, 0x6b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d,
	0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x31, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x31, 0x12, 0x7d,
	0x0a, 0x04, 0x6d, 0x63, 0x73, 0x32, 0x18, 0x89, 0xee, 0xf7, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d,
	0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x32, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x32, 0x12, 0x7d, 0x0a,
	0x04, 0x6d, 0x63, 0x73, 0x33, 0x18, 0x88, 0xee, 0xf7, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63,
	0x73, 0x2f, 0x6d, 0x63, 0x73, 0x33, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x33, 0x12, 0x7d, 0x0a, 0x04,
	0x6d, 0x63, 0x73, 0x34, 0x18, 0x8f, 0xee, 0xf7, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63, 0x73,
	0x2f, 0x6d, 0x63, 0x73, 0x34, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x34, 0x12, 0x7d, 0x0a, 0x04, 0x6d,
	0x63, 0x73, 0x35, 0x18, 0x8e, 0xee, 0xf7, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f,
	0x6d, 0x63, 0x73, 0x35, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x35, 0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63,
	0x73, 0x36, 0x18, 0x8d, 0xee, 0xf7, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d,
	0x63, 0x73, 0x36, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x36, 0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73,
	0x37, 0x18, 0x8c, 0xee, 0xf7, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63,
	0x73, 0x37, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x37, 0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x38,
	0x18, 0x83, 0xee, 0xf7, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51,
	0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73,
	0x38, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x38, 0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x39, 0x18,
	0x82, 0xee, 0xf7, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82,
	0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x39,
	0x52, 0x04, 0x6d, 0x63, 0x73, 0x39, 0x1a, 0xce, 0x12, 0x0a, 0x0a, 0x54, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x73, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x30, 0x5f, 0x36,
	0x34, 0x18, 0xcc, 0xd9, 0xdb, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5a, 0x82, 0x41, 0x57, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64,
	0x69, 0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d, 0x30, 0x2d, 0x36, 0x34, 0x52, 0x05, 0x74, 0x78, 0x30,
	0x36, 0x34, 0x12, 0x99, 0x01, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x31, 0x30, 0x32, 0x35, 0x5f, 0x32,
	0x30, 0x34, 0x38, 0x18, 0xda, 0xbe, 0xb5, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d, 0x31, 0x30, 0x32, 0x35, 0x2d, 0x32, 0x30,
	0x34, 0x38, 0x52, 0x0a, 0x74, 0x78, 0x31, 0x30, 0x32, 0x35, 0x32, 0x30, 0x34, 0x38, 0x12, 0x94,
	0x01, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x31, 0x32, 0x39, 0x5f, 0x32, 0x35, 0x36, 0x18, 0xf3, 0xe1,
	0xab, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41,
	0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74,
	0x2f, 0x74, 0x78, 0x2d, 0x31, 0x32, 0x39, 0x2d, 0x32, 0x35, 0x36, 0x52, 0x08, 0x74, 0x78, 0x31,
	0x32, 0x39, 0x32, 0x35, 0x36, 0x12, 0xa6, 0x01, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x31, 0x33, 0x31,
	0x30, 0x37, 0x33, 0x5f, 0x32, 0x36, 0x32, 0x31, 0x34, 0x34, 0x18, 0xbc, 0xe3, 0xa3, 0xea, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x78,
	0x2d, 0x31, 0x33, 0x31, 0x30, 0x37, 0x33, 0x2d, 0x32, 0x36, 0x32, 0x31, 0x34, 0x34, 0x52, 0x0e,
	0x74, 0x78, 0x31, 0x33, 0x31, 0x30, 0x37, 0x33, 0x32, 0x36, 0x32, 0x31, 0x34, 0x34, 0x12, 0x9f,
	0x01, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x31, 0x36, 0x33, 0x38, 0x35, 0x5f, 0x33, 0x32, 0x37, 0x36,
	0x38, 0x18, 0x8b, 0xa9, 0xc8, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64,
	0x69, 0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d, 0x31, 0x36, 0x33, 0x38, 0x35, 0x2d, 0x33, 0x32, 0x37,
	0x36, 0x38, 0x52, 0x0c, 0x74, 0x78, 0x31, 0x36, 0x33, 0x38, 0x35, 0x33, 0x32, 0x37, 0x36, 0x38,
	0x12, 0x99, 0x01, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x32, 0x30, 0x34, 0x39, 0x5f, 0x34, 0x30, 0x39,
	0x36, 0x18, 0xf0, 0xc8, 0xe4, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64,
	0x69, 0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d, 0x32, 0x30, 0x34, 0x39, 0x2d, 0x34, 0x30, 0x39, 0x36,
	0x52, 0x0a, 0x74, 0x78, 0x32, 0x30, 0x34, 0x39, 0x34, 0x30, 0x39, 0x36, 0x12, 0x93, 0x01, 0x0a,
	0x0a, 0x74, 0x78, 0x5f, 0x32, 0x35, 0x37, 0x5f, 0x35, 0x31, 0x32, 0x18, 0x88, 0xc1, 0xa7, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x78,
	0x2d, 0x32, 0x35, 0x37, 0x2d, 0x35, 0x31, 0x32, 0x52, 0x08, 0x74, 0x78, 0x32, 0x35, 0x37, 0x35,
	0x31, 0x32, 0x12, 0xa6, 0x01, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x32, 0x36, 0x32, 0x31, 0x34, 0x35,
	0x5f, 0x35, 0x32, 0x34, 0x32, 0x38, 0x38, 0x18, 0xa1, 0x99, 0xdd, 0x85, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78,
	0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d, 0x32, 0x36,
	0x32, 0x31, 0x34, 0x35, 0x2d, 0x35, 0x32, 0x34, 0x32, 0x38, 0x38, 0x52, 0x0e, 0x74, 0x78, 0x32,
	0x36, 0x32, 0x31, 0x34, 0x35, 0x35, 0x32, 0x34, 0x32, 0x38, 0x38, 0x12, 0x9f, 0x01, 0x0a, 0x0e,
	0x74, 0x78, 0x5f, 0x33, 0x32, 0x37, 0x36, 0x39, 0x5f, 0x36, 0x35, 0x35, 0x33, 0x36, 0x18, 0xec,
	0xb7, 0xd7, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41,
	0x5e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74,
	0x2f, 0x74, 0x78, 0x2d, 0x33, 0x32, 0x37, 0x36, 0x39, 0x2d, 0x36, 0x35, 0x35, 0x33, 0x36, 0x52,
	0x0c, 0x74, 0x78, 0x33, 0x32, 0x37, 0x36, 0x39, 0x36, 0x35, 0x35, 0x33, 0x36, 0x12, 0x99, 0x01,
	0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x34, 0x30, 0x39, 0x37, 0x5f, 0x38, 0x31, 0x39, 0x32, 0x18, 0xa4,
	0xba, 0xb2, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41,
	0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74,
	0x2f, 0x74, 0x78, 0x2d, 0x34, 0x30, 0x39, 0x37, 0x2d, 0x38, 0x31, 0x39, 0x32, 0x52, 0x0a, 0x74,
	0x78, 0x34, 0x30, 0x39, 0x37, 0x38, 0x31, 0x39, 0x32, 0x12, 0x97, 0x01, 0x0a, 0x0b, 0x74, 0x78,
	0x5f, 0x35, 0x31, 0x33, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x18, 0xf0, 0xc8, 0xb5, 0xe5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d,
	0x35, 0x31, 0x33, 0x2d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x09, 0x74, 0x78, 0x35, 0x31, 0x33, 0x31,
	0x30, 0x32, 0x34, 0x12, 0xa8, 0x01, 0x0a, 0x11, 0x74, 0x78, 0x5f, 0x35, 0x32, 0x34, 0x32, 0x38,
	0x39, 0x5f, 0x31, 0x30, 0x34, 0x38, 0x35, 0x37, 0x36, 0x18, 0x89, 0x90, 0xef, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74,
	0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d, 0x35,
	0x32, 0x34, 0x32, 0x38, 0x39, 0x2d, 0x31, 0x30, 0x34, 0x38, 0x35, 0x37, 0x36, 0x52, 0x0f, 0x74,
	0x78, 0x35, 0x32, 0x34, 0x32, 0x38, 0x39, 0x31, 0x30, 0x34, 0x38, 0x35, 0x37, 0x36, 0x12, 0x90,
	0x01, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x36, 0x35, 0x5f, 0x31, 0x32, 0x38, 0x18, 0xb4, 0x96, 0xf0,
	0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74,
	0x78, 0x2d, 0x36, 0x35, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x07, 0x74, 0x78, 0x36, 0x35, 0x31, 0x32,
	0x38, 0x12, 0xa3, 0x01, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x36, 0x35, 0x35, 0x33, 0x37, 0x5f, 0x31,
	0x33, 0x31, 0x30, 0x37, 0x32, 0x18, 0x98, 0xf7, 0xe8, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d, 0x36, 0x35, 0x35, 0x33,
	0x37, 0x2d, 0x31, 0x33, 0x31, 0x30, 0x37, 0x32, 0x52, 0x0d, 0x74, 0x78, 0x36, 0x35, 0x35, 0x33,
	0x37, 0x31, 0x33, 0x31, 0x30, 0x37, 0x32, 0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x38,
	0x31, 0x39, 0x33, 0x5f, 0x31, 0x36, 0x33, 0x38, 0x34, 0x18, 0xbd, 0x8f, 0xad, 0xae, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d,
	0x38, 0x31, 0x39, 0x33, 0x2d, 0x31, 0x36, 0x33, 0x38, 0x34, 0x52, 0x0b, 0x74, 0x78, 0x38, 0x31,
	0x39, 0x33, 0x31, 0x36, 0x33, 0x38, 0x34, 0x1a, 0x85, 0x04, 0x0a, 0x09, 0x54, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x57, 0x6d, 0x6d, 0x12, 0x7d, 0x0a, 0x02, 0x62, 0x65, 0x18, 0xe8, 0xaf, 0xb0, 0xa9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d, 0x2f, 0x62, 0x65,
	0x52, 0x02, 0x62, 0x65, 0x12, 0x7d, 0x0a, 0x02, 0x62, 0x6b, 0x18, 0xe6, 0xaf, 0xb0, 0xa9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d, 0x2f, 0x62, 0x6b, 0x52,
	0x02, 0x62, 0x6b, 0x12, 0x7c, 0x0a, 0x02, 0x76, 0x69, 0x18, 0xf8, 0xf0, 0xaf, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74,
	0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d, 0x2f, 0x76, 0x69, 0x52, 0x02, 0x76,
	0x69, 0x12, 0x7c, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0xfe, 0xf0, 0xaf, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d, 0x2f, 0x76, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x1a,
	0xfd, 0x09, 0x0a, 0x05, 0x54, 0x78, 0x4d, 0x63, 0x73, 0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73,
	0x30, 0x18, 0xfd, 0xd5, 0xde, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63,
	0x73, 0x30, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x30, 0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x31,
	0x18, 0xfc, 0xd5, 0xde, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51,
	0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73,
	0x31, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x31, 0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x32, 0x18,
	0xff, 0xd5, 0xde, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82,
	0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x32,
	0x52, 0x04, 0x6d, 0x63, 0x73, 0x32, 0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x33, 0x18, 0xfe,
	0xd5, 0xde, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41,
	0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x33, 0x52,
	0x04, 0x6d, 0x63, 0x73, 0x33, 0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x34, 0x18, 0xf9, 0xd5,
	0xde, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x34, 0x52, 0x04,
	0x6d, 0x63, 0x73, 0x34, 0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x35, 0x18, 0xf8, 0xd5, 0xde,
	0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x35, 0x52, 0x04, 0x6d,
	0x63, 0x73, 0x35, 0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x36, 0x18, 0xfb, 0xd5, 0xde, 0x2d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x36, 0x52, 0x04, 0x6d, 0x63,
	0x73, 0x36, 0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x37, 0x18, 0xfa, 0xd5, 0xde, 0x2d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x37, 0x52, 0x04, 0x6d, 0x63, 0x73,
	0x37, 0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x38, 0x18, 0xf5, 0xd5, 0xde, 0x2d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74,
	0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x38, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x38,
	0x12, 0x7d, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x39, 0x18, 0xf4, 0xd5, 0xde, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78,
	0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x39, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x39, 0x1a,
	0x95, 0x02, 0x0a, 0x08, 0x42, 0x73, 0x73, 0x69, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x5a, 0x0a, 0x08,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2d, 0x69, 0x64, 0x52,
	0x07, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x09, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x82, 0x41, 0x39,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x52, 0x08, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x4b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53,
	0x73, 0x69, 0x64, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64,
	0x52, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x1a, 0xb1, 0x32, 0x0a, 0x07, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0xde,
	0xbe, 0xc5, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73,
	0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0xd6, 0x2f, 0x0a,
	0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0xd4, 0x01, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0xaf, 0xf8, 0x93, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x4c, 0x82, 0x41,
	0x49, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0xcb,
	0x01, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb5, 0x92, 0xb5, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x4a,
	0x82, 0x41, 0x47, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xac, 0x01, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x66, 0x18, 0xd9, 0xc6, 0xa9, 0xaf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x66, 0x42, 0x42, 0x82,
	0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72,
	0x66, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x66, 0x12, 0xc8, 0x01, 0x0a, 0x10,
	0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x18, 0xcd, 0x86, 0xe3, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31,
	0x4b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x2d, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x0f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xa0, 0xd4, 0xc2, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xdc, 0x04, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0xc4, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x89, 0x93, 0xe6, 0x76, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69,
	0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xfe, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa3,
	0x01, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0xf7, 0x9c, 0xd0, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0xce, 0x01, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0xb4, 0x88, 0xa8,
	0xb2, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69,
	0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x43, 0x41, 0x50,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xc4, 0x0a, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc0, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xf7, 0x81, 0xb6, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xec, 0x08,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb7, 0xda, 0xfa, 0x54, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x42, 0x5d, 0x82,
	0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x8c, 0xc4,
	0xcc, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41,
	0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x8f,
	0x01, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x99, 0xd0, 0xd5, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x90, 0xfc, 0xad, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa0, 0x01,
	0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x8a, 0xe6, 0x89, 0x7f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0xa7, 0x01, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0xbf, 0x9a, 0x9e, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x8f, 0x01, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xbe, 0xff, 0xf5, 0x45, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xe4, 0x09, 0x0a,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x66, 0x12, 0xb0, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xdb, 0x95, 0xd1, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x66, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa4, 0x08, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xe3, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x92, 0xa2, 0xdd, 0xb6, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x66, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2d, 0x72, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x89, 0x01, 0x0a,
	0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x84, 0xf8, 0xd3, 0x88, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x66, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x70, 0x68, 0x79,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xc2, 0xc0, 0x95, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x68, 0x79, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x52, 0x07, 0x70, 0x68, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x79, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0xff, 0xb3, 0xb5, 0x9a, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x72, 0x73, 0x73, 0x69, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x76, 0x0a, 0x03, 0x73,
	0x6e, 0x72, 0x18, 0xdd, 0xd1, 0xad, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2d, 0x72, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6e, 0x72, 0x52, 0x03,
	0x73, 0x6e, 0x72, 0x12, 0x73, 0x0a, 0x02, 0x73, 0x73, 0x18, 0xe8, 0xbb, 0xeb, 0x72, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x73, 0x52, 0x02, 0x73, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x10, 0x01, 0x1a, 0x04, 0x82, 0x41, 0x01,
	0x41, 0x12, 0x1a, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x42, 0x10, 0x02, 0x1a, 0x04, 0x82, 0x41, 0x01, 0x42, 0x12, 0x1a, 0x0a,
	0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x47, 0x10, 0x03, 0x1a, 0x04, 0x82, 0x41, 0x01, 0x47, 0x12, 0x1a, 0x0a, 0x10, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x10, 0x04, 0x1a,
	0x04, 0x82, 0x41, 0x01, 0x4e, 0x12, 0x1c, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x10, 0x05, 0x1a, 0x05, 0x82, 0x41,
	0x02, 0x41, 0x43, 0x1a, 0x97, 0x08, 0x0a, 0x0f, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x4b, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x9f, 0xc1, 0x8f, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31,
	0x4b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31,
	0x6b, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc2, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xdb, 0xb8, 0xbb, 0xe9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2d, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x11,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0xa4, 0x01, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x18, 0xfa, 0xc1, 0x94, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d,
	0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x12, 0xa0, 0x01, 0x0a, 0x0e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0xf4, 0xb8, 0xf5, 0xed,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41,
	0x5b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x2d, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x62, 0x73, 0x73, 0x69, 0x64, 0x52, 0x0d, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x42, 0x73, 0x73, 0x69, 0x64, 0x12, 0xa3, 0x01, 0x0a, 0x10,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0xfe, 0xf1, 0xba, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60,
	0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x2d,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x99, 0x01, 0x0a, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x72,
	0x73, 0x73, 0x69, 0x18, 0xc0, 0xfc, 0xf5, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31,
	0x6b, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x72, 0x73, 0x73, 0x69, 0x52,
	0x0c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x73, 0x73, 0x69, 0x1a, 0xe5, 0x06,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb6, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x98, 0xfa, 0xe5, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x47, 0x82,
	0x41, 0x44, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x6e, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x80, 0xb0, 0xe1, 0x74, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x63, 0x52, 0x03, 0x6d, 0x61, 0x63,
	0x1a, 0xb2, 0x04, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x84, 0x01,
	0x0a, 0x08, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x97, 0xc0, 0xdc, 0xb2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x07, 0x72, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0xc0, 0xa4, 0x94, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x09, 0x72, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xdd,
	0xd9, 0xbd, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82,
	0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x07, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0a, 0x74, 0x78, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x92, 0xfd, 0xe5, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x74, 0x78, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x09, 0x74, 0x78, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xb3, 0x01, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x61, 0x63, 0x52, 0x03,
	0x6d, 0x61, 0x63, 0x12, 0x56, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0xa2, 0x1c, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xeb, 0x98, 0xa0, 0xcd,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x2d, 0x61, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xa0,
	0x01, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x32, 0x67, 0x18, 0xc4, 0xa2, 0x92, 0xbd, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2d, 0x32, 0x67, 0x52,
	0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x73, 0x32,
	0x67, 0x12, 0xa0, 0x01, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x35, 0x67, 0x18, 0xe5, 0xb2, 0x92, 0xe5, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x42, 0x44, 0x82, 0x41,
	0x41, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2d,
	0x35, 0x67, 0x52, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x35, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0xc5, 0xc8, 0xb7, 0xb5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x03,
	0x63, 0x73, 0x61, 0x18, 0xc8, 0xca, 0x9a, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x63, 0x73, 0x61, 0x52, 0x03, 0x63, 0x73, 0x61, 0x12, 0x78, 0x0a, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0xae, 0xf9, 0x92,
	0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x7c, 0x0a, 0x0d, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0xb2, 0xd6, 0x9d, 0xec, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x06, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x18, 0xaf,
	0xe3, 0xb7, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41,
	0x34, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64,
	0x6f, 0x74, 0x31, 0x31, 0x6b, 0x52, 0x06, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x12, 0x5e, 0x0a,
	0x03, 0x64, 0x76, 0x61, 0x18, 0xc8, 0xec, 0xdf, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x76, 0x61, 0x52, 0x03, 0x64, 0x76, 0x61, 0x12, 0x6a, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa8, 0xc9, 0x82, 0x74, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x75, 0x0a, 0x0b, 0x67, 0x74, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xcd, 0xa7, 0xa2, 0x73, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x74, 0x6b, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x52, 0x0a, 0x67, 0x74, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x67, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0xb1, 0x87, 0xb1, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6e, 0x64, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x82, 0xbb,
	0xcd, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41,
	0x3d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x6e, 0x64, 0x70, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d,
	0x69, 0x70, 0x76, 0x36, 0x4e, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x92, 0x01,
	0x0a, 0x15, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x9a, 0xe7, 0x97, 0xed, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6e, 0x64,
	0x70, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x12,
	0x69, 0x70, 0x76, 0x36, 0x4e, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0xb4, 0xf1, 0xae, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x98, 0x8c, 0xe8, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x5e, 0x0a, 0x03, 0x6f, 0x6b, 0x63, 0x18, 0xde, 0xf4, 0x92, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x6b, 0x63, 0x52, 0x03, 0x6f, 0x6b, 0x63, 0x12,
	0xab, 0x01, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xe3, 0xb4, 0xbf, 0x6e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x59, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x91, 0x01,
	0x0a, 0x06, 0x6f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xe5, 0x86, 0x9f, 0x2a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73,
	0x69, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x6d, 0x6f, 0x64, 0x65,
	0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x75, 0x0a, 0x0b, 0x70, 0x74, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0xd2, 0xe9, 0xcf, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c,
	0x82, 0x41, 0x39, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x70, 0x74, 0x6b, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x0a, 0x70, 0x74,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x70, 0x0a, 0x09, 0x71, 0x62, 0x73, 0x73,
	0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0xd3, 0xbb, 0xef, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x71, 0x62, 0x73, 0x73, 0x2d, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x08, 0x71, 0x62, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x7a, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x8a, 0xc6, 0x8e, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf4, 0xb9, 0xc6,
	0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xac, 0x01, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x32, 0x67, 0x18, 0xe8, 0x89,
	0xf0, 0x83, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57,
	0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45,
	0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2d, 0x32, 0x67, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x73, 0x32, 0x67,
	0x12, 0xab, 0x01, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x35, 0x67, 0x18, 0xb1, 0xff, 0xef,
	0x6b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66,
	0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x42, 0x48,
	0x82, 0x41, 0x45, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x73, 0x2d, 0x35, 0x67, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x73, 0x35, 0x67, 0x12, 0x70,
	0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xb3, 0xc6, 0xf6, 0xd2,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x6e, 0x0a, 0x08, 0x77, 0x70, 0x61, 0x32, 0x5f, 0x70, 0x73, 0x6b, 0x18, 0x80, 0xdd, 0xeb,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41,
	0x36, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77,
	0x70, 0x61, 0x32, 0x2d, 0x70, 0x73, 0x6b, 0x52, 0x07, 0x77, 0x70, 0x61, 0x32, 0x50, 0x73, 0x6b,
	0x22, 0x7e, 0x0a, 0x06, 0x4f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x0b, 0x4f, 0x50,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x4f, 0x50, 0x45, 0x4e, 0x12, 0x2a, 0x0a, 0x14, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57,
	0x50, 0x41, 0x32, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x10,
	0x82, 0x41, 0x0d, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c,
	0x12, 0x2e, 0x0a, 0x16, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x50, 0x41, 0x32, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x03, 0x1a, 0x12, 0x82, 0x41,
	0x0f, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45,
	0x1a, 0xf8, 0x0c, 0x0a, 0x06, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x12, 0x92, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xec, 0xf3, 0xab, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69,
	0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x8d, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe5, 0xd3, 0xae, 0x59, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74,
	0x31, 0x31, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xa5, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e, 0x0a, 0x06, 0x64,
	0x6f, 0x74, 0x31, 0x31, 0x72, 0x18, 0x80, 0xc7, 0xf4, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64,
	0x6f, 0x74, 0x31, 0x31, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x6f, 0x74,
	0x31, 0x31, 0x72, 0x52, 0x06, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x12, 0x89, 0x01, 0x0a, 0x0f,
	0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18,
	0x92, 0x84, 0xf5, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47,
	0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2d, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x52, 0x0e, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x12, 0xb9, 0x01, 0x0a, 0x0d, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0xaa, 0xa0, 0xc2, 0x45, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53,
	0x73, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x45,
	0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2d, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0c, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x14, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x5f, 0x72,
	0x31, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x85, 0xe1, 0x8f,
	0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2d, 0x72, 0x31, 0x6b, 0x65, 0x79,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x12, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72,
	0x52, 0x31, 0x6b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x4a, 0x0a, 0x0c,
	0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x10,
	0x44, 0x4f, 0x54, 0x31, 0x31, 0x52, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4f, 0x56, 0x41,
	0x10, 0x00, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x4f, 0x56, 0x41, 0x12, 0x1c, 0x0a, 0x10, 0x44, 0x4f,
	0x54, 0x31, 0x31, 0x52, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4f, 0x44, 0x53, 0x10, 0x02,
	0x1a, 0x06, 0x82, 0x41, 0x03, 0x4f, 0x44, 0x53, 0x1a, 0xa0, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x6e, 0x0a, 0x06, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x18, 0x9b, 0xfb, 0xcc,
	0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x52, 0x06, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0xff, 0x89, 0xaf, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74,
	0x31, 0x31, 0x72, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x52, 0x0e, 0x64, 0x6f,
	0x74, 0x31, 0x31, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x12, 0xb7, 0x01, 0x0a,
	0x0d, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0xdf,
	0xad, 0xec, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73,
	0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f,
	0x74, 0x31, 0x31, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31,
	0x72, 0x2d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0c, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x14, 0x64, 0x6f, 0x74, 0x31, 0x31,
	0x72, 0x5f, 0x72, 0x31, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0xce, 0xf7, 0x9c, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b,
	0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2d, 0x72, 0x31,
	0x6b, 0x65, 0x79, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x12, 0x64, 0x6f, 0x74,
	0x31, 0x31, 0x72, 0x52, 0x31, 0x6b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x4a, 0x0a, 0x0c, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x1c, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x31, 0x31, 0x52, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x4f, 0x56, 0x41, 0x10, 0x00, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x4f, 0x56, 0x41, 0x12, 0x1c, 0x0a,
	0x10, 0x44, 0x4f, 0x54, 0x31, 0x31, 0x52, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4f, 0x44,
	0x53, 0x10, 0x02, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x4f, 0x44, 0x53, 0x1a, 0xbc, 0x0b, 0x0a, 0x06,
	0x44, 0x6f, 0x74, 0x31, 0x31, 0x56, 0x12, 0x92, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x80, 0xb4, 0x86, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x74,
	0x31, 0x31, 0x56, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8e, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf9, 0xc5, 0xed, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64,
	0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x56, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x36, 0x82,
	0x41, 0x33, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc6, 0x04, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x76, 0x5f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65, 0x18, 0xa9, 0x99, 0x94, 0xcf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2d, 0x62, 0x73, 0x73, 0x69, 0x64, 0x6c,
	0x65, 0x52, 0x0d, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x42, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65,
	0x12, 0x9c, 0x01, 0x0a, 0x16, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x5f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xa7, 0xb1, 0xc4, 0x34,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2d, 0x62, 0x73, 0x73, 0x69, 0x64, 0x6c,
	0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x14, 0x64, 0x6f, 0x74, 0x31, 0x31,
	0x76, 0x42, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x97, 0x01, 0x0a, 0x14, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x5f, 0x62, 0x73, 0x73, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xce, 0xcc, 0xc1, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2d, 0x62, 0x73, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x42, 0x73, 0x73, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x0a, 0x64, 0x6f, 0x74,
	0x31, 0x31, 0x76, 0x5f, 0x64, 0x6d, 0x73, 0x18, 0xb7, 0xf2, 0x96, 0x85, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2d, 0x64, 0x6d, 0x73, 0x52, 0x09, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x76, 0x44, 0x6d, 0x73, 0x1a, 0xc2, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x85, 0x01, 0x0a, 0x0e, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x5f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x6c, 0x65, 0x18, 0xee, 0xc7, 0xca, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74,
	0x31, 0x31, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76,
	0x2d, 0x62, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65, 0x52, 0x0d, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76,
	0x42, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x16, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x76, 0x5f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x98, 0xff, 0xa0, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74,
	0x31, 0x31, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76,
	0x2d, 0x62, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x52, 0x14, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x42, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x14, 0x64, 0x6f, 0x74, 0x31, 0x31,
	0x76, 0x5f, 0x62, 0x73, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xe9, 0x9f, 0xc2, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82,
	0x41, 0x48, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2d, 0x62, 0x73, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x76, 0x42, 0x73, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x79, 0x0a, 0x0a, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x5f, 0x64, 0x6d, 0x73, 0x18, 0x9c, 0xd3,
	0xb1, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41,
	0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2d, 0x64, 0x6d, 0x73, 0x52,
	0x09, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x44, 0x6d, 0x73, 0x1a, 0xa3, 0x07, 0x0a, 0x0b, 0x44,
	0x6f, 0x74, 0x31, 0x58, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9a, 0xe1, 0xf6, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e,
	0x44, 0x6f, 0x74, 0x31, 0x58, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f,
	0x74, 0x31, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x98, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xb7, 0xfe, 0x9e, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x44, 0x6f,
	0x74, 0x31, 0x58, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x3c, 0x82, 0x41, 0x39, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xac, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x8b, 0x01, 0x0a, 0x0e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xe8, 0xf7, 0x99, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31,
	0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0d,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x93, 0x01,
	0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x94, 0xa5, 0xd9, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74,
	0x31, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x73, 0x1a, 0xaa, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8a, 0x01,
	0x0a, 0x0e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xcb, 0xd0, 0xd0, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b,
	0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x11, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73,
	0x18, 0xcd, 0xce, 0x9b, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61,
	0x78, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73,
	0x1a, 0x86, 0x1c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x10, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0xe4, 0xc8, 0xc5, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40,
	0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x2d, 0x61, 0x70, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x0f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x70, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x9f, 0x01, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x32, 0x67, 0x18, 0xad, 0xda, 0xb1, 0xa2, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x42, 0x43, 0x82, 0x41,
	0x40, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2d, 0x32,
	0x67, 0x52, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x32, 0x67, 0x12, 0x9e, 0x01, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x35, 0x67, 0x18, 0x8c, 0xca, 0xb1, 0x7a,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x42, 0x43, 0x82,
	0x41, 0x40, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2d,
	0x35, 0x67, 0x52, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x35, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0xf2, 0xc3, 0xde, 0x3f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x03, 0x63, 0x73,
	0x61, 0x18, 0x9d, 0xe0, 0xa0, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x33, 0x82, 0x41, 0x30, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x73, 0x61, 0x52, 0x03, 0x63, 0x73, 0x61, 0x12, 0x77, 0x0a, 0x0c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0xc5, 0x93, 0x89, 0x60, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x6c,
	0x61, 0x6e, 0x12, 0x7a, 0x0a, 0x0d, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0xe7, 0x8d, 0xfc, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x52, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x67,
	0x0a, 0x06, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x18, 0x9c, 0xeb, 0xbb, 0x98, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x52,
	0x06, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x12, 0x5d, 0x0a, 0x03, 0x64, 0x76, 0x61, 0x18, 0xe9,
	0x8c, 0x86, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41,
	0x30, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x76,
	0x61, 0x52, 0x03, 0x64, 0x76, 0x61, 0x12, 0x69, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0xf9, 0xc5, 0xc6, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x75, 0x0a, 0x0b, 0x67, 0x74, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0xa0, 0xf9, 0x9e, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x67, 0x74, 0x6b, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x0a, 0x67, 0x74,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x67, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x18, 0xb2, 0xb5, 0xf5, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x12, 0x7f, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x70, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0xd7, 0xd3, 0xf6, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6e, 0x64, 0x70, 0x2d, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x4e, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x70, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xb3, 0x84, 0x86,
	0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x6e, 0x64, 0x70, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x52, 0x12, 0x69, 0x70, 0x76, 0x36, 0x4e, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x83, 0xfd, 0x81, 0x39, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x8f, 0xb4, 0xbd, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x5e, 0x0a, 0x03, 0x6f, 0x6b, 0x63, 0x18, 0xdb, 0xaa, 0xae, 0x9b, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x6b, 0x63, 0x52, 0x03, 0x6f, 0x6b, 0x63,
	0x12, 0xaa, 0x01, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x96, 0x9b, 0xb7, 0x5e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x46, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x59, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x8f, 0x01,
	0x0a, 0x06, 0x6f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x82, 0xa8, 0xbd, 0x28, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73,
	0x69, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x42,
	0x36, 0x82, 0x41, 0x33, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x75, 0x0a, 0x0b, 0x70, 0x74, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x8f,
	0xb1, 0xe9, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82,
	0x41, 0x38, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x74, 0x6b, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x0a, 0x70, 0x74, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x6f, 0x0a, 0x09, 0x71, 0x62, 0x73, 0x73, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x8e, 0xca, 0xb1, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x71, 0x62, 0x73, 0x73, 0x2d, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x71,
	0x62, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x7a, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xf5, 0xd0, 0xf1, 0xc7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa5, 0xc5, 0x83, 0xfb, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xaa, 0x01,
	0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x32, 0x67, 0x18, 0x95, 0xd4, 0xc6, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x42, 0x47, 0x82, 0x41, 0x44,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x73, 0x2d, 0x32, 0x67, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x73, 0x32, 0x67, 0x12, 0xab, 0x01, 0x0a, 0x17, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x35, 0x67, 0x18, 0xf4, 0xc5, 0xc6, 0xd9, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2d,
	0x35, 0x67, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x61, 0x74, 0x65, 0x73, 0x35, 0x67, 0x12, 0x6f, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xba, 0x9e, 0xe0, 0xa2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x08, 0x77, 0x70, 0x61,
	0x32, 0x5f, 0x70, 0x73, 0x6b, 0x18, 0xbb, 0xdc, 0x86, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x70, 0x61, 0x32, 0x2d, 0x70, 0x73, 0x6b,
	0x52, 0x07, 0x77, 0x70, 0x61, 0x32, 0x50, 0x73, 0x6b, 0x22, 0x7e, 0x0a, 0x06, 0x4f, 0x70, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x0b, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x10, 0x00, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x12, 0x2a, 0x0a,
	0x14, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x50, 0x45, 0x52,
	0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x57, 0x50, 0x41, 0x32,
	0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x12, 0x2e, 0x0a, 0x16, 0x4f, 0x50, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52,
	0x49, 0x53, 0x45, 0x10, 0x03, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x1a, 0xa3, 0x0c, 0x0a, 0x03, 0x57, 0x6d,
	0x6d, 0x12, 0x8b, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9a, 0xda, 0x95,
	0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64,
	0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x57, 0x6d, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x88, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb7, 0xc1, 0xa3, 0xa1, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x2e, 0x57, 0x6d, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x33,
	0x82, 0x41, 0x30, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x83, 0x05, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x77, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64,
	0x73, 0x63, 0x70, 0x18, 0xdc, 0xd6, 0xaa, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d,
	0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2d, 0x64,
	0x73, 0x63, 0x70, 0x52, 0x09, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x73, 0x63, 0x70, 0x12, 0x7e,
	0x0a, 0x0d, 0x77, 0x6d, 0x6d, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0xb5, 0x8a, 0xdd, 0x70, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82,
	0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x77, 0x6d, 0x6d, 0x2d, 0x62, 0x65, 0x2d, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x52, 0x0b, 0x77, 0x6d, 0x6d, 0x42, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x7e,
	0x0a, 0x0d, 0x77, 0x6d, 0x6d, 0x5f, 0x62, 0x6b, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0xbb, 0xd4, 0x8d, 0x38, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82,
	0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x77, 0x6d, 0x6d, 0x2d, 0x62, 0x6b, 0x2d, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x52, 0x0b, 0x77, 0x6d, 0x6d, 0x42, 0x6b, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x7f,
	0x0a, 0x0d, 0x77, 0x6d, 0x6d, 0x5f, 0x76, 0x69, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0xb5, 0xc5, 0x99, 0x89, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42,
	0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x6d, 0x6d, 0x2d, 0x76, 0x69, 0x2d, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x52, 0x0b, 0x77, 0x6d, 0x6d, 0x56, 0x69, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x7f, 0x0a, 0x0d, 0x77, 0x6d, 0x6d, 0x5f, 0x76, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0xd3, 0xaf, 0xa3, 0x92, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x6d, 0x6d, 0x2d, 0x76, 0x6f, 0x2d, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x0b, 0x77, 0x6d, 0x6d, 0x56, 0x6f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x1a, 0xfc, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x75, 0x0a, 0x0a, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0xa3, 0x85, 0xc3, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x2d, 0x64, 0x73, 0x63, 0x70, 0x52, 0x09, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x73, 0x63,
	0x70, 0x12, 0x7e, 0x0a, 0x0d, 0x77, 0x6d, 0x6d, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0xf8, 0xc7, 0xd1, 0x9d, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x6d, 0x6d, 0x2d, 0x62, 0x65, 0x2d, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x0b, 0x77, 0x6d, 0x6d, 0x42, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x7d, 0x0a, 0x0d, 0x77, 0x6d, 0x6d, 0x5f, 0x62, 0x6b, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0xc2, 0xf7, 0x86, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x6d, 0x6d, 0x2d, 0x62, 0x6b, 0x2d, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x0b, 0x77, 0x6d, 0x6d, 0x42, 0x6b, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x7d, 0x0a, 0x0d, 0x77, 0x6d, 0x6d, 0x5f, 0x76, 0x69, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0xe0, 0xc8, 0x8e, 0x72, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x6d, 0x6d, 0x2d, 0x76, 0x69, 0x2d, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x52, 0x0b, 0x77, 0x6d, 0x6d, 0x56, 0x69, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x7e, 0x0a, 0x0d, 0x77, 0x6d, 0x6d, 0x5f, 0x76, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0xa2, 0xdb, 0xf3, 0xd2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x6d, 0x6d, 0x2d, 0x76, 0x6f, 0x2d, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x52, 0x0b, 0x77, 0x6d, 0x6d, 0x56, 0x6f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x1a,
	0x92, 0x01, 0x0a, 0x07, 0x53, 0x73, 0x69, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x52, 0x04,
	0x73, 0x73, 0x69, 0x64, 0x1a, 0xf1, 0x8a, 0x04, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x70, 0x0a, 0x03, 0x61, 0x61, 0x61, 0x18, 0xde, 0xa5, 0xfb, 0x93, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x61, 0x61, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x52, 0x03, 0x61,
	0x61, 0x61, 0x12, 0x7c, 0x0a, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0xe1, 0xcc, 0xa8,
	0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x12, 0x78, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0xe7, 0xd4, 0xa4, 0x82, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x7b, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xa5, 0xde, 0xcc, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x73, 0x0a, 0x04, 0x63, 0x70, 0x75, 0x73, 0x18,
	0xf2, 0xf1, 0xe4, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x52, 0x04, 0x63, 0x70, 0x75, 0x73, 0x12, 0x70, 0x0a, 0x03,
	0x64, 0x6e, 0x73, 0x18, 0x8c, 0xc3, 0xe0, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x42, 0x29,
	0x82, 0x41, 0x26, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x8e,
	0x01, 0x0a, 0x0b, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x89,
	0xdf, 0xcc, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x7f, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0xa4, 0xd7, 0xc9, 0x63, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x80, 0x01, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xd2, 0xc6, 0x84,
	0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x2d, 0x82, 0x41, 0x2a,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x12, 0x7b, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0xb2, 0xb1,
	0xc3, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x83, 0x01, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0xff, 0xe7,
	0xd6, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x2e, 0x82, 0x41,
	0x2b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x03, 0x6e, 0x74, 0x70, 0x18, 0xe7, 0xf4,
	0xa4, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e,
	0x74, 0x70, 0x52, 0x03, 0x6e, 0x74, 0x70, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0xd6, 0x8f, 0xc5, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0xc5, 0xfd, 0xfa, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x09, 0x73, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x77,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9a, 0xf7, 0x8a, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x0d, 0x74, 0x65, 0x6c, 0x6e,
	0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0xb1, 0x92, 0x8f, 0x48, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x54, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x33, 0x82, 0x41,
	0x30, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x0c, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a,
	0x98, 0xad, 0x01, 0x0a, 0x03, 0x41, 0x61, 0x61, 0x12, 0x94, 0x01, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xc2, 0x96, 0xb8, 0xbc, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x61, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x34, 0x82,
	0x41, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0xa3, 0x01, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xa1, 0xc5, 0x93, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x38, 0x82, 0x41, 0x35,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa0, 0x01, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc8, 0xf6, 0xef, 0x9a, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xaf, 0xac, 0xd5, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9e,
	0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0xb1, 0xf8, 0x8c, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x80, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa0, 0x83, 0xda, 0xbb, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xf2, 0x18, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x99, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe3, 0xea, 0xae,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x99, 0x01,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xaa, 0xc9, 0xd8, 0x2c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x61, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xc4, 0xc6, 0xa3, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3a,
	0x82, 0x41, 0x37, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xd6, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xd6, 0x01, 0x0a,
	0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0xfd, 0xbc, 0xf2, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0xf2, 0x01, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12,
	0x9b, 0x01, 0x0a, 0x31, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0xdc, 0xcc, 0xa5, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41,
	0x41, 0x41, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x52, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a,
	0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xab, 0xc2, 0xf7, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0xe4, 0x0d, 0x0a, 0x06, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0xcb, 0xf3, 0xc5, 0xd3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a,
	0x9f, 0x0a, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0xb3, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x9c, 0xe5, 0xb5, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x48, 0x82,
	0x41, 0x45, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xb0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x95, 0xae, 0xd4, 0xae, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xd6, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xab, 0x01,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xc6, 0xaf, 0xae,
	0x51, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49,
	0x4e, 0x47, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x42, 0x53, 0x82, 0x41, 0x50,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0xa0, 0x93, 0x91, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0x5a, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x11, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x10, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x12, 0x18, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x1a, 0xd3, 0x03, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xdd, 0xfc, 0xed, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0xa7, 0xc2,
	0x82, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x4e, 0x82,
	0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x5a, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x11, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x12, 0x18, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x53, 0x54, 0x4f,
	0x50, 0x1a, 0x8d, 0x02, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0xa1,
	0x01, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x5d, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x61, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x1a, 0xd3, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xd4, 0x01, 0x0a, 0x11,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0xca, 0xa0, 0xf5, 0x77, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x1a, 0xf2, 0x01, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x9a, 0x01, 0x0a,
	0x31, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x87, 0xb5, 0xe3, 0x52, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x52, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61, 0x61, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x18, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xd2, 0xb4, 0xe5, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x9e, 0x29, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb0, 0x01, 0x0a, 0x0a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0xd7, 0xf4, 0x93, 0x96, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x43, 0x82,
	0x41, 0x40, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0xa1, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa6, 0xc6, 0xf5, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x9e, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x93, 0x95, 0xb1, 0x8b,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x84, 0x9f, 0xf7,
	0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x3e, 0x82, 0x41,
	0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x52, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x1a, 0xc8, 0x09, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x12, 0xb6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc8, 0xbf, 0xa6,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb3, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xe1, 0x80, 0xf3, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x49,
	0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xd7, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x0e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0xee,
	0x9b, 0xb6, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x59, 0x82, 0x41, 0x56, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0xae, 0x01, 0x0a, 0x15, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x18, 0xf8, 0xd8, 0x8c, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x52, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x1a, 0xf1, 0x03, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0xe5, 0xab, 0x86, 0xf3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0xae, 0x01, 0x0a, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x18, 0x89, 0x83, 0x98, 0x9d,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41,
	0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x52, 0x13, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x99, 0x01, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x92, 0x9c, 0xa9, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x82,
	0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xef, 0x01, 0x0a, 0x15, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0xf5, 0xd8, 0xcf, 0xe2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x55,
	0x82, 0x41, 0x52, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x85, 0x02, 0x0a, 0x19,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xa2, 0x01, 0x0a, 0x35, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x18, 0xe4, 0xb1, 0x9d, 0x7c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x52, 0x33, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43,
	0x0a, 0x1c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xc3,
	0xb6, 0xce, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x1a, 0xff, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xec, 0x01,
	0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0xbc, 0xf3, 0x8c, 0x4a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61,
	0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x86, 0x02, 0x0a,
	0x19, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xa3, 0x01, 0x0a, 0x35, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61,
	0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x81, 0xd4, 0xa2, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41,
	0x41, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x52, 0x33, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x43, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x84, 0xf0, 0xdf, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0xa0, 0x12, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0xa8, 0x01, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0xa2, 0xd7, 0xac, 0x4c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42,
	0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x96, 0x0f, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0xb8, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc3,
	0xad, 0xbe, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb4,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa4, 0xaa, 0xa7, 0xb3, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8e, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x89, 0x01, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0xd5, 0xd0,
	0xba, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82,
	0x41, 0x50, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x9e, 0x01, 0x0a,
	0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64,
	0x18, 0xb9, 0xce, 0x93, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x52, 0x0e, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x92, 0x01,
	0x0a, 0x29, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0xb0, 0xfb, 0xe5, 0x6b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x48, 0x00, 0x52, 0x28, 0x72, 0x6f, 0x6c, 0x65, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0xa6, 0xf3, 0xb1, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f,
	0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x07, 0x73, 0x73, 0x68,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x82, 0xbe, 0xc2, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x73, 0x68, 0x4b, 0x65,
	0x79, 0x12, 0x8a, 0x01, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x82,
	0xdc, 0xfc, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x53, 0x82, 0x41, 0x50, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x8a, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x88, 0x01, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0xcc, 0xfa,
	0xf9, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82,
	0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x0f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x18,
	0xae, 0xbe, 0xc3, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x52, 0x0e, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x93, 0x01, 0x0a, 0x29,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61,
	0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0xa7, 0xb7, 0xd8, 0xf4, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x52, 0x4f, 0x4c, 0x45, 0x53, 0x48, 0x00, 0x52, 0x28, 0x72, 0x6f, 0x6c, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0xa5, 0xe0, 0x85, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x73, 0x73, 0x68, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0xe5, 0x90, 0xa2, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x73, 0x68, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12,
	0x89, 0x01, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc7, 0xdd, 0x95,
	0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82,
	0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x1a, 0xd2, 0x01, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x68, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0xb1, 0x15, 0x0a, 0x0d, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9f, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xad, 0xbf, 0xcb, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9f, 0x01, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xfc, 0xdb, 0x87, 0x42, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61,
	0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x9b,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe2, 0x8e, 0x81, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf7, 0x03, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xe9, 0x01, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0xef, 0xb8, 0x87, 0xbe, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x13,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x1a, 0x80, 0x02, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x12, 0xa0, 0x01, 0x0a, 0x34, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61, 0x61, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0xd6, 0xf8, 0xed, 0x45, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x41, 0x41, 0x41, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x32, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0xad, 0xbf, 0x98, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0xcc, 0x09, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0xac, 0x01, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xd9, 0xbd, 0xd8, 0x4a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x1a, 0xf9, 0x05, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0xb9, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xae, 0xe0, 0xb4, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb6, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xdb, 0xd4, 0x98, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4a, 0x82, 0x41,
	0x47, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0xbc, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb1, 0x01, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xa8, 0x8b, 0xf1, 0x2f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x41, 0x41, 0x41, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x42, 0x56, 0x82, 0x41, 0x53,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xbb,
	0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xe3, 0x86, 0x98, 0xfe, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x41, 0x41, 0x41, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x96, 0x02, 0x0a,
	0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0xa7, 0x01, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41,
	0x41, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0xf4, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0xe7, 0x01, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0xd6, 0xf2, 0xf3, 0xe9, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x80, 0x02, 0x0a, 0x18, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xa0, 0x01, 0x0a, 0x34, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18,
	0xcb, 0x8a, 0xa1, 0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x54, 0x59, 0x50, 0x45, 0x52, 0x32, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61, 0x61, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x1b, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xa6, 0xcc, 0xe9, 0x38, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x08, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xa9, 0x4e, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xcb, 0xe0, 0xc3, 0x49, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x44,
	0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0xff, 0x4a, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0xb7, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9c, 0xc4, 0xf2,
	0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbb, 0x01, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0xbe, 0xcf, 0x98, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61,
	0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x95, 0xb3, 0x93, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4a, 0x82, 0x41,
	0x47, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0xa0, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0xfe, 0xa8, 0xb4, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xd3, 0x8f, 0xa3, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x1a, 0xfe, 0x41, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0xcb,
	0x01, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0xcc, 0x99, 0x99, 0x88, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42,
	0x53, 0x82, 0x41, 0x50, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0xae, 0x3e, 0x0a,
	0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xc1, 0xca, 0x8c, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5a, 0x82, 0x41,
	0x57, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xd6, 0x01, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0xd5, 0xcc, 0xe4, 0x9d,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0xd1, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xb6, 0xf3, 0xa0, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xd6, 0x01,
	0x0a, 0x06, 0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x18, 0xa4, 0x8e, 0xf3, 0x9f, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x63, 0x61,
	0x63, 0x73, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x52, 0x06,
	0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x1a, 0xca, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x96, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x9c, 0xb7,
	0xe1, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82,
	0x41, 0x5f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xf5, 0xbe, 0x9e, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x95, 0xbc, 0x90, 0xf2, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x1a, 0xd2, 0x19, 0x0a, 0x06, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0xe4,
	0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xfa, 0xfd, 0x8c, 0xb9, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xe0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x97, 0xfe, 0x8b, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x60, 0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xed, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xa0, 0x01, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0xe0, 0x88, 0x94, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6b, 0x82, 0x41, 0x68, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x61, 0x63,
	0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0xa0, 0x01, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0xb9, 0xa6, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0xbe, 0x01, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x18, 0xe1, 0xba, 0x87, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x75, 0x82, 0x41, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x0a, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xab, 0x96, 0xed, 0x88, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0xb2, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x95, 0x84, 0xc5, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x8d, 0x0f, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0xc9, 0xc7, 0xce, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a,
	0x82, 0x41, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x63, 0x63, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0xbc, 0xc4, 0x90, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0xf7, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0xed, 0xc4, 0xbd, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x69, 0x82, 0x41, 0x66,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0xbe, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0xdc, 0xfa, 0xd5, 0xe8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x52, 0x12, 0x72,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x12, 0xa4, 0x01, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x88, 0xf1, 0xda, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x09, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0xb1, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x96, 0xc2, 0xe8, 0xe8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41,
	0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xa9, 0x06, 0x0a,
	0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x0e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0xea, 0x8f, 0xe2,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x85, 0xdc, 0x8c, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0xd2,
	0x01, 0x0a, 0x17, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0xd7, 0xa3, 0xbc, 0x63, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x81, 0x01, 0x82, 0x41, 0x7e, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x15, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0xd2, 0x01, 0x0a, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x87, 0xd5, 0xce, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x81, 0x01,
	0x82, 0x41, 0x7e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0xd7, 0x0e, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa7,
	0x86, 0xd1, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61,
	0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0xc3, 0xf4, 0xcd, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b,
	0x82, 0x41, 0x68, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x73, 0x12, 0xb0, 0x01,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x73, 0x18, 0xd1, 0x91, 0xe2, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73,
	0x12, 0xb6, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x9f, 0xa0, 0xa8, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x18, 0x95,
	0xf7, 0x99, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82,
	0x41, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x73, 0x18, 0xc2, 0xd7, 0x89, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xd4, 0x95, 0xf7, 0x8f, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0xb0, 0x01, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xc7, 0xf6, 0x80, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0xa4, 0x01, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xf4, 0x97, 0xa5, 0x67, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x8d, 0x01, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x9c, 0xf0, 0xc7, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x93, 0x01, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xae, 0x83, 0xee, 0x73, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x1a, 0xc8, 0x0b, 0x0a, 0x06, 0x54, 0x61, 0x63, 0x61, 0x63, 0x73, 0x12, 0xe3, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc9, 0x8b, 0xf1, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x63, 0x61, 0x63,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x61,
	0x63, 0x61, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xe0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9e, 0xa6,
	0x91, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x63, 0x61, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x60, 0x82,
	0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xfb, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x93, 0x01, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xbd, 0x98, 0xd1, 0xe5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74,
	0x61, 0x63, 0x61, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xa5, 0x01, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xea, 0xa2, 0x82, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x63, 0x61,
	0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x2d, 0x6b, 0x65, 0x79, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0xb2, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0xc4, 0xee, 0xf9, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0xf6, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x91,
	0x01, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xc8, 0xa7, 0xac, 0x60, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x63, 0x61, 0x63,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0xa5, 0x01, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0xc7, 0x98, 0xa5, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2d, 0x6b, 0x65, 0x79, 0x52,
	0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0xb0, 0x01, 0x0a, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe1, 0x93,
	0xe3, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82,
	0x41, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xf3, 0x01,
	0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x75, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x82, 0x41,
	0x58, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x6f, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x1a, 0x9d, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7e, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xf1, 0xdb, 0xde, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x93, 0x01,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x98, 0xa5, 0xa3, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41,
	0x41, 0x41, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x42, 0x4f, 0x82, 0x41,
	0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0xdc, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x5d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd0, 0x0b, 0x0a, 0x06,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x18, 0xa3, 0xd0, 0xb7, 0xcb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x05, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x1a, 0x95, 0x09, 0x0a, 0x05, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x96, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa4, 0xfa, 0x9f, 0x9f, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x91, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xbd, 0xe7, 0xc6, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0xd4, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0xa7, 0xe9, 0xef, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x78, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x94, 0xd3, 0xf7, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x99,
	0x01, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0xa5, 0x8f, 0xa7, 0x38,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x41, 0x4c, 0x41, 0x52, 0x4d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x42, 0x41, 0x82,
	0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x6b, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x85, 0x8a, 0xb0, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0xe4, 0xd3, 0x9f, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0xa6, 0x01, 0x0a, 0x31,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x69,
	0x64, 0x18, 0xc9, 0xe8, 0xb6, 0x71, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x49,
	0x44, 0x48, 0x00, 0x52, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x74, 0x79,
	0x70, 0x65, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xde, 0x9f, 0xf7, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x09, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x1a, 0xa1, 0x01, 0x0a, 0x08, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e,
	0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x73, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0xb1,
	0x04, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x88, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xf8, 0xbb, 0xf5, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x91, 0xe4,
	0xe6, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8b, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xaa, 0xbf, 0xf2, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x88, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x7f, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0xaf, 0x82, 0xa1, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0xdb, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x74, 0x0a,
	0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xb8, 0xe1, 0xf0,
	0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82,
	0x41, 0x35, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x93, 0x9a, 0x91, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x77, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x18, 0x9a, 0xf7, 0xb1, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x74, 0x0a, 0x0b, 0x6d, 0x6f,
	0x74, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0xeb, 0x83, 0xb4, 0xdf, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x6f, 0x74, 0x64, 0x2d, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x1a, 0xb6, 0x44, 0x0a, 0x04, 0x43, 0x70, 0x75, 0x73, 0x12, 0x7c, 0x0a, 0x03, 0x63, 0x70, 0x75,
	0x18, 0xbd, 0x81, 0xb0, 0x6f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x4b,
	0x65, 0x79, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63,
	0x70, 0x75, 0x52, 0x03, 0x63, 0x70, 0x75, 0x1a, 0x95, 0x41, 0x0a, 0x03, 0x43, 0x70, 0x75, 0x12,
	0x89, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xef, 0xa1, 0x8b, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x34,
	0x82, 0x41, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x81, 0x40, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x12, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0xc8, 0xc0, 0xa4,
	0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73,
	0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x52, 0x11, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x12, 0x91, 0x01, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0xe0, 0x83, 0xf2, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49,
	0x64, 0x6c, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f,
	0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x52, 0x04,
	0x69, 0x64, 0x6c, 0x65, 0x12, 0x66, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0xc7, 0xc0, 0x8c, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43,
	0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00,
	0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0c,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xef, 0x9e, 0xbf,
	0x67, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18,
	0xc5, 0xfb, 0x9b, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x42, 0x3b, 0x82, 0x41,
	0x38, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x12, 0x92, 0x01, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x18, 0xf5, 0xa3, 0x9a, 0xc7, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x4e, 0x69, 0x63, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75,
	0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65,
	0x52, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x12, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0xfb, 0xf5,
	0xf4, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75,
	0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x52, 0x11,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x12, 0x96, 0x01, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xc8, 0xfc, 0xca, 0xb8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63,
	0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x91, 0x01, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x93, 0xc6, 0x92, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43,
	0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x39, 0x82,
	0x41, 0x36, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x91,
	0x01, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0xd9, 0xe5, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x70,
	0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x61, 0x69,
	0x74, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x52, 0x04, 0x77, 0x61,
	0x69, 0x74, 0x1a, 0x92, 0x07, 0x0a, 0x11, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x75, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18,
	0xf9, 0xf9, 0xa9, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82,
	0x41, 0x48, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12,
	0x81, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xf6, 0xd7, 0x94, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0xb8, 0xa0, 0xf0, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50,
	0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x76, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x93, 0xd1, 0xd3, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0xbf, 0xb6, 0x8b, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50,
	0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x03, 0x6d, 0x69, 0x6e,
	0x18, 0xbd, 0xb8, 0xd3, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b,
	0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x84, 0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x8d, 0xf9,
	0xb5, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41,
	0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x9f, 0x06, 0x0a, 0x04, 0x49, 0x64, 0x6c, 0x65,
	0x12, 0x68, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x81, 0xb5, 0xd1, 0xc0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c,
	0x65, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x74, 0x0a, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xce, 0xc4, 0x94, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73,
	0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x76, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xa0, 0x8b, 0xc3,
	0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x67, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0xdb, 0xae, 0xd9, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82,
	0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x12, 0x75, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x87, 0xdb,
	0x94, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0xd5, 0xc7, 0xd9, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82,
	0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x76, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc5, 0xd0,
	0xe7, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41,
	0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xb0, 0x06, 0x0a, 0x06, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x12, 0x6a, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xe8, 0xc8, 0xa0, 0xe5,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67,
	0x12, 0x76, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xd3, 0x86, 0xe4, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52,
	0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x78, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0xd3, 0xac, 0x83, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63,
	0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x6a, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xaa, 0xcf, 0x98, 0x8e, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x77,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xa0, 0x9e, 0x9a, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x84,
	0xe8, 0x98, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82,
	0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x77, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0xee, 0x95, 0xaf, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82,
	0x41, 0x41, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xa0, 0x06, 0x0a,
	0x04, 0x4e, 0x69, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xf8, 0x9f, 0xb2,
	0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12,
	0x73, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xa3, 0xd9, 0xd0, 0x63, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e,
	0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x83, 0x9d, 0xc4, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x67, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0xba, 0x8b, 0xab, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63,
	0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x61,
	0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x75, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xb0, 0xd8, 0xf8, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0xb4, 0xa4, 0xab, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f,
	0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x6d,
	0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x76, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0xde, 0xee, 0xeb, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63,
	0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x69,
	0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0x92, 0x07, 0x0a, 0x11, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x75, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xe2, 0xb8, 0xa4,
	0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x81, 0x01, 0x0a,
	0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xd1, 0x8a, 0xf1, 0x62, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x85, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xc5, 0x92,
	0x8b, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41,
	0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x76, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0xf4, 0x94, 0x80, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b,
	0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x83, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x9e, 0x94,
	0xef, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xca, 0xad,
	0x80, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x84, 0x01,
	0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc0, 0xf2, 0xec, 0xf5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0xa8, 0x06, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x69,
	0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xf9, 0xf5, 0xbf, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73,
	0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x75, 0x0a, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x18, 0xf6, 0x93, 0x92, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f,
	0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x77, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xb8, 0x94, 0xf4,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x68, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x93, 0xcd, 0xe9, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e,
	0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x12, 0x77, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0xbf, 0xaa, 0x8f, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43,
	0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0xbd, 0xb4, 0xe9, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x69,
	0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x77, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x8d, 0xed, 0xb9, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x69,
	0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0xa1, 0x06, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18,
	0xea, 0xb5, 0xf0, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82,
	0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76,
	0x67, 0x12, 0x74, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xe9, 0xb2, 0xca,
	0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0xed, 0xf5, 0xa8, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63,
	0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x68, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xfc, 0xb0, 0xe8, 0xc0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x76, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xa6, 0xea, 0xe2, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75,
	0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x68, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x82, 0x96, 0xe8, 0x80, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x75, 0x0a, 0x08,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xf8, 0xeb, 0xe3, 0x50, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x9f, 0x06, 0x0a, 0x04, 0x57, 0x61, 0x69, 0x74, 0x12, 0x67, 0x0a, 0x03,
	0x61, 0x76, 0x67, 0x18, 0x84, 0xbb, 0xb0, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x2f, 0x61, 0x76, 0x67,
	0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x73, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0xdf, 0xc7, 0xd4, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41,
	0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x76, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x9f, 0xa5, 0xba, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73,
	0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x67, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x9e, 0xd5, 0xb7, 0x6e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63,
	0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61,
	0x69, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x76, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xfc, 0xb1, 0x8c, 0xe4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69,
	0x74, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x90, 0xee, 0xb7, 0xae, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x77, 0x61, 0x69, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x76, 0x0a,
	0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb2, 0xca, 0xbe, 0xd3, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77,
	0x61, 0x69, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x09, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x06,
	0x82, 0x41, 0x03, 0x41, 0x4c, 0x4c, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a,
	0x97, 0x02, 0x0a, 0x06, 0x43, 0x70, 0x75, 0x4b, 0x65, 0x79, 0x12, 0x63, 0x0a, 0x0b, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xc7, 0xc0, 0x8c, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x4b, 0x65, 0x79, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0xef, 0x9e, 0xbf, 0x67, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x46, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x52, 0x03, 0x63, 0x70, 0x75, 0x22,
	0x2f, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x09, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4c, 0x4c,
	0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xd5, 0x1e, 0x0a, 0x03, 0x44, 0x6e,
	0x73, 0x12, 0x84, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x81, 0x8b, 0x88,
	0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x30,
	0x82, 0x41, 0x2d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x0c, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0xee, 0xff, 0xe4, 0x38, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x44, 0x6e, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42,
	0x36, 0x82, 0x41, 0x33, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0xe5, 0xc2, 0x86, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x7f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf6, 0xed, 0x9e, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44,
	0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x64, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x74, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0xd8, 0xdb, 0xc3, 0xda, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x89, 0x0f, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xc0, 0xb2, 0xe2, 0x70, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x68, 0x6f, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xea, 0x0b, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0xb1, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xb5, 0xac, 0xba, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e,
	0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68,
	0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xad, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xaa, 0xf0, 0xc1, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xbd, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0xc4, 0xe2, 0xb0,
	0xa0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82,
	0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xc3, 0x9b, 0xc3, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73,
	0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x92,
	0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xc6, 0xa7, 0xb3, 0x73, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x55, 0x82, 0x41, 0x52, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0xa4, 0xb5, 0x95, 0x6b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f,
	0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73,
	0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x69, 0x70, 0x76,
	0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xb8, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x7d, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x8f, 0x93, 0x89, 0x4e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x9a,
	0xf5, 0xae, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50,
	0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x0c, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa7, 0xa9, 0x96, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x92,
	0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xf5, 0xf7, 0x87, 0xbe, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0xdc, 0x01, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x66, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e,
	0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68,
	0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x0a,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e,
	0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x1a, 0xa8, 0x09, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x97,
	0x01, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x99, 0x97, 0x9c, 0xfe, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x44, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0xc0, 0x06, 0x0a, 0x06, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0xa1, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xee,
	0xc8, 0xef, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9d, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x9b, 0xe7, 0x99, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf9, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x7c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x8f, 0x9c,
	0x9b, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47,
	0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x71, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xd8, 0x9b, 0xad, 0x85, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x1a, 0xf5, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7a, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xb6, 0xff, 0xf5, 0x4c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x70, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0xc7, 0xed, 0xe1, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xbf, 0x01, 0x0a, 0x09,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x5a, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x72, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x18, 0xed, 0x8a, 0xe1, 0x92, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x1a, 0xa1, 0x15, 0x0a, 0x0a, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x93, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xfe, 0xfd, 0xb1, 0x9f,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8e, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xeb, 0xe1, 0xec, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb9, 0x09, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe4, 0x8c, 0xb5, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2d, 0x69, 0x64, 0x52,
	0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x6f,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xe8, 0xfe, 0xca, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0xcc, 0x01, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x9b, 0xa9, 0x99, 0xfd, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x0f, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xa1,
	0x01, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf3, 0xec, 0xdb, 0x45, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xa8, 0xf5, 0xb7, 0xe6, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x92,
	0x01, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x87, 0xdf, 0xc5, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x1a, 0xee, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x9a, 0x01, 0x0a,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0xf1, 0xee, 0xf7, 0x42, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x1e, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x17, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0xe1, 0x80, 0xb1, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x4d, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x53, 0x54, 0x45,
	0x4e, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x1f, 0x0a, 0x13, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03,
	0x41, 0x4e, 0x59, 0x1a, 0xaf, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x87, 0x01,
	0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0xf7, 0xc7, 0xd4, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0xf3, 0xbb, 0xf7, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xc9, 0x01, 0x0a, 0x10, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x84, 0x90,
	0xe2, 0x58, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xee, 0x83, 0xd5, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f,
	0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x16, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x97, 0xa7, 0xb4, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82,
	0x41, 0x39, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x91, 0x01, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x88, 0xb6, 0xd5, 0x50, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xee, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x99,
	0x01, 0x0a, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0xa6, 0x9a, 0x97, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x1e, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x17, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xec, 0xad, 0xe5, 0x98, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x4d, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x53,
	0x54, 0x45, 0x4e, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x13, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x1a, 0x06, 0x82,
	0x41, 0x03, 0x41, 0x4e, 0x59, 0x1a, 0xde, 0x13, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x12, 0x94, 0x01, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0xf3,
	0x96, 0xd8, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x08,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x1a, 0xbb, 0x12, 0x0a, 0x08, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0xcf, 0xdd, 0xd3, 0x43, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x4b, 0x65, 0x79, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0xae, 0x0f, 0x0a,
	0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xb0, 0xbd, 0xa1, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa9, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xa9, 0x94, 0x87, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8e, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x7d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0xfd, 0xaf, 0xf3, 0xa0, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x32, 0x0a, 0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xf5, 0xa4, 0xf8, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x13, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xbf, 0xb3, 0x8e, 0xf4, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x0a, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x8a, 0xfc, 0xee, 0x81, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x09, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xb4, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x7c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0xaa, 0xbd, 0xb6, 0xa7, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x8d,
	0x01, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe2,
	0xb1, 0xf8, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x95,
	0x01, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x88, 0xeb, 0xde, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x18, 0xaf, 0xbd, 0xe2, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x07,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x7a, 0x0a, 0x06, 0x69, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x18, 0x9f, 0xe8, 0x92, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x52, 0x05, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0xd6, 0xd0, 0xb3, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a,
	0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0xf2, 0xca, 0xf6, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x13, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xa2, 0xec, 0xeb, 0x2d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x81, 0xb5, 0xa5, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x79, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x9a, 0xaf, 0x87, 0xb4,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xd6, 0x01,
	0x0a, 0x0a, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x68, 0x0a, 0x0a,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x09, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0xf5, 0x33, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x8f, 0x01, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x18, 0xc0,
	0xe9, 0xe0, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x94, 0x87, 0xca, 0x55, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x1a, 0xe7, 0x11, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x9b, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb5, 0x99, 0xb8, 0x60, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa7, 0x01, 0x0a, 0x09, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0xe7, 0xe3, 0xec, 0x75, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xaa,
	0xef, 0xdc, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xe5, 0x0d, 0x0a, 0x09, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0xb9, 0xad, 0xc1, 0x91, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x65,
	0x79, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xd7, 0x08, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0xc2, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x8e, 0xfd,
	0xf8, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4f,
	0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbd, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xbb, 0xf4, 0xdb, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe3, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xab, 0x01, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0xa6, 0xeb, 0xea, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x59,
	0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x42, 0x58, 0x82, 0x41,
	0x55, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0xaa, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0xf0, 0xba,
	0xfd, 0x6b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xdf, 0x02,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x8d, 0xd0, 0xaa, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0xa9, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0xd7, 0x87, 0xf7, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x57, 0x82, 0x41,
	0x54, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x1a,
	0xbf, 0x03, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0xa0, 0x01, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f,
	0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0xa0, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc1, 0x1f, 0x0a, 0x0d, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0xc5, 0x01, 0x0a,
	0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0xeb,
	0x86, 0x87, 0x43, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x1a, 0xf9, 0x1b, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xc4, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xbc, 0xaa, 0x85, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xcf, 0x01, 0x0a,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x8c, 0xad, 0xd0, 0x3a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x54, 0x82,
	0x41, 0x51, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xc0,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb5, 0xd0, 0x82, 0xe8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xce, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x85, 0x01, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0xb9, 0xdc, 0xd2, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0xd3, 0xd2, 0xdb, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0xa2, 0x01,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0xab, 0xac, 0x8d, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0xef, 0x0f, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0xe2, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0xc0, 0xb4,
	0x95, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x5d, 0x82, 0x41,
	0x5a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xfd, 0x09, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0xea, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb5, 0xa2,
	0xaf, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xe5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xaa, 0xe2, 0xbc, 0x3f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8d, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xbf, 0x01, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0xbf, 0xf9, 0xc1, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x59, 0x53,
	0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x42, 0x6d, 0x82, 0x41, 0x6a,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0xc0, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x9d, 0x9b, 0x92, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x6d,
	0x82, 0x41, 0x6a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x8b, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xbf, 0x01, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xfa,
	0xc1, 0xdb, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x59, 0x53,
	0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x42, 0x6c, 0x82, 0x41, 0x69,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0xbf, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x8c, 0xe8, 0xd6, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53,
	0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x6c, 0x82,
	0x41, 0x69, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xfc, 0x03, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0xb5, 0x01, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x59, 0x53,
	0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x42, 0x66, 0x82, 0x41, 0x63,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x66, 0x61, 0x63, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0xb5, 0x01,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x7d, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x1a, 0xc9, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0xc6, 0xd2, 0xa4, 0x58, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0xd6, 0x9a, 0x9f, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0xa0, 0x01,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0xb8, 0xbd, 0xc1, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0xeb, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x63, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x68,
	0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x0d, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x93,
	0x04, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xf3, 0xa9, 0xb6, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xd4, 0xde, 0xb5, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xea, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x6f, 0x0a, 0x08, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0xd4, 0x91,
	0xc5, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x70, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0xe3,
	0xc3, 0x97, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82,
	0x41, 0x38, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x1a, 0x94, 0x18, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x8d, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc0, 0xb8, 0x97,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xa8, 0x01, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0xb4, 0xd0, 0xab, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0c,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb9, 0xfa, 0xe5, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x34, 0x82, 0x41,
	0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x96, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x8b, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0xce, 0xb6, 0x98, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x1a, 0x8f, 0x0c, 0x0a, 0x0c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xba, 0xaa, 0xad, 0x74, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x92, 0x08, 0x0a, 0x0c,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc4, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xab, 0xe4, 0xda, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xbf, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xec, 0xa5,
	0xbf, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x50, 0x82, 0x41,
	0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xbc, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x8b, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xad, 0x97, 0x8b,
	0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0xa3,
	0x01, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x9b, 0xd2, 0xd7, 0xa5, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x44, 0x45, 0x42, 0x55, 0x47, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0xb9, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8a,
	0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xde, 0xc3, 0xc0, 0x50, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0xa2, 0x01, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xa0, 0xda, 0xfc, 0xd9, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x44, 0x45, 0x42, 0x55, 0x47, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x42, 0x58, 0x82,
	0x41, 0x55, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0xa1, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x98, 0x01, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x44, 0x45, 0x42, 0x55, 0x47, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x73, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0x94, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9d,
	0x01, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xd9, 0xa7, 0xb5, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x8b,
	0x01, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0xd1, 0x9f, 0x9e, 0xe8,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xdc, 0x04, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7b, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x97, 0xed, 0xf5, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x97, 0xe3, 0xb8,
	0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41,
	0x3d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x73, 0x67, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x73, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0xb0, 0x94, 0x8a,
	0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82,
	0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x73, 0x67, 0x69,
	0x64, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x7a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x8c, 0xb1, 0x80, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x75, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x69, 0x64, 0x18, 0xcb,
	0xec, 0xc1, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43,
	0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x69, 0x64, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x69, 0x64, 0x1a, 0xeb, 0x30, 0x0a, 0x03,
	0x4e, 0x74, 0x70, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf8,
	0x9b, 0xb4, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x30, 0x82, 0x41, 0x2d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x08, 0x6e, 0x74,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0xd1, 0x87, 0xd6, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70,
	0x2e, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x52, 0x07, 0x6e, 0x74,
	0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0xea, 0xea, 0xc4, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x7f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x91, 0x84, 0xe5, 0x5d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x4e, 0x74, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x87, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x81, 0x01, 0x0a,
	0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x74, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x18, 0xee, 0x99, 0x85, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6e, 0x74, 0x70, 0x2d, 0x61, 0x75, 0x74,
	0x68, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x74, 0x70, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x6a, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xaa, 0x93, 0xa4, 0x4b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x8c, 0x01, 0x0a,
	0x12, 0x6e, 0x74, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x88, 0x9e, 0x81, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6e, 0x74, 0x70, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xf2, 0x0b, 0x0a, 0x07,
	0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x07, 0x6e, 0x74, 0x70, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0xe4, 0xd5, 0xae, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x4e, 0x74,
	0x70, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x42,
	0x3a, 0x82, 0x41, 0x37, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b,
	0x65, 0x79, 0x73, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x6e, 0x74, 0x70,
	0x4b, 0x65, 0x79, 0x1a, 0x89, 0x09, 0x0a, 0x06, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x12, 0xa3,
	0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x89, 0xa0, 0x9b, 0x37, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x4e, 0x74, 0x70, 0x2e, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x4e, 0x74, 0x70, 0x4b,
	0x65, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e, 0x74,
	0x70, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xa0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xde,
	0xf0, 0xe8, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79,
	0x73, 0x2e, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x40,
	0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65,
	0x79, 0x73, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x9b, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x78, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0xb5, 0xe2, 0x86,
	0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f,
	0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6b,
	0x65, 0x79, 0x2d, 0x69, 0x64, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x91, 0x01, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xc6, 0xe1, 0xac, 0x2a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4e, 0x54, 0x50, 0x41, 0x55, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x42, 0x4a, 0x82, 0x41, 0x47,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f,
	0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6b,
	0x65, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x82, 0x01, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x89,
	0xfb, 0xaf, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b,
	0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65,
	0x79, 0x73, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x97, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x76, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0xbc, 0xcb, 0xc7, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e,
	0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e, 0x74, 0x70, 0x2d,
	0x6b, 0x65, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x69, 0x64,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x91, 0x01, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x93, 0x98, 0xa8, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x54, 0x50, 0x41,
	0x55, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e,
	0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e, 0x74, 0x70, 0x2d,
	0x6b, 0x65, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x09,
	0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xfa, 0xbb, 0x9a, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e, 0x74,
	0x70, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xbe, 0x01, 0x0a, 0x09, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x58, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x41, 0x82,
	0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79,
	0x73, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x69, 0x64,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x07, 0x6e, 0x74, 0x70, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79,
	0x73, 0x2e, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x6e, 0x74, 0x70, 0x4b, 0x65, 0x79,
	0x1a, 0xc4, 0x19, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x97, 0x01, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x80, 0xf2, 0xec, 0xf8, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e,
	0x74, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0xdc, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0xa2, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf5, 0x9c, 0xbf,
	0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3f, 0x82,
	0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9d, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xea, 0xf2, 0xf0, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xbe, 0x07, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x7b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa0, 0xb1, 0xfa,
	0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41,
	0x44, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xd5,
	0x01, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0xf2, 0xd4, 0xc6, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x77, 0x0a, 0x06, 0x69, 0x62, 0x75, 0x72, 0x73, 0x74,
	0x18, 0xa5, 0xee, 0x8f, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x69, 0x62, 0x75, 0x72, 0x73, 0x74, 0x52, 0x06, 0x69, 0x62, 0x75, 0x72, 0x73, 0x74, 0x12,
	0x71, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xf9, 0x81, 0x93, 0xcd, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74,
	0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x77, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x18, 0xaa, 0xc0, 0xb3,
	0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x12, 0x7a, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x84, 0xbd, 0x9f, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x16, 0x41, 0x53,
	0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x10, 0x00, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x12, 0x21, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x50, 0x45, 0x45, 0x52, 0x12, 0x21, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x50, 0x4f, 0x4f, 0x4c, 0x1a, 0xcb, 0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x7b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xcb, 0xe6, 0xf9,
	0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82,
	0x41, 0x43, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xd3,
	0x01, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0xa3, 0xee, 0x9e, 0x70, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x76, 0x0a, 0x06, 0x69, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0xd4,
	0xf4, 0xe5, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82,
	0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x62,
	0x75, 0x72, 0x73, 0x74, 0x52, 0x06, 0x69, 0x62, 0x75, 0x72, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0xb0, 0xa6, 0x98, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xe0, 0x89, 0xfa, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x70, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xf4, 0xfd, 0xb2, 0xf1, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e,
	0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x75, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x18, 0xb3, 0x9b, 0x93,
	0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xc3, 0xf3, 0x87, 0x4c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74,
	0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x90, 0x01, 0x0a,
	0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x90, 0xbe, 0xb3, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x79, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x18, 0xe3, 0x93, 0xb2, 0xae, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75,
	0x6d, 0x52, 0x07, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x79, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xaf, 0xd2, 0xea, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x16, 0x41, 0x53, 0x53, 0x4f,
	0x43, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x10, 0x00, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x12,
	0x21, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x50, 0x45,
	0x45, 0x52, 0x12, 0x21, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x1a, 0x07, 0x82, 0x41,
	0x04, 0x50, 0x4f, 0x4f, 0x4c, 0x1a, 0xbf, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x5a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x56, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0xff, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x7b, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0xd3, 0xbf, 0xc6, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x80,
	0x01, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x74, 0x70, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x83, 0xa6, 0xac, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6e, 0x74, 0x70, 0x2d, 0x61, 0x75,
	0x74, 0x68, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x74, 0x70, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x69, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc7, 0xbb, 0x9f,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x8a, 0x01, 0x0a,
	0x12, 0x6e, 0x74, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0xff, 0xbf, 0xdd, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6e, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xbb, 0x0d, 0x0a, 0x09, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0xac, 0xb5, 0x8f, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x37,
	0x82, 0x41, 0x34, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x1a, 0xdd, 0x0a, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x9c, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x96, 0xb8, 0xec, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb2, 0x09, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x71, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0xc6, 0xab,
	0xc3, 0x84, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42,
	0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x72,
	0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x10, 0x63, 0x70, 0x75,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0xb3, 0xaa,
	0xd2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x70, 0x75, 0x2d, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x63, 0x70, 0x75,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x8a, 0x01, 0x0a, 0x0e,
	0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x89,
	0x87, 0xfb, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41,
	0x49, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x70, 0x75, 0x2d,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x63, 0x70, 0x75,
	0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x92, 0xb0, 0xe9,
	0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x70, 0x75, 0x2d, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0xe2, 0xbe, 0xe4, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x83, 0x83, 0xc3, 0xa6, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xfc, 0xe3, 0x85, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x6c, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0xe0, 0xcd, 0xf2, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x69, 0x64, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x80, 0x01,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xf3, 0xe6, 0xee,
	0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0xb4, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12,
	0x4d, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3b, 0x82, 0x41,
	0x38, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x70, 0x69, 0x64, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x57,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x80, 0x0f, 0x0a, 0x09, 0x53, 0x73, 0x68, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x90, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x8a, 0xe5, 0x9c, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73,
	0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8d, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xa7, 0xea, 0xf3, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x73, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa9, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x6e, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xc4, 0x92,
	0xe8, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xf6, 0xd5, 0xa9, 0xcd, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x53, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x0a, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x95, 0xc6, 0xb5, 0x40, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73,
	0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x09, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xd1, 0xd3, 0xf0, 0x76, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x73,
	0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x71, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x9a, 0xbb, 0xf7, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x74,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x32, 0x10, 0x00, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x56, 0x32,
	0x12, 0x1d, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x31, 0x10, 0x02, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x56, 0x31, 0x12,
	0x23, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x56, 0x31, 0x5f, 0x56, 0x32, 0x10, 0x03, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x56,
	0x31, 0x5f, 0x56, 0x32, 0x1a, 0xa3, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6d,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xcf, 0xb5, 0xe2, 0x7d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x73,
	0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xc2, 0x01,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0xc9, 0xa2, 0xb5, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0xea, 0xa8, 0xad, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x82, 0x01,
	0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0xa4, 0xdb, 0xbd, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44,
	0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x70, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x93, 0xb0,
	0xa2, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x74, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x32, 0x10, 0x00, 0x1a,
	0x05, 0x82, 0x41, 0x02, 0x56, 0x32, 0x12, 0x1d, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x31, 0x10, 0x02, 0x1a, 0x05,
	0x82, 0x41, 0x02, 0x56, 0x31, 0x12, 0x23, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x31, 0x5f, 0x56, 0x32, 0x10, 0x03,
	0x1a, 0x08, 0x82, 0x41, 0x05, 0x56, 0x31, 0x5f, 0x56, 0x32, 0x1a, 0xc7, 0x05, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0xd5, 0xa9, 0xd3, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x6f,
	0x6f, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc2, 0xd6, 0xef, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x73, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0xaf, 0xf5, 0xc0, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0a,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xaa, 0xaa, 0x9c, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x76, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0xeb, 0xe6, 0xa6, 0xd9, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2d, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x73, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0xdc,
	0xa1, 0xe7, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x74,
	0x64, 0x2d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x64, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x1a, 0xb2, 0x0a, 0x0a, 0x0c, 0x54, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x97, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xd6, 0xa3, 0x9f, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3a, 0x82, 0x41, 0x37,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x93, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x83, 0xff, 0xe8, 0xb9, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x54, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65,
	0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xfa, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x71, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xe0, 0xeb, 0xd8, 0x34, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x7d, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x81, 0x9a, 0x90, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x8d, 0x8a, 0xc3, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65,
	0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x75, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xce, 0xc6, 0xe6, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c,
	0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x1a, 0xf4, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x70, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xab, 0x82, 0x8c, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e,
	0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x7b,
	0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xd6, 0xeb, 0xba,
	0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xb0, 0xdb,
	0xab, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41,
	0x44, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x74, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xd7,
	0xe4, 0xd9, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82,
	0x41, 0x3e, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x9e, 0x01, 0x0a, 0x0e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0x82, 0x41, 0x24, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x47, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_access_points_proto_rawDescOnce sync.Once
	file_openconfig_access_points_proto_rawDescData = file_openconfig_access_points_proto_rawDesc
)

func file_openconfig_access_points_proto_rawDescGZIP() []byte {
	file_openconfig_access_points_proto_rawDescOnce.Do(func() {
		file_openconfig_access_points_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_access_points_proto_rawDescData)
	})
	return file_openconfig_access_points_proto_rawDescData
}

var file_openconfig_access_points_proto_enumTypes = make([]protoimpl.EnumInfo, 34)
var file_openconfig_access_points_proto_msgTypes = make([]protoimpl.MessageInfo, 332)
var file_openconfig_access_points_proto_goTypes = []interface{}{
	(AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status)(0),       // 0: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.State.Status
	(AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config_DuplexMode)(0),                                             // 1: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Config.DuplexMode
	(AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_HostMode)(0),                                         // 2: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.Config.HostMode
	(AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_HostMode)(0),                                          // 3: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.State.HostMode
	(AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_DuplexMode)(0),                                              // 4: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.DuplexMode
	(AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode)(0),                                    // 5: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.NegotiatedDuplexMode
	(AccessPoints_AccessPoint_Interfaces_Interface_State_AdminStatus)(0),                                                      // 6: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.AdminStatus
	(AccessPoints_AccessPoint_Interfaces_Interface_State_OperStatus)(0),                                                       // 7: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.OperStatus
	(AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode)(0),                   // 8: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.Config.Mode
	(AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode)(0),                    // 9: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.State.Mode
	(AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status)(0),         // 10: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State.Status
	(AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState)(0), // 11: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State.NeighborState
	(AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus)(0),                           // 12: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.AdminStatus
	(AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus)(0),                            // 13: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.OperStatus
	(AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode)(0),                                       // 14: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.Config.Mode
	(AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode)(0),                                        // 15: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.State.Mode
	(AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status)(0),                             // 16: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State.Status
	(AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState)(0),                     // 17: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State.NeighborState
	(AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode)(0),                                                // 18: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.Neighbor.State.Opmode
	(AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode)(0),                                     // 19: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientRf.State.ConnectionMode
	(AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode)(0),                                                                    // 20: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.Opmode
	(AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod)(0),                                                       // 21: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.Config.Dot11RMethod
	(AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State_Dot11RMethod)(0),                                                        // 22: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.State.Dot11RMethod
	(AccessPoints_AccessPoint_Ssids_Ssid_State_Opmode)(0),                                                                     // 23: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.Opmode
	(AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record)(0),                                            // 24: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event.Config.Record
	(AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State_Record)(0),                                             // 25: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event.State.Record
	(AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index)(0),                                                                 // 26: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Index
	(AccessPoints_AccessPoint_System_Cpus_CpuKey_Index)(0),                                                                    // 27: openconfig.AccessPoints.AccessPoint.System.Cpus.CpuKey.Index
	(AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddresses)(0),                                                    // 28: openconfig.AccessPoints.AccessPoint.System.GrpcServer.Config.ListenAddresses
	(AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddresses)(0),                                                     // 29: openconfig.AccessPoints.AccessPoint.System.GrpcServer.State.ListenAddresses
	(AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType)(0),                                            // 30: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.Config.AssociationType
	(AccessPoints_AccessPoint_System_Ntp_Servers_Server_State_AssociationType)(0),                                             // 31: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State.AssociationType
	(AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion)(0),                                                     // 32: openconfig.AccessPoints.AccessPoint.System.SshServer.Config.ProtocolVersion
	(AccessPoints_AccessPoint_System_SshServer_State_ProtocolVersion)(0),                                                      // 33: openconfig.AccessPoints.AccessPoint.System.SshServer.State.ProtocolVersion
	(*AccessPoints)(nil),                                                                                             // 34: openconfig.AccessPoints
	(*AccessPoints_AccessPoint)(nil),                                                                                 // 35: openconfig.AccessPoints.AccessPoint
	(*AccessPoints_AccessPointKey)(nil),                                                                              // 36: openconfig.AccessPoints.AccessPointKey
	(*AccessPoints_AccessPoint_AssignedApManagers)(nil),                                                              // 37: openconfig.AccessPoints.AccessPoint.AssignedApManagers
	(*AccessPoints_AccessPoint_Config)(nil),                                                                          // 38: openconfig.AccessPoints.AccessPoint.Config
	(*AccessPoints_AccessPoint_Interfaces)(nil),                                                                      // 39: openconfig.AccessPoints.AccessPoint.Interfaces
	(*AccessPoints_AccessPoint_Radios)(nil),                                                                          // 40: openconfig.AccessPoints.AccessPoint.Radios
	(*AccessPoints_AccessPoint_Ssids)(nil),                                                                           // 41: openconfig.AccessPoints.AccessPoint.Ssids
	(*AccessPoints_AccessPoint_System)(nil),                                                                          // 42: openconfig.AccessPoints.AccessPoint.System
	(*AccessPoints_AccessPoint_AssignedApManagers_ApManager)(nil),                                                    // 43: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager
	(*AccessPoints_AccessPoint_AssignedApManagers_ApManagerKey)(nil),                                                 // 44: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManagerKey
	(*AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config)(nil),                                             // 45: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.Config
	(*AccessPoints_AccessPoint_AssignedApManagers_ApManager_State)(nil),                                              // 46: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.State
	(*AccessPoints_AccessPoint_Interfaces_Interface)(nil),                                                            // 47: openconfig.AccessPoints.AccessPoint.Interfaces.Interface
	(*AccessPoints_AccessPoint_Interfaces_InterfaceKey)(nil),                                                         // 48: openconfig.AccessPoints.AccessPoint.Interfaces.InterfaceKey
	(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation)(nil),                                                // 49: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation
	(*AccessPoints_AccessPoint_Interfaces_Interface_Config)(nil),                                                     // 50: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet)(nil),                                                   // 51: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet
	(*AccessPoints_AccessPoint_Interfaces_Interface_State)(nil),                                                      // 52: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces)(nil),                                              // 53: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel)(nil),                                                     // 54: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel
	(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_Config)(nil),                                         // 55: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State)(nil),                                          // 56: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan)(nil),                                   // 57: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan
	(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config)(nil),                            // 58: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State)(nil),                             // 59: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion)(nil),            // 60: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.Config.TrunkVlansUnion
	(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion)(nil),             // 61: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.State.TrunkVlansUnion
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions)(nil),                             // 62: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config)(nil),                                            // 63: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X)(nil),                                             // 64: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe)(nil),                                               // 65: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Poe
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State)(nil),                                             // 66: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan)(nil),                                      // 67: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession)(nil),        // 68: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey)(nil),     // 69: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSessionKey
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State)(nil),  // 70: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config)(nil),                                      // 71: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State)(nil),                                       // 72: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_Config)(nil),                                        // 73: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Poe.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State)(nil),                                         // 74: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Poe.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters)(nil),                                    // 75: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.Counters
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config)(nil),                               // 76: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap)(nil),                         // 77: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State)(nil),                                // 78: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion)(nil),               // 79: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Config.TrunkVlansUnion
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName)(nil),                // 80: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey)(nil),             // 81: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanNameKey
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config)(nil),         // 82: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State)(nil),          // 83: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion)(nil),                // 84: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.State.TrunkVlansUnion
	(*AccessPoints_AccessPoint_Interfaces_Interface_State_Counters)(nil),                                             // 85: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface)(nil),                                 // 86: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_SubinterfaceKey)(nil),                              // 87: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.SubinterfaceKey
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config)(nil),                          // 88: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4)(nil),                            // 89: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6)(nil),                            // 90: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State)(nil),                           // 91: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses)(nil),                  // 92: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config)(nil),                     // 93: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors)(nil),                  // 94: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp)(nil),                   // 95: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State)(nil),                      // 96: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address)(nil),          // 97: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey)(nil),       // 98: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.AddressKey
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config)(nil),   // 99: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State)(nil),    // 100: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor)(nil),         // 101: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey)(nil),      // 102: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.NeighborKey
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config)(nil),  // 103: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State)(nil),   // 104: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config)(nil),            // 105: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State)(nil),             // 106: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters)(nil),             // 107: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses)(nil),                  // 108: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config)(nil),                     // 109: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors)(nil),                  // 110: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement)(nil),        // 111: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State)(nil),                      // 112: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address)(nil),          // 113: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey)(nil),       // 114: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.AddressKey
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config)(nil),   // 115: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State)(nil),    // 116: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor)(nil),         // 117: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey)(nil),      // 118: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.NeighborKey
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config)(nil),  // 119: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State)(nil),   // 120: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config)(nil), // 121: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State)(nil),  // 122: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters)(nil),             // 123: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters
	(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters)(nil),                  // 124: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config)(nil),                                              // 125: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4)(nil),                                                // 126: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6)(nil),                                                // 127: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State)(nil),                                               // 128: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses)(nil),                                      // 129: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config)(nil),                                         // 130: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors)(nil),                                      // 131: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp)(nil),                                       // 132: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.ProxyArp
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State)(nil),                                          // 133: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address)(nil),                              // 134: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey)(nil),                           // 135: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.AddressKey
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config)(nil),                       // 136: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State)(nil),                        // 137: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor)(nil),                             // 138: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey)(nil),                          // 139: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.NeighborKey
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config)(nil),                      // 140: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State)(nil),                       // 141: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config)(nil),                                // 142: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State)(nil),                                 // 143: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters)(nil),                                 // 144: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.Counters
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses)(nil),                                      // 145: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config)(nil),                                         // 146: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors)(nil),                                      // 147: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement)(nil),                            // 148: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State)(nil),                                          // 149: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address)(nil),                              // 150: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey)(nil),                           // 151: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.AddressKey
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config)(nil),                       // 152: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State)(nil),                        // 153: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor)(nil),                             // 154: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey)(nil),                          // 155: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.NeighborKey
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config)(nil),                      // 156: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State)(nil),                       // 157: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config)(nil),                     // 158: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.Config
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State)(nil),                      // 159: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.State
	(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters)(nil),                                 // 160: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.Counters
	(*AccessPoints_AccessPoint_Radios_Radio)(nil),                                                                    // 161: openconfig.AccessPoints.AccessPoint.Radios.Radio
	(*AccessPoints_AccessPoint_Radios_RadioKey)(nil),                                                                 // 162: openconfig.AccessPoints.AccessPoint.Radios.RadioKey
	(*AccessPoints_AccessPoint_Radios_Radio_Config)(nil),                                                             // 163: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config
	(*AccessPoints_AccessPoint_Radios_Radio_Neighbors)(nil),                                                          // 164: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors
	(*AccessPoints_AccessPoint_Radios_Radio_State)(nil),                                                              // 165: openconfig.AccessPoints.AccessPoint.Radios.Radio.State
	(*AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor)(nil),                                                 // 166: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.Neighbor
	(*AccessPoints_AccessPoint_Radios_Radio_Neighbors_NeighborKey)(nil),                                              // 167: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.NeighborKey
	(*AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State)(nil),                                           // 168: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.Neighbor.State
	(*AccessPoints_AccessPoint_Radios_Radio_State_Counters)(nil),                                                     // 169: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.Counters
	(*AccessPoints_AccessPoint_Ssids_Ssid)(nil),                                                                      // 170: openconfig.AccessPoints.AccessPoint.Ssids.Ssid
	(*AccessPoints_AccessPoint_Ssids_SsidKey)(nil),                                                                   // 171: openconfig.AccessPoints.AccessPoint.Ssids.SsidKey
	(*AccessPoints_AccessPoint_Ssids_Ssid_BandSteering)(nil),                                                         // 172: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.BandSteering
	(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids)(nil),                                                               // 173: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids
	(*AccessPoints_AccessPoint_Ssids_Ssid_Clients)(nil),                                                              // 174: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients
	(*AccessPoints_AccessPoint_Ssids_Ssid_Config)(nil),                                                               // 175: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config
	(*AccessPoints_AccessPoint_Ssids_Ssid_Dot11R)(nil),                                                               // 176: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R
	(*AccessPoints_AccessPoint_Ssids_Ssid_Dot11V)(nil),                                                               // 177: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V
	(*AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers)(nil),                                                          // 178: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot1XTimers
	(*AccessPoints_AccessPoint_Ssids_Ssid_State)(nil),                                                                // 179: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State
	(*AccessPoints_AccessPoint_Ssids_Ssid_Wmm)(nil),                                                                  // 180: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm
	(*AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config)(nil),                                                  // 181: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.BandSteering.Config
	(*AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State)(nil),                                                   // 182: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.BandSteering.State
	(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid)(nil),                                                         // 183: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid
	(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey)(nil),                                                      // 184: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.BssidKey
	(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State)(nil),                                                   // 185: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State
	(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters)(nil),                                          // 186: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters
	(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist)(nil),                               // 187: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist
	(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm)(nil),                                // 188: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataWmm
	(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs)(nil),                                    // 189: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs
	(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist)(nil),                               // 190: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist
	(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm)(nil),                                // 191: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataWmm
	(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs)(nil),                                    // 192: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs
	(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client)(nil),                                                       // 193: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client
	(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_ClientKey)(nil),                                                    // 194: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.ClientKey
	(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities)(nil),                                    // 195: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientCapabilities
	(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection)(nil),                                      // 196: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientConnection
	(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf)(nil),                                              // 197: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientRf
	(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors)(nil),                                       // 198: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.Dot11KNeighbors
	(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State)(nil),                                                 // 199: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.State
	(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State)(nil),                              // 200: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientCapabilities.State
	(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State)(nil),                                // 201: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientConnection.State
	(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State)(nil),                                        // 202: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientRf.State
	(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State)(nil),                                 // 203: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State
	(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters)(nil),                                        // 204: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.State.Counters
	(*AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config)(nil),                                                        // 205: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.Config
	(*AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State)(nil),                                                         // 206: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.State
	(*AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config)(nil),                                                        // 207: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V.Config
	(*AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State)(nil),                                                         // 208: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V.State
	(*AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config)(nil),                                                   // 209: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot1XTimers.Config
	(*AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State)(nil),                                                    // 210: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot1XTimers.State
	(*AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config)(nil),                                                           // 211: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.Config
	(*AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State)(nil),                                                            // 212: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.State
	(*AccessPoints_AccessPoint_System_Aaa)(nil),                                                                      // 213: openconfig.AccessPoints.AccessPoint.System.Aaa
	(*AccessPoints_AccessPoint_System_Alarms)(nil),                                                                   // 214: openconfig.AccessPoints.AccessPoint.System.Alarms
	(*AccessPoints_AccessPoint_System_Clock)(nil),                                                                    // 215: openconfig.AccessPoints.AccessPoint.System.Clock
	(*AccessPoints_AccessPoint_System_Config)(nil),                                                                   // 216: openconfig.AccessPoints.AccessPoint.System.Config
	(*AccessPoints_AccessPoint_System_Cpus)(nil),                                                                     // 217: openconfig.AccessPoints.AccessPoint.System.Cpus
	(*AccessPoints_AccessPoint_System_Dns)(nil),                                                                      // 218: openconfig.AccessPoints.AccessPoint.System.Dns
	(*AccessPoints_AccessPoint_System_GrpcServer)(nil),                                                               // 219: openconfig.AccessPoints.AccessPoint.System.GrpcServer
	(*AccessPoints_AccessPoint_System_License)(nil),                                                                  // 220: openconfig.AccessPoints.AccessPoint.System.License
	(*AccessPoints_AccessPoint_System_Logging)(nil),                                                                  // 221: openconfig.AccessPoints.AccessPoint.System.Logging
	(*AccessPoints_AccessPoint_System_Memory)(nil),                                                                   // 222: openconfig.AccessPoints.AccessPoint.System.Memory
	(*AccessPoints_AccessPoint_System_Messages)(nil),                                                                 // 223: openconfig.AccessPoints.AccessPoint.System.Messages
	(*AccessPoints_AccessPoint_System_Ntp)(nil),                                                                      // 224: openconfig.AccessPoints.AccessPoint.System.Ntp
	(*AccessPoints_AccessPoint_System_Processes)(nil),                                                                // 225: openconfig.AccessPoints.AccessPoint.System.Processes
	(*AccessPoints_AccessPoint_System_SshServer)(nil),                                                                // 226: openconfig.AccessPoints.AccessPoint.System.SshServer
	(*AccessPoints_AccessPoint_System_State)(nil),                                                                    // 227: openconfig.AccessPoints.AccessPoint.System.State
	(*AccessPoints_AccessPoint_System_TelnetServer)(nil),                                                             // 228: openconfig.AccessPoints.AccessPoint.System.TelnetServer
	(*AccessPoints_AccessPoint_System_Aaa_Accounting)(nil),                                                           // 229: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting
	(*AccessPoints_AccessPoint_System_Aaa_Authentication)(nil),                                                       // 230: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication
	(*AccessPoints_AccessPoint_System_Aaa_Authorization)(nil),                                                        // 231: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization
	(*AccessPoints_AccessPoint_System_Aaa_Config)(nil),                                                               // 232: openconfig.AccessPoints.AccessPoint.System.Aaa.Config
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups)(nil),                                                         // 233: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups
	(*AccessPoints_AccessPoint_System_Aaa_State)(nil),                                                                // 234: openconfig.AccessPoints.AccessPoint.System.Aaa.State
	(*AccessPoints_AccessPoint_System_Aaa_Accounting_Config)(nil),                                                    // 235: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Config
	(*AccessPoints_AccessPoint_System_Aaa_Accounting_Events)(nil),                                                    // 236: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events
	(*AccessPoints_AccessPoint_System_Aaa_Accounting_State)(nil),                                                     // 237: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.State
	(*AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethodUnion)(nil),                              // 238: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Config.AccountingMethodUnion
	(*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event)(nil),                                              // 239: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event
	(*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_EventKey)(nil),                                           // 240: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.EventKey
	(*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config)(nil),                                       // 241: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event.Config
	(*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State)(nil),                                        // 242: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event.State
	(*AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethodUnion)(nil),                               // 243: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.State.AccountingMethodUnion
	(*AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser)(nil),                                             // 244: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.AdminUser
	(*AccessPoints_AccessPoint_System_Aaa_Authentication_Config)(nil),                                                // 245: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Config
	(*AccessPoints_AccessPoint_System_Aaa_Authentication_State)(nil),                                                 // 246: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.State
	(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users)(nil),                                                 // 247: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users
	(*AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config)(nil),                                      // 248: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.AdminUser.Config
	(*AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State)(nil),                                       // 249: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.AdminUser.State
	(*AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethodUnion)(nil),                      // 250: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Config.AuthenticationMethodUnion
	(*AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethodUnion)(nil),                       // 251: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.State.AuthenticationMethodUnion
	(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User)(nil),                                            // 252: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User
	(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_UserKey)(nil),                                         // 253: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.UserKey
	(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config)(nil),                                     // 254: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.Config
	(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State)(nil),                                      // 255: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.State
	(*AccessPoints_AccessPoint_System_Aaa_Authorization_Config)(nil),                                                 // 256: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Config
	(*AccessPoints_AccessPoint_System_Aaa_Authorization_Events)(nil),                                                 // 257: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events
	(*AccessPoints_AccessPoint_System_Aaa_Authorization_State)(nil),                                                  // 258: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.State
	(*AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethodUnion)(nil),                        // 259: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Config.AuthorizationMethodUnion
	(*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event)(nil),                                           // 260: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.Event
	(*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_EventKey)(nil),                                        // 261: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.EventKey
	(*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config)(nil),                                    // 262: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.Event.Config
	(*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State)(nil),                                     // 263: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.Event.State
	(*AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethodUnion)(nil),                         // 264: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.State.AuthorizationMethodUnion
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup)(nil),                                             // 265: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroupKey)(nil),                                          // 266: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroupKey
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config)(nil),                                      // 267: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Config
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers)(nil),                                     // 268: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State)(nil),                                       // 269: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.State
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server)(nil),                              // 270: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey)(nil),                           // 271: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.ServerKey
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config)(nil),                       // 272: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Config
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius)(nil),                       // 273: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State)(nil),                        // 274: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs)(nil),                       // 275: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config)(nil),                // 276: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.Config
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State)(nil),                 // 277: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters)(nil),        // 278: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.Counters
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config)(nil),                // 279: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.Config
	(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State)(nil),                 // 280: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.State
	(*AccessPoints_AccessPoint_System_Alarms_Alarm)(nil),                                                             // 281: openconfig.AccessPoints.AccessPoint.System.Alarms.Alarm
	(*AccessPoints_AccessPoint_System_Alarms_AlarmKey)(nil),                                                          // 282: openconfig.AccessPoints.AccessPoint.System.Alarms.AlarmKey
	(*AccessPoints_AccessPoint_System_Alarms_Alarm_Config)(nil),                                                      // 283: openconfig.AccessPoints.AccessPoint.System.Alarms.Alarm.Config
	(*AccessPoints_AccessPoint_System_Alarms_Alarm_State)(nil),                                                       // 284: openconfig.AccessPoints.AccessPoint.System.Alarms.Alarm.State
	(*AccessPoints_AccessPoint_System_Clock_Config)(nil),                                                             // 285: openconfig.AccessPoints.AccessPoint.System.Clock.Config
	(*AccessPoints_AccessPoint_System_Clock_State)(nil),                                                              // 286: openconfig.AccessPoints.AccessPoint.System.Clock.State
	(*AccessPoints_AccessPoint_System_Cpus_Cpu)(nil),                                                                 // 287: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu
	(*AccessPoints_AccessPoint_System_Cpus_CpuKey)(nil),                                                              // 288: openconfig.AccessPoints.AccessPoint.System.Cpus.CpuKey
	(*AccessPoints_AccessPoint_System_Cpus_Cpu_State)(nil),                                                           // 289: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State
	(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt)(nil),                                         // 290: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.HardwareInterrupt
	(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle)(nil),                                                      // 291: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Idle
	(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel)(nil),                                                    // 292: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Kernel
	(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice)(nil),                                                      // 293: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Nice
	(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt)(nil),                                         // 294: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.SoftwareInterrupt
	(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total)(nil),                                                     // 295: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Total
	(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_User)(nil),                                                      // 296: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.User
	(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait)(nil),                                                      // 297: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Wait
	(*AccessPoints_AccessPoint_System_Dns_Config)(nil),                                                               // 298: openconfig.AccessPoints.AccessPoint.System.Dns.Config
	(*AccessPoints_AccessPoint_System_Dns_HostEntries)(nil),                                                          // 299: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries
	(*AccessPoints_AccessPoint_System_Dns_Servers)(nil),                                                              // 300: openconfig.AccessPoints.AccessPoint.System.Dns.Servers
	(*AccessPoints_AccessPoint_System_Dns_State)(nil),                                                                // 301: openconfig.AccessPoints.AccessPoint.System.Dns.State
	(*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry)(nil),                                                // 302: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry
	(*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntryKey)(nil),                                             // 303: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntryKey
	(*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config)(nil),                                         // 304: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry.Config
	(*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State)(nil),                                          // 305: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry.State
	(*AccessPoints_AccessPoint_System_Dns_Servers_Server)(nil),                                                       // 306: openconfig.AccessPoints.AccessPoint.System.Dns.Servers.Server
	(*AccessPoints_AccessPoint_System_Dns_Servers_ServerKey)(nil),                                                    // 307: openconfig.AccessPoints.AccessPoint.System.Dns.Servers.ServerKey
	(*AccessPoints_AccessPoint_System_Dns_Servers_Server_Config)(nil),                                                // 308: openconfig.AccessPoints.AccessPoint.System.Dns.Servers.Server.Config
	(*AccessPoints_AccessPoint_System_Dns_Servers_Server_State)(nil),                                                 // 309: openconfig.AccessPoints.AccessPoint.System.Dns.Servers.Server.State
	(*AccessPoints_AccessPoint_System_GrpcServer_Config)(nil),                                                        // 310: openconfig.AccessPoints.AccessPoint.System.GrpcServer.Config
	(*AccessPoints_AccessPoint_System_GrpcServer_State)(nil),                                                         // 311: openconfig.AccessPoints.AccessPoint.System.GrpcServer.State
	(*AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddressesUnion)(nil),                                   // 312: openconfig.AccessPoints.AccessPoint.System.GrpcServer.Config.ListenAddressesUnion
	(*AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddressesUnion)(nil),                                    // 313: openconfig.AccessPoints.AccessPoint.System.GrpcServer.State.ListenAddressesUnion
	(*AccessPoints_AccessPoint_System_License_Licenses)(nil),                                                         // 314: openconfig.AccessPoints.AccessPoint.System.License.Licenses
	(*AccessPoints_AccessPoint_System_License_Licenses_License)(nil),                                                 // 315: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License
	(*AccessPoints_AccessPoint_System_License_Licenses_LicenseKey)(nil),                                              // 316: openconfig.AccessPoints.AccessPoint.System.License.Licenses.LicenseKey
	(*AccessPoints_AccessPoint_System_License_Licenses_License_Config)(nil),                                          // 317: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.Config
	(*AccessPoints_AccessPoint_System_License_Licenses_License_State)(nil),                                           // 318: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.State
	(*AccessPoints_AccessPoint_System_Logging_Console)(nil),                                                          // 319: openconfig.AccessPoints.AccessPoint.System.Logging.Console
	(*AccessPoints_AccessPoint_System_Logging_RemoteServers)(nil),                                                    // 320: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers
	(*AccessPoints_AccessPoint_System_Logging_Console_Config)(nil),                                                   // 321: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Config
	(*AccessPoints_AccessPoint_System_Logging_Console_Selectors)(nil),                                                // 322: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors
	(*AccessPoints_AccessPoint_System_Logging_Console_State)(nil),                                                    // 323: openconfig.AccessPoints.AccessPoint.System.Logging.Console.State
	(*AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector)(nil),                                       // 324: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.Selector
	(*AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey)(nil),                                    // 325: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.SelectorKey
	(*AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config)(nil),                                // 326: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.Selector.Config
	(*AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State)(nil),                                 // 327: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.Selector.State
	(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer)(nil),                                       // 328: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer
	(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServerKey)(nil),                                    // 329: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServerKey
	(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config)(nil),                                // 330: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Config
	(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors)(nil),                             // 331: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors
	(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State)(nil),                                 // 332: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.State
	(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector)(nil),                    // 333: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.Selector
	(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey)(nil),                 // 334: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.SelectorKey
	(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config)(nil),             // 335: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.Config
	(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State)(nil),              // 336: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.State
	(*AccessPoints_AccessPoint_System_Memory_Config)(nil),                                                            // 337: openconfig.AccessPoints.AccessPoint.System.Memory.Config
	(*AccessPoints_AccessPoint_System_Memory_State)(nil),                                                             // 338: openconfig.AccessPoints.AccessPoint.System.Memory.State
	(*AccessPoints_AccessPoint_System_Messages_Config)(nil),                                                          // 339: openconfig.AccessPoints.AccessPoint.System.Messages.Config
	(*AccessPoints_AccessPoint_System_Messages_DebugEntries)(nil),                                                    // 340: openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries
	(*AccessPoints_AccessPoint_System_Messages_State)(nil),                                                           // 341: openconfig.AccessPoints.AccessPoint.System.Messages.State
	(*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService)(nil),                                       // 342: openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugService
	(*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugServiceKey)(nil),                                    // 343: openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugServiceKey
	(*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config)(nil),                                // 344: openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugService.Config
	(*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State)(nil),                                 // 345: openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugService.State
	(*AccessPoints_AccessPoint_System_Messages_State_Message)(nil),                                                   // 346: openconfig.AccessPoints.AccessPoint.System.Messages.State.Message
	(*AccessPoints_AccessPoint_System_Ntp_Config)(nil),                                                               // 347: openconfig.AccessPoints.AccessPoint.System.Ntp.Config
	(*AccessPoints_AccessPoint_System_Ntp_NtpKeys)(nil),                                                              // 348: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys
	(*AccessPoints_AccessPoint_System_Ntp_Servers)(nil),                                                              // 349: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers
	(*AccessPoints_AccessPoint_System_Ntp_State)(nil),                                                                // 350: openconfig.AccessPoints.AccessPoint.System.Ntp.State
	(*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey)(nil),                                                       // 351: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKey
	(*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKeyKey)(nil),                                                    // 352: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKeyKey
	(*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config)(nil),                                                // 353: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKey.Config
	(*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State)(nil),                                                 // 354: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKey.State
	(*AccessPoints_AccessPoint_System_Ntp_Servers_Server)(nil),                                                       // 355: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server
	(*AccessPoints_AccessPoint_System_Ntp_Servers_ServerKey)(nil),                                                    // 356: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.ServerKey
	(*AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config)(nil),                                                // 357: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.Config
	(*AccessPoints_AccessPoint_System_Ntp_Servers_Server_State)(nil),                                                 // 358: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State
	(*AccessPoints_AccessPoint_System_Processes_Process)(nil),                                                        // 359: openconfig.AccessPoints.AccessPoint.System.Processes.Process
	(*AccessPoints_AccessPoint_System_Processes_ProcessKey)(nil),                                                     // 360: openconfig.AccessPoints.AccessPoint.System.Processes.ProcessKey
	(*AccessPoints_AccessPoint_System_Processes_Process_State)(nil),                                                  // 361: openconfig.AccessPoints.AccessPoint.System.Processes.Process.State
	(*AccessPoints_AccessPoint_System_SshServer_Config)(nil),                                                         // 362: openconfig.AccessPoints.AccessPoint.System.SshServer.Config
	(*AccessPoints_AccessPoint_System_SshServer_State)(nil),                                                          // 363: openconfig.AccessPoints.AccessPoint.System.SshServer.State
	(*AccessPoints_AccessPoint_System_TelnetServer_Config)(nil),                                                      // 364: openconfig.AccessPoints.AccessPoint.System.TelnetServer.Config
	(*AccessPoints_AccessPoint_System_TelnetServer_State)(nil),                                                       // 365: openconfig.AccessPoints.AccessPoint.System.TelnetServer.State
	(*ywrapper.StringValue)(nil),                                                                                     // 366: ywrapper.StringValue
	(*ywrapper.BoolValue)(nil),                                                                                       // 367: ywrapper.BoolValue
	(*ywrapper.UintValue)(nil),                                                                                       // 368: ywrapper.UintValue
	(IETFInterfacesInterfaceType)(0),                                                                                 // 369: openconfig.IETFInterfacesInterfaceType
	(OpenconfigIfAggregateAggregationType)(0),                                                                        // 370: openconfig.OpenconfigIfAggregateAggregationType
	(OpenconfigVlanVlanModeType)(0),                                                                                  // 371: openconfig.OpenconfigVlanVlanModeType
	(OpenconfigIfEthernetETHERNETSPEED)(0),                                                                           // 372: openconfig.OpenconfigIfEthernetETHERNETSPEED
	(*ywrapper.Decimal64Value)(nil),                                                                                  // 373: ywrapper.Decimal64Value
	(OpenconfigIfIpIpAddressOrigin)(0),                                                                               // 374: openconfig.OpenconfigIfIpIpAddressOrigin
	(OpenconfigIfIpNeighborOrigin)(0),                                                                                // 375: openconfig.OpenconfigIfIpNeighborOrigin
	(OpenconfigWifiTypesOPERATINGFREQUENCY)(0),                                                                       // 376: openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY
	(*ywrapper.IntValue)(nil),                        // 377: ywrapper.IntValue
	(OpenconfigWifiTypesCHANGEREASONTYPE)(0),         // 378: openconfig.OpenconfigWifiTypesCHANGEREASONTYPE
	(OpenconfigWifiTypesDATARATE)(0),                 // 379: openconfig.OpenconfigWifiTypesDATARATE
	(OpenconfigWifiTypesCLIENTCAPABILITIES)(0),       // 380: openconfig.OpenconfigWifiTypesCLIENTCAPABILITIES
	(OpenconfigWifiTypesCLIENTSTATE)(0),              // 381: openconfig.OpenconfigWifiTypesCLIENTSTATE
	(OpenconfigAaaTypesAAAMETHODTYPE)(0),             // 382: openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	(OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE)(0),    // 383: openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE
	(OpenconfigAaaTypesSYSTEMDEFINEDROLES)(0),        // 384: openconfig.OpenconfigAaaTypesSYSTEMDEFINEDROLES
	(OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE)(0), // 385: openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE
	(OpenconfigAaaTypesAAASERVERTYPE)(0),             // 386: openconfig.OpenconfigAaaTypesAAASERVERTYPE
	(OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY)(0), // 387: openconfig.OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY
	(OpenconfigAlarmTypesOPENCONFIGALARMTYPEID)(0),   // 388: openconfig.OpenconfigAlarmTypesOPENCONFIGALARMTYPEID
	(OpenconfigSystemLoggingSYSLOGFACILITY)(0),       // 389: openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	(OpenconfigSystemLoggingSyslogSeverity)(0),       // 390: openconfig.OpenconfigSystemLoggingSyslogSeverity
	(OpenconfigMessagesSyslogSeverity)(0),            // 391: openconfig.OpenconfigMessagesSyslogSeverity
	(OpenconfigMessagesDEBUGSERVICE)(0),              // 392: openconfig.OpenconfigMessagesDEBUGSERVICE
	(OpenconfigSystemNTPAUTHTYPE)(0),                 // 393: openconfig.OpenconfigSystemNTPAUTHTYPE
}
var file_openconfig_access_points_proto_depIdxs = []int32{
	36,   // 0: openconfig.AccessPoints.access_point:type_name -> openconfig.AccessPoints.AccessPointKey
	37,   // 1: openconfig.AccessPoints.AccessPoint.assigned_ap_managers:type_name -> openconfig.AccessPoints.AccessPoint.AssignedApManagers
	38,   // 2: openconfig.AccessPoints.AccessPoint.config:type_name -> openconfig.AccessPoints.AccessPoint.Config
	39,   // 3: openconfig.AccessPoints.AccessPoint.interfaces:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces
	40,   // 4: openconfig.AccessPoints.AccessPoint.radios:type_name -> openconfig.AccessPoints.AccessPoint.Radios
	41,   // 5: openconfig.AccessPoints.AccessPoint.ssids:type_name -> openconfig.AccessPoints.AccessPoint.Ssids
	42,   // 6: openconfig.AccessPoints.AccessPoint.system:type_name -> openconfig.AccessPoints.AccessPoint.System
	35,   // 7: openconfig.AccessPoints.AccessPointKey.access_point:type_name -> openconfig.AccessPoints.AccessPoint
	44,   // 8: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ap_manager:type_name -> openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManagerKey
	366,  // 9: openconfig.AccessPoints.AccessPoint.Config.hostname:type_name -> ywrapper.StringValue
	48,   // 10: openconfig.AccessPoints.AccessPoint.Interfaces.interface:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.InterfaceKey
	162,  // 11: openconfig.AccessPoints.AccessPoint.Radios.radio:type_name -> openconfig.AccessPoints.AccessPoint.Radios.RadioKey
	171,  // 12: openconfig.AccessPoints.AccessPoint.Ssids.ssid:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.SsidKey
	213,  // 13: openconfig.AccessPoints.AccessPoint.System.aaa:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa
	214,  // 14: openconfig.AccessPoints.AccessPoint.System.alarms:type_name -> openconfig.AccessPoints.AccessPoint.System.Alarms
	215,  // 15: openconfig.AccessPoints.AccessPoint.System.clock:type_name -> openconfig.AccessPoints.AccessPoint.System.Clock
	216,  // 16: openconfig.AccessPoints.AccessPoint.System.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Config
	217,  // 17: openconfig.AccessPoints.AccessPoint.System.cpus:type_name -> openconfig.AccessPoints.AccessPoint.System.Cpus
	218,  // 18: openconfig.AccessPoints.AccessPoint.System.dns:type_name -> openconfig.AccessPoints.AccessPoint.System.Dns
	219,  // 19: openconfig.AccessPoints.AccessPoint.System.grpc_server:type_name -> openconfig.AccessPoints.AccessPoint.System.GrpcServer
	220,  // 20: openconfig.AccessPoints.AccessPoint.System.license:type_name -> openconfig.AccessPoints.AccessPoint.System.License
	221,  // 21: openconfig.AccessPoints.AccessPoint.System.logging:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging
	222,  // 22: openconfig.AccessPoints.AccessPoint.System.memory:type_name -> openconfig.AccessPoints.AccessPoint.System.Memory
	223,  // 23: openconfig.AccessPoints.AccessPoint.System.messages:type_name -> openconfig.AccessPoints.AccessPoint.System.Messages
	224,  // 24: openconfig.AccessPoints.AccessPoint.System.ntp:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp
	225,  // 25: openconfig.AccessPoints.AccessPoint.System.processes:type_name -> openconfig.AccessPoints.AccessPoint.System.Processes
	226,  // 26: openconfig.AccessPoints.AccessPoint.System.ssh_server:type_name -> openconfig.AccessPoints.AccessPoint.System.SshServer
	227,  // 27: openconfig.AccessPoints.AccessPoint.System.state:type_name -> openconfig.AccessPoints.AccessPoint.System.State
	228,  // 28: openconfig.AccessPoints.AccessPoint.System.telnet_server:type_name -> openconfig.AccessPoints.AccessPoint.System.TelnetServer
	45,   // 29: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.config:type_name -> openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.Config
	46,   // 30: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.state:type_name -> openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.State
	43,   // 31: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManagerKey.ap_manager:type_name -> openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager
	366,  // 32: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.Config.ap_manager_ipv4_address:type_name -> ywrapper.StringValue
	366,  // 33: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.Config.ap_manager_ipv6_address:type_name -> ywrapper.StringValue
	366,  // 34: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.Config.fqdn:type_name -> ywrapper.StringValue
	366,  // 35: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.Config.id:type_name -> ywrapper.StringValue
	366,  // 36: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.State.ap_manager_ipv4_address:type_name -> ywrapper.StringValue
	366,  // 37: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.State.ap_manager_ipv6_address:type_name -> ywrapper.StringValue
	366,  // 38: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.State.fqdn:type_name -> ywrapper.StringValue
	366,  // 39: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.State.id:type_name -> ywrapper.StringValue
	367,  // 40: openconfig.AccessPoints.AccessPoint.AssignedApManagers.ApManager.State.joined:type_name -> ywrapper.BoolValue
	49,   // 41: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.aggregation:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation
	50,   // 42: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Config
	51,   // 43: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.ethernet:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet
	52,   // 44: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State
	53,   // 45: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.subinterfaces:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces
	54,   // 46: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.tunnel:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel
	47,   // 47: openconfig.AccessPoints.AccessPoint.Interfaces.InterfaceKey.interface:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface
	55,   // 48: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.Config
	56,   // 49: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.State
	57,   // 50: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.switched_vlan:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan
	366,  // 51: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Config.description:type_name -> ywrapper.StringValue
	367,  // 52: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Config.enabled:type_name -> ywrapper.BoolValue
	367,  // 53: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Config.loopback_mode:type_name -> ywrapper.BoolValue
	368,  // 54: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Config.mtu:type_name -> ywrapper.UintValue
	366,  // 55: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Config.name:type_name -> ywrapper.StringValue
	369,  // 56: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Config.type:type_name -> openconfig.IETFInterfacesInterfaceType
	62,   // 57: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.authenticated_sessions:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions
	63,   // 58: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Config
	64,   // 59: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.dot1x:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X
	65,   // 60: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.poe:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Poe
	66,   // 61: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State
	67,   // 62: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.switched_vlan:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan
	6,    // 63: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.admin_status:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.AdminStatus
	85,   // 64: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.counters:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters
	366,  // 65: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.description:type_name -> ywrapper.StringValue
	367,  // 66: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.enabled:type_name -> ywrapper.BoolValue
	368,  // 67: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.ifindex:type_name -> ywrapper.UintValue
	368,  // 68: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.last_change:type_name -> ywrapper.UintValue
	367,  // 69: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.logical:type_name -> ywrapper.BoolValue
	367,  // 70: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.loopback_mode:type_name -> ywrapper.BoolValue
	368,  // 71: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.mtu:type_name -> ywrapper.UintValue
	366,  // 72: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.name:type_name -> ywrapper.StringValue
	7,    // 73: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.oper_status:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.OperStatus
	369,  // 74: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.type:type_name -> openconfig.IETFInterfacesInterfaceType
	87,   // 75: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.subinterface:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.SubinterfaceKey
	125,  // 76: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Config
	126,  // 77: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.ipv4:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4
	127,  // 78: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.ipv6:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6
	128,  // 79: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.State
	370,  // 80: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.Config.lag_type:type_name -> openconfig.OpenconfigIfAggregateAggregationType
	368,  // 81: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.Config.min_links:type_name -> ywrapper.UintValue
	368,  // 82: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.State.lag_speed:type_name -> ywrapper.UintValue
	370,  // 83: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.State.lag_type:type_name -> openconfig.OpenconfigIfAggregateAggregationType
	366,  // 84: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.State.member:type_name -> ywrapper.StringValue
	368,  // 85: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.State.min_links:type_name -> ywrapper.UintValue
	58,   // 86: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.Config
	59,   // 87: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.State
	368,  // 88: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.Config.access_vlan:type_name -> ywrapper.UintValue
	371,  // 89: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.Config.interface_mode:type_name -> openconfig.OpenconfigVlanVlanModeType
	368,  // 90: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.Config.native_vlan:type_name -> ywrapper.UintValue
	60,   // 91: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.Config.trunk_vlans:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.Config.TrunkVlansUnion
	368,  // 92: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.State.access_vlan:type_name -> ywrapper.UintValue
	371,  // 93: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.State.interface_mode:type_name -> openconfig.OpenconfigVlanVlanModeType
	368,  // 94: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.State.native_vlan:type_name -> ywrapper.UintValue
	61,   // 95: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.State.trunk_vlans:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Aggregation.SwitchedVlan.State.TrunkVlansUnion
	69,   // 96: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions.authenticated_session:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSessionKey
	367,  // 97: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Config.auto_negotiate:type_name -> ywrapper.BoolValue
	1,    // 98: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Config.duplex_mode:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Config.DuplexMode
	367,  // 99: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Config.enable_flow_control:type_name -> ywrapper.BoolValue
	366,  // 100: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Config.mac_address:type_name -> ywrapper.StringValue
	372,  // 101: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Config.port_speed:type_name -> openconfig.OpenconfigIfEthernetETHERNETSPEED
	71,   // 102: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.Config
	72,   // 103: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.State
	73,   // 104: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Poe.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Poe.Config
	74,   // 105: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Poe.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Poe.State
	367,  // 106: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.auto_negotiate:type_name -> ywrapper.BoolValue
	75,   // 107: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.counters:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.Counters
	4,    // 108: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.duplex_mode:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.DuplexMode
	367,  // 109: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.enable_flow_control:type_name -> ywrapper.BoolValue
	366,  // 110: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.hw_mac_address:type_name -> ywrapper.StringValue
	366,  // 111: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.mac_address:type_name -> ywrapper.StringValue
	5,    // 112: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.negotiated_duplex_mode:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.NegotiatedDuplexMode
	372,  // 113: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.negotiated_port_speed:type_name -> openconfig.OpenconfigIfEthernetETHERNETSPEED
	372,  // 114: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.port_speed:type_name -> openconfig.OpenconfigIfEthernetETHERNETSPEED
	76,   // 115: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Config
	77,   // 116: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.dot1x_vlan_map:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap
	78,   // 117: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.State
	70,   // 118: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.State
	68,   // 119: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSessionKey.authenticated_session:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession
	366,  // 120: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.State.mac:type_name -> ywrapper.StringValue
	366,  // 121: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.State.session_id:type_name -> ywrapper.StringValue
	0,    // 122: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.State.status:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.State.Status
	367,  // 123: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.Config.authenticate_port:type_name -> ywrapper.BoolValue
	2,    // 124: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.Config.host_mode:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.Config.HostMode
	368,  // 125: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.Config.max_requests:type_name -> ywrapper.UintValue
	368,  // 126: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.Config.reauthenticate_interval:type_name -> ywrapper.UintValue
	368,  // 127: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.Config.retransmit_interval:type_name -> ywrapper.UintValue
	368,  // 128: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.Config.supplicant_timeout:type_name -> ywrapper.UintValue
	367,  // 129: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.State.authenticate_port:type_name -> ywrapper.BoolValue
	3,    // 130: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.State.host_mode:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.State.HostMode
	368,  // 131: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.State.max_requests:type_name -> ywrapper.UintValue
	368,  // 132: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.State.reauthenticate_interval:type_name -> ywrapper.UintValue
	368,  // 133: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.State.retransmit_interval:type_name -> ywrapper.UintValue
	368,  // 134: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Dot1X.State.supplicant_timeout:type_name -> ywrapper.UintValue
	367,  // 135: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Poe.Config.enabled:type_name -> ywrapper.BoolValue
	367,  // 136: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Poe.State.enabled:type_name -> ywrapper.BoolValue
	368,  // 137: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Poe.State.power_class:type_name -> ywrapper.UintValue
	373,  // 138: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.Poe.State.power_used:type_name -> ywrapper.Decimal64Value
	368,  // 139: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.Counters.in_8021q_frames:type_name -> ywrapper.UintValue
	368,  // 140: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.Counters.in_block_errors:type_name -> ywrapper.UintValue
	368,  // 141: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.Counters.in_crc_errors:type_name -> ywrapper.UintValue
	368,  // 142: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.Counters.in_fragment_frames:type_name -> ywrapper.UintValue
	368,  // 143: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.Counters.in_jabber_frames:type_name -> ywrapper.UintValue
	368,  // 144: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.Counters.in_mac_control_frames:type_name -> ywrapper.UintValue
	368,  // 145: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.Counters.in_mac_pause_frames:type_name -> ywrapper.UintValue
	368,  // 146: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.Counters.in_oversize_frames:type_name -> ywrapper.UintValue
	368,  // 147: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.Counters.in_undersize_frames:type_name -> ywrapper.UintValue
	368,  // 148: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.Counters.out_8021q_frames:type_name -> ywrapper.UintValue
	368,  // 149: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.Counters.out_mac_control_frames:type_name -> ywrapper.UintValue
	368,  // 150: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.State.Counters.out_mac_pause_frames:type_name -> ywrapper.UintValue
	368,  // 151: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Config.access_vlan:type_name -> ywrapper.UintValue
	371,  // 152: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Config.interface_mode:type_name -> openconfig.OpenconfigVlanVlanModeType
	368,  // 153: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Config.native_vlan:type_name -> ywrapper.UintValue
	79,   // 154: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Config.trunk_vlans:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Config.TrunkVlansUnion
	81,   // 155: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.vlan_name:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanNameKey
	368,  // 156: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.State.access_vlan:type_name -> ywrapper.UintValue
	371,  // 157: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.State.interface_mode:type_name -> openconfig.OpenconfigVlanVlanModeType
	368,  // 158: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.State.native_vlan:type_name -> ywrapper.UintValue
	84,   // 159: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.State.trunk_vlans:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.State.TrunkVlansUnion
	82,   // 160: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.Config
	83,   // 161: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.State
	80,   // 162: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanNameKey.vlan_name:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName
	368,  // 163: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.Config.id:type_name -> ywrapper.UintValue
	366,  // 164: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.Config.vlan_name:type_name -> ywrapper.StringValue
	368,  // 165: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.State.id:type_name -> ywrapper.UintValue
	366,  // 166: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.State.vlan_name:type_name -> ywrapper.StringValue
	368,  // 167: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.carrier_transitions:type_name -> ywrapper.UintValue
	368,  // 168: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.in_broadcast_pkts:type_name -> ywrapper.UintValue
	368,  // 169: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.in_discards:type_name -> ywrapper.UintValue
	368,  // 170: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.in_errors:type_name -> ywrapper.UintValue
	368,  // 171: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.in_fcs_errors:type_name -> ywrapper.UintValue
	368,  // 172: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.in_multicast_pkts:type_name -> ywrapper.UintValue
	368,  // 173: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.in_octets:type_name -> ywrapper.UintValue
	368,  // 174: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.in_pkts:type_name -> ywrapper.UintValue
	368,  // 175: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.in_unicast_pkts:type_name -> ywrapper.UintValue
	368,  // 176: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.in_unknown_protos:type_name -> ywrapper.UintValue
	368,  // 177: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.last_clear:type_name -> ywrapper.UintValue
	368,  // 178: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.out_broadcast_pkts:type_name -> ywrapper.UintValue
	368,  // 179: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.out_discards:type_name -> ywrapper.UintValue
	368,  // 180: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.out_errors:type_name -> ywrapper.UintValue
	368,  // 181: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.out_multicast_pkts:type_name -> ywrapper.UintValue
	368,  // 182: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.out_octets:type_name -> ywrapper.UintValue
	368,  // 183: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.out_pkts:type_name -> ywrapper.UintValue
	368,  // 184: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.State.Counters.out_unicast_pkts:type_name -> ywrapper.UintValue
	88,   // 185: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Config
	89,   // 186: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.ipv4:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4
	90,   // 187: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.ipv6:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6
	91,   // 188: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State
	86,   // 189: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.SubinterfaceKey.subinterface:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface
	366,  // 190: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Config.description:type_name -> ywrapper.StringValue
	367,  // 191: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Config.enabled:type_name -> ywrapper.BoolValue
	368,  // 192: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Config.index:type_name -> ywrapper.UintValue
	92,   // 193: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.addresses:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses
	93,   // 194: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Config
	94,   // 195: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.neighbors:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors
	95,   // 196: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.proxy_arp:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp
	96,   // 197: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State
	108,  // 198: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.addresses:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses
	109,  // 199: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Config
	110,  // 200: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.neighbors:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors
	111,  // 201: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.router_advertisement:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement
	112,  // 202: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State
	12,   // 203: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.admin_status:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.AdminStatus
	124,  // 204: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.counters:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters
	366,  // 205: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.description:type_name -> ywrapper.StringValue
	367,  // 206: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.enabled:type_name -> ywrapper.BoolValue
	368,  // 207: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.ifindex:type_name -> ywrapper.UintValue
	368,  // 208: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.index:type_name -> ywrapper.UintValue
	368,  // 209: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.last_change:type_name -> ywrapper.UintValue
	367,  // 210: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.logical:type_name -> ywrapper.BoolValue
	366,  // 211: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.name:type_name -> ywrapper.StringValue
	13,   // 212: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.oper_status:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.OperStatus
	98,   // 213: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.address:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.AddressKey
	367,  // 214: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Config.dhcp_client:type_name -> ywrapper.BoolValue
	367,  // 215: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Config.enabled:type_name -> ywrapper.BoolValue
	368,  // 216: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Config.mtu:type_name -> ywrapper.UintValue
	102,  // 217: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.neighbor:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.NeighborKey
	105,  // 218: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.Config
	106,  // 219: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.State
	107,  // 220: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.counters:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters
	367,  // 221: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.dhcp_client:type_name -> ywrapper.BoolValue
	367,  // 222: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.enabled:type_name -> ywrapper.BoolValue
	368,  // 223: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.mtu:type_name -> ywrapper.UintValue
	99,   // 224: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Config
	100,  // 225: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.State
	97,   // 226: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.AddressKey.address:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address
	366,  // 227: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Config.ip:type_name -> ywrapper.StringValue
	368,  // 228: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Config.prefix_length:type_name -> ywrapper.UintValue
	366,  // 229: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.State.ip:type_name -> ywrapper.StringValue
	374,  // 230: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.State.origin:type_name -> openconfig.OpenconfigIfIpIpAddressOrigin
	368,  // 231: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.State.prefix_length:type_name -> ywrapper.UintValue
	103,  // 232: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.Config
	104,  // 233: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.State
	101,  // 234: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.NeighborKey.neighbor:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor
	366,  // 235: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.Config.ip:type_name -> ywrapper.StringValue
	366,  // 236: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.Config.link_layer_address:type_name -> ywrapper.StringValue
	366,  // 237: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.State.ip:type_name -> ywrapper.StringValue
	366,  // 238: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.State.link_layer_address:type_name -> ywrapper.StringValue
	375,  // 239: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.State.origin:type_name -> openconfig.OpenconfigIfIpNeighborOrigin
	8,    // 240: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.Config.mode:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.Config.Mode
	9,    // 241: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.State.mode:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.State.Mode
	368,  // 242: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.in_discarded_pkts:type_name -> ywrapper.UintValue
	368,  // 243: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.in_error_pkts:type_name -> ywrapper.UintValue
	368,  // 244: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.in_forwarded_octets:type_name -> ywrapper.UintValue
	368,  // 245: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.in_forwarded_pkts:type_name -> ywrapper.UintValue
	368,  // 246: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.in_octets:type_name -> ywrapper.UintValue
	368,  // 247: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.in_pkts:type_name -> ywrapper.UintValue
	368,  // 248: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.out_discarded_pkts:type_name -> ywrapper.UintValue
	368,  // 249: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.out_error_pkts:type_name -> ywrapper.UintValue
	368,  // 250: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.out_forwarded_octets:type_name -> ywrapper.UintValue
	368,  // 251: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.out_forwarded_pkts:type_name -> ywrapper.UintValue
	368,  // 252: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.out_octets:type_name -> ywrapper.UintValue
	368,  // 253: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.out_pkts:type_name -> ywrapper.UintValue
	114,  // 254: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.address:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.AddressKey
	367,  // 255: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Config.dhcp_client:type_name -> ywrapper.BoolValue
	368,  // 256: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Config.dup_addr_detect_transmits:type_name -> ywrapper.UintValue
	367,  // 257: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Config.enabled:type_name -> ywrapper.BoolValue
	368,  // 258: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Config.mtu:type_name -> ywrapper.UintValue
	118,  // 259: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.neighbor:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.NeighborKey
	121,  // 260: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.Config
	122,  // 261: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.State
	123,  // 262: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.counters:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters
	367,  // 263: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.dhcp_client:type_name -> ywrapper.BoolValue
	368,  // 264: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.dup_addr_detect_transmits:type_name -> ywrapper.UintValue
	367,  // 265: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.enabled:type_name -> ywrapper.BoolValue
	368,  // 266: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.mtu:type_name -> ywrapper.UintValue
	115,  // 267: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Config
	116,  // 268: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State
	113,  // 269: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.AddressKey.address:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address
	366,  // 270: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Config.ip:type_name -> ywrapper.StringValue
	368,  // 271: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Config.prefix_length:type_name -> ywrapper.UintValue
	366,  // 272: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State.ip:type_name -> ywrapper.StringValue
	374,  // 273: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State.origin:type_name -> openconfig.OpenconfigIfIpIpAddressOrigin
	368,  // 274: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State.prefix_length:type_name -> ywrapper.UintValue
	10,   // 275: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State.status:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State.Status
	119,  // 276: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.Config
	120,  // 277: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State
	117,  // 278: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.NeighborKey.neighbor:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor
	366,  // 279: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.Config.ip:type_name -> ywrapper.StringValue
	366,  // 280: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.Config.link_layer_address:type_name -> ywrapper.StringValue
	366,  // 281: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State.ip:type_name -> ywrapper.StringValue
	367,  // 282: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State.is_router:type_name -> ywrapper.BoolValue
	366,  // 283: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State.link_layer_address:type_name -> ywrapper.StringValue
	11,   // 284: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State.neighbor_state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State.NeighborState
	375,  // 285: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State.origin:type_name -> openconfig.OpenconfigIfIpNeighborOrigin
	368,  // 286: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.Config.interval:type_name -> ywrapper.UintValue
	368,  // 287: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.Config.lifetime:type_name -> ywrapper.UintValue
	367,  // 288: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.Config.suppress:type_name -> ywrapper.BoolValue
	368,  // 289: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.State.interval:type_name -> ywrapper.UintValue
	368,  // 290: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.State.lifetime:type_name -> ywrapper.UintValue
	367,  // 291: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.State.suppress:type_name -> ywrapper.BoolValue
	368,  // 292: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.in_discarded_pkts:type_name -> ywrapper.UintValue
	368,  // 293: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.in_error_pkts:type_name -> ywrapper.UintValue
	368,  // 294: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.in_forwarded_octets:type_name -> ywrapper.UintValue
	368,  // 295: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.in_forwarded_pkts:type_name -> ywrapper.UintValue
	368,  // 296: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.in_octets:type_name -> ywrapper.UintValue
	368,  // 297: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.in_pkts:type_name -> ywrapper.UintValue
	368,  // 298: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.out_discarded_pkts:type_name -> ywrapper.UintValue
	368,  // 299: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.out_error_pkts:type_name -> ywrapper.UintValue
	368,  // 300: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.out_forwarded_octets:type_name -> ywrapper.UintValue
	368,  // 301: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.out_forwarded_pkts:type_name -> ywrapper.UintValue
	368,  // 302: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.out_octets:type_name -> ywrapper.UintValue
	368,  // 303: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.out_pkts:type_name -> ywrapper.UintValue
	368,  // 304: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.carrier_transitions:type_name -> ywrapper.UintValue
	368,  // 305: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_broadcast_pkts:type_name -> ywrapper.UintValue
	368,  // 306: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_discards:type_name -> ywrapper.UintValue
	368,  // 307: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_errors:type_name -> ywrapper.UintValue
	368,  // 308: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_fcs_errors:type_name -> ywrapper.UintValue
	368,  // 309: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_multicast_pkts:type_name -> ywrapper.UintValue
	368,  // 310: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_octets:type_name -> ywrapper.UintValue
	368,  // 311: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_pkts:type_name -> ywrapper.UintValue
	368,  // 312: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_unicast_pkts:type_name -> ywrapper.UintValue
	368,  // 313: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_unknown_protos:type_name -> ywrapper.UintValue
	368,  // 314: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.last_clear:type_name -> ywrapper.UintValue
	368,  // 315: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.out_broadcast_pkts:type_name -> ywrapper.UintValue
	368,  // 316: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.out_discards:type_name -> ywrapper.UintValue
	368,  // 317: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.out_errors:type_name -> ywrapper.UintValue
	368,  // 318: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.out_multicast_pkts:type_name -> ywrapper.UintValue
	368,  // 319: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.out_octets:type_name -> ywrapper.UintValue
	368,  // 320: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.out_pkts:type_name -> ywrapper.UintValue
	368,  // 321: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.out_unicast_pkts:type_name -> ywrapper.UintValue
	366,  // 322: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Config.dst:type_name -> ywrapper.StringValue
	368,  // 323: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Config.gre_key:type_name -> ywrapper.UintValue
	366,  // 324: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Config.src:type_name -> ywrapper.StringValue
	368,  // 325: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Config.ttl:type_name -> ywrapper.UintValue
	129,  // 326: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.addresses:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses
	130,  // 327: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Config
	131,  // 328: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.neighbors:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors
	132,  // 329: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.proxy_arp:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.ProxyArp
	133,  // 330: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State
	145,  // 331: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.addresses:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses
	146,  // 332: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Config
	147,  // 333: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.neighbors:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors
	148,  // 334: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.router_advertisement:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement
	149,  // 335: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State
	366,  // 336: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.State.dst:type_name -> ywrapper.StringValue
	368,  // 337: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.State.gre_key:type_name -> ywrapper.UintValue
	366,  // 338: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.State.src:type_name -> ywrapper.StringValue
	368,  // 339: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.State.ttl:type_name -> ywrapper.UintValue
	135,  // 340: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.address:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.AddressKey
	367,  // 341: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Config.dhcp_client:type_name -> ywrapper.BoolValue
	367,  // 342: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Config.enabled:type_name -> ywrapper.BoolValue
	368,  // 343: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Config.mtu:type_name -> ywrapper.UintValue
	139,  // 344: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.neighbor:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.NeighborKey
	142,  // 345: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.Config
	143,  // 346: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.State
	144,  // 347: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.counters:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.Counters
	367,  // 348: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.dhcp_client:type_name -> ywrapper.BoolValue
	367,  // 349: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.enabled:type_name -> ywrapper.BoolValue
	368,  // 350: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.mtu:type_name -> ywrapper.UintValue
	136,  // 351: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.Config
	137,  // 352: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.State
	134,  // 353: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.AddressKey.address:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address
	366,  // 354: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.Config.ip:type_name -> ywrapper.StringValue
	368,  // 355: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.Config.prefix_length:type_name -> ywrapper.UintValue
	366,  // 356: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.State.ip:type_name -> ywrapper.StringValue
	374,  // 357: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.State.origin:type_name -> openconfig.OpenconfigIfIpIpAddressOrigin
	368,  // 358: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.State.prefix_length:type_name -> ywrapper.UintValue
	140,  // 359: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.Config
	141,  // 360: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.State
	138,  // 361: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.NeighborKey.neighbor:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor
	366,  // 362: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.Config.ip:type_name -> ywrapper.StringValue
	366,  // 363: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.Config.link_layer_address:type_name -> ywrapper.StringValue
	366,  // 364: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.State.ip:type_name -> ywrapper.StringValue
	366,  // 365: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.State.link_layer_address:type_name -> ywrapper.StringValue
	375,  // 366: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.State.origin:type_name -> openconfig.OpenconfigIfIpNeighborOrigin
	14,   // 367: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.Config.mode:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.Config.Mode
	15,   // 368: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.State.mode:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.State.Mode
	368,  // 369: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.Counters.in_discarded_pkts:type_name -> ywrapper.UintValue
	368,  // 370: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.Counters.in_error_pkts:type_name -> ywrapper.UintValue
	368,  // 371: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.Counters.in_forwarded_octets:type_name -> ywrapper.UintValue
	368,  // 372: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.Counters.in_forwarded_pkts:type_name -> ywrapper.UintValue
	368,  // 373: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.Counters.in_octets:type_name -> ywrapper.UintValue
	368,  // 374: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.Counters.in_pkts:type_name -> ywrapper.UintValue
	368,  // 375: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.Counters.out_discarded_pkts:type_name -> ywrapper.UintValue
	368,  // 376: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.Counters.out_error_pkts:type_name -> ywrapper.UintValue
	368,  // 377: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.Counters.out_forwarded_octets:type_name -> ywrapper.UintValue
	368,  // 378: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.Counters.out_forwarded_pkts:type_name -> ywrapper.UintValue
	368,  // 379: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.Counters.out_octets:type_name -> ywrapper.UintValue
	368,  // 380: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv4.State.Counters.out_pkts:type_name -> ywrapper.UintValue
	151,  // 381: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.address:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.AddressKey
	367,  // 382: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Config.dhcp_client:type_name -> ywrapper.BoolValue
	368,  // 383: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Config.dup_addr_detect_transmits:type_name -> ywrapper.UintValue
	367,  // 384: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Config.enabled:type_name -> ywrapper.BoolValue
	368,  // 385: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Config.mtu:type_name -> ywrapper.UintValue
	155,  // 386: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.neighbor:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.NeighborKey
	158,  // 387: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.Config
	159,  // 388: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.State
	160,  // 389: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.counters:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.Counters
	367,  // 390: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.dhcp_client:type_name -> ywrapper.BoolValue
	368,  // 391: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.dup_addr_detect_transmits:type_name -> ywrapper.UintValue
	367,  // 392: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.enabled:type_name -> ywrapper.BoolValue
	368,  // 393: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.mtu:type_name -> ywrapper.UintValue
	152,  // 394: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.Config
	153,  // 395: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State
	150,  // 396: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.AddressKey.address:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address
	366,  // 397: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.Config.ip:type_name -> ywrapper.StringValue
	368,  // 398: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.Config.prefix_length:type_name -> ywrapper.UintValue
	366,  // 399: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State.ip:type_name -> ywrapper.StringValue
	374,  // 400: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State.origin:type_name -> openconfig.OpenconfigIfIpIpAddressOrigin
	368,  // 401: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State.prefix_length:type_name -> ywrapper.UintValue
	16,   // 402: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State.status:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State.Status
	156,  // 403: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.config:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.Config
	157,  // 404: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State
	154,  // 405: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.NeighborKey.neighbor:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor
	366,  // 406: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.Config.ip:type_name -> ywrapper.StringValue
	366,  // 407: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.Config.link_layer_address:type_name -> ywrapper.StringValue
	366,  // 408: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State.ip:type_name -> ywrapper.StringValue
	367,  // 409: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State.is_router:type_name -> ywrapper.BoolValue
	366,  // 410: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State.link_layer_address:type_name -> ywrapper.StringValue
	17,   // 411: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State.neighbor_state:type_name -> openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State.NeighborState
	375,  // 412: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State.origin:type_name -> openconfig.OpenconfigIfIpNeighborOrigin
	368,  // 413: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.Config.interval:type_name -> ywrapper.UintValue
	368,  // 414: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.Config.lifetime:type_name -> ywrapper.UintValue
	367,  // 415: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.Config.suppress:type_name -> ywrapper.BoolValue
	368,  // 416: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.State.interval:type_name -> ywrapper.UintValue
	368,  // 417: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.State.lifetime:type_name -> ywrapper.UintValue
	367,  // 418: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.State.suppress:type_name -> ywrapper.BoolValue
	368,  // 419: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.Counters.in_discarded_pkts:type_name -> ywrapper.UintValue
	368,  // 420: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.Counters.in_error_pkts:type_name -> ywrapper.UintValue
	368,  // 421: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.Counters.in_forwarded_octets:type_name -> ywrapper.UintValue
	368,  // 422: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.Counters.in_forwarded_pkts:type_name -> ywrapper.UintValue
	368,  // 423: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.Counters.in_octets:type_name -> ywrapper.UintValue
	368,  // 424: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.Counters.in_pkts:type_name -> ywrapper.UintValue
	368,  // 425: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.Counters.out_discarded_pkts:type_name -> ywrapper.UintValue
	368,  // 426: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.Counters.out_error_pkts:type_name -> ywrapper.UintValue
	368,  // 427: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.Counters.out_forwarded_octets:type_name -> ywrapper.UintValue
	368,  // 428: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.Counters.out_forwarded_pkts:type_name -> ywrapper.UintValue
	368,  // 429: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.Counters.out_octets:type_name -> ywrapper.UintValue
	368,  // 430: openconfig.AccessPoints.AccessPoint.Interfaces.Interface.Tunnel.Ipv6.State.Counters.out_pkts:type_name -> ywrapper.UintValue
	163,  // 431: openconfig.AccessPoints.AccessPoint.Radios.Radio.config:type_name -> openconfig.AccessPoints.AccessPoint.Radios.Radio.Config
	164,  // 432: openconfig.AccessPoints.AccessPoint.Radios.Radio.neighbors:type_name -> openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors
	165,  // 433: openconfig.AccessPoints.AccessPoint.Radios.Radio.state:type_name -> openconfig.AccessPoints.AccessPoint.Radios.Radio.State
	376,  // 434: openconfig.AccessPoints.AccessPoint.Radios.RadioKey.operating_frequency:type_name -> openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY
	161,  // 435: openconfig.AccessPoints.AccessPoint.Radios.RadioKey.radio:type_name -> openconfig.AccessPoints.AccessPoint.Radios.Radio
	368,  // 436: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.allowed_channels:type_name -> ywrapper.UintValue
	377,  // 437: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.antenna_gain:type_name -> ywrapper.IntValue
	368,  // 438: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.channel:type_name -> ywrapper.UintValue
	368,  // 439: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.channel_width:type_name -> ywrapper.UintValue
	367,  // 440: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.dca:type_name -> ywrapper.BoolValue
	367,  // 441: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.dtp:type_name -> ywrapper.BoolValue
	377,  // 442: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.dtp_max:type_name -> ywrapper.IntValue
	377,  // 443: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.dtp_min:type_name -> ywrapper.IntValue
	367,  // 444: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.enabled:type_name -> ywrapper.BoolValue
	368,  // 445: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.id:type_name -> ywrapper.UintValue
	376,  // 446: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.operating_frequency:type_name -> openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY
	367,  // 447: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.scanning:type_name -> ywrapper.BoolValue
	368,  // 448: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.scanning_defer_clients:type_name -> ywrapper.UintValue
	367,  // 449: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.scanning_defer_traffic:type_name -> ywrapper.BoolValue
	368,  // 450: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.scanning_dwell_time:type_name -> ywrapper.UintValue
	368,  // 451: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.scanning_interval:type_name -> ywrapper.UintValue
	368,  // 452: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.transmit_eirp:type_name -> ywrapper.UintValue
	377,  // 453: openconfig.AccessPoints.AccessPoint.Radios.Radio.Config.transmit_power:type_name -> ywrapper.IntValue
	167,  // 454: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.neighbor:type_name -> openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.NeighborKey
	368,  // 455: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.allowed_channels:type_name -> ywrapper.UintValue
	368,  // 456: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.allowed_regulatory_channels:type_name -> ywrapper.UintValue
	377,  // 457: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.antenna_gain:type_name -> ywrapper.IntValue
	366,  // 458: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.base_radio_mac:type_name -> ywrapper.StringValue
	368,  // 459: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.channel:type_name -> ywrapper.UintValue
	378,  // 460: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.channel_change_reason:type_name -> openconfig.OpenconfigWifiTypesCHANGEREASONTYPE
	368,  // 461: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.channel_width:type_name -> ywrapper.UintValue
	169,  // 462: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.counters:type_name -> openconfig.AccessPoints.AccessPoint.Radios.Radio.State.Counters
	367,  // 463: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.dca:type_name -> ywrapper.BoolValue
	368,  // 464: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.dfs_hit_time:type_name -> ywrapper.UintValue
	367,  // 465: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.dtp:type_name -> ywrapper.BoolValue
	377,  // 466: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.dtp_max:type_name -> ywrapper.IntValue
	377,  // 467: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.dtp_min:type_name -> ywrapper.IntValue
	367,  // 468: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.enabled:type_name -> ywrapper.BoolValue
	368,  // 469: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.id:type_name -> ywrapper.UintValue
	376,  // 470: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.operating_frequency:type_name -> openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY
	368,  // 471: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.rx_dot11_channel_utilization:type_name -> ywrapper.UintValue
	368,  // 472: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.rx_noise_channel_utilization:type_name -> ywrapper.UintValue
	367,  // 473: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.scanning:type_name -> ywrapper.BoolValue
	368,  // 474: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.scanning_defer_clients:type_name -> ywrapper.UintValue
	367,  // 475: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.scanning_defer_traffic:type_name -> ywrapper.BoolValue
	368,  // 476: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.scanning_dwell_time:type_name -> ywrapper.UintValue
	368,  // 477: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.scanning_interval:type_name -> ywrapper.UintValue
	367,  // 478: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.software_selectable:type_name -> ywrapper.BoolValue
	368,  // 479: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.supported_channels:type_name -> ywrapper.UintValue
	368,  // 480: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.total_channel_utilization:type_name -> ywrapper.UintValue
	368,  // 481: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.transmit_eirp:type_name -> ywrapper.UintValue
	377,  // 482: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.transmit_power:type_name -> ywrapper.IntValue
	368,  // 483: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.tx_dot11_channel_utilization:type_name -> ywrapper.UintValue
	168,  // 484: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.Neighbor.state:type_name -> openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.Neighbor.State
	166,  // 485: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.NeighborKey.neighbor:type_name -> openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.Neighbor
	366,  // 486: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.Neighbor.State.bssid:type_name -> ywrapper.StringValue
	368,  // 487: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.Neighbor.State.channel:type_name -> ywrapper.UintValue
	368,  // 488: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.Neighbor.State.last_seen:type_name -> ywrapper.UintValue
	18,   // 489: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.Neighbor.State.opmode:type_name -> openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.Neighbor.State.Opmode
	368,  // 490: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.Neighbor.State.primary_channel:type_name -> ywrapper.UintValue
	377,  // 491: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.Neighbor.State.rssi:type_name -> ywrapper.IntValue
	366,  // 492: openconfig.AccessPoints.AccessPoint.Radios.Radio.Neighbors.Neighbor.State.ssid:type_name -> ywrapper.StringValue
	368,  // 493: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.Counters.failed_fcs_frames:type_name -> ywrapper.UintValue
	377,  // 494: openconfig.AccessPoints.AccessPoint.Radios.Radio.State.Counters.noise_floor:type_name -> ywrapper.IntValue
	172,  // 495: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.band_steering:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.BandSteering
	173,  // 496: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.bssids:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids
	174,  // 497: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.clients:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients
	175,  // 498: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.config:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config
	176,  // 499: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.dot11r:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R
	177,  // 500: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.dot11v:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V
	178,  // 501: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.dot1x_timers:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot1XTimers
	179,  // 502: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.state:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State
	180,  // 503: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.wmm:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm
	170,  // 504: openconfig.AccessPoints.AccessPoint.Ssids.SsidKey.ssid:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid
	181,  // 505: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.BandSteering.config:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.BandSteering.Config
	182,  // 506: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.BandSteering.state:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.BandSteering.State
	184,  // 507: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.bssid:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.BssidKey
	194,  // 508: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.client:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.ClientKey
	367,  // 509: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.advertise_apname:type_name -> ywrapper.BoolValue
	379,  // 510: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.basic_data_rates_2g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	379,  // 511: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.basic_data_rates_5g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	367,  // 512: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.broadcast_filter:type_name -> ywrapper.BoolValue
	367,  // 513: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.csa:type_name -> ywrapper.BoolValue
	368,  // 514: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.default_vlan:type_name -> ywrapper.UintValue
	367,  // 515: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.dhcp_required:type_name -> ywrapper.BoolValue
	367,  // 516: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.dot11k:type_name -> ywrapper.BoolValue
	367,  // 517: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.dva:type_name -> ywrapper.BoolValue
	367,  // 518: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.enabled:type_name -> ywrapper.BoolValue
	368,  // 519: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.gtk_timeout:type_name -> ywrapper.UintValue
	367,  // 520: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.hidden:type_name -> ywrapper.BoolValue
	367,  // 521: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.ipv6_ndp_filter:type_name -> ywrapper.BoolValue
	368,  // 522: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.ipv6_ndp_filter_timer:type_name -> ywrapper.UintValue
	367,  // 523: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.multicast_filter:type_name -> ywrapper.BoolValue
	366,  // 524: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.name:type_name -> ywrapper.StringValue
	367,  // 525: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.okc:type_name -> ywrapper.BoolValue
	376,  // 526: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.operating_frequency:type_name -> openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY
	20,   // 527: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.opmode:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.Opmode
	368,  // 528: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.ptk_timeout:type_name -> ywrapper.UintValue
	367,  // 529: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.qbss_load:type_name -> ywrapper.BoolValue
	366,  // 530: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.server_group:type_name -> ywrapper.StringValue
	367,  // 531: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.station_isolation:type_name -> ywrapper.BoolValue
	379,  // 532: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.supported_data_rates_2g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	379,  // 533: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.supported_data_rates_5g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	368,  // 534: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.vlan_list:type_name -> ywrapper.UintValue
	366,  // 535: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Config.wpa2_psk:type_name -> ywrapper.StringValue
	205,  // 536: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.config:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.Config
	206,  // 537: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.state:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.State
	207,  // 538: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V.config:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V.Config
	208,  // 539: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V.state:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V.State
	209,  // 540: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot1XTimers.config:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot1XTimers.Config
	210,  // 541: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot1XTimers.state:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot1XTimers.State
	367,  // 542: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.advertise_apname:type_name -> ywrapper.BoolValue
	379,  // 543: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.basic_data_rates_2g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	379,  // 544: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.basic_data_rates_5g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	367,  // 545: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.broadcast_filter:type_name -> ywrapper.BoolValue
	367,  // 546: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.csa:type_name -> ywrapper.BoolValue
	368,  // 547: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.default_vlan:type_name -> ywrapper.UintValue
	367,  // 548: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.dhcp_required:type_name -> ywrapper.BoolValue
	367,  // 549: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.dot11k:type_name -> ywrapper.BoolValue
	367,  // 550: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.dva:type_name -> ywrapper.BoolValue
	367,  // 551: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.enabled:type_name -> ywrapper.BoolValue
	368,  // 552: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.gtk_timeout:type_name -> ywrapper.UintValue
	367,  // 553: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.hidden:type_name -> ywrapper.BoolValue
	367,  // 554: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.ipv6_ndp_filter:type_name -> ywrapper.BoolValue
	368,  // 555: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.ipv6_ndp_filter_timer:type_name -> ywrapper.UintValue
	367,  // 556: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.multicast_filter:type_name -> ywrapper.BoolValue
	366,  // 557: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.name:type_name -> ywrapper.StringValue
	367,  // 558: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.okc:type_name -> ywrapper.BoolValue
	376,  // 559: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.operating_frequency:type_name -> openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY
	23,   // 560: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.opmode:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.Opmode
	368,  // 561: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.ptk_timeout:type_name -> ywrapper.UintValue
	367,  // 562: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.qbss_load:type_name -> ywrapper.BoolValue
	366,  // 563: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.server_group:type_name -> ywrapper.StringValue
	367,  // 564: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.station_isolation:type_name -> ywrapper.BoolValue
	379,  // 565: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.supported_data_rates_2g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	379,  // 566: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.supported_data_rates_5g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	368,  // 567: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.vlan_list:type_name -> ywrapper.UintValue
	366,  // 568: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.State.wpa2_psk:type_name -> ywrapper.StringValue
	211,  // 569: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.config:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.Config
	212,  // 570: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.state:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.State
	367,  // 571: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.BandSteering.Config.band_steering:type_name -> ywrapper.BoolValue
	377,  // 572: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.BandSteering.Config.steering_rssi:type_name -> ywrapper.IntValue
	367,  // 573: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.BandSteering.State.band_steering:type_name -> ywrapper.BoolValue
	377,  // 574: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.BandSteering.State.steering_rssi:type_name -> ywrapper.IntValue
	185,  // 575: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.state:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State
	183,  // 576: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.BssidKey.bssid:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid
	366,  // 577: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.bssid:type_name -> ywrapper.StringValue
	186,  // 578: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.counters:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters
	368,  // 579: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.num_associated_clients:type_name -> ywrapper.UintValue
	368,  // 580: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.radio_id:type_name -> ywrapper.UintValue
	368,  // 581: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.bss_channel_utilization:type_name -> ywrapper.UintValue
	368,  // 582: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_bss_dot11_channel_utilization:type_name -> ywrapper.UintValue
	368,  // 583: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_bytes_data:type_name -> ywrapper.UintValue
	368,  // 584: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_control:type_name -> ywrapper.UintValue
	187,  // 585: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_data_dist:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist
	188,  // 586: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_data_wmm:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataWmm
	189,  // 587: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_mcs:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs
	368,  // 588: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_mgmt:type_name -> ywrapper.UintValue
	368,  // 589: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_retries:type_name -> ywrapper.UintValue
	368,  // 590: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_retries_data:type_name -> ywrapper.UintValue
	368,  // 591: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_retries_subframe:type_name -> ywrapper.UintValue
	368,  // 592: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_bss_dot11_channel_utilization:type_name -> ywrapper.UintValue
	368,  // 593: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_bytes_data:type_name -> ywrapper.UintValue
	368,  // 594: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_control:type_name -> ywrapper.UintValue
	190,  // 595: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_data_dist:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist
	191,  // 596: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_data_wmm:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataWmm
	192,  // 597: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_mcs:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs
	368,  // 598: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_mgmt:type_name -> ywrapper.UintValue
	368,  // 599: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_retries:type_name -> ywrapper.UintValue
	368,  // 600: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_retries_data:type_name -> ywrapper.UintValue
	368,  // 601: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_retries_subframe:type_name -> ywrapper.UintValue
	368,  // 602: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_0_64:type_name -> ywrapper.UintValue
	368,  // 603: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_1025_2048:type_name -> ywrapper.UintValue
	368,  // 604: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_129_256:type_name -> ywrapper.UintValue
	368,  // 605: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_131073_262144:type_name -> ywrapper.UintValue
	368,  // 606: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_16385_32768:type_name -> ywrapper.UintValue
	368,  // 607: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_2049_4096:type_name -> ywrapper.UintValue
	368,  // 608: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_257_512:type_name -> ywrapper.UintValue
	368,  // 609: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_262145_524288:type_name -> ywrapper.UintValue
	368,  // 610: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_32769_65536:type_name -> ywrapper.UintValue
	368,  // 611: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_4097_8192:type_name -> ywrapper.UintValue
	368,  // 612: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_513_1024:type_name -> ywrapper.UintValue
	368,  // 613: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_524289_1048576:type_name -> ywrapper.UintValue
	368,  // 614: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_65_128:type_name -> ywrapper.UintValue
	368,  // 615: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_65537_131072:type_name -> ywrapper.UintValue
	368,  // 616: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_8193_16384:type_name -> ywrapper.UintValue
	368,  // 617: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataWmm.be:type_name -> ywrapper.UintValue
	368,  // 618: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataWmm.bk:type_name -> ywrapper.UintValue
	368,  // 619: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataWmm.vi:type_name -> ywrapper.UintValue
	368,  // 620: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataWmm.vo:type_name -> ywrapper.UintValue
	368,  // 621: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs0:type_name -> ywrapper.UintValue
	368,  // 622: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs1:type_name -> ywrapper.UintValue
	368,  // 623: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs2:type_name -> ywrapper.UintValue
	368,  // 624: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs3:type_name -> ywrapper.UintValue
	368,  // 625: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs4:type_name -> ywrapper.UintValue
	368,  // 626: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs5:type_name -> ywrapper.UintValue
	368,  // 627: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs6:type_name -> ywrapper.UintValue
	368,  // 628: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs7:type_name -> ywrapper.UintValue
	368,  // 629: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs8:type_name -> ywrapper.UintValue
	368,  // 630: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs9:type_name -> ywrapper.UintValue
	368,  // 631: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_0_64:type_name -> ywrapper.UintValue
	368,  // 632: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_1025_2048:type_name -> ywrapper.UintValue
	368,  // 633: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_129_256:type_name -> ywrapper.UintValue
	368,  // 634: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_131073_262144:type_name -> ywrapper.UintValue
	368,  // 635: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_16385_32768:type_name -> ywrapper.UintValue
	368,  // 636: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_2049_4096:type_name -> ywrapper.UintValue
	368,  // 637: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_257_512:type_name -> ywrapper.UintValue
	368,  // 638: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_262145_524288:type_name -> ywrapper.UintValue
	368,  // 639: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_32769_65536:type_name -> ywrapper.UintValue
	368,  // 640: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_4097_8192:type_name -> ywrapper.UintValue
	368,  // 641: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_513_1024:type_name -> ywrapper.UintValue
	368,  // 642: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_524289_1048576:type_name -> ywrapper.UintValue
	368,  // 643: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_65_128:type_name -> ywrapper.UintValue
	368,  // 644: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_65537_131072:type_name -> ywrapper.UintValue
	368,  // 645: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_8193_16384:type_name -> ywrapper.UintValue
	368,  // 646: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataWmm.be:type_name -> ywrapper.UintValue
	368,  // 647: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataWmm.bk:type_name -> ywrapper.UintValue
	368,  // 648: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataWmm.vi:type_name -> ywrapper.UintValue
	368,  // 649: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataWmm.vo:type_name -> ywrapper.UintValue
	368,  // 650: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs0:type_name -> ywrapper.UintValue
	368,  // 651: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs1:type_name -> ywrapper.UintValue
	368,  // 652: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs2:type_name -> ywrapper.UintValue
	368,  // 653: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs3:type_name -> ywrapper.UintValue
	368,  // 654: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs4:type_name -> ywrapper.UintValue
	368,  // 655: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs5:type_name -> ywrapper.UintValue
	368,  // 656: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs6:type_name -> ywrapper.UintValue
	368,  // 657: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs7:type_name -> ywrapper.UintValue
	368,  // 658: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs8:type_name -> ywrapper.UintValue
	368,  // 659: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs9:type_name -> ywrapper.UintValue
	195,  // 660: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.client_capabilities:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientCapabilities
	196,  // 661: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.client_connection:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientConnection
	197,  // 662: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.client_rf:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientRf
	198,  // 663: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.dot11k_neighbors:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.Dot11KNeighbors
	199,  // 664: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.state:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.State
	193,  // 665: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.ClientKey.client:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client
	200,  // 666: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientCapabilities.state:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientCapabilities.State
	201,  // 667: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientConnection.state:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientConnection.State
	202,  // 668: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientRf.state:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientRf.State
	203,  // 669: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.Dot11KNeighbors.state:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State
	204,  // 670: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.State.counters:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.State.Counters
	366,  // 671: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.State.mac:type_name -> ywrapper.StringValue
	368,  // 672: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientCapabilities.State.channel_support:type_name -> ywrapper.UintValue
	380,  // 673: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientCapabilities.State.client_capabilities:type_name -> openconfig.OpenconfigWifiTypesCLIENTCAPABILITIES
	381,  // 674: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientConnection.State.client_state:type_name -> openconfig.OpenconfigWifiTypesCLIENTSTATE
	368,  // 675: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientConnection.State.connection_time:type_name -> ywrapper.UintValue
	366,  // 676: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientConnection.State.hostname:type_name -> ywrapper.StringValue
	366,  // 677: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientConnection.State.ipv4_address:type_name -> ywrapper.StringValue
	366,  // 678: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientConnection.State.ipv6_addresses:type_name -> ywrapper.StringValue
	366,  // 679: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientConnection.State.operating_system:type_name -> ywrapper.StringValue
	366,  // 680: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientConnection.State.username:type_name -> ywrapper.StringValue
	19,   // 681: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientRf.State.connection_mode:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientRf.State.ConnectionMode
	368,  // 682: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientRf.State.frequency:type_name -> ywrapper.UintValue
	368,  // 683: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientRf.State.phy_rate:type_name -> ywrapper.UintValue
	377,  // 684: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientRf.State.rssi:type_name -> ywrapper.IntValue
	368,  // 685: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientRf.State.snr:type_name -> ywrapper.UintValue
	368,  // 686: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.ClientRf.State.ss:type_name -> ywrapper.UintValue
	368,  // 687: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.channel_load_report:type_name -> ywrapper.UintValue
	368,  // 688: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_antenna:type_name -> ywrapper.UintValue
	366,  // 689: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_bssid:type_name -> ywrapper.StringValue
	368,  // 690: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_channel:type_name -> ywrapper.UintValue
	377,  // 691: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_rssi:type_name -> ywrapper.IntValue
	368,  // 692: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.State.Counters.rx_bytes:type_name -> ywrapper.UintValue
	368,  // 693: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.State.Counters.rx_retries:type_name -> ywrapper.UintValue
	368,  // 694: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.State.Counters.tx_bytes:type_name -> ywrapper.UintValue
	368,  // 695: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Clients.Client.State.Counters.tx_retries:type_name -> ywrapper.UintValue
	367,  // 696: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.Config.dot11r:type_name -> ywrapper.BoolValue
	368,  // 697: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.Config.dot11r_domainid:type_name -> ywrapper.UintValue
	21,   // 698: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.Config.dot11r_method:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.Config.Dot11RMethod
	368,  // 699: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.Config.dot11r_r1key_timeout:type_name -> ywrapper.UintValue
	367,  // 700: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.State.dot11r:type_name -> ywrapper.BoolValue
	368,  // 701: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.State.dot11r_domainid:type_name -> ywrapper.UintValue
	22,   // 702: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.State.dot11r_method:type_name -> openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.State.Dot11RMethod
	368,  // 703: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11R.State.dot11r_r1key_timeout:type_name -> ywrapper.UintValue
	367,  // 704: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V.Config.dot11v_bssidle:type_name -> ywrapper.BoolValue
	368,  // 705: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V.Config.dot11v_bssidle_timeout:type_name -> ywrapper.UintValue
	367,  // 706: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V.Config.dot11v_bsstransition:type_name -> ywrapper.BoolValue
	367,  // 707: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V.Config.dot11v_dms:type_name -> ywrapper.BoolValue
	367,  // 708: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V.State.dot11v_bssidle:type_name -> ywrapper.BoolValue
	368,  // 709: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V.State.dot11v_bssidle_timeout:type_name -> ywrapper.UintValue
	367,  // 710: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V.State.dot11v_bsstransition:type_name -> ywrapper.BoolValue
	367,  // 711: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot11V.State.dot11v_dms:type_name -> ywrapper.BoolValue
	368,  // 712: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot1XTimers.Config.blacklist_time:type_name -> ywrapper.UintValue
	368,  // 713: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot1XTimers.Config.max_auth_failures:type_name -> ywrapper.UintValue
	368,  // 714: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot1XTimers.State.blacklist_time:type_name -> ywrapper.UintValue
	368,  // 715: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Dot1XTimers.State.max_auth_failures:type_name -> ywrapper.UintValue
	367,  // 716: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.Config.trust_dscp:type_name -> ywrapper.BoolValue
	368,  // 717: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.Config.wmm_be_remark:type_name -> ywrapper.UintValue
	368,  // 718: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.Config.wmm_bk_remark:type_name -> ywrapper.UintValue
	368,  // 719: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.Config.wmm_vi_remark:type_name -> ywrapper.UintValue
	368,  // 720: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.Config.wmm_vo_remark:type_name -> ywrapper.UintValue
	367,  // 721: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.State.trust_dscp:type_name -> ywrapper.BoolValue
	368,  // 722: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.State.wmm_be_remark:type_name -> ywrapper.UintValue
	368,  // 723: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.State.wmm_bk_remark:type_name -> ywrapper.UintValue
	368,  // 724: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.State.wmm_vi_remark:type_name -> ywrapper.UintValue
	368,  // 725: openconfig.AccessPoints.AccessPoint.Ssids.Ssid.Wmm.State.wmm_vo_remark:type_name -> ywrapper.UintValue
	229,  // 726: openconfig.AccessPoints.AccessPoint.System.Aaa.accounting:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting
	230,  // 727: openconfig.AccessPoints.AccessPoint.System.Aaa.authentication:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication
	231,  // 728: openconfig.AccessPoints.AccessPoint.System.Aaa.authorization:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization
	232,  // 729: openconfig.AccessPoints.AccessPoint.System.Aaa.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Config
	233,  // 730: openconfig.AccessPoints.AccessPoint.System.Aaa.server_groups:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups
	234,  // 731: openconfig.AccessPoints.AccessPoint.System.Aaa.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.State
	282,  // 732: openconfig.AccessPoints.AccessPoint.System.Alarms.alarm:type_name -> openconfig.AccessPoints.AccessPoint.System.Alarms.AlarmKey
	285,  // 733: openconfig.AccessPoints.AccessPoint.System.Clock.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Clock.Config
	286,  // 734: openconfig.AccessPoints.AccessPoint.System.Clock.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Clock.State
	366,  // 735: openconfig.AccessPoints.AccessPoint.System.Config.domain_name:type_name -> ywrapper.StringValue
	366,  // 736: openconfig.AccessPoints.AccessPoint.System.Config.hostname:type_name -> ywrapper.StringValue
	366,  // 737: openconfig.AccessPoints.AccessPoint.System.Config.login_banner:type_name -> ywrapper.StringValue
	366,  // 738: openconfig.AccessPoints.AccessPoint.System.Config.motd_banner:type_name -> ywrapper.StringValue
	288,  // 739: openconfig.AccessPoints.AccessPoint.System.Cpus.cpu:type_name -> openconfig.AccessPoints.AccessPoint.System.Cpus.CpuKey
	298,  // 740: openconfig.AccessPoints.AccessPoint.System.Dns.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Dns.Config
	299,  // 741: openconfig.AccessPoints.AccessPoint.System.Dns.host_entries:type_name -> openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries
	300,  // 742: openconfig.AccessPoints.AccessPoint.System.Dns.servers:type_name -> openconfig.AccessPoints.AccessPoint.System.Dns.Servers
	301,  // 743: openconfig.AccessPoints.AccessPoint.System.Dns.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Dns.State
	310,  // 744: openconfig.AccessPoints.AccessPoint.System.GrpcServer.config:type_name -> openconfig.AccessPoints.AccessPoint.System.GrpcServer.Config
	311,  // 745: openconfig.AccessPoints.AccessPoint.System.GrpcServer.state:type_name -> openconfig.AccessPoints.AccessPoint.System.GrpcServer.State
	314,  // 746: openconfig.AccessPoints.AccessPoint.System.License.licenses:type_name -> openconfig.AccessPoints.AccessPoint.System.License.Licenses
	319,  // 747: openconfig.AccessPoints.AccessPoint.System.Logging.console:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.Console
	320,  // 748: openconfig.AccessPoints.AccessPoint.System.Logging.remote_servers:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers
	337,  // 749: openconfig.AccessPoints.AccessPoint.System.Memory.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Memory.Config
	338,  // 750: openconfig.AccessPoints.AccessPoint.System.Memory.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Memory.State
	339,  // 751: openconfig.AccessPoints.AccessPoint.System.Messages.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Messages.Config
	340,  // 752: openconfig.AccessPoints.AccessPoint.System.Messages.debug_entries:type_name -> openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries
	341,  // 753: openconfig.AccessPoints.AccessPoint.System.Messages.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Messages.State
	347,  // 754: openconfig.AccessPoints.AccessPoint.System.Ntp.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp.Config
	348,  // 755: openconfig.AccessPoints.AccessPoint.System.Ntp.ntp_keys:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys
	349,  // 756: openconfig.AccessPoints.AccessPoint.System.Ntp.servers:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp.Servers
	350,  // 757: openconfig.AccessPoints.AccessPoint.System.Ntp.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp.State
	360,  // 758: openconfig.AccessPoints.AccessPoint.System.Processes.process:type_name -> openconfig.AccessPoints.AccessPoint.System.Processes.ProcessKey
	362,  // 759: openconfig.AccessPoints.AccessPoint.System.SshServer.config:type_name -> openconfig.AccessPoints.AccessPoint.System.SshServer.Config
	363,  // 760: openconfig.AccessPoints.AccessPoint.System.SshServer.state:type_name -> openconfig.AccessPoints.AccessPoint.System.SshServer.State
	368,  // 761: openconfig.AccessPoints.AccessPoint.System.State.boot_time:type_name -> ywrapper.UintValue
	366,  // 762: openconfig.AccessPoints.AccessPoint.System.State.current_datetime:type_name -> ywrapper.StringValue
	366,  // 763: openconfig.AccessPoints.AccessPoint.System.State.domain_name:type_name -> ywrapper.StringValue
	366,  // 764: openconfig.AccessPoints.AccessPoint.System.State.hostname:type_name -> ywrapper.StringValue
	366,  // 765: openconfig.AccessPoints.AccessPoint.System.State.login_banner:type_name -> ywrapper.StringValue
	366,  // 766: openconfig.AccessPoints.AccessPoint.System.State.motd_banner:type_name -> ywrapper.StringValue
	364,  // 767: openconfig.AccessPoints.AccessPoint.System.TelnetServer.config:type_name -> openconfig.AccessPoints.AccessPoint.System.TelnetServer.Config
	365,  // 768: openconfig.AccessPoints.AccessPoint.System.TelnetServer.state:type_name -> openconfig.AccessPoints.AccessPoint.System.TelnetServer.State
	235,  // 769: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Config
	236,  // 770: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.events:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events
	237,  // 771: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.State
	244,  // 772: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.admin_user:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.AdminUser
	245,  // 773: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Config
	246,  // 774: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.State
	247,  // 775: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.users:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users
	256,  // 776: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Config
	257,  // 777: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.events:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events
	258,  // 778: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.State
	266,  // 779: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.server_group:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroupKey
	238,  // 780: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Config.accounting_method:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Config.AccountingMethodUnion
	240,  // 781: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.event:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.EventKey
	243,  // 782: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.State.accounting_method:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.State.AccountingMethodUnion
	382,  // 783: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Config.AccountingMethodUnion.accounting_method_openconfigaaatypesaaamethodtype:type_name -> openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	241,  // 784: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event.Config
	242,  // 785: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event.State
	383,  // 786: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.EventKey.event_type:type_name -> openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE
	239,  // 787: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.EventKey.event:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event
	383,  // 788: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event.Config.event_type:type_name -> openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE
	24,   // 789: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event.Config.record:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event.Config.Record
	383,  // 790: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event.State.event_type:type_name -> openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE
	25,   // 791: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event.State.record:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.Events.Event.State.Record
	382,  // 792: openconfig.AccessPoints.AccessPoint.System.Aaa.Accounting.State.AccountingMethodUnion.accounting_method_openconfigaaatypesaaamethodtype:type_name -> openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	248,  // 793: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.AdminUser.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.AdminUser.Config
	249,  // 794: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.AdminUser.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.AdminUser.State
	250,  // 795: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Config.authentication_method:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Config.AuthenticationMethodUnion
	251,  // 796: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.State.authentication_method:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.State.AuthenticationMethodUnion
	253,  // 797: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.user:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.UserKey
	366,  // 798: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.AdminUser.Config.admin_password:type_name -> ywrapper.StringValue
	366,  // 799: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.AdminUser.Config.admin_password_hashed:type_name -> ywrapper.StringValue
	366,  // 800: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.AdminUser.State.admin_password:type_name -> ywrapper.StringValue
	366,  // 801: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.AdminUser.State.admin_password_hashed:type_name -> ywrapper.StringValue
	366,  // 802: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.AdminUser.State.admin_username:type_name -> ywrapper.StringValue
	382,  // 803: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Config.AuthenticationMethodUnion.authentication_method_openconfigaaatypesaaamethodtype:type_name -> openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	382,  // 804: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.State.AuthenticationMethodUnion.authentication_method_openconfigaaatypesaaamethodtype:type_name -> openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	254,  // 805: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.Config
	255,  // 806: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.State
	252,  // 807: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.UserKey.user:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User
	366,  // 808: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.Config.password:type_name -> ywrapper.StringValue
	366,  // 809: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.Config.password_hashed:type_name -> ywrapper.StringValue
	384,  // 810: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.Config.role_openconfigaaatypessystemdefinedroles:type_name -> openconfig.OpenconfigAaaTypesSYSTEMDEFINEDROLES
	366,  // 811: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.Config.ssh_key:type_name -> ywrapper.StringValue
	366,  // 812: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.Config.username:type_name -> ywrapper.StringValue
	366,  // 813: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.State.password:type_name -> ywrapper.StringValue
	366,  // 814: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.State.password_hashed:type_name -> ywrapper.StringValue
	384,  // 815: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.State.role_openconfigaaatypessystemdefinedroles:type_name -> openconfig.OpenconfigAaaTypesSYSTEMDEFINEDROLES
	366,  // 816: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.State.ssh_key:type_name -> ywrapper.StringValue
	366,  // 817: openconfig.AccessPoints.AccessPoint.System.Aaa.Authentication.Users.User.State.username:type_name -> ywrapper.StringValue
	259,  // 818: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Config.authorization_method:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Config.AuthorizationMethodUnion
	261,  // 819: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.event:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.EventKey
	264,  // 820: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.State.authorization_method:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.State.AuthorizationMethodUnion
	382,  // 821: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Config.AuthorizationMethodUnion.authorization_method_openconfigaaatypesaaamethodtype:type_name -> openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	262,  // 822: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.Event.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.Event.Config
	263,  // 823: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.Event.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.Event.State
	385,  // 824: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.EventKey.event_type:type_name -> openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE
	260,  // 825: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.EventKey.event:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.Event
	385,  // 826: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.Event.Config.event_type:type_name -> openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE
	385,  // 827: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.Events.Event.State.event_type:type_name -> openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE
	382,  // 828: openconfig.AccessPoints.AccessPoint.System.Aaa.Authorization.State.AuthorizationMethodUnion.authorization_method_openconfigaaatypesaaamethodtype:type_name -> openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	267,  // 829: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Config
	268,  // 830: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.servers:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers
	269,  // 831: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.State
	265,  // 832: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroupKey.server_group:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup
	366,  // 833: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Config.name:type_name -> ywrapper.StringValue
	386,  // 834: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Config.type:type_name -> openconfig.OpenconfigAaaTypesAAASERVERTYPE
	271,  // 835: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.server:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.ServerKey
	366,  // 836: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.State.name:type_name -> ywrapper.StringValue
	386,  // 837: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.State.type:type_name -> openconfig.OpenconfigAaaTypesAAASERVERTYPE
	272,  // 838: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Config
	273,  // 839: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.radius:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius
	274,  // 840: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State
	275,  // 841: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.tacacs:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs
	270,  // 842: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.ServerKey.server:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server
	366,  // 843: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Config.address:type_name -> ywrapper.StringValue
	366,  // 844: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Config.name:type_name -> ywrapper.StringValue
	368,  // 845: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Config.timeout:type_name -> ywrapper.UintValue
	276,  // 846: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.Config
	277,  // 847: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State
	366,  // 848: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.address:type_name -> ywrapper.StringValue
	368,  // 849: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.connection_aborts:type_name -> ywrapper.UintValue
	368,  // 850: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.connection_closes:type_name -> ywrapper.UintValue
	368,  // 851: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.connection_failures:type_name -> ywrapper.UintValue
	368,  // 852: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.connection_opens:type_name -> ywrapper.UintValue
	368,  // 853: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.connection_timeouts:type_name -> ywrapper.UintValue
	368,  // 854: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.errors_received:type_name -> ywrapper.UintValue
	368,  // 855: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.messages_received:type_name -> ywrapper.UintValue
	368,  // 856: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.messages_sent:type_name -> ywrapper.UintValue
	366,  // 857: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.name:type_name -> ywrapper.StringValue
	368,  // 858: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.timeout:type_name -> ywrapper.UintValue
	279,  // 859: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.Config
	280,  // 860: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.State
	368,  // 861: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.Config.acct_port:type_name -> ywrapper.UintValue
	368,  // 862: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.Config.auth_port:type_name -> ywrapper.UintValue
	368,  // 863: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.Config.retransmit_attempts:type_name -> ywrapper.UintValue
	366,  // 864: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.Config.secret_key:type_name -> ywrapper.StringValue
	366,  // 865: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.Config.source_address:type_name -> ywrapper.StringValue
	368,  // 866: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.acct_port:type_name -> ywrapper.UintValue
	368,  // 867: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.auth_port:type_name -> ywrapper.UintValue
	278,  // 868: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.counters:type_name -> openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.Counters
	368,  // 869: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.retransmit_attempts:type_name -> ywrapper.UintValue
	366,  // 870: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.secret_key:type_name -> ywrapper.StringValue
	366,  // 871: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.source_address:type_name -> ywrapper.StringValue
	368,  // 872: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.Counters.access_accepts:type_name -> ywrapper.UintValue
	368,  // 873: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.Counters.access_rejects:type_name -> ywrapper.UintValue
	368,  // 874: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.Counters.retried_access_requests:type_name -> ywrapper.UintValue
	368,  // 875: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.Counters.timeout_access_requests:type_name -> ywrapper.UintValue
	368,  // 876: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.Config.port:type_name -> ywrapper.UintValue
	366,  // 877: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.Config.secret_key:type_name -> ywrapper.StringValue
	366,  // 878: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.Config.source_address:type_name -> ywrapper.StringValue
	368,  // 879: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.State.port:type_name -> ywrapper.UintValue
	366,  // 880: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.State.secret_key:type_name -> ywrapper.StringValue
	366,  // 881: openconfig.AccessPoints.AccessPoint.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.State.source_address:type_name -> ywrapper.StringValue
	283,  // 882: openconfig.AccessPoints.AccessPoint.System.Alarms.Alarm.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Alarms.Alarm.Config
	284,  // 883: openconfig.AccessPoints.AccessPoint.System.Alarms.Alarm.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Alarms.Alarm.State
	281,  // 884: openconfig.AccessPoints.AccessPoint.System.Alarms.AlarmKey.alarm:type_name -> openconfig.AccessPoints.AccessPoint.System.Alarms.Alarm
	366,  // 885: openconfig.AccessPoints.AccessPoint.System.Alarms.Alarm.State.id:type_name -> ywrapper.StringValue
	366,  // 886: openconfig.AccessPoints.AccessPoint.System.Alarms.Alarm.State.resource:type_name -> ywrapper.StringValue
	387,  // 887: openconfig.AccessPoints.AccessPoint.System.Alarms.Alarm.State.severity:type_name -> openconfig.OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY
	366,  // 888: openconfig.AccessPoints.AccessPoint.System.Alarms.Alarm.State.text:type_name -> ywrapper.StringValue
	368,  // 889: openconfig.AccessPoints.AccessPoint.System.Alarms.Alarm.State.time_created:type_name -> ywrapper.UintValue
	388,  // 890: openconfig.AccessPoints.AccessPoint.System.Alarms.Alarm.State.type_id_openconfigalarmtypesopenconfigalarmtypeid:type_name -> openconfig.OpenconfigAlarmTypesOPENCONFIGALARMTYPEID
	366,  // 891: openconfig.AccessPoints.AccessPoint.System.Clock.Config.timezone_name:type_name -> ywrapper.StringValue
	366,  // 892: openconfig.AccessPoints.AccessPoint.System.Clock.State.timezone_name:type_name -> ywrapper.StringValue
	289,  // 893: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State
	27,   // 894: openconfig.AccessPoints.AccessPoint.System.Cpus.CpuKey.index_index:type_name -> openconfig.AccessPoints.AccessPoint.System.Cpus.CpuKey.Index
	287,  // 895: openconfig.AccessPoints.AccessPoint.System.Cpus.CpuKey.cpu:type_name -> openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu
	290,  // 896: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.hardware_interrupt:type_name -> openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.HardwareInterrupt
	291,  // 897: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.idle:type_name -> openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Idle
	26,   // 898: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.index_index:type_name -> openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Index
	292,  // 899: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.kernel:type_name -> openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Kernel
	293,  // 900: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.nice:type_name -> openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Nice
	294,  // 901: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.software_interrupt:type_name -> openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.SoftwareInterrupt
	295,  // 902: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.total:type_name -> openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Total
	296,  // 903: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.user:type_name -> openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.User
	297,  // 904: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.wait:type_name -> openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Wait
	368,  // 905: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.HardwareInterrupt.avg:type_name -> ywrapper.UintValue
	368,  // 906: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.HardwareInterrupt.instant:type_name -> ywrapper.UintValue
	368,  // 907: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.HardwareInterrupt.interval:type_name -> ywrapper.UintValue
	368,  // 908: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.HardwareInterrupt.max:type_name -> ywrapper.UintValue
	368,  // 909: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.HardwareInterrupt.max_time:type_name -> ywrapper.UintValue
	368,  // 910: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.HardwareInterrupt.min:type_name -> ywrapper.UintValue
	368,  // 911: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.HardwareInterrupt.min_time:type_name -> ywrapper.UintValue
	368,  // 912: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Idle.avg:type_name -> ywrapper.UintValue
	368,  // 913: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Idle.instant:type_name -> ywrapper.UintValue
	368,  // 914: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Idle.interval:type_name -> ywrapper.UintValue
	368,  // 915: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Idle.max:type_name -> ywrapper.UintValue
	368,  // 916: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Idle.max_time:type_name -> ywrapper.UintValue
	368,  // 917: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Idle.min:type_name -> ywrapper.UintValue
	368,  // 918: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Idle.min_time:type_name -> ywrapper.UintValue
	368,  // 919: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Kernel.avg:type_name -> ywrapper.UintValue
	368,  // 920: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Kernel.instant:type_name -> ywrapper.UintValue
	368,  // 921: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Kernel.interval:type_name -> ywrapper.UintValue
	368,  // 922: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Kernel.max:type_name -> ywrapper.UintValue
	368,  // 923: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Kernel.max_time:type_name -> ywrapper.UintValue
	368,  // 924: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Kernel.min:type_name -> ywrapper.UintValue
	368,  // 925: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Kernel.min_time:type_name -> ywrapper.UintValue
	368,  // 926: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Nice.avg:type_name -> ywrapper.UintValue
	368,  // 927: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Nice.instant:type_name -> ywrapper.UintValue
	368,  // 928: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Nice.interval:type_name -> ywrapper.UintValue
	368,  // 929: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Nice.max:type_name -> ywrapper.UintValue
	368,  // 930: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Nice.max_time:type_name -> ywrapper.UintValue
	368,  // 931: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Nice.min:type_name -> ywrapper.UintValue
	368,  // 932: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Nice.min_time:type_name -> ywrapper.UintValue
	368,  // 933: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.SoftwareInterrupt.avg:type_name -> ywrapper.UintValue
	368,  // 934: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.SoftwareInterrupt.instant:type_name -> ywrapper.UintValue
	368,  // 935: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.SoftwareInterrupt.interval:type_name -> ywrapper.UintValue
	368,  // 936: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.SoftwareInterrupt.max:type_name -> ywrapper.UintValue
	368,  // 937: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.SoftwareInterrupt.max_time:type_name -> ywrapper.UintValue
	368,  // 938: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.SoftwareInterrupt.min:type_name -> ywrapper.UintValue
	368,  // 939: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.SoftwareInterrupt.min_time:type_name -> ywrapper.UintValue
	368,  // 940: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Total.avg:type_name -> ywrapper.UintValue
	368,  // 941: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Total.instant:type_name -> ywrapper.UintValue
	368,  // 942: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Total.interval:type_name -> ywrapper.UintValue
	368,  // 943: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Total.max:type_name -> ywrapper.UintValue
	368,  // 944: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Total.max_time:type_name -> ywrapper.UintValue
	368,  // 945: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Total.min:type_name -> ywrapper.UintValue
	368,  // 946: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Total.min_time:type_name -> ywrapper.UintValue
	368,  // 947: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.User.avg:type_name -> ywrapper.UintValue
	368,  // 948: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.User.instant:type_name -> ywrapper.UintValue
	368,  // 949: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.User.interval:type_name -> ywrapper.UintValue
	368,  // 950: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.User.max:type_name -> ywrapper.UintValue
	368,  // 951: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.User.max_time:type_name -> ywrapper.UintValue
	368,  // 952: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.User.min:type_name -> ywrapper.UintValue
	368,  // 953: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.User.min_time:type_name -> ywrapper.UintValue
	368,  // 954: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Wait.avg:type_name -> ywrapper.UintValue
	368,  // 955: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Wait.instant:type_name -> ywrapper.UintValue
	368,  // 956: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Wait.interval:type_name -> ywrapper.UintValue
	368,  // 957: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Wait.max:type_name -> ywrapper.UintValue
	368,  // 958: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Wait.max_time:type_name -> ywrapper.UintValue
	368,  // 959: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Wait.min:type_name -> ywrapper.UintValue
	368,  // 960: openconfig.AccessPoints.AccessPoint.System.Cpus.Cpu.State.Wait.min_time:type_name -> ywrapper.UintValue
	366,  // 961: openconfig.AccessPoints.AccessPoint.System.Dns.Config.search:type_name -> ywrapper.StringValue
	303,  // 962: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.host_entry:type_name -> openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntryKey
	307,  // 963: openconfig.AccessPoints.AccessPoint.System.Dns.Servers.server:type_name -> openconfig.AccessPoints.AccessPoint.System.Dns.Servers.ServerKey
	366,  // 964: openconfig.AccessPoints.AccessPoint.System.Dns.State.search:type_name -> ywrapper.StringValue
	304,  // 965: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry.Config
	305,  // 966: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry.State
	302,  // 967: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntryKey.host_entry:type_name -> openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry
	366,  // 968: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry.Config.alias:type_name -> ywrapper.StringValue
	366,  // 969: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry.Config.hostname:type_name -> ywrapper.StringValue
	366,  // 970: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry.Config.ipv4_address:type_name -> ywrapper.StringValue
	366,  // 971: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry.Config.ipv6_address:type_name -> ywrapper.StringValue
	366,  // 972: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry.State.alias:type_name -> ywrapper.StringValue
	366,  // 973: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry.State.hostname:type_name -> ywrapper.StringValue
	366,  // 974: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry.State.ipv4_address:type_name -> ywrapper.StringValue
	366,  // 975: openconfig.AccessPoints.AccessPoint.System.Dns.HostEntries.HostEntry.State.ipv6_address:type_name -> ywrapper.StringValue
	308,  // 976: openconfig.AccessPoints.AccessPoint.System.Dns.Servers.Server.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Dns.Servers.Server.Config
	309,  // 977: openconfig.AccessPoints.AccessPoint.System.Dns.Servers.Server.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Dns.Servers.Server.State
	306,  // 978: openconfig.AccessPoints.AccessPoint.System.Dns.Servers.ServerKey.server:type_name -> openconfig.AccessPoints.AccessPoint.System.Dns.Servers.Server
	366,  // 979: openconfig.AccessPoints.AccessPoint.System.Dns.Servers.Server.Config.address:type_name -> ywrapper.StringValue
	368,  // 980: openconfig.AccessPoints.AccessPoint.System.Dns.Servers.Server.Config.port:type_name -> ywrapper.UintValue
	366,  // 981: openconfig.AccessPoints.AccessPoint.System.Dns.Servers.Server.State.address:type_name -> ywrapper.StringValue
	368,  // 982: openconfig.AccessPoints.AccessPoint.System.Dns.Servers.Server.State.port:type_name -> ywrapper.UintValue
	366,  // 983: openconfig.AccessPoints.AccessPoint.System.GrpcServer.Config.certificate_id:type_name -> ywrapper.StringValue
	367,  // 984: openconfig.AccessPoints.AccessPoint.System.GrpcServer.Config.enable:type_name -> ywrapper.BoolValue
	312,  // 985: openconfig.AccessPoints.AccessPoint.System.GrpcServer.Config.listen_addresses:type_name -> openconfig.AccessPoints.AccessPoint.System.GrpcServer.Config.ListenAddressesUnion
	367,  // 986: openconfig.AccessPoints.AccessPoint.System.GrpcServer.Config.metadata_authentication:type_name -> ywrapper.BoolValue
	368,  // 987: openconfig.AccessPoints.AccessPoint.System.GrpcServer.Config.port:type_name -> ywrapper.UintValue
	367,  // 988: openconfig.AccessPoints.AccessPoint.System.GrpcServer.Config.transport_security:type_name -> ywrapper.BoolValue
	366,  // 989: openconfig.AccessPoints.AccessPoint.System.GrpcServer.State.certificate_id:type_name -> ywrapper.StringValue
	367,  // 990: openconfig.AccessPoints.AccessPoint.System.GrpcServer.State.enable:type_name -> ywrapper.BoolValue
	313,  // 991: openconfig.AccessPoints.AccessPoint.System.GrpcServer.State.listen_addresses:type_name -> openconfig.AccessPoints.AccessPoint.System.GrpcServer.State.ListenAddressesUnion
	367,  // 992: openconfig.AccessPoints.AccessPoint.System.GrpcServer.State.metadata_authentication:type_name -> ywrapper.BoolValue
	368,  // 993: openconfig.AccessPoints.AccessPoint.System.GrpcServer.State.port:type_name -> ywrapper.UintValue
	367,  // 994: openconfig.AccessPoints.AccessPoint.System.GrpcServer.State.transport_security:type_name -> ywrapper.BoolValue
	28,   // 995: openconfig.AccessPoints.AccessPoint.System.GrpcServer.Config.ListenAddressesUnion.listen_addresses_listenaddresses:type_name -> openconfig.AccessPoints.AccessPoint.System.GrpcServer.Config.ListenAddresses
	29,   // 996: openconfig.AccessPoints.AccessPoint.System.GrpcServer.State.ListenAddressesUnion.listen_addresses_listenaddresses:type_name -> openconfig.AccessPoints.AccessPoint.System.GrpcServer.State.ListenAddresses
	316,  // 997: openconfig.AccessPoints.AccessPoint.System.License.Licenses.license:type_name -> openconfig.AccessPoints.AccessPoint.System.License.Licenses.LicenseKey
	317,  // 998: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.config:type_name -> openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.Config
	318,  // 999: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.state:type_name -> openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.State
	315,  // 1000: openconfig.AccessPoints.AccessPoint.System.License.Licenses.LicenseKey.license:type_name -> openconfig.AccessPoints.AccessPoint.System.License.Licenses.License
	367,  // 1001: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.Config.active:type_name -> ywrapper.BoolValue
	366,  // 1002: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.Config.license_id:type_name -> ywrapper.StringValue
	367,  // 1003: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.State.active:type_name -> ywrapper.BoolValue
	366,  // 1004: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.State.description:type_name -> ywrapper.StringValue
	368,  // 1005: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.State.expiration_date:type_name -> ywrapper.UintValue
	367,  // 1006: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.State.expired:type_name -> ywrapper.BoolValue
	367,  // 1007: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.State.in_use:type_name -> ywrapper.BoolValue
	368,  // 1008: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.State.issue_date:type_name -> ywrapper.UintValue
	366,  // 1009: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.State.license_id:type_name -> ywrapper.StringValue
	367,  // 1010: openconfig.AccessPoints.AccessPoint.System.License.Licenses.License.State.valid:type_name -> ywrapper.BoolValue
	321,  // 1011: openconfig.AccessPoints.AccessPoint.System.Logging.Console.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.Console.Config
	322,  // 1012: openconfig.AccessPoints.AccessPoint.System.Logging.Console.selectors:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors
	323,  // 1013: openconfig.AccessPoints.AccessPoint.System.Logging.Console.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.Console.State
	329,  // 1014: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.remote_server:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServerKey
	325,  // 1015: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.selector:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.SelectorKey
	326,  // 1016: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.Selector.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.Selector.Config
	327,  // 1017: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.Selector.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.Selector.State
	389,  // 1018: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.SelectorKey.facility:type_name -> openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	390,  // 1019: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.SelectorKey.severity:type_name -> openconfig.OpenconfigSystemLoggingSyslogSeverity
	324,  // 1020: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.SelectorKey.selector:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.Selector
	389,  // 1021: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.Selector.Config.facility:type_name -> openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	390,  // 1022: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.Selector.Config.severity:type_name -> openconfig.OpenconfigSystemLoggingSyslogSeverity
	389,  // 1023: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.Selector.State.facility:type_name -> openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	390,  // 1024: openconfig.AccessPoints.AccessPoint.System.Logging.Console.Selectors.Selector.State.severity:type_name -> openconfig.OpenconfigSystemLoggingSyslogSeverity
	330,  // 1025: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Config
	331,  // 1026: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.selectors:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors
	332,  // 1027: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.State
	328,  // 1028: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServerKey.remote_server:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer
	366,  // 1029: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Config.host:type_name -> ywrapper.StringValue
	368,  // 1030: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Config.remote_port:type_name -> ywrapper.UintValue
	366,  // 1031: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Config.source_address:type_name -> ywrapper.StringValue
	334,  // 1032: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.selector:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.SelectorKey
	366,  // 1033: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.State.host:type_name -> ywrapper.StringValue
	368,  // 1034: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.State.remote_port:type_name -> ywrapper.UintValue
	366,  // 1035: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.State.source_address:type_name -> ywrapper.StringValue
	335,  // 1036: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.Config
	336,  // 1037: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.State
	389,  // 1038: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.SelectorKey.facility:type_name -> openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	390,  // 1039: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.SelectorKey.severity:type_name -> openconfig.OpenconfigSystemLoggingSyslogSeverity
	333,  // 1040: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.SelectorKey.selector:type_name -> openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.Selector
	389,  // 1041: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.Config.facility:type_name -> openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	390,  // 1042: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.Config.severity:type_name -> openconfig.OpenconfigSystemLoggingSyslogSeverity
	389,  // 1043: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.State.facility:type_name -> openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	390,  // 1044: openconfig.AccessPoints.AccessPoint.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.State.severity:type_name -> openconfig.OpenconfigSystemLoggingSyslogSeverity
	368,  // 1045: openconfig.AccessPoints.AccessPoint.System.Memory.State.physical:type_name -> ywrapper.UintValue
	368,  // 1046: openconfig.AccessPoints.AccessPoint.System.Memory.State.reserved:type_name -> ywrapper.UintValue
	391,  // 1047: openconfig.AccessPoints.AccessPoint.System.Messages.Config.severity:type_name -> openconfig.OpenconfigMessagesSyslogSeverity
	343,  // 1048: openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.debug_service:type_name -> openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugServiceKey
	346,  // 1049: openconfig.AccessPoints.AccessPoint.System.Messages.State.message:type_name -> openconfig.AccessPoints.AccessPoint.System.Messages.State.Message
	391,  // 1050: openconfig.AccessPoints.AccessPoint.System.Messages.State.severity:type_name -> openconfig.OpenconfigMessagesSyslogSeverity
	344,  // 1051: openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugService.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugService.Config
	345,  // 1052: openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugService.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugService.State
	392,  // 1053: openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugServiceKey.service:type_name -> openconfig.OpenconfigMessagesDEBUGSERVICE
	342,  // 1054: openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugServiceKey.debug_service:type_name -> openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugService
	367,  // 1055: openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugService.Config.enabled:type_name -> ywrapper.BoolValue
	392,  // 1056: openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugService.Config.service:type_name -> openconfig.OpenconfigMessagesDEBUGSERVICE
	367,  // 1057: openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugService.State.enabled:type_name -> ywrapper.BoolValue
	392,  // 1058: openconfig.AccessPoints.AccessPoint.System.Messages.DebugEntries.DebugService.State.service:type_name -> openconfig.OpenconfigMessagesDEBUGSERVICE
	366,  // 1059: openconfig.AccessPoints.AccessPoint.System.Messages.State.Message.app_name:type_name -> ywrapper.StringValue
	366,  // 1060: openconfig.AccessPoints.AccessPoint.System.Messages.State.Message.msg:type_name -> ywrapper.StringValue
	366,  // 1061: openconfig.AccessPoints.AccessPoint.System.Messages.State.Message.msgid:type_name -> ywrapper.StringValue
	368,  // 1062: openconfig.AccessPoints.AccessPoint.System.Messages.State.Message.priority:type_name -> ywrapper.UintValue
	366,  // 1063: openconfig.AccessPoints.AccessPoint.System.Messages.State.Message.procid:type_name -> ywrapper.StringValue
	367,  // 1064: openconfig.AccessPoints.AccessPoint.System.Ntp.Config.enable_ntp_auth:type_name -> ywrapper.BoolValue
	367,  // 1065: openconfig.AccessPoints.AccessPoint.System.Ntp.Config.enabled:type_name -> ywrapper.BoolValue
	366,  // 1066: openconfig.AccessPoints.AccessPoint.System.Ntp.Config.ntp_source_address:type_name -> ywrapper.StringValue
	352,  // 1067: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.ntp_key:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKeyKey
	356,  // 1068: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.server:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.ServerKey
	368,  // 1069: openconfig.AccessPoints.AccessPoint.System.Ntp.State.auth_mismatch:type_name -> ywrapper.UintValue
	367,  // 1070: openconfig.AccessPoints.AccessPoint.System.Ntp.State.enable_ntp_auth:type_name -> ywrapper.BoolValue
	367,  // 1071: openconfig.AccessPoints.AccessPoint.System.Ntp.State.enabled:type_name -> ywrapper.BoolValue
	366,  // 1072: openconfig.AccessPoints.AccessPoint.System.Ntp.State.ntp_source_address:type_name -> ywrapper.StringValue
	353,  // 1073: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKey.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKey.Config
	354,  // 1074: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKey.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKey.State
	351,  // 1075: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKeyKey.ntp_key:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKey
	368,  // 1076: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKey.Config.key_id:type_name -> ywrapper.UintValue
	393,  // 1077: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKey.Config.key_type:type_name -> openconfig.OpenconfigSystemNTPAUTHTYPE
	366,  // 1078: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKey.Config.key_value:type_name -> ywrapper.StringValue
	368,  // 1079: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKey.State.key_id:type_name -> ywrapper.UintValue
	393,  // 1080: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKey.State.key_type:type_name -> openconfig.OpenconfigSystemNTPAUTHTYPE
	366,  // 1081: openconfig.AccessPoints.AccessPoint.System.Ntp.NtpKeys.NtpKey.State.key_value:type_name -> ywrapper.StringValue
	357,  // 1082: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.config:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.Config
	358,  // 1083: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State
	355,  // 1084: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.ServerKey.server:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server
	366,  // 1085: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.Config.address:type_name -> ywrapper.StringValue
	30,   // 1086: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.Config.association_type:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.Config.AssociationType
	367,  // 1087: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.Config.iburst:type_name -> ywrapper.BoolValue
	368,  // 1088: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.Config.port:type_name -> ywrapper.UintValue
	367,  // 1089: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.Config.prefer:type_name -> ywrapper.BoolValue
	368,  // 1090: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.Config.version:type_name -> ywrapper.UintValue
	366,  // 1091: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State.address:type_name -> ywrapper.StringValue
	31,   // 1092: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State.association_type:type_name -> openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State.AssociationType
	367,  // 1093: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State.iburst:type_name -> ywrapper.BoolValue
	368,  // 1094: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State.offset:type_name -> ywrapper.UintValue
	368,  // 1095: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State.poll_interval:type_name -> ywrapper.UintValue
	368,  // 1096: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State.port:type_name -> ywrapper.UintValue
	367,  // 1097: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State.prefer:type_name -> ywrapper.BoolValue
	368,  // 1098: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State.root_delay:type_name -> ywrapper.UintValue
	368,  // 1099: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State.root_dispersion:type_name -> ywrapper.UintValue
	368,  // 1100: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State.stratum:type_name -> ywrapper.UintValue
	368,  // 1101: openconfig.AccessPoints.AccessPoint.System.Ntp.Servers.Server.State.version:type_name -> ywrapper.UintValue
	361,  // 1102: openconfig.AccessPoints.AccessPoint.System.Processes.Process.state:type_name -> openconfig.AccessPoints.AccessPoint.System.Processes.Process.State
	359,  // 1103: openconfig.AccessPoints.AccessPoint.System.Processes.ProcessKey.process:type_name -> openconfig.AccessPoints.AccessPoint.System.Processes.Process
	366,  // 1104: openconfig.AccessPoints.AccessPoint.System.Processes.Process.State.args:type_name -> ywrapper.StringValue
	368,  // 1105: openconfig.AccessPoints.AccessPoint.System.Processes.Process.State.cpu_usage_system:type_name -> ywrapper.UintValue
	368,  // 1106: openconfig.AccessPoints.AccessPoint.System.Processes.Process.State.cpu_usage_user:type_name -> ywrapper.UintValue
	368,  // 1107: openconfig.AccessPoints.AccessPoint.System.Processes.Process.State.cpu_utilization:type_name -> ywrapper.UintValue
	368,  // 1108: openconfig.AccessPoints.AccessPoint.System.Processes.Process.State.memory_usage:type_name -> ywrapper.UintValue
	368,  // 1109: openconfig.AccessPoints.AccessPoint.System.Processes.Process.State.memory_utilization:type_name -> ywrapper.UintValue
	366,  // 1110: openconfig.AccessPoints.AccessPoint.System.Processes.Process.State.name:type_name -> ywrapper.StringValue
	368,  // 1111: openconfig.AccessPoints.AccessPoint.System.Processes.Process.State.pid:type_name -> ywrapper.UintValue
	368,  // 1112: openconfig.AccessPoints.AccessPoint.System.Processes.Process.State.start_time:type_name -> ywrapper.UintValue
	367,  // 1113: openconfig.AccessPoints.AccessPoint.System.SshServer.Config.enable:type_name -> ywrapper.BoolValue
	32,   // 1114: openconfig.AccessPoints.AccessPoint.System.SshServer.Config.protocol_version:type_name -> openconfig.AccessPoints.AccessPoint.System.SshServer.Config.ProtocolVersion
	368,  // 1115: openconfig.AccessPoints.AccessPoint.System.SshServer.Config.rate_limit:type_name -> ywrapper.UintValue
	368,  // 1116: openconfig.AccessPoints.AccessPoint.System.SshServer.Config.session_limit:type_name -> ywrapper.UintValue
	368,  // 1117: openconfig.AccessPoints.AccessPoint.System.SshServer.Config.timeout:type_name -> ywrapper.UintValue
	367,  // 1118: openconfig.AccessPoints.AccessPoint.System.SshServer.State.enable:type_name -> ywrapper.BoolValue
	33,   // 1119: openconfig.AccessPoints.AccessPoint.System.SshServer.State.protocol_version:type_name -> openconfig.AccessPoints.AccessPoint.System.SshServer.State.ProtocolVersion
	368,  // 1120: openconfig.AccessPoints.AccessPoint.System.SshServer.State.rate_limit:type_name -> ywrapper.UintValue
	368,  // 1121: openconfig.AccessPoints.AccessPoint.System.SshServer.State.session_limit:type_name -> ywrapper.UintValue
	368,  // 1122: openconfig.AccessPoints.AccessPoint.System.SshServer.State.timeout:type_name -> ywrapper.UintValue
	367,  // 1123: openconfig.AccessPoints.AccessPoint.System.TelnetServer.Config.enable:type_name -> ywrapper.BoolValue
	368,  // 1124: openconfig.AccessPoints.AccessPoint.System.TelnetServer.Config.rate_limit:type_name -> ywrapper.UintValue
	368,  // 1125: openconfig.AccessPoints.AccessPoint.System.TelnetServer.Config.session_limit:type_name -> ywrapper.UintValue
	368,  // 1126: openconfig.AccessPoints.AccessPoint.System.TelnetServer.Config.timeout:type_name -> ywrapper.UintValue
	367,  // 1127: openconfig.AccessPoints.AccessPoint.System.TelnetServer.State.enable:type_name -> ywrapper.BoolValue
	368,  // 1128: openconfig.AccessPoints.AccessPoint.System.TelnetServer.State.rate_limit:type_name -> ywrapper.UintValue
	368,  // 1129: openconfig.AccessPoints.AccessPoint.System.TelnetServer.State.session_limit:type_name -> ywrapper.UintValue
	368,  // 1130: openconfig.AccessPoints.AccessPoint.System.TelnetServer.State.timeout:type_name -> ywrapper.UintValue
	1131, // [1131:1131] is the sub-list for method output_type
	1131, // [1131:1131] is the sub-list for method input_type
	1131, // [1131:1131] is the sub-list for extension type_name
	1131, // [1131:1131] is the sub-list for extension extendee
	0,    // [0:1131] is the sub-list for field type_name
}

func init() { file_openconfig_access_points_proto_init() }
func file_openconfig_access_points_proto_init() {
	if File_openconfig_access_points_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_access_points_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPointKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_AssignedApManagers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Radios); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_AssignedApManagers_ApManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_AssignedApManagers_ApManagerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_AssignedApManagers_ApManager_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_InterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Poe_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_SubinterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv4_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Interfaces_Interface_Tunnel_Ipv6_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Radios_Radio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Radios_RadioKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Radios_Radio_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Radios_Radio_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Radios_Radio_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Radios_Radio_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Radios_Radio_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_SsidKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_BandSteering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Clients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Dot11R); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Dot11V); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Wmm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_BssidKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_ClientKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Alarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Clock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Cpus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Dns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_GrpcServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Messages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Ntp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Processes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_SshServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_TelnetServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Accounting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Accounting_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Accounting_Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Accounting_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethodUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_EventKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethodUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authentication_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authentication_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethodUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethodUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_UserKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authorization_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authorization_Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authorization_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethodUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_EventKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethodUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Alarms_Alarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Alarms_AlarmKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Alarms_Alarm_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Alarms_Alarm_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Clock_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Clock_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Cpus_Cpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Cpus_CpuKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Cpus_Cpu_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Dns_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Dns_HostEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Dns_Servers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Dns_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Dns_Servers_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Dns_Servers_ServerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Dns_Servers_Server_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Dns_Servers_Server_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_GrpcServer_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_GrpcServer_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_GrpcServer_Config_ListenAddressesUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_GrpcServer_State_ListenAddressesUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_License_Licenses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_License_Licenses_License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_License_Licenses_LicenseKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_License_Licenses_License_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_License_Licenses_License_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_Console); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_RemoteServers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_Console_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_Console_Selectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_Console_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_Console_Selectors_SelectorKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Memory_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Memory_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Messages_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Messages_DebugEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Messages_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugServiceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Messages_State_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Ntp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Ntp_NtpKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Ntp_Servers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Ntp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKeyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Ntp_Servers_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Ntp_Servers_ServerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Ntp_Servers_Server_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Processes_Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Processes_ProcessKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_Processes_Process_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_SshServer_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_SshServer_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_TelnetServer_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_access_points_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoints_AccessPoint_System_TelnetServer_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openconfig_access_points_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanString)(nil),
		(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanUint64)(nil),
		(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanString)(nil),
		(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanUint64)(nil),
	}
	file_openconfig_access_points_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanString)(nil),
		(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanUint64)(nil),
		(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanString)(nil),
		(*AccessPoints_AccessPoint_Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanUint64)(nil),
	}
	file_openconfig_access_points_proto_msgTypes[220].OneofWrappers = []interface{}{
		(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_RoleOpenconfigaaatypessystemdefinedroles)(nil),
		(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_RoleString)(nil),
	}
	file_openconfig_access_points_proto_msgTypes[221].OneofWrappers = []interface{}{
		(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_RoleOpenconfigaaatypessystemdefinedroles)(nil),
		(*AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_RoleString)(nil),
	}
	file_openconfig_access_points_proto_msgTypes[250].OneofWrappers = []interface{}{
		(*AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeIdOpenconfigalarmtypesopenconfigalarmtypeid)(nil),
		(*AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeIdString)(nil),
	}
	file_openconfig_access_points_proto_msgTypes[254].OneofWrappers = []interface{}{
		(*AccessPoints_AccessPoint_System_Cpus_CpuKey_IndexIndex)(nil),
		(*AccessPoints_AccessPoint_System_Cpus_CpuKey_IndexUint64)(nil),
	}
	file_openconfig_access_points_proto_msgTypes[255].OneofWrappers = []interface{}{
		(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_IndexIndex)(nil),
		(*AccessPoints_AccessPoint_System_Cpus_Cpu_State_IndexUint64)(nil),
	}
	file_openconfig_access_points_proto_msgTypes[283].OneofWrappers = []interface{}{
		(*AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseDataBytes)(nil),
		(*AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseDataString)(nil),
	}
	file_openconfig_access_points_proto_msgTypes[284].OneofWrappers = []interface{}{
		(*AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseDataBytes)(nil),
		(*AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseDataString)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_access_points_proto_rawDesc,
			NumEnums:      34,
			NumMessages:   332,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_access_points_proto_goTypes,
		DependencyIndexes: file_openconfig_access_points_proto_depIdxs,
		EnumInfos:         file_openconfig_access_points_proto_enumTypes,
		MessageInfos:      file_openconfig_access_points_proto_msgTypes,
	}.Build()
	File_openconfig_access_points_proto = out.File
	file_openconfig_access_points_proto_rawDesc = nil
	file_openconfig_access_points_proto_goTypes = nil
	file_openconfig_access_points_proto_depIdxs = nil
}
