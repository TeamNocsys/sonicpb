// openconfig.openconfig_probes is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_probes.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Probes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Probe []*Probes_ProbeKey `protobuf:"bytes,259116739,rep,name=probe,proto3" json:"probe,omitempty"`
}

func (x *Probes) Reset() {
	*x = Probes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes) ProtoMessage() {}

func (x *Probes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes.ProtoReflect.Descriptor instead.
func (*Probes) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0}
}

func (x *Probes) GetProbe() []*Probes_ProbeKey {
	if x != nil {
		return x.Probe
	}
	return nil
}

type Probes_Probe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Probes_Probe_Config `protobuf:"bytes,371483076,opt,name=config,proto3" json:"config,omitempty"`
	State  *Probes_Probe_State  `protobuf:"bytes,472644061,opt,name=state,proto3" json:"state,omitempty"`
	Tests  *Probes_Probe_Tests  `protobuf:"bytes,169946161,opt,name=tests,proto3" json:"tests,omitempty"`
}

func (x *Probes_Probe) Reset() {
	*x = Probes_Probe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe) ProtoMessage() {}

func (x *Probes_Probe) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe.ProtoReflect.Descriptor instead.
func (*Probes_Probe) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Probes_Probe) GetConfig() *Probes_Probe_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Probes_Probe) GetState() *Probes_Probe_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Probes_Probe) GetTests() *Probes_Probe_Tests {
	if x != nil {
		return x.Tests
	}
	return nil
}

type Probes_ProbeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Probe *Probes_Probe `protobuf:"bytes,2,opt,name=probe,proto3" json:"probe,omitempty"`
}

func (x *Probes_ProbeKey) Reset() {
	*x = Probes_ProbeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_ProbeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_ProbeKey) ProtoMessage() {}

func (x *Probes_ProbeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_ProbeKey.ProtoReflect.Descriptor instead.
func (*Probes_ProbeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Probes_ProbeKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Probes_ProbeKey) GetProbe() *Probes_Probe {
	if x != nil {
		return x.Probe
	}
	return nil
}

type Probes_Probe_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue   `protobuf:"bytes,299351654,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Name    *ywrapper.StringValue `protobuf:"bytes,252528966,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Probes_Probe_Config) Reset() {
	*x = Probes_Probe_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Config) ProtoMessage() {}

func (x *Probes_Probe_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Config.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Probes_Probe_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Probes_Probe_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Probes_Probe_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue   `protobuf:"bytes,35574259,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Name    *ywrapper.StringValue `protobuf:"bytes,115823289,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Probes_Probe_State) Reset() {
	*x = Probes_Probe_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_State) ProtoMessage() {}

func (x *Probes_Probe_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_State.ProtoReflect.Descriptor instead.
func (*Probes_Probe_State) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Probes_Probe_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Probes_Probe_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Probes_Probe_Tests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test []*Probes_Probe_Tests_TestKey `protobuf:"bytes,405558272,rep,name=test,proto3" json:"test,omitempty"`
}

func (x *Probes_Probe_Tests) Reset() {
	*x = Probes_Probe_Tests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests) ProtoMessage() {}

func (x *Probes_Probe_Tests) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Probes_Probe_Tests) GetTest() []*Probes_Probe_Tests_TestKey {
	if x != nil {
		return x.Test
	}
	return nil
}

type Probes_Probe_Tests_Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config  *Probes_Probe_Tests_Test_Config  `protobuf:"bytes,178866037,opt,name=config,proto3" json:"config,omitempty"`
	Results *Probes_Probe_Tests_Test_Results `protobuf:"bytes,37245791,opt,name=results,proto3" json:"results,omitempty"`
	State   *Probes_Probe_Tests_Test_State   `protobuf:"bytes,468483178,opt,name=state,proto3" json:"state,omitempty"`
	Target  *Probes_Probe_Tests_Test_Target  `protobuf:"bytes,72482592,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Probes_Probe_Tests_Test) Reset() {
	*x = Probes_Probe_Tests_Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests_Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests_Test) ProtoMessage() {}

func (x *Probes_Probe_Tests_Test) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests_Test.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests_Test) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *Probes_Probe_Tests_Test) GetConfig() *Probes_Probe_Tests_Test_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Probes_Probe_Tests_Test) GetResults() *Probes_Probe_Tests_Test_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *Probes_Probe_Tests_Test) GetState() *Probes_Probe_Tests_Test_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Probes_Probe_Tests_Test) GetTarget() *Probes_Probe_Tests_Test_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type Probes_Probe_Tests_TestKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Test *Probes_Probe_Tests_Test `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *Probes_Probe_Tests_TestKey) Reset() {
	*x = Probes_Probe_Tests_TestKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests_TestKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests_TestKey) ProtoMessage() {}

func (x *Probes_Probe_Tests_TestKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests_TestKey.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests_TestKey) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

func (x *Probes_Probe_Tests_TestKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Probes_Probe_Tests_TestKey) GetTest() *Probes_Probe_Tests_Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type Probes_Probe_Tests_Test_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count       *ywrapper.UintValue      `protobuf:"bytes,208592917,opt,name=count,proto3" json:"count,omitempty"`
	Dscp        *ywrapper.UintValue      `protobuf:"bytes,425022362,opt,name=dscp,proto3" json:"dscp,omitempty"`
	Enabled     *ywrapper.BoolValue      `protobuf:"bytes,453000475,opt,name=enabled,proto3" json:"enabled,omitempty"`
	HistorySize *ywrapper.UintValue      `protobuf:"bytes,60923906,opt,name=history_size,json=historySize,proto3" json:"history_size,omitempty"`
	Interval    *ywrapper.UintValue      `protobuf:"bytes,65230595,opt,name=interval,proto3" json:"interval,omitempty"`
	Name        *ywrapper.StringValue    `protobuf:"bytes,225036113,opt,name=name,proto3" json:"name,omitempty"`
	Source      *ywrapper.StringValue    `protobuf:"bytes,17077703,opt,name=source,proto3" json:"source,omitempty"`
	SourcePort  *ywrapper.UintValue      `protobuf:"bytes,452973905,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	TestType    OpenconfigProbesTestType `protobuf:"varint,426757249,opt,name=test_type,json=testType,proto3,enum=openconfig.OpenconfigProbesTestType" json:"test_type,omitempty"`
}

func (x *Probes_Probe_Tests_Test_Config) Reset() {
	*x = Probes_Probe_Tests_Test_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests_Test_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests_Test_Config) ProtoMessage() {}

func (x *Probes_Probe_Tests_Test_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests_Test_Config.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests_Test_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0}
}

func (x *Probes_Probe_Tests_Test_Config) GetCount() *ywrapper.UintValue {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Config) GetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Config) GetHistorySize() *ywrapper.UintValue {
	if x != nil {
		return x.HistorySize
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Config) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Config) GetSource() *ywrapper.StringValue {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Config) GetSourcePort() *ywrapper.UintValue {
	if x != nil {
		return x.SourcePort
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Config) GetTestType() OpenconfigProbesTestType {
	if x != nil {
		return x.TestType
	}
	return OpenconfigProbesTestType_OPENCONFIGPROBESTESTTYPE_UNSET
}

type Probes_Probe_Tests_Test_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History *Probes_Probe_Tests_Test_Results_History `protobuf:"bytes,218641498,opt,name=history,proto3" json:"history,omitempty"`
	State   *Probes_Probe_Tests_Test_Results_State   `protobuf:"bytes,101657,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Probes_Probe_Tests_Test_Results) Reset() {
	*x = Probes_Probe_Tests_Test_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests_Test_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests_Test_Results) ProtoMessage() {}

func (x *Probes_Probe_Tests_Test_Results) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests_Test_Results.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests_Test_Results) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1}
}

func (x *Probes_Probe_Tests_Test_Results) GetHistory() *Probes_Probe_Tests_Test_Results_History {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results) GetState() *Probes_Probe_Tests_Test_Results_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Probes_Probe_Tests_Test_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count       *ywrapper.UintValue      `protobuf:"bytes,531760118,opt,name=count,proto3" json:"count,omitempty"`
	Dscp        *ywrapper.UintValue      `protobuf:"bytes,524434947,opt,name=dscp,proto3" json:"dscp,omitempty"`
	Enabled     *ywrapper.BoolValue      `protobuf:"bytes,400557768,opt,name=enabled,proto3" json:"enabled,omitempty"`
	HistorySize *ywrapper.UintValue      `protobuf:"bytes,366388155,opt,name=history_size,json=historySize,proto3" json:"history_size,omitempty"`
	Interval    *ywrapper.UintValue      `protobuf:"bytes,228767566,opt,name=interval,proto3" json:"interval,omitempty"`
	Name        *ywrapper.StringValue    `protobuf:"bytes,413303480,opt,name=name,proto3" json:"name,omitempty"`
	Source      *ywrapper.StringValue    `protobuf:"bytes,330684050,opt,name=source,proto3" json:"source,omitempty"`
	SourcePort  *ywrapper.UintValue      `protobuf:"bytes,32412470,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	TestType    OpenconfigProbesTestType `protobuf:"varint,120827898,opt,name=test_type,json=testType,proto3,enum=openconfig.OpenconfigProbesTestType" json:"test_type,omitempty"`
}

func (x *Probes_Probe_Tests_Test_State) Reset() {
	*x = Probes_Probe_Tests_Test_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests_Test_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests_Test_State) ProtoMessage() {}

func (x *Probes_Probe_Tests_Test_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests_Test_State.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests_Test_State) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2}
}

func (x *Probes_Probe_Tests_Test_State) GetCount() *ywrapper.UintValue {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_State) GetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_State) GetHistorySize() *ywrapper.UintValue {
	if x != nil {
		return x.HistorySize
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_State) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_State) GetSource() *ywrapper.StringValue {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_State) GetSourcePort() *ywrapper.UintValue {
	if x != nil {
		return x.SourcePort
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_State) GetTestType() OpenconfigProbesTestType {
	if x != nil {
		return x.TestType
	}
	return OpenconfigProbesTestType_OPENCONFIGPROBESTESTTYPE_UNSET
}

type Probes_Probe_Tests_Test_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Probes_Probe_Tests_Test_Target_Config `protobuf:"bytes,140870805,opt,name=config,proto3" json:"config,omitempty"`
	State  *Probes_Probe_Tests_Test_Target_State  `protobuf:"bytes,186787850,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Probes_Probe_Tests_Test_Target) Reset() {
	*x = Probes_Probe_Tests_Test_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests_Test_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests_Test_Target) ProtoMessage() {}

func (x *Probes_Probe_Tests_Test_Target) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests_Test_Target.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests_Test_Target) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3}
}

func (x *Probes_Probe_Tests_Test_Target) GetConfig() *Probes_Probe_Tests_Test_Target_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Target) GetState() *Probes_Probe_Tests_Test_Target_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Probes_Probe_Tests_Test_Results_History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *Probes_Probe_Tests_Test_Results_History_Items `protobuf:"bytes,184490599,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *Probes_Probe_Tests_Test_Results_History) Reset() {
	*x = Probes_Probe_Tests_Test_Results_History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests_Test_Results_History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests_Test_Results_History) ProtoMessage() {}

func (x *Probes_Probe_Tests_Test_Results_History) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests_Test_Results_History.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests_Test_Results_History) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1, 0}
}

func (x *Probes_Probe_Tests_Test_Results_History) GetItems() *Probes_Probe_Tests_Test_Results_History_Items {
	if x != nil {
		return x.Items
	}
	return nil
}

type Probes_Probe_Tests_Test_Results_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgDelay          *ywrapper.UintValue `protobuf:"bytes,399670614,opt,name=avg_delay,json=avgDelay,proto3" json:"avg_delay,omitempty"`
	Failed            *ywrapper.BoolValue `protobuf:"bytes,403171051,opt,name=failed,proto3" json:"failed,omitempty"`
	Jitter            *ywrapper.UintValue `protobuf:"bytes,444850446,opt,name=jitter,proto3" json:"jitter,omitempty"`
	LastTestTimestamp *ywrapper.UintValue `protobuf:"bytes,253022818,opt,name=last_test_timestamp,json=lastTestTimestamp,proto3" json:"last_test_timestamp,omitempty"`
	LossPercentage    *ywrapper.UintValue `protobuf:"bytes,24155126,opt,name=loss_percentage,json=lossPercentage,proto3" json:"loss_percentage,omitempty"`
	MaxDelay          *ywrapper.UintValue `protobuf:"bytes,371640408,opt,name=max_delay,json=maxDelay,proto3" json:"max_delay,omitempty"`
	MinDelay          *ywrapper.UintValue `protobuf:"bytes,404486034,opt,name=min_delay,json=minDelay,proto3" json:"min_delay,omitempty"`
	ProbesReceived    *ywrapper.UintValue `protobuf:"bytes,229519999,opt,name=probes_received,json=probesReceived,proto3" json:"probes_received,omitempty"`
	ProbesSent        *ywrapper.UintValue `protobuf:"bytes,412856428,opt,name=probes_sent,json=probesSent,proto3" json:"probes_sent,omitempty"`
	StartTimestamp    *ywrapper.UintValue `protobuf:"bytes,34444631,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	StddevDelay       *ywrapper.UintValue `protobuf:"bytes,193510766,opt,name=stddev_delay,json=stddevDelay,proto3" json:"stddev_delay,omitempty"`
	TestDuration      *ywrapper.UintValue `protobuf:"bytes,320098569,opt,name=test_duration,json=testDuration,proto3" json:"test_duration,omitempty"`
	Timestamp         *ywrapper.UintValue `protobuf:"bytes,400955060,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Probes_Probe_Tests_Test_Results_State) Reset() {
	*x = Probes_Probe_Tests_Test_Results_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests_Test_Results_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests_Test_Results_State) ProtoMessage() {}

func (x *Probes_Probe_Tests_Test_Results_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests_Test_Results_State.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests_Test_Results_State) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1, 1}
}

func (x *Probes_Probe_Tests_Test_Results_State) GetAvgDelay() *ywrapper.UintValue {
	if x != nil {
		return x.AvgDelay
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_State) GetFailed() *ywrapper.BoolValue {
	if x != nil {
		return x.Failed
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_State) GetJitter() *ywrapper.UintValue {
	if x != nil {
		return x.Jitter
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_State) GetLastTestTimestamp() *ywrapper.UintValue {
	if x != nil {
		return x.LastTestTimestamp
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_State) GetLossPercentage() *ywrapper.UintValue {
	if x != nil {
		return x.LossPercentage
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_State) GetMaxDelay() *ywrapper.UintValue {
	if x != nil {
		return x.MaxDelay
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_State) GetMinDelay() *ywrapper.UintValue {
	if x != nil {
		return x.MinDelay
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_State) GetProbesReceived() *ywrapper.UintValue {
	if x != nil {
		return x.ProbesReceived
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_State) GetProbesSent() *ywrapper.UintValue {
	if x != nil {
		return x.ProbesSent
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_State) GetStartTimestamp() *ywrapper.UintValue {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_State) GetStddevDelay() *ywrapper.UintValue {
	if x != nil {
		return x.StddevDelay
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_State) GetTestDuration() *ywrapper.UintValue {
	if x != nil {
		return x.TestDuration
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_State) GetTimestamp() *ywrapper.UintValue {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Probes_Probe_Tests_Test_Results_History_Items struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item []*Probes_Probe_Tests_Test_Results_History_Items_ItemKey `protobuf:"bytes,496151855,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *Probes_Probe_Tests_Test_Results_History_Items) Reset() {
	*x = Probes_Probe_Tests_Test_Results_History_Items{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests_Test_Results_History_Items) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests_Test_Results_History_Items) ProtoMessage() {}

func (x *Probes_Probe_Tests_Test_Results_History_Items) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests_Test_Results_History_Items.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests_Test_Results_History_Items) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1, 0, 0}
}

func (x *Probes_Probe_Tests_Test_Results_History_Items) GetItem() []*Probes_Probe_Tests_Test_Results_History_Items_ItemKey {
	if x != nil {
		return x.Item
	}
	return nil
}

type Probes_Probe_Tests_Test_Results_History_Items_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Probes_Probe_Tests_Test_Results_History_Items_Item_State `protobuf:"bytes,437367433,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item) Reset() {
	*x = Probes_Probe_Tests_Test_Results_History_Items_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests_Test_Results_History_Items_Item) ProtoMessage() {}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests_Test_Results_History_Items_Item.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests_Test_Results_History_Items_Item) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1, 0, 0, 0}
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item) GetState() *Probes_Probe_Tests_Test_Results_History_Items_Item_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Probes_Probe_Tests_Test_Results_History_Items_ItemKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64                                              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Item *Probes_Probe_Tests_Test_Results_History_Items_Item `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_ItemKey) Reset() {
	*x = Probes_Probe_Tests_Test_Results_History_Items_ItemKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_ItemKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests_Test_Results_History_Items_ItemKey) ProtoMessage() {}

func (x *Probes_Probe_Tests_Test_Results_History_Items_ItemKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests_Test_Results_History_Items_ItemKey.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests_Test_Results_History_Items_ItemKey) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1, 0, 0, 1}
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_ItemKey) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_ItemKey) GetItem() *Probes_Probe_Tests_Test_Results_History_Items_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

type Probes_Probe_Tests_Test_Results_History_Items_Item_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgDelay       *ywrapper.UintValue `protobuf:"bytes,63138246,opt,name=avg_delay,json=avgDelay,proto3" json:"avg_delay,omitempty"`
	EndTimestamp   *ywrapper.UintValue `protobuf:"bytes,87224044,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	Failed         *ywrapper.BoolValue `protobuf:"bytes,73841595,opt,name=failed,proto3" json:"failed,omitempty"`
	Id             *ywrapper.UintValue `protobuf:"bytes,112866779,opt,name=id,proto3" json:"id,omitempty"`
	Jitter         *ywrapper.UintValue `protobuf:"bytes,78107006,opt,name=jitter,proto3" json:"jitter,omitempty"`
	LossPercentage *ywrapper.UintValue `protobuf:"bytes,85882566,opt,name=loss_percentage,json=lossPercentage,proto3" json:"loss_percentage,omitempty"`
	MaxDelay       *ywrapper.UintValue `protobuf:"bytes,294119624,opt,name=max_delay,json=maxDelay,proto3" json:"max_delay,omitempty"`
	MinDelay       *ywrapper.UintValue `protobuf:"bytes,301035426,opt,name=min_delay,json=minDelay,proto3" json:"min_delay,omitempty"`
	ProbesReceived *ywrapper.UintValue `protobuf:"bytes,418621199,opt,name=probes_received,json=probesReceived,proto3" json:"probes_received,omitempty"`
	ProbesSent     *ywrapper.UintValue `protobuf:"bytes,335798140,opt,name=probes_sent,json=probesSent,proto3" json:"probes_sent,omitempty"`
	StartTimestamp *ywrapper.UintValue `protobuf:"bytes,437505415,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	StddevDelay    *ywrapper.UintValue `protobuf:"bytes,175052734,opt,name=stddev_delay,json=stddevDelay,proto3" json:"stddev_delay,omitempty"`
	TestDuration   *ywrapper.UintValue `protobuf:"bytes,513981625,opt,name=test_duration,json=testDuration,proto3" json:"test_duration,omitempty"`
	Timestamp      *ywrapper.UintValue `protobuf:"bytes,484601636,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) Reset() {
	*x = Probes_Probe_Tests_Test_Results_History_Items_Item_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests_Test_Results_History_Items_Item_State) ProtoMessage() {}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests_Test_Results_History_Items_Item_State.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests_Test_Results_History_Items_Item_State) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1, 0, 0, 0, 0}
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) GetAvgDelay() *ywrapper.UintValue {
	if x != nil {
		return x.AvgDelay
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) GetEndTimestamp() *ywrapper.UintValue {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) GetFailed() *ywrapper.BoolValue {
	if x != nil {
		return x.Failed
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) GetId() *ywrapper.UintValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) GetJitter() *ywrapper.UintValue {
	if x != nil {
		return x.Jitter
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) GetLossPercentage() *ywrapper.UintValue {
	if x != nil {
		return x.LossPercentage
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) GetMaxDelay() *ywrapper.UintValue {
	if x != nil {
		return x.MaxDelay
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) GetMinDelay() *ywrapper.UintValue {
	if x != nil {
		return x.MinDelay
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) GetProbesReceived() *ywrapper.UintValue {
	if x != nil {
		return x.ProbesReceived
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) GetProbesSent() *ywrapper.UintValue {
	if x != nil {
		return x.ProbesSent
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) GetStartTimestamp() *ywrapper.UintValue {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) GetStddevDelay() *ywrapper.UintValue {
	if x != nil {
		return x.StddevDelay
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) GetTestDuration() *ywrapper.UintValue {
	if x != nil {
		return x.TestDuration
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Results_History_Items_Item_State) GetTimestamp() *ywrapper.UintValue {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Probes_Probe_Tests_Test_Target_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *ywrapper.StringValue `protobuf:"bytes,386645440,opt,name=address,proto3" json:"address,omitempty"`
	Port    *ywrapper.UintValue   `protobuf:"bytes,530163097,opt,name=port,proto3" json:"port,omitempty"`
	Url     *ywrapper.StringValue `protobuf:"bytes,479408427,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Probes_Probe_Tests_Test_Target_Config) Reset() {
	*x = Probes_Probe_Tests_Test_Target_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests_Test_Target_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests_Test_Target_Config) ProtoMessage() {}

func (x *Probes_Probe_Tests_Test_Target_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests_Test_Target_Config.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests_Test_Target_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3, 0}
}

func (x *Probes_Probe_Tests_Test_Target_Config) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Target_Config) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Target_Config) GetUrl() *ywrapper.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

type Probes_Probe_Tests_Test_Target_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *ywrapper.StringValue `protobuf:"bytes,283265387,opt,name=address,proto3" json:"address,omitempty"`
	Port    *ywrapper.UintValue   `protobuf:"bytes,68939668,opt,name=port,proto3" json:"port,omitempty"`
	Url     *ywrapper.StringValue `protobuf:"bytes,405409852,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Probes_Probe_Tests_Test_Target_State) Reset() {
	*x = Probes_Probe_Tests_Test_Target_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_probes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probes_Probe_Tests_Test_Target_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probes_Probe_Tests_Test_Target_State) ProtoMessage() {}

func (x *Probes_Probe_Tests_Test_Target_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_probes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probes_Probe_Tests_Test_Target_State.ProtoReflect.Descriptor instead.
func (*Probes_Probe_Tests_Test_Target_State) Descriptor() ([]byte, []int) {
	return file_openconfig_probes_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3, 1}
}

func (x *Probes_Probe_Tests_Test_Target_State) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Target_State) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *Probes_Probe_Tests_Test_Target_State) GetUrl() *ywrapper.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

var File_openconfig_probes_proto protoreflect.FileDescriptor

var file_openconfig_probes_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x40, 0x0a, 0x06, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0xc3, 0x9d,
	0xc7, 0x7b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x4b, 0x65, 0x79, 0x42, 0x10, 0x82, 0x41, 0x0d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x1a, 0x9f, 0x3f, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xc4, 0xc3, 0x91, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x17, 0x82, 0x41, 0x14,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xdd, 0xf3, 0xaf, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x16, 0x82, 0x41, 0x13, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f,
	0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0xb1, 0xd8, 0x84, 0x51, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x42, 0x16, 0x82, 0x41, 0x13, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x1a,
	0xa8, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xe6, 0xfc, 0xde, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4a,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc6, 0x92, 0xb5, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xa4, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0xf3, 0xa3, 0xfb, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x82,
	0x41, 0x1b, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xb9,
	0xa5, 0x9d, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b,
	0x82, 0x41, 0x18, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0xca, 0x3a, 0x0a, 0x05, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x04, 0x74,
	0x65, 0x73, 0x74, 0x18, 0x80, 0xa8, 0xb1, 0xc1, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x1a, 0xe9, 0x38, 0x0a, 0x04, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x69, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf5, 0x8e, 0xa5, 0x55,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6d, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0xdf, 0xa6, 0xe1, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x23, 0x82,
	0x41, 0x20, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xea, 0xf8, 0xb1, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0xa0, 0xfe,
	0xc7, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0xf5,
	0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x56, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x95, 0xc0, 0xbb, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x54, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0x9a, 0xa7, 0xd5, 0xca, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x73, 0x63,
	0x70, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x5d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x9b, 0xfa, 0x80, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x82, 0xc0, 0x86, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x2d, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x83,
	0xae, 0x8d, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41,
	0x28, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x55, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd1, 0x8e, 0xa7, 0x6b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0xc7, 0xab, 0x92, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xd1, 0xaa, 0xff, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x73, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x81,
	0x99, 0xbf, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2c,
	0x82, 0x41, 0x29, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xff, 0x20, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x7d, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0xda, 0xe8,
	0xa0, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x2b, 0x82, 0x41, 0x28,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x74, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x99, 0x9a, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xaa, 0x13, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0xe7, 0xb4,
	0xfc, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x96, 0x12, 0x0a, 0x05,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0xaf,
	0xda, 0xca, 0xec, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79, 0x42, 0x36, 0x82, 0x41, 0x33,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x1a, 0xcd, 0x0f, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x9c, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x89, 0xe5, 0xc6,
	0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3c, 0x82, 0x41,
	0x39, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f,
	0x69, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xa5, 0x0e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x09, 0x61,
	0x76, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xc6, 0xd3, 0x8d, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x76, 0x67, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x08,
	0x61, 0x76, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xec, 0xdd, 0xcb, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x73, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0xbb, 0xf7, 0x9a,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74,
	0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xdb, 0xeb,
	0xe8, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69,
	0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x73, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0xfe, 0xa2, 0x9f, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x06, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0xc6, 0xed, 0xf9, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x73, 0x73, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x6c, 0x6f, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x7c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0xc8, 0xd1, 0x9f, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x61, 0x78, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x7c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0xa2, 0xdf, 0xc5, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x46, 0x82, 0x41, 0x43, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x69,
	0x6e, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x8f, 0xce, 0xce, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0xfc, 0xbe, 0x8f, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2d, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x87, 0x9b, 0xcf, 0xd0,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74,
	0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x84, 0x01, 0x0a, 0x0c, 0x73, 0x74, 0x64,
	0x64, 0x65, 0x76, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xbe, 0xaf, 0xbc, 0x53, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x2d, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x88, 0x01, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xb9, 0xf9, 0x8a, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x2d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x65,
	0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xa4, 0xde, 0x89, 0xe7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xa8, 0x01, 0x0a, 0x07, 0x49, 0x74,
	0x65, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x52, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x1a, 0xd1, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x69,
	0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xd6, 0xfa, 0xc9, 0xbe,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x76, 0x67, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52,
	0x08, 0x61, 0x76, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x61, 0x0a, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0xeb, 0xcd, 0x9f, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x06,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x8e, 0xc2, 0x8f, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12,
	0x85, 0x01, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xe2, 0xa4, 0xd3, 0x78, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x7a, 0x0a, 0x0f, 0x6c, 0x6f, 0x73, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0xf6, 0xa7, 0xc2, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x73, 0x73, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x0e, 0x6c, 0x6f, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0xd8, 0x90, 0x9b, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x33, 0x82, 0x41, 0x30, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x69,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x92, 0xef, 0xef, 0xc0,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x7a, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xff, 0xe4, 0xb8,
	0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0xec, 0xe0, 0xee, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x73, 0x2d, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x7a, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xd7, 0xaa, 0xb6, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x71, 0x0a, 0x0c, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0xee, 0xfa, 0xa2, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x64, 0x64,
	0x65, 0x76, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x75, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x89, 0xa2, 0xd1, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x74, 0x65, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xb4, 0xad, 0x98, 0xbf, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xed, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x56, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf6, 0x87, 0xc8, 0xfd,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x73,
	0x63, 0x70, 0x18, 0x83, 0xfc, 0x88, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73, 0x63, 0x70, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12,
	0x5c, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc8, 0x8d, 0x80, 0xbf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6a, 0x0a,
	0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xbb, 0xc7,
	0xda, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41,
	0x2b, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x0b, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5e, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xce, 0xee, 0x8a, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x55, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xb8, 0x85, 0x8a, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x5b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x92, 0xad, 0xd7, 0x9d, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x66, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xb6, 0xa6, 0xba,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x71, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0xfa, 0xdf, 0xce, 0x39, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xc9, 0x06, 0x0a, 0x06, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x77, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x95, 0x89,
	0x96, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x73, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8a, 0xd0, 0x88, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xa9, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x66, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xc0, 0xfb, 0xae, 0xb8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x5b, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x99, 0xcb, 0xe6,
	0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x5a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0xab, 0xe2, 0xcc, 0xe4, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x75, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0xa4, 0x02,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0xeb, 0x92, 0x89, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x59,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x94, 0xdf, 0xef, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0xbc, 0xa0, 0xa8, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x72, 0x6c, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x1a, 0x78, 0x0a, 0x07, 0x54, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x82,
	0x41, 0x1d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x65,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x82, 0x41, 0x12, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63,
	0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_probes_proto_rawDescOnce sync.Once
	file_openconfig_probes_proto_rawDescData = file_openconfig_probes_proto_rawDesc
)

func file_openconfig_probes_proto_rawDescGZIP() []byte {
	file_openconfig_probes_proto_rawDescOnce.Do(func() {
		file_openconfig_probes_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_probes_proto_rawDescData)
	})
	return file_openconfig_probes_proto_rawDescData
}

var file_openconfig_probes_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_openconfig_probes_proto_goTypes = []interface{}{
	(*Probes)(nil),                                                   // 0: openconfig.Probes
	(*Probes_Probe)(nil),                                             // 1: openconfig.Probes.Probe
	(*Probes_ProbeKey)(nil),                                          // 2: openconfig.Probes.ProbeKey
	(*Probes_Probe_Config)(nil),                                      // 3: openconfig.Probes.Probe.Config
	(*Probes_Probe_State)(nil),                                       // 4: openconfig.Probes.Probe.State
	(*Probes_Probe_Tests)(nil),                                       // 5: openconfig.Probes.Probe.Tests
	(*Probes_Probe_Tests_Test)(nil),                                  // 6: openconfig.Probes.Probe.Tests.Test
	(*Probes_Probe_Tests_TestKey)(nil),                               // 7: openconfig.Probes.Probe.Tests.TestKey
	(*Probes_Probe_Tests_Test_Config)(nil),                           // 8: openconfig.Probes.Probe.Tests.Test.Config
	(*Probes_Probe_Tests_Test_Results)(nil),                          // 9: openconfig.Probes.Probe.Tests.Test.Results
	(*Probes_Probe_Tests_Test_State)(nil),                            // 10: openconfig.Probes.Probe.Tests.Test.State
	(*Probes_Probe_Tests_Test_Target)(nil),                           // 11: openconfig.Probes.Probe.Tests.Test.Target
	(*Probes_Probe_Tests_Test_Results_History)(nil),                  // 12: openconfig.Probes.Probe.Tests.Test.Results.History
	(*Probes_Probe_Tests_Test_Results_State)(nil),                    // 13: openconfig.Probes.Probe.Tests.Test.Results.State
	(*Probes_Probe_Tests_Test_Results_History_Items)(nil),            // 14: openconfig.Probes.Probe.Tests.Test.Results.History.Items
	(*Probes_Probe_Tests_Test_Results_History_Items_Item)(nil),       // 15: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item
	(*Probes_Probe_Tests_Test_Results_History_Items_ItemKey)(nil),    // 16: openconfig.Probes.Probe.Tests.Test.Results.History.Items.ItemKey
	(*Probes_Probe_Tests_Test_Results_History_Items_Item_State)(nil), // 17: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State
	(*Probes_Probe_Tests_Test_Target_Config)(nil),                    // 18: openconfig.Probes.Probe.Tests.Test.Target.Config
	(*Probes_Probe_Tests_Test_Target_State)(nil),                     // 19: openconfig.Probes.Probe.Tests.Test.Target.State
	(*ywrapper.BoolValue)(nil),                                       // 20: ywrapper.BoolValue
	(*ywrapper.StringValue)(nil),                                     // 21: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                                       // 22: ywrapper.UintValue
	(OpenconfigProbesTestType)(0),                                    // 23: openconfig.OpenconfigProbesTestType
}
var file_openconfig_probes_proto_depIdxs = []int32{
	2,  // 0: openconfig.Probes.probe:type_name -> openconfig.Probes.ProbeKey
	3,  // 1: openconfig.Probes.Probe.config:type_name -> openconfig.Probes.Probe.Config
	4,  // 2: openconfig.Probes.Probe.state:type_name -> openconfig.Probes.Probe.State
	5,  // 3: openconfig.Probes.Probe.tests:type_name -> openconfig.Probes.Probe.Tests
	1,  // 4: openconfig.Probes.ProbeKey.probe:type_name -> openconfig.Probes.Probe
	20, // 5: openconfig.Probes.Probe.Config.enabled:type_name -> ywrapper.BoolValue
	21, // 6: openconfig.Probes.Probe.Config.name:type_name -> ywrapper.StringValue
	20, // 7: openconfig.Probes.Probe.State.enabled:type_name -> ywrapper.BoolValue
	21, // 8: openconfig.Probes.Probe.State.name:type_name -> ywrapper.StringValue
	7,  // 9: openconfig.Probes.Probe.Tests.test:type_name -> openconfig.Probes.Probe.Tests.TestKey
	8,  // 10: openconfig.Probes.Probe.Tests.Test.config:type_name -> openconfig.Probes.Probe.Tests.Test.Config
	9,  // 11: openconfig.Probes.Probe.Tests.Test.results:type_name -> openconfig.Probes.Probe.Tests.Test.Results
	10, // 12: openconfig.Probes.Probe.Tests.Test.state:type_name -> openconfig.Probes.Probe.Tests.Test.State
	11, // 13: openconfig.Probes.Probe.Tests.Test.target:type_name -> openconfig.Probes.Probe.Tests.Test.Target
	6,  // 14: openconfig.Probes.Probe.Tests.TestKey.test:type_name -> openconfig.Probes.Probe.Tests.Test
	22, // 15: openconfig.Probes.Probe.Tests.Test.Config.count:type_name -> ywrapper.UintValue
	22, // 16: openconfig.Probes.Probe.Tests.Test.Config.dscp:type_name -> ywrapper.UintValue
	20, // 17: openconfig.Probes.Probe.Tests.Test.Config.enabled:type_name -> ywrapper.BoolValue
	22, // 18: openconfig.Probes.Probe.Tests.Test.Config.history_size:type_name -> ywrapper.UintValue
	22, // 19: openconfig.Probes.Probe.Tests.Test.Config.interval:type_name -> ywrapper.UintValue
	21, // 20: openconfig.Probes.Probe.Tests.Test.Config.name:type_name -> ywrapper.StringValue
	21, // 21: openconfig.Probes.Probe.Tests.Test.Config.source:type_name -> ywrapper.StringValue
	22, // 22: openconfig.Probes.Probe.Tests.Test.Config.source_port:type_name -> ywrapper.UintValue
	23, // 23: openconfig.Probes.Probe.Tests.Test.Config.test_type:type_name -> openconfig.OpenconfigProbesTestType
	12, // 24: openconfig.Probes.Probe.Tests.Test.Results.history:type_name -> openconfig.Probes.Probe.Tests.Test.Results.History
	13, // 25: openconfig.Probes.Probe.Tests.Test.Results.state:type_name -> openconfig.Probes.Probe.Tests.Test.Results.State
	22, // 26: openconfig.Probes.Probe.Tests.Test.State.count:type_name -> ywrapper.UintValue
	22, // 27: openconfig.Probes.Probe.Tests.Test.State.dscp:type_name -> ywrapper.UintValue
	20, // 28: openconfig.Probes.Probe.Tests.Test.State.enabled:type_name -> ywrapper.BoolValue
	22, // 29: openconfig.Probes.Probe.Tests.Test.State.history_size:type_name -> ywrapper.UintValue
	22, // 30: openconfig.Probes.Probe.Tests.Test.State.interval:type_name -> ywrapper.UintValue
	21, // 31: openconfig.Probes.Probe.Tests.Test.State.name:type_name -> ywrapper.StringValue
	21, // 32: openconfig.Probes.Probe.Tests.Test.State.source:type_name -> ywrapper.StringValue
	22, // 33: openconfig.Probes.Probe.Tests.Test.State.source_port:type_name -> ywrapper.UintValue
	23, // 34: openconfig.Probes.Probe.Tests.Test.State.test_type:type_name -> openconfig.OpenconfigProbesTestType
	18, // 35: openconfig.Probes.Probe.Tests.Test.Target.config:type_name -> openconfig.Probes.Probe.Tests.Test.Target.Config
	19, // 36: openconfig.Probes.Probe.Tests.Test.Target.state:type_name -> openconfig.Probes.Probe.Tests.Test.Target.State
	14, // 37: openconfig.Probes.Probe.Tests.Test.Results.History.items:type_name -> openconfig.Probes.Probe.Tests.Test.Results.History.Items
	22, // 38: openconfig.Probes.Probe.Tests.Test.Results.State.avg_delay:type_name -> ywrapper.UintValue
	20, // 39: openconfig.Probes.Probe.Tests.Test.Results.State.failed:type_name -> ywrapper.BoolValue
	22, // 40: openconfig.Probes.Probe.Tests.Test.Results.State.jitter:type_name -> ywrapper.UintValue
	22, // 41: openconfig.Probes.Probe.Tests.Test.Results.State.last_test_timestamp:type_name -> ywrapper.UintValue
	22, // 42: openconfig.Probes.Probe.Tests.Test.Results.State.loss_percentage:type_name -> ywrapper.UintValue
	22, // 43: openconfig.Probes.Probe.Tests.Test.Results.State.max_delay:type_name -> ywrapper.UintValue
	22, // 44: openconfig.Probes.Probe.Tests.Test.Results.State.min_delay:type_name -> ywrapper.UintValue
	22, // 45: openconfig.Probes.Probe.Tests.Test.Results.State.probes_received:type_name -> ywrapper.UintValue
	22, // 46: openconfig.Probes.Probe.Tests.Test.Results.State.probes_sent:type_name -> ywrapper.UintValue
	22, // 47: openconfig.Probes.Probe.Tests.Test.Results.State.start_timestamp:type_name -> ywrapper.UintValue
	22, // 48: openconfig.Probes.Probe.Tests.Test.Results.State.stddev_delay:type_name -> ywrapper.UintValue
	22, // 49: openconfig.Probes.Probe.Tests.Test.Results.State.test_duration:type_name -> ywrapper.UintValue
	22, // 50: openconfig.Probes.Probe.Tests.Test.Results.State.timestamp:type_name -> ywrapper.UintValue
	16, // 51: openconfig.Probes.Probe.Tests.Test.Results.History.Items.item:type_name -> openconfig.Probes.Probe.Tests.Test.Results.History.Items.ItemKey
	17, // 52: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.state:type_name -> openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State
	15, // 53: openconfig.Probes.Probe.Tests.Test.Results.History.Items.ItemKey.item:type_name -> openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item
	22, // 54: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State.avg_delay:type_name -> ywrapper.UintValue
	22, // 55: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State.end_timestamp:type_name -> ywrapper.UintValue
	20, // 56: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State.failed:type_name -> ywrapper.BoolValue
	22, // 57: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State.id:type_name -> ywrapper.UintValue
	22, // 58: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State.jitter:type_name -> ywrapper.UintValue
	22, // 59: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State.loss_percentage:type_name -> ywrapper.UintValue
	22, // 60: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State.max_delay:type_name -> ywrapper.UintValue
	22, // 61: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State.min_delay:type_name -> ywrapper.UintValue
	22, // 62: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State.probes_received:type_name -> ywrapper.UintValue
	22, // 63: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State.probes_sent:type_name -> ywrapper.UintValue
	22, // 64: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State.start_timestamp:type_name -> ywrapper.UintValue
	22, // 65: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State.stddev_delay:type_name -> ywrapper.UintValue
	22, // 66: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State.test_duration:type_name -> ywrapper.UintValue
	22, // 67: openconfig.Probes.Probe.Tests.Test.Results.History.Items.Item.State.timestamp:type_name -> ywrapper.UintValue
	21, // 68: openconfig.Probes.Probe.Tests.Test.Target.Config.address:type_name -> ywrapper.StringValue
	22, // 69: openconfig.Probes.Probe.Tests.Test.Target.Config.port:type_name -> ywrapper.UintValue
	21, // 70: openconfig.Probes.Probe.Tests.Test.Target.Config.url:type_name -> ywrapper.StringValue
	21, // 71: openconfig.Probes.Probe.Tests.Test.Target.State.address:type_name -> ywrapper.StringValue
	22, // 72: openconfig.Probes.Probe.Tests.Test.Target.State.port:type_name -> ywrapper.UintValue
	21, // 73: openconfig.Probes.Probe.Tests.Test.Target.State.url:type_name -> ywrapper.StringValue
	74, // [74:74] is the sub-list for method output_type
	74, // [74:74] is the sub-list for method input_type
	74, // [74:74] is the sub-list for extension type_name
	74, // [74:74] is the sub-list for extension extendee
	0,  // [0:74] is the sub-list for field type_name
}

func init() { file_openconfig_probes_proto_init() }
func file_openconfig_probes_proto_init() {
	if File_openconfig_probes_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_probes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_ProbeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests_Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests_TestKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests_Test_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests_Test_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests_Test_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests_Test_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests_Test_Results_History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests_Test_Results_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests_Test_Results_History_Items); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests_Test_Results_History_Items_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests_Test_Results_History_Items_ItemKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests_Test_Results_History_Items_Item_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests_Test_Target_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_probes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probes_Probe_Tests_Test_Target_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_probes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_probes_proto_goTypes,
		DependencyIndexes: file_openconfig_probes_proto_depIdxs,
		MessageInfos:      file_openconfig_probes_proto_msgTypes,
	}.Build()
	File_openconfig_probes_proto = out.File
	file_openconfig_probes_proto_rawDesc = nil
	file_openconfig_probes_proto_goTypes = nil
	file_openconfig_probes_proto_depIdxs = nil
}
