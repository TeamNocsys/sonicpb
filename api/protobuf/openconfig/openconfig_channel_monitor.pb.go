// openconfig.openconfig_channel_monitor is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_channel_monitor.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ChannelMonitors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMonitor []*ChannelMonitors_ChannelMonitorKey `protobuf:"bytes,228142614,rep,name=channel_monitor,json=channelMonitor,proto3" json:"channel_monitor,omitempty"`
}

func (x *ChannelMonitors) Reset() {
	*x = ChannelMonitors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_channel_monitor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMonitors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMonitors) ProtoMessage() {}

func (x *ChannelMonitors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_channel_monitor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMonitors.ProtoReflect.Descriptor instead.
func (*ChannelMonitors) Descriptor() ([]byte, []int) {
	return file_openconfig_channel_monitor_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelMonitors) GetChannelMonitor() []*ChannelMonitors_ChannelMonitorKey {
	if x != nil {
		return x.ChannelMonitor
	}
	return nil
}

type ChannelMonitors_ChannelMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels *ChannelMonitors_ChannelMonitor_Channels `protobuf:"bytes,29366261,opt,name=channels,proto3" json:"channels,omitempty"`
	Config   *ChannelMonitors_ChannelMonitor_Config   `protobuf:"bytes,381825399,opt,name=config,proto3" json:"config,omitempty"`
	State    *ChannelMonitors_ChannelMonitor_State    `protobuf:"bytes,460661672,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ChannelMonitors_ChannelMonitor) Reset() {
	*x = ChannelMonitors_ChannelMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_channel_monitor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMonitors_ChannelMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMonitors_ChannelMonitor) ProtoMessage() {}

func (x *ChannelMonitors_ChannelMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_channel_monitor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMonitors_ChannelMonitor.ProtoReflect.Descriptor instead.
func (*ChannelMonitors_ChannelMonitor) Descriptor() ([]byte, []int) {
	return file_openconfig_channel_monitor_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ChannelMonitors_ChannelMonitor) GetChannels() *ChannelMonitors_ChannelMonitor_Channels {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *ChannelMonitors_ChannelMonitor) GetConfig() *ChannelMonitors_ChannelMonitor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ChannelMonitors_ChannelMonitor) GetState() *ChannelMonitors_ChannelMonitor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type ChannelMonitors_ChannelMonitorKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ChannelMonitor *ChannelMonitors_ChannelMonitor `protobuf:"bytes,2,opt,name=channel_monitor,json=channelMonitor,proto3" json:"channel_monitor,omitempty"`
}

func (x *ChannelMonitors_ChannelMonitorKey) Reset() {
	*x = ChannelMonitors_ChannelMonitorKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_channel_monitor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMonitors_ChannelMonitorKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMonitors_ChannelMonitorKey) ProtoMessage() {}

func (x *ChannelMonitors_ChannelMonitorKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_channel_monitor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMonitors_ChannelMonitorKey.ProtoReflect.Descriptor instead.
func (*ChannelMonitors_ChannelMonitorKey) Descriptor() ([]byte, []int) {
	return file_openconfig_channel_monitor_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ChannelMonitors_ChannelMonitorKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelMonitors_ChannelMonitorKey) GetChannelMonitor() *ChannelMonitors_ChannelMonitor {
	if x != nil {
		return x.ChannelMonitor
	}
	return nil
}

type ChannelMonitors_ChannelMonitor_Channels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel []*ChannelMonitors_ChannelMonitor_Channels_ChannelKey `protobuf:"bytes,494547849,rep,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ChannelMonitors_ChannelMonitor_Channels) Reset() {
	*x = ChannelMonitors_ChannelMonitor_Channels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_channel_monitor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMonitors_ChannelMonitor_Channels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMonitors_ChannelMonitor_Channels) ProtoMessage() {}

func (x *ChannelMonitors_ChannelMonitor_Channels) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_channel_monitor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMonitors_ChannelMonitor_Channels.ProtoReflect.Descriptor instead.
func (*ChannelMonitors_ChannelMonitor_Channels) Descriptor() ([]byte, []int) {
	return file_openconfig_channel_monitor_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *ChannelMonitors_ChannelMonitor_Channels) GetChannel() []*ChannelMonitors_ChannelMonitor_Channels_ChannelKey {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ChannelMonitors_ChannelMonitor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorPort *ywrapper.StringValue `protobuf:"bytes,92959424,opt,name=monitor_port,json=monitorPort,proto3" json:"monitor_port,omitempty"`
	Name        *ywrapper.StringValue `protobuf:"bytes,232841471,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ChannelMonitors_ChannelMonitor_Config) Reset() {
	*x = ChannelMonitors_ChannelMonitor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_channel_monitor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMonitors_ChannelMonitor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMonitors_ChannelMonitor_Config) ProtoMessage() {}

func (x *ChannelMonitors_ChannelMonitor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_channel_monitor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMonitors_ChannelMonitor_Config.ProtoReflect.Descriptor instead.
func (*ChannelMonitors_ChannelMonitor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_channel_monitor_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *ChannelMonitors_ChannelMonitor_Config) GetMonitorPort() *ywrapper.StringValue {
	if x != nil {
		return x.MonitorPort
	}
	return nil
}

func (x *ChannelMonitors_ChannelMonitor_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type ChannelMonitors_ChannelMonitor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorPort *ywrapper.StringValue `protobuf:"bytes,183347389,opt,name=monitor_port,json=monitorPort,proto3" json:"monitor_port,omitempty"`
	Name        *ywrapper.StringValue `protobuf:"bytes,248662866,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ChannelMonitors_ChannelMonitor_State) Reset() {
	*x = ChannelMonitors_ChannelMonitor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_channel_monitor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMonitors_ChannelMonitor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMonitors_ChannelMonitor_State) ProtoMessage() {}

func (x *ChannelMonitors_ChannelMonitor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_channel_monitor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMonitors_ChannelMonitor_State.ProtoReflect.Descriptor instead.
func (*ChannelMonitors_ChannelMonitor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_channel_monitor_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *ChannelMonitors_ChannelMonitor_State) GetMonitorPort() *ywrapper.StringValue {
	if x != nil {
		return x.MonitorPort
	}
	return nil
}

func (x *ChannelMonitors_ChannelMonitor_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type ChannelMonitors_ChannelMonitor_Channels_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *ChannelMonitors_ChannelMonitor_Channels_Channel_State `protobuf:"bytes,216667371,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ChannelMonitors_ChannelMonitor_Channels_Channel) Reset() {
	*x = ChannelMonitors_ChannelMonitor_Channels_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_channel_monitor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMonitors_ChannelMonitor_Channels_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMonitors_ChannelMonitor_Channels_Channel) ProtoMessage() {}

func (x *ChannelMonitors_ChannelMonitor_Channels_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_channel_monitor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMonitors_ChannelMonitor_Channels_Channel.ProtoReflect.Descriptor instead.
func (*ChannelMonitors_ChannelMonitor_Channels_Channel) Descriptor() ([]byte, []int) {
	return file_openconfig_channel_monitor_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *ChannelMonitors_ChannelMonitor_Channels_Channel) GetState() *ChannelMonitors_ChannelMonitor_Channels_Channel_State {
	if x != nil {
		return x.State
	}
	return nil
}

type ChannelMonitors_ChannelMonitor_Channels_ChannelKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerFrequency uint64                                           `protobuf:"varint,1,opt,name=lower_frequency,json=lowerFrequency,proto3" json:"lower_frequency,omitempty"`
	UpperFrequency uint64                                           `protobuf:"varint,2,opt,name=upper_frequency,json=upperFrequency,proto3" json:"upper_frequency,omitempty"`
	Channel        *ChannelMonitors_ChannelMonitor_Channels_Channel `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ChannelMonitors_ChannelMonitor_Channels_ChannelKey) Reset() {
	*x = ChannelMonitors_ChannelMonitor_Channels_ChannelKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_channel_monitor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMonitors_ChannelMonitor_Channels_ChannelKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMonitors_ChannelMonitor_Channels_ChannelKey) ProtoMessage() {}

func (x *ChannelMonitors_ChannelMonitor_Channels_ChannelKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_channel_monitor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMonitors_ChannelMonitor_Channels_ChannelKey.ProtoReflect.Descriptor instead.
func (*ChannelMonitors_ChannelMonitor_Channels_ChannelKey) Descriptor() ([]byte, []int) {
	return file_openconfig_channel_monitor_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *ChannelMonitors_ChannelMonitor_Channels_ChannelKey) GetLowerFrequency() uint64 {
	if x != nil {
		return x.LowerFrequency
	}
	return 0
}

func (x *ChannelMonitors_ChannelMonitor_Channels_ChannelKey) GetUpperFrequency() uint64 {
	if x != nil {
		return x.UpperFrequency
	}
	return 0
}

func (x *ChannelMonitors_ChannelMonitor_Channels_ChannelKey) GetChannel() *ChannelMonitors_ChannelMonitor_Channels_Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ChannelMonitors_ChannelMonitor_Channels_Channel_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerFrequency *ywrapper.UintValue      `protobuf:"bytes,403991936,opt,name=lower_frequency,json=lowerFrequency,proto3" json:"lower_frequency,omitempty"`
	Power          *ywrapper.Decimal64Value `protobuf:"bytes,223744905,opt,name=power,proto3" json:"power,omitempty"`
	UpperFrequency *ywrapper.UintValue      `protobuf:"bytes,354726687,opt,name=upper_frequency,json=upperFrequency,proto3" json:"upper_frequency,omitempty"`
}

func (x *ChannelMonitors_ChannelMonitor_Channels_Channel_State) Reset() {
	*x = ChannelMonitors_ChannelMonitor_Channels_Channel_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_channel_monitor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMonitors_ChannelMonitor_Channels_Channel_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMonitors_ChannelMonitor_Channels_Channel_State) ProtoMessage() {}

func (x *ChannelMonitors_ChannelMonitor_Channels_Channel_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_channel_monitor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMonitors_ChannelMonitor_Channels_Channel_State.ProtoReflect.Descriptor instead.
func (*ChannelMonitors_ChannelMonitor_Channels_Channel_State) Descriptor() ([]byte, []int) {
	return file_openconfig_channel_monitor_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *ChannelMonitors_ChannelMonitor_Channels_Channel_State) GetLowerFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.LowerFrequency
	}
	return nil
}

func (x *ChannelMonitors_ChannelMonitor_Channels_Channel_State) GetPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Power
	}
	return nil
}

func (x *ChannelMonitors_ChannelMonitor_Channels_Channel_State) GetUpperFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.UpperFrequency
	}
	return nil
}

var File_openconfig_channel_monitor_proto protoreflect.FileDescriptor

var file_openconfig_channel_monitor_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x11, 0x0a, 0x0f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x7f,
	0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x18, 0x96, 0xdc, 0xe4, 0x6c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x1a,
	0xf8, 0x0e, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0xf5, 0xaf, 0x80, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x42, 0x2d, 0x82,
	0x41, 0x2a, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x7a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xf7, 0xe2, 0x88, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2b, 0x82,
	0x41, 0x28, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x76, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa8, 0xc7, 0xd4, 0xdb,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xac, 0x08, 0x0a, 0x08, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x89, 0xe7, 0xe8, 0xeb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x42, 0x35, 0x82,
	0x41, 0x32, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0xc3, 0x04,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x97, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xeb, 0xa9, 0xa8, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x3b, 0x82, 0x41, 0x38, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x9d, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8d, 0x01,
	0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x80, 0xdb, 0xd1, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x74, 0x0a,
	0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x89, 0xa7, 0xd8, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x05, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x9f, 0xe6, 0x92, 0xa9, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x1a, 0xc3, 0x02, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b,
	0x65, 0x79, 0x12, 0x6e, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x45, 0x82, 0x41, 0x42,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x6e, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x45, 0x82, 0x41, 0x42,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x55, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0xdf, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x75, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0xc0, 0xe5, 0xa9, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x5e, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xff, 0xc1, 0x83, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xdc, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x74, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xbd, 0xd1, 0xb6, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x5d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xd2, 0x96, 0xc9, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xa7, 0x01, 0x0a, 0x11, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29,
	0x82, 0x41, 0x26, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x53, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73,
	0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_channel_monitor_proto_rawDescOnce sync.Once
	file_openconfig_channel_monitor_proto_rawDescData = file_openconfig_channel_monitor_proto_rawDesc
)

func file_openconfig_channel_monitor_proto_rawDescGZIP() []byte {
	file_openconfig_channel_monitor_proto_rawDescOnce.Do(func() {
		file_openconfig_channel_monitor_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_channel_monitor_proto_rawDescData)
	})
	return file_openconfig_channel_monitor_proto_rawDescData
}

var file_openconfig_channel_monitor_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_openconfig_channel_monitor_proto_goTypes = []interface{}{
	(*ChannelMonitors)(nil),                                       // 0: openconfig.ChannelMonitors
	(*ChannelMonitors_ChannelMonitor)(nil),                        // 1: openconfig.ChannelMonitors.ChannelMonitor
	(*ChannelMonitors_ChannelMonitorKey)(nil),                     // 2: openconfig.ChannelMonitors.ChannelMonitorKey
	(*ChannelMonitors_ChannelMonitor_Channels)(nil),               // 3: openconfig.ChannelMonitors.ChannelMonitor.Channels
	(*ChannelMonitors_ChannelMonitor_Config)(nil),                 // 4: openconfig.ChannelMonitors.ChannelMonitor.Config
	(*ChannelMonitors_ChannelMonitor_State)(nil),                  // 5: openconfig.ChannelMonitors.ChannelMonitor.State
	(*ChannelMonitors_ChannelMonitor_Channels_Channel)(nil),       // 6: openconfig.ChannelMonitors.ChannelMonitor.Channels.Channel
	(*ChannelMonitors_ChannelMonitor_Channels_ChannelKey)(nil),    // 7: openconfig.ChannelMonitors.ChannelMonitor.Channels.ChannelKey
	(*ChannelMonitors_ChannelMonitor_Channels_Channel_State)(nil), // 8: openconfig.ChannelMonitors.ChannelMonitor.Channels.Channel.State
	(*ywrapper.StringValue)(nil),                                  // 9: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                                    // 10: ywrapper.UintValue
	(*ywrapper.Decimal64Value)(nil),                               // 11: ywrapper.Decimal64Value
}
var file_openconfig_channel_monitor_proto_depIdxs = []int32{
	2,  // 0: openconfig.ChannelMonitors.channel_monitor:type_name -> openconfig.ChannelMonitors.ChannelMonitorKey
	3,  // 1: openconfig.ChannelMonitors.ChannelMonitor.channels:type_name -> openconfig.ChannelMonitors.ChannelMonitor.Channels
	4,  // 2: openconfig.ChannelMonitors.ChannelMonitor.config:type_name -> openconfig.ChannelMonitors.ChannelMonitor.Config
	5,  // 3: openconfig.ChannelMonitors.ChannelMonitor.state:type_name -> openconfig.ChannelMonitors.ChannelMonitor.State
	1,  // 4: openconfig.ChannelMonitors.ChannelMonitorKey.channel_monitor:type_name -> openconfig.ChannelMonitors.ChannelMonitor
	7,  // 5: openconfig.ChannelMonitors.ChannelMonitor.Channels.channel:type_name -> openconfig.ChannelMonitors.ChannelMonitor.Channels.ChannelKey
	9,  // 6: openconfig.ChannelMonitors.ChannelMonitor.Config.monitor_port:type_name -> ywrapper.StringValue
	9,  // 7: openconfig.ChannelMonitors.ChannelMonitor.Config.name:type_name -> ywrapper.StringValue
	9,  // 8: openconfig.ChannelMonitors.ChannelMonitor.State.monitor_port:type_name -> ywrapper.StringValue
	9,  // 9: openconfig.ChannelMonitors.ChannelMonitor.State.name:type_name -> ywrapper.StringValue
	8,  // 10: openconfig.ChannelMonitors.ChannelMonitor.Channels.Channel.state:type_name -> openconfig.ChannelMonitors.ChannelMonitor.Channels.Channel.State
	6,  // 11: openconfig.ChannelMonitors.ChannelMonitor.Channels.ChannelKey.channel:type_name -> openconfig.ChannelMonitors.ChannelMonitor.Channels.Channel
	10, // 12: openconfig.ChannelMonitors.ChannelMonitor.Channels.Channel.State.lower_frequency:type_name -> ywrapper.UintValue
	11, // 13: openconfig.ChannelMonitors.ChannelMonitor.Channels.Channel.State.power:type_name -> ywrapper.Decimal64Value
	10, // 14: openconfig.ChannelMonitors.ChannelMonitor.Channels.Channel.State.upper_frequency:type_name -> ywrapper.UintValue
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_openconfig_channel_monitor_proto_init() }
func file_openconfig_channel_monitor_proto_init() {
	if File_openconfig_channel_monitor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_openconfig_channel_monitor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMonitors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_channel_monitor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMonitors_ChannelMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_channel_monitor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMonitors_ChannelMonitorKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_channel_monitor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMonitors_ChannelMonitor_Channels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_channel_monitor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMonitors_ChannelMonitor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_channel_monitor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMonitors_ChannelMonitor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_channel_monitor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMonitors_ChannelMonitor_Channels_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_channel_monitor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMonitors_ChannelMonitor_Channels_ChannelKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_channel_monitor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMonitors_ChannelMonitor_Channels_Channel_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_channel_monitor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_channel_monitor_proto_goTypes,
		DependencyIndexes: file_openconfig_channel_monitor_proto_depIdxs,
		MessageInfos:      file_openconfig_channel_monitor_proto_msgTypes,
	}.Build()
	File_openconfig_channel_monitor_proto = out.File
	file_openconfig_channel_monitor_proto_rawDesc = nil
	file_openconfig_channel_monitor_proto_goTypes = nil
	file_openconfig_channel_monitor_proto_depIdxs = nil
}
