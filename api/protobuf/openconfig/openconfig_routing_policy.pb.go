// openconfig.openconfig_routing_policy is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_routing_policy.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode int32

const (
	RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_MODE_UNSET RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode = 0
	RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_MODE_IPV4  RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode = 1
	RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_MODE_IPV6  RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode = 2
	RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_MODE_MIXED RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode = 3
)

// Enum value maps for RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode.
var (
	RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode_name = map[int32]string{
		0: "MODE_UNSET",
		1: "MODE_IPV4",
		2: "MODE_IPV6",
		3: "MODE_MIXED",
	}
	RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode_value = map[string]int32{
		"MODE_UNSET": 0,
		"MODE_IPV4":  1,
		"MODE_IPV6":  2,
		"MODE_MIXED": 3,
	}
)

func (x RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode) Enum() *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode {
	p := new(RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode)
	*p = x
	return p
}

func (x RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_routing_policy_proto_enumTypes[0].Descriptor()
}

func (RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode) Type() protoreflect.EnumType {
	return &file_openconfig_routing_policy_proto_enumTypes[0]
}

func (x RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode.Descriptor instead.
func (RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0, 0}
}

type RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode int32

const (
	RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_MODE_UNSET RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode = 0
	RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_MODE_IPV4  RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode = 1
	RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_MODE_IPV6  RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode = 2
	RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_MODE_MIXED RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode = 3
)

// Enum value maps for RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode.
var (
	RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode_name = map[int32]string{
		0: "MODE_UNSET",
		1: "MODE_IPV4",
		2: "MODE_IPV6",
		3: "MODE_MIXED",
	}
	RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode_value = map[string]int32{
		"MODE_UNSET": 0,
		"MODE_IPV4":  1,
		"MODE_IPV6":  2,
		"MODE_MIXED": 3,
	}
)

func (x RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode) Enum() *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode {
	p := new(RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode)
	*p = x
	return p
}

func (x RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_routing_policy_proto_enumTypes[1].Descriptor()
}

func (RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode) Type() protoreflect.EnumType {
	return &file_openconfig_routing_policy_proto_enumTypes[1]
}

func (x RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode.Descriptor instead.
func (RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 0}
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed int32

const (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SETMED_UNSET RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed = 0
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SETMED_IGP   RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed = 1
)

// Enum value maps for RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed.
var (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed_name = map[int32]string{
		0: "SETMED_UNSET",
		1: "SETMED_IGP",
	}
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed_value = map[string]int32{
		"SETMED_UNSET": 0,
		"SETMED_IGP":   1,
	}
)

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed) Enum() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed {
	p := new(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed)
	*p = x
	return p
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_routing_policy_proto_enumTypes[2].Descriptor()
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed) Type() protoreflect.EnumType {
	return &file_openconfig_routing_policy_proto_enumTypes[2]
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed.Descriptor instead.
func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 0, 0}
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop int32

const (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SETNEXTHOP_UNSET RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop = 0
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SETNEXTHOP_SELF  RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop = 1
)

// Enum value maps for RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop.
var (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop_name = map[int32]string{
		0: "SETNEXTHOP_UNSET",
		1: "SETNEXTHOP_SELF",
	}
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop_value = map[string]int32{
		"SETNEXTHOP_UNSET": 0,
		"SETNEXTHOP_SELF":  1,
	}
)

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop) Enum() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop {
	p := new(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop)
	*p = x
	return p
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_routing_policy_proto_enumTypes[3].Descriptor()
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop) Type() protoreflect.EnumType {
	return &file_openconfig_routing_policy_proto_enumTypes[3]
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop.Descriptor instead.
func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 0, 1}
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method int32

const (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_METHOD_UNSET     RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method = 0
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_METHOD_INLINE    RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method = 1
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_METHOD_REFERENCE RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method = 2
)

// Enum value maps for RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method.
var (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method_name = map[int32]string{
		0: "METHOD_UNSET",
		1: "METHOD_INLINE",
		2: "METHOD_REFERENCE",
	}
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method_value = map[string]int32{
		"METHOD_UNSET":     0,
		"METHOD_INLINE":    1,
		"METHOD_REFERENCE": 2,
	}
)

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method) Enum() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method {
	p := new(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method)
	*p = x
	return p
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_routing_policy_proto_enumTypes[4].Descriptor()
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method) Type() protoreflect.EnumType {
	return &file_openconfig_routing_policy_proto_enumTypes[4]
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method.Descriptor instead.
func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 2, 0, 0}
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method int32

const (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_METHOD_UNSET     RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method = 0
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_METHOD_INLINE    RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method = 1
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_METHOD_REFERENCE RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method = 2
)

// Enum value maps for RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method.
var (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method_name = map[int32]string{
		0: "METHOD_UNSET",
		1: "METHOD_INLINE",
		2: "METHOD_REFERENCE",
	}
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method_value = map[string]int32{
		"METHOD_UNSET":     0,
		"METHOD_INLINE":    1,
		"METHOD_REFERENCE": 2,
	}
)

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method) Enum() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method {
	p := new(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method)
	*p = x
	return p
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_routing_policy_proto_enumTypes[5].Descriptor()
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method) Type() protoreflect.EnumType {
	return &file_openconfig_routing_policy_proto_enumTypes[5]
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method.Descriptor instead.
func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 2, 3, 0}
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method int32

const (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_METHOD_UNSET     RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method = 0
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_METHOD_INLINE    RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method = 1
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_METHOD_REFERENCE RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method = 2
)

// Enum value maps for RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method.
var (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method_name = map[int32]string{
		0: "METHOD_UNSET",
		1: "METHOD_INLINE",
		2: "METHOD_REFERENCE",
	}
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method_value = map[string]int32{
		"METHOD_UNSET":     0,
		"METHOD_INLINE":    1,
		"METHOD_REFERENCE": 2,
	}
)

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method) Enum() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method {
	p := new(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method)
	*p = x
	return p
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_routing_policy_proto_enumTypes[6].Descriptor()
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method) Type() protoreflect.EnumType {
	return &file_openconfig_routing_policy_proto_enumTypes[6]
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method.Descriptor instead.
func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 3, 0, 0}
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method int32

const (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_METHOD_UNSET     RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method = 0
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_METHOD_INLINE    RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method = 1
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_METHOD_REFERENCE RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method = 2
)

// Enum value maps for RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method.
var (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method_name = map[int32]string{
		0: "METHOD_UNSET",
		1: "METHOD_INLINE",
		2: "METHOD_REFERENCE",
	}
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method_value = map[string]int32{
		"METHOD_UNSET":     0,
		"METHOD_INLINE":    1,
		"METHOD_REFERENCE": 2,
	}
)

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method) Enum() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method {
	p := new(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method)
	*p = x
	return p
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_routing_policy_proto_enumTypes[7].Descriptor()
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method) Type() protoreflect.EnumType {
	return &file_openconfig_routing_policy_proto_enumTypes[7]
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method.Descriptor instead.
func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 3, 3, 0}
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed int32

const (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SETMED_UNSET RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed = 0
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SETMED_IGP   RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed = 1
)

// Enum value maps for RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed.
var (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed_name = map[int32]string{
		0: "SETMED_UNSET",
		1: "SETMED_IGP",
	}
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed_value = map[string]int32{
		"SETMED_UNSET": 0,
		"SETMED_IGP":   1,
	}
)

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed) Enum() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed {
	p := new(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed)
	*p = x
	return p
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_routing_policy_proto_enumTypes[8].Descriptor()
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed) Type() protoreflect.EnumType {
	return &file_openconfig_routing_policy_proto_enumTypes[8]
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed.Descriptor instead.
func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 4, 0}
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop int32

const (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SETNEXTHOP_UNSET RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop = 0
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SETNEXTHOP_SELF  RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop = 1
)

// Enum value maps for RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop.
var (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop_name = map[int32]string{
		0: "SETNEXTHOP_UNSET",
		1: "SETNEXTHOP_SELF",
	}
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop_value = map[string]int32{
		"SETNEXTHOP_UNSET": 0,
		"SETNEXTHOP_SELF":  1,
	}
)

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop) Enum() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop {
	p := new(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop)
	*p = x
	return p
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_routing_policy_proto_enumTypes[9].Descriptor()
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop) Type() protoreflect.EnumType {
	return &file_openconfig_routing_policy_proto_enumTypes[9]
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop.Descriptor instead.
func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 4, 1}
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType int32

const (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_METRICTYPE_EXTERNAL_TYPE_2 RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType = 0
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_METRICTYPE_EXTERNAL_TYPE_1 RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType = 1
)

// Enum value maps for RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType.
var (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType_name = map[int32]string{
		0: "METRICTYPE_EXTERNAL_TYPE_2",
		1: "METRICTYPE_EXTERNAL_TYPE_1",
	}
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType_value = map[string]int32{
		"METRICTYPE_EXTERNAL_TYPE_2": 0,
		"METRICTYPE_EXTERNAL_TYPE_1": 1,
	}
)

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType) Enum() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType {
	p := new(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType)
	*p = x
	return p
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_routing_policy_proto_enumTypes[10].Descriptor()
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType) Type() protoreflect.EnumType {
	return &file_openconfig_routing_policy_proto_enumTypes[10]
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType.Descriptor instead.
func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 3, 1, 0, 0}
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType int32

const (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_METRICTYPE_EXTERNAL_TYPE_2 RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType = 0
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_METRICTYPE_EXTERNAL_TYPE_1 RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType = 1
)

// Enum value maps for RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType.
var (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType_name = map[int32]string{
		0: "METRICTYPE_EXTERNAL_TYPE_2",
		1: "METRICTYPE_EXTERNAL_TYPE_1",
	}
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType_value = map[string]int32{
		"METRICTYPE_EXTERNAL_TYPE_2": 0,
		"METRICTYPE_EXTERNAL_TYPE_1": 1,
	}
)

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType) Enum() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType {
	p := new(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType)
	*p = x
	return p
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_routing_policy_proto_enumTypes[11].Descriptor()
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType) Type() protoreflect.EnumType {
	return &file_openconfig_routing_policy_proto_enumTypes[11]
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType.Descriptor instead.
func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 3, 1, 1, 0}
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType int32

const (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_ROUTETYPE_UNSET    RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType = 0
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_ROUTETYPE_INTERNAL RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType = 1
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_ROUTETYPE_EXTERNAL RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType = 2
)

// Enum value maps for RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType.
var (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType_name = map[int32]string{
		0: "ROUTETYPE_UNSET",
		1: "ROUTETYPE_INTERNAL",
		2: "ROUTETYPE_EXTERNAL",
	}
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType_value = map[string]int32{
		"ROUTETYPE_UNSET":    0,
		"ROUTETYPE_INTERNAL": 1,
		"ROUTETYPE_EXTERNAL": 2,
	}
)

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType) Enum() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType {
	p := new(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType)
	*p = x
	return p
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_routing_policy_proto_enumTypes[12].Descriptor()
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType) Type() protoreflect.EnumType {
	return &file_openconfig_routing_policy_proto_enumTypes[12]
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType.Descriptor instead.
func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 0, 2, 0}
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType int32

const (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_ROUTETYPE_UNSET    RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType = 0
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_ROUTETYPE_INTERNAL RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType = 1
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_ROUTETYPE_EXTERNAL RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType = 2
)

// Enum value maps for RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType.
var (
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType_name = map[int32]string{
		0: "ROUTETYPE_UNSET",
		1: "ROUTETYPE_INTERNAL",
		2: "ROUTETYPE_EXTERNAL",
	}
	RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType_value = map[string]int32{
		"ROUTETYPE_UNSET":    0,
		"ROUTETYPE_INTERNAL": 1,
		"ROUTETYPE_EXTERNAL": 2,
	}
)

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType) Enum() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType {
	p := new(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType)
	*p = x
	return p
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_routing_policy_proto_enumTypes[13].Descriptor()
}

func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType) Type() protoreflect.EnumType {
	return &file_openconfig_routing_policy_proto_enumTypes[13]
}

func (x RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType.Descriptor instead.
func (RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 0, 4, 0}
}

type RoutingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefinedSets       *RoutingPolicy_DefinedSets       `protobuf:"bytes,458371816,opt,name=defined_sets,json=definedSets,proto3" json:"defined_sets,omitempty"`
	PolicyDefinitions *RoutingPolicy_PolicyDefinitions `protobuf:"bytes,336504748,opt,name=policy_definitions,json=policyDefinitions,proto3" json:"policy_definitions,omitempty"`
}

func (x *RoutingPolicy) Reset() {
	*x = RoutingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy) ProtoMessage() {}

func (x *RoutingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy.ProtoReflect.Descriptor instead.
func (*RoutingPolicy) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0}
}

func (x *RoutingPolicy) GetDefinedSets() *RoutingPolicy_DefinedSets {
	if x != nil {
		return x.DefinedSets
	}
	return nil
}

func (x *RoutingPolicy) GetPolicyDefinitions() *RoutingPolicy_PolicyDefinitions {
	if x != nil {
		return x.PolicyDefinitions
	}
	return nil
}

type RoutingPolicy_DefinedSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgpDefinedSets *RoutingPolicy_DefinedSets_BgpDefinedSets `protobuf:"bytes,493738976,opt,name=bgp_defined_sets,json=bgpDefinedSets,proto3" json:"bgp_defined_sets,omitempty"`
	NeighborSets   *RoutingPolicy_DefinedSets_NeighborSets   `protobuf:"bytes,37262241,opt,name=neighbor_sets,json=neighborSets,proto3" json:"neighbor_sets,omitempty"`
	PrefixSets     *RoutingPolicy_DefinedSets_PrefixSets     `protobuf:"bytes,534633543,opt,name=prefix_sets,json=prefixSets,proto3" json:"prefix_sets,omitempty"`
	TagSets        *RoutingPolicy_DefinedSets_TagSets        `protobuf:"bytes,463440089,opt,name=tag_sets,json=tagSets,proto3" json:"tag_sets,omitempty"`
}

func (x *RoutingPolicy_DefinedSets) Reset() {
	*x = RoutingPolicy_DefinedSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RoutingPolicy_DefinedSets) GetBgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSets {
	if x != nil {
		return x.BgpDefinedSets
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets) GetNeighborSets() *RoutingPolicy_DefinedSets_NeighborSets {
	if x != nil {
		return x.NeighborSets
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets) GetPrefixSets() *RoutingPolicy_DefinedSets_PrefixSets {
	if x != nil {
		return x.PrefixSets
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets) GetTagSets() *RoutingPolicy_DefinedSets_TagSets {
	if x != nil {
		return x.TagSets
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyDefinition []*RoutingPolicy_PolicyDefinitions_PolicyDefinitionKey `protobuf:"bytes,45709361,rep,name=policy_definition,json=policyDefinition,proto3" json:"policy_definition,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions) Reset() {
	*x = RoutingPolicy_PolicyDefinitions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions) ProtoMessage() {}

func (x *RoutingPolicy_PolicyDefinitions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RoutingPolicy_PolicyDefinitions) GetPolicyDefinition() []*RoutingPolicy_PolicyDefinitions_PolicyDefinitionKey {
	if x != nil {
		return x.PolicyDefinition
	}
	return nil
}

type RoutingPolicy_DefinedSets_BgpDefinedSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsPathSets       *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets       `protobuf:"bytes,505965037,opt,name=as_path_sets,json=asPathSets,proto3" json:"as_path_sets,omitempty"`
	CommunitySets    *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets    `protobuf:"bytes,29906836,opt,name=community_sets,json=communitySets,proto3" json:"community_sets,omitempty"`
	ExtCommunitySets *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets `protobuf:"bytes,75424042,opt,name=ext_community_sets,json=extCommunitySets,proto3" json:"ext_community_sets,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets) GetAsPathSets() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets {
	if x != nil {
		return x.AsPathSets
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets) GetCommunitySets() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets {
	if x != nil {
		return x.CommunitySets
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets) GetExtCommunitySets() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets {
	if x != nil {
		return x.ExtCommunitySets
	}
	return nil
}

type RoutingPolicy_DefinedSets_NeighborSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborSet []*RoutingPolicy_DefinedSets_NeighborSets_NeighborSetKey `protobuf:"bytes,190364661,rep,name=neighbor_set,json=neighborSet,proto3" json:"neighbor_set,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_NeighborSets) Reset() {
	*x = RoutingPolicy_DefinedSets_NeighborSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_NeighborSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_NeighborSets) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_NeighborSets) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_NeighborSets.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_NeighborSets) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *RoutingPolicy_DefinedSets_NeighborSets) GetNeighborSet() []*RoutingPolicy_DefinedSets_NeighborSets_NeighborSetKey {
	if x != nil {
		return x.NeighborSet
	}
	return nil
}

type RoutingPolicy_DefinedSets_PrefixSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixSet []*RoutingPolicy_DefinedSets_PrefixSets_PrefixSetKey `protobuf:"bytes,454962905,rep,name=prefix_set,json=prefixSet,proto3" json:"prefix_set,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_PrefixSets) Reset() {
	*x = RoutingPolicy_DefinedSets_PrefixSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_PrefixSets) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_PrefixSets) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_PrefixSets.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_PrefixSets) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets) GetPrefixSet() []*RoutingPolicy_DefinedSets_PrefixSets_PrefixSetKey {
	if x != nil {
		return x.PrefixSet
	}
	return nil
}

type RoutingPolicy_DefinedSets_TagSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagSet []*RoutingPolicy_DefinedSets_TagSets_TagSetKey `protobuf:"bytes,292339475,rep,name=tag_set,json=tagSet,proto3" json:"tag_set,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_TagSets) Reset() {
	*x = RoutingPolicy_DefinedSets_TagSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_TagSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_TagSets) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_TagSets) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_TagSets.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_TagSets) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *RoutingPolicy_DefinedSets_TagSets) GetTagSet() []*RoutingPolicy_DefinedSets_TagSets_TagSetKey {
	if x != nil {
		return x.TagSet
	}
	return nil
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsPathSet []*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSetKey `protobuf:"bytes,66419511,rep,name=as_path_set,json=asPathSet,proto3" json:"as_path_set,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets) GetAsPathSet() []*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSetKey {
	if x != nil {
		return x.AsPathSet
	}
	return nil
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunitySet []*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySetKey `protobuf:"bytes,488993057,rep,name=community_set,json=communitySet,proto3" json:"community_set,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets) GetCommunitySet() []*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySetKey {
	if x != nil {
		return x.CommunitySet
	}
	return nil
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtCommunitySet []*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySetKey `protobuf:"bytes,398851425,rep,name=ext_community_set,json=extCommunitySet,proto3" json:"ext_community_set,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets) GetExtCommunitySet() []*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySetKey {
	if x != nil {
		return x.ExtCommunitySet
	}
	return nil
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_Config `protobuf:"bytes,454619816,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_State  `protobuf:"bytes,476465345,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet) GetConfig() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet) GetState() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsPathSetName string                                                         `protobuf:"bytes,1,opt,name=as_path_set_name,json=asPathSetName,proto3" json:"as_path_set_name,omitempty"`
	AsPathSet     *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet `protobuf:"bytes,2,opt,name=as_path_set,json=asPathSet,proto3" json:"as_path_set,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSetKey) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSetKey) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSetKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSetKey.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSetKey) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSetKey) GetAsPathSetName() string {
	if x != nil {
		return x.AsPathSetName
	}
	return ""
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSetKey) GetAsPathSet() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet {
	if x != nil {
		return x.AsPathSet
	}
	return nil
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsPathSetMember []*ywrapper.StringValue `protobuf:"bytes,396430021,rep,name=as_path_set_member,json=asPathSetMember,proto3" json:"as_path_set_member,omitempty"`
	AsPathSetName   *ywrapper.StringValue   `protobuf:"bytes,486145406,opt,name=as_path_set_name,json=asPathSetName,proto3" json:"as_path_set_name,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_Config) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_Config) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_Config) GetAsPathSetMember() []*ywrapper.StringValue {
	if x != nil {
		return x.AsPathSetMember
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_Config) GetAsPathSetName() *ywrapper.StringValue {
	if x != nil {
		return x.AsPathSetName
	}
	return nil
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsPathSetMember []*ywrapper.StringValue `protobuf:"bytes,17676802,rep,name=as_path_set_member,json=asPathSetMember,proto3" json:"as_path_set_member,omitempty"`
	AsPathSetName   *ywrapper.StringValue   `protobuf:"bytes,286685717,opt,name=as_path_set_name,json=asPathSetName,proto3" json:"as_path_set_name,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_State) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_State) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_State) GetAsPathSetMember() []*ywrapper.StringValue {
	if x != nil {
		return x.AsPathSetMember
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_State) GetAsPathSetName() *ywrapper.StringValue {
	if x != nil {
		return x.AsPathSetName
	}
	return nil
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config `protobuf:"bytes,341777062,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State  `protobuf:"bytes,380921107,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet) GetConfig() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet) GetState() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunitySetName string                                                               `protobuf:"bytes,1,opt,name=community_set_name,json=communitySetName,proto3" json:"community_set_name,omitempty"`
	CommunitySet     *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet `protobuf:"bytes,2,opt,name=community_set,json=communitySet,proto3" json:"community_set,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySetKey) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySetKey) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySetKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySetKey.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySetKey) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySetKey) GetCommunitySetName() string {
	if x != nil {
		return x.CommunitySetName
	}
	return ""
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySetKey) GetCommunitySet() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet {
	if x != nil {
		return x.CommunitySet
	}
	return nil
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunityMember  []*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion `protobuf:"bytes,466406263,rep,name=community_member,json=communityMember,proto3" json:"community_member,omitempty"`
	CommunitySetName *ywrapper.StringValue                                                                              `protobuf:"bytes,150801361,opt,name=community_set_name,json=communitySetName,proto3" json:"community_set_name,omitempty"`
	MatchSetOptions  OpenconfigRoutingPolicyMatchSetOptionsType                                                         `protobuf:"varint,158966730,opt,name=match_set_options,json=matchSetOptions,proto3,enum=openconfig.OpenconfigRoutingPolicyMatchSetOptionsType" json:"match_set_options,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config) GetCommunityMember() []*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion {
	if x != nil {
		return x.CommunityMember
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config) GetCommunitySetName() *ywrapper.StringValue {
	if x != nil {
		return x.CommunitySetName
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config) GetMatchSetOptions() OpenconfigRoutingPolicyMatchSetOptionsType {
	if x != nil {
		return x.MatchSetOptions
	}
	return OpenconfigRoutingPolicyMatchSetOptionsType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_ANY
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunityMember  []*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion `protobuf:"bytes,219926536,rep,name=community_member,json=communityMember,proto3" json:"community_member,omitempty"`
	CommunitySetName *ywrapper.StringValue                                                                             `protobuf:"bytes,37615646,opt,name=community_set_name,json=communitySetName,proto3" json:"community_set_name,omitempty"`
	MatchSetOptions  OpenconfigRoutingPolicyMatchSetOptionsType                                                        `protobuf:"varint,401890711,opt,name=match_set_options,json=matchSetOptions,proto3,enum=openconfig.OpenconfigRoutingPolicyMatchSetOptionsType" json:"match_set_options,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 1}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State) GetCommunityMember() []*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion {
	if x != nil {
		return x.CommunityMember
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State) GetCommunitySetName() *ywrapper.StringValue {
	if x != nil {
		return x.CommunitySetName
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State) GetMatchSetOptions() OpenconfigRoutingPolicyMatchSetOptionsType {
	if x != nil {
		return x.MatchSetOptions
	}
	return OpenconfigRoutingPolicyMatchSetOptionsType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_ANY
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunityMemberOpenconfigbgptypesbgpwellknownstdcommunity OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY `protobuf:"varint,214769156,opt,name=community_member_openconfigbgptypesbgpwellknownstdcommunity,json=communityMemberOpenconfigbgptypesbgpwellknownstdcommunity,proto3,enum=openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY" json:"community_member_openconfigbgptypesbgpwellknownstdcommunity,omitempty"`
	CommunityMemberString                                     string                                     `protobuf:"bytes,247395797,opt,name=community_member_string,json=communityMemberString,proto3" json:"community_member_string,omitempty"`
	CommunityMemberUint64                                     uint64                                     `protobuf:"varint,355275064,opt,name=community_member_uint64,json=communityMemberUint64,proto3" json:"community_member_uint64,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion) ProtoMessage() {
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0, 0}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion) GetCommunityMemberOpenconfigbgptypesbgpwellknownstdcommunity() OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY {
	if x != nil {
		return x.CommunityMemberOpenconfigbgptypesbgpwellknownstdcommunity
	}
	return OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion) GetCommunityMemberString() string {
	if x != nil {
		return x.CommunityMemberString
	}
	return ""
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion) GetCommunityMemberUint64() uint64 {
	if x != nil {
		return x.CommunityMemberUint64
	}
	return 0
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunityMemberOpenconfigbgptypesbgpwellknownstdcommunity OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY `protobuf:"varint,259855677,opt,name=community_member_openconfigbgptypesbgpwellknownstdcommunity,json=communityMemberOpenconfigbgptypesbgpwellknownstdcommunity,proto3,enum=openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY" json:"community_member_openconfigbgptypesbgpwellknownstdcommunity,omitempty"`
	CommunityMemberString                                     string                                     `protobuf:"bytes,344110952,opt,name=community_member_string,json=communityMemberString,proto3" json:"community_member_string,omitempty"`
	CommunityMemberUint64                                     uint64                                     `protobuf:"varint,84246017,opt,name=community_member_uint64,json=communityMemberUint64,proto3" json:"community_member_uint64,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion) ProtoMessage() {
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 1, 0}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion) GetCommunityMemberOpenconfigbgptypesbgpwellknownstdcommunity() OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY {
	if x != nil {
		return x.CommunityMemberOpenconfigbgptypesbgpwellknownstdcommunity
	}
	return OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion) GetCommunityMemberString() string {
	if x != nil {
		return x.CommunityMemberString
	}
	return ""
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion) GetCommunityMemberUint64() uint64 {
	if x != nil {
		return x.CommunityMemberUint64
	}
	return 0
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config `protobuf:"bytes,475812710,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State  `protobuf:"bytes,2369747,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet) GetConfig() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet) GetState() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtCommunitySetName string                                                                     `protobuf:"bytes,1,opt,name=ext_community_set_name,json=extCommunitySetName,proto3" json:"ext_community_set_name,omitempty"`
	ExtCommunitySet     *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet `protobuf:"bytes,2,opt,name=ext_community_set,json=extCommunitySet,proto3" json:"ext_community_set,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySetKey) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySetKey) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySetKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySetKey.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySetKey) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 2, 1}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySetKey) GetExtCommunitySetName() string {
	if x != nil {
		return x.ExtCommunitySetName
	}
	return ""
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySetKey) GetExtCommunitySet() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet {
	if x != nil {
		return x.ExtCommunitySet
	}
	return nil
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtCommunityMember  []*ywrapper.StringValue                    `protobuf:"bytes,342246701,rep,name=ext_community_member,json=extCommunityMember,proto3" json:"ext_community_member,omitempty"`
	ExtCommunitySetName *ywrapper.StringValue                      `protobuf:"bytes,355879687,opt,name=ext_community_set_name,json=extCommunitySetName,proto3" json:"ext_community_set_name,omitempty"`
	MatchSetOptions     OpenconfigRoutingPolicyMatchSetOptionsType `protobuf:"varint,35521546,opt,name=match_set_options,json=matchSetOptions,proto3,enum=openconfig.OpenconfigRoutingPolicyMatchSetOptionsType" json:"match_set_options,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config) ProtoMessage() {
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config) GetExtCommunityMember() []*ywrapper.StringValue {
	if x != nil {
		return x.ExtCommunityMember
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config) GetExtCommunitySetName() *ywrapper.StringValue {
	if x != nil {
		return x.ExtCommunitySetName
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config) GetMatchSetOptions() OpenconfigRoutingPolicyMatchSetOptionsType {
	if x != nil {
		return x.MatchSetOptions
	}
	return OpenconfigRoutingPolicyMatchSetOptionsType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_ANY
}

type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtCommunityMember  []*ywrapper.StringValue                    `protobuf:"bytes,91268282,rep,name=ext_community_member,json=extCommunityMember,proto3" json:"ext_community_member,omitempty"`
	ExtCommunitySetName *ywrapper.StringValue                      `protobuf:"bytes,273694400,opt,name=ext_community_set_name,json=extCommunitySetName,proto3" json:"ext_community_set_name,omitempty"`
	MatchSetOptions     OpenconfigRoutingPolicyMatchSetOptionsType `protobuf:"varint,466364375,opt,name=match_set_options,json=matchSetOptions,proto3,enum=openconfig.OpenconfigRoutingPolicyMatchSetOptionsType" json:"match_set_options,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State) Reset() {
	*x = RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State) ProtoMessage() {
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1}
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State) GetExtCommunityMember() []*ywrapper.StringValue {
	if x != nil {
		return x.ExtCommunityMember
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State) GetExtCommunitySetName() *ywrapper.StringValue {
	if x != nil {
		return x.ExtCommunitySetName
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State) GetMatchSetOptions() OpenconfigRoutingPolicyMatchSetOptionsType {
	if x != nil {
		return x.MatchSetOptions
	}
	return OpenconfigRoutingPolicyMatchSetOptionsType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_ANY
}

type RoutingPolicy_DefinedSets_NeighborSets_NeighborSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config `protobuf:"bytes,36698778,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State  `protobuf:"bytes,342002999,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) Reset() {
	*x = RoutingPolicy_DefinedSets_NeighborSets_NeighborSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_NeighborSets_NeighborSet.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) GetConfig() *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) GetState() *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_DefinedSets_NeighborSets_NeighborSetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                                              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NeighborSet *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet `protobuf:"bytes,2,opt,name=neighbor_set,json=neighborSet,proto3" json:"neighbor_set,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSetKey) Reset() {
	*x = RoutingPolicy_DefinedSets_NeighborSets_NeighborSetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_NeighborSets_NeighborSetKey) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSetKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_NeighborSets_NeighborSetKey.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_NeighborSets_NeighborSetKey) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSetKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSetKey) GetNeighborSet() *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet {
	if x != nil {
		return x.NeighborSet
	}
	return nil
}

type RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*ywrapper.StringValue `protobuf:"bytes,76726171,rep,name=address,proto3" json:"address,omitempty"`
	Name    *ywrapper.StringValue   `protobuf:"bytes,399782664,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config) Reset() {
	*x = RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config) GetAddress() []*ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*ywrapper.StringValue `protobuf:"bytes,312589922,rep,name=address,proto3" json:"address,omitempty"`
	Name    *ywrapper.StringValue   `protobuf:"bytes,505606975,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State) Reset() {
	*x = RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1}
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State) GetAddress() []*ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type RoutingPolicy_DefinedSets_PrefixSets_PrefixSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config   *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config   `protobuf:"bytes,232054830,opt,name=config,proto3" json:"config,omitempty"`
	Prefixes *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes `protobuf:"bytes,375979380,opt,name=prefixes,proto3" json:"prefixes,omitempty"`
	State    *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State    `protobuf:"bytes,502119003,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) Reset() {
	*x = RoutingPolicy_DefinedSets_PrefixSets_PrefixSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_PrefixSets_PrefixSet.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) GetConfig() *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) GetPrefixes() *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) GetState() *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_DefinedSets_PrefixSets_PrefixSetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PrefixSet *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet `protobuf:"bytes,2,opt,name=prefix_set,json=prefixSet,proto3" json:"prefix_set,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSetKey) Reset() {
	*x = RoutingPolicy_DefinedSets_PrefixSets_PrefixSetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSetKey) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSetKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_PrefixSets_PrefixSetKey.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSetKey) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSetKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSetKey) GetPrefixSet() *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet {
	if x != nil {
		return x.PrefixSet
	}
	return nil
}

type RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode `protobuf:"varint,148235464,opt,name=mode,proto3,enum=openconfig.RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode" json:"mode,omitempty"`
	Name *ywrapper.StringValue                                      `protobuf:"bytes,317042292,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config) Reset() {
	*x = RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config) GetMode() RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode {
	if x != nil {
		return x.Mode
	}
	return RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_MODE_UNSET
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix []*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey `protobuf:"bytes,190762607,rep,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) Reset() {
	*x = RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) GetPrefix() []*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode `protobuf:"varint,533216747,opt,name=mode,proto3,enum=openconfig.RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode" json:"mode,omitempty"`
	Name *ywrapper.StringValue                                     `protobuf:"bytes,323451371,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State) Reset() {
	*x = RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State) GetMode() RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode {
	if x != nil {
		return x.Mode
	}
	return RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_MODE_UNSET
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config `protobuf:"bytes,172267600,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State  `protobuf:"bytes,40456777,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) Reset() {
	*x = RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1, 0}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) GetConfig() *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) GetState() *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpPrefix        string                                                          `protobuf:"bytes,1,opt,name=ip_prefix,json=ipPrefix,proto3" json:"ip_prefix,omitempty"`
	MasklengthRange string                                                          `protobuf:"bytes,2,opt,name=masklength_range,json=masklengthRange,proto3" json:"masklength_range,omitempty"`
	Prefix          *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey) Reset() {
	*x = RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1, 1}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey) GetIpPrefix() string {
	if x != nil {
		return x.IpPrefix
	}
	return ""
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey) GetMasklengthRange() string {
	if x != nil {
		return x.MasklengthRange
	}
	return ""
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey) GetPrefix() *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpPrefix        *ywrapper.StringValue `protobuf:"bytes,310284117,opt,name=ip_prefix,json=ipPrefix,proto3" json:"ip_prefix,omitempty"`
	MasklengthRange *ywrapper.StringValue `protobuf:"bytes,259385899,opt,name=masklength_range,json=masklengthRange,proto3" json:"masklength_range,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config) Reset() {
	*x = RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1, 0, 0}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config) GetIpPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.IpPrefix
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config) GetMasklengthRange() *ywrapper.StringValue {
	if x != nil {
		return x.MasklengthRange
	}
	return nil
}

type RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpPrefix        *ywrapper.StringValue `protobuf:"bytes,510814404,opt,name=ip_prefix,json=ipPrefix,proto3" json:"ip_prefix,omitempty"`
	MasklengthRange *ywrapper.StringValue `protobuf:"bytes,188660404,opt,name=masklength_range,json=masklengthRange,proto3" json:"masklength_range,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State) Reset() {
	*x = RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1, 0, 1}
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State) GetIpPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.IpPrefix
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State) GetMasklengthRange() *ywrapper.StringValue {
	if x != nil {
		return x.MasklengthRange
	}
	return nil
}

type RoutingPolicy_DefinedSets_TagSets_TagSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_DefinedSets_TagSets_TagSet_Config `protobuf:"bytes,214777524,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_DefinedSets_TagSets_TagSet_State  `protobuf:"bytes,59883213,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet) Reset() {
	*x = RoutingPolicy_DefinedSets_TagSets_TagSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_TagSets_TagSet) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_TagSets_TagSet.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_TagSets_TagSet) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet) GetConfig() *RoutingPolicy_DefinedSets_TagSets_TagSet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet) GetState() *RoutingPolicy_DefinedSets_TagSets_TagSet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_DefinedSets_TagSets_TagSetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TagSet *RoutingPolicy_DefinedSets_TagSets_TagSet `protobuf:"bytes,2,opt,name=tag_set,json=tagSet,proto3" json:"tag_set,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSetKey) Reset() {
	*x = RoutingPolicy_DefinedSets_TagSets_TagSetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_TagSets_TagSetKey) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSetKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_TagSets_TagSetKey.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_TagSets_TagSetKey) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 3, 1}
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSetKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSetKey) GetTagSet() *RoutingPolicy_DefinedSets_TagSets_TagSet {
	if x != nil {
		return x.TagSet
	}
	return nil
}

type RoutingPolicy_DefinedSets_TagSets_TagSet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *ywrapper.StringValue                                            `protobuf:"bytes,136546262,opt,name=name,proto3" json:"name,omitempty"`
	TagValue []*RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValueUnion `protobuf:"bytes,230328509,rep,name=tag_value,json=tagValue,proto3" json:"tag_value,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_Config) Reset() {
	*x = RoutingPolicy_DefinedSets_TagSets_TagSet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_TagSets_TagSet_Config) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_TagSets_TagSet_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_TagSets_TagSet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 3, 0, 0}
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_Config) GetTagValue() []*RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValueUnion {
	if x != nil {
		return x.TagValue
	}
	return nil
}

type RoutingPolicy_DefinedSets_TagSets_TagSet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *ywrapper.StringValue                                           `protobuf:"bytes,442347849,opt,name=name,proto3" json:"name,omitempty"`
	TagValue []*RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValueUnion `protobuf:"bytes,143270860,rep,name=tag_value,json=tagValue,proto3" json:"tag_value,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_State) Reset() {
	*x = RoutingPolicy_DefinedSets_TagSets_TagSet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_TagSets_TagSet_State) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_TagSets_TagSet_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_TagSets_TagSet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 3, 0, 1}
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_State) GetTagValue() []*RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValueUnion {
	if x != nil {
		return x.TagValue
	}
	return nil
}

type RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValueUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagValueString string `protobuf:"bytes,535121259,opt,name=tag_value_string,json=tagValueString,proto3" json:"tag_value_string,omitempty"`
	TagValueUint64 uint64 `protobuf:"varint,83953294,opt,name=tag_value_uint64,json=tagValueUint64,proto3" json:"tag_value_uint64,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValueUnion) Reset() {
	*x = RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValueUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValueUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValueUnion) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValueUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValueUnion.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValueUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 3, 0, 0, 0}
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValueUnion) GetTagValueString() string {
	if x != nil {
		return x.TagValueString
	}
	return ""
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValueUnion) GetTagValueUint64() uint64 {
	if x != nil {
		return x.TagValueUint64
	}
	return 0
}

type RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValueUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagValueString string `protobuf:"bytes,114243060,opt,name=tag_value_string,json=tagValueString,proto3" json:"tag_value_string,omitempty"`
	TagValueUint64 uint64 `protobuf:"varint,392663037,opt,name=tag_value_uint64,json=tagValueUint64,proto3" json:"tag_value_uint64,omitempty"`
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValueUnion) Reset() {
	*x = RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValueUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValueUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValueUnion) ProtoMessage() {}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValueUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValueUnion.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValueUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 0, 3, 0, 1, 0}
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValueUnion) GetTagValueString() string {
	if x != nil {
		return x.TagValueString
	}
	return ""
}

func (x *RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValueUnion) GetTagValueUint64() uint64 {
	if x != nil {
		return x.TagValueUint64
	}
	return 0
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config     *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config     `protobuf:"bytes,449734358,opt,name=config,proto3" json:"config,omitempty"`
	State      *RoutingPolicy_PolicyDefinitions_PolicyDefinition_State      `protobuf:"bytes,533362307,opt,name=state,proto3" json:"state,omitempty"`
	Statements *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements `protobuf:"bytes,490200882,opt,name=statements,proto3" json:"statements,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition) ProtoMessage() {}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition) GetStatements() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements {
	if x != nil {
		return x.Statements
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinitionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PolicyDefinition *RoutingPolicy_PolicyDefinitions_PolicyDefinition `protobuf:"bytes,2,opt,name=policy_definition,json=policyDefinition,proto3" json:"policy_definition,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinitionKey) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinitionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinitionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinitionKey) ProtoMessage() {}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinitionKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinitionKey.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinitionKey) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinitionKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinitionKey) GetPolicyDefinition() *RoutingPolicy_PolicyDefinitions_PolicyDefinition {
	if x != nil {
		return x.PolicyDefinition
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,440812860,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config) ProtoMessage() {}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,346730387,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_State) ProtoMessage() {}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statement []*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_StatementKey `protobuf:"bytes,139607488,rep,name=statement,proto3" json:"statement,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) ProtoMessage() {}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) GetStatement() []*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_StatementKey {
	if x != nil {
		return x.Statement
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions    *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions    `protobuf:"bytes,81603316,opt,name=actions,proto3" json:"actions,omitempty"`
	Conditions *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions `protobuf:"bytes,491779189,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Config     *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config     `protobuf:"bytes,246472629,opt,name=config,proto3" json:"config,omitempty"`
	State      *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State      `protobuf:"bytes,102299818,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) ProtoMessage() {}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) GetActions() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) GetConditions() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_StatementKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                                                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Statement *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_StatementKey) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_StatementKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_StatementKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_StatementKey) ProtoMessage() {}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_StatementKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_StatementKey.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_StatementKey) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_StatementKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_StatementKey) GetStatement() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgpActions  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions  `protobuf:"bytes,342511840,opt,name=bgp_actions,json=bgpActions,proto3" json:"bgp_actions,omitempty"`
	Config      *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config      `protobuf:"bytes,262123129,opt,name=config,proto3" json:"config,omitempty"`
	IsisActions *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions `protobuf:"bytes,89820557,opt,name=isis_actions,json=isisActions,proto3" json:"isis_actions,omitempty"`
	OspfActions *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions `protobuf:"bytes,27199337,opt,name=ospf_actions,json=ospfActions,proto3" json:"ospf_actions,omitempty"`
	State       *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State       `protobuf:"bytes,11561166,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) GetBgpActions() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions {
	if x != nil {
		return x.BgpActions
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) GetIsisActions() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions {
	if x != nil {
		return x.IsisActions
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) GetOspfActions() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions {
	if x != nil {
		return x.OspfActions
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgpConditions         *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions         `protobuf:"bytes,143331898,opt,name=bgp_conditions,json=bgpConditions,proto3" json:"bgp_conditions,omitempty"`
	Config                *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config                `protobuf:"bytes,442654746,opt,name=config,proto3" json:"config,omitempty"`
	IsisConditions        *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions        `protobuf:"bytes,314482659,opt,name=isis_conditions,json=isisConditions,proto3" json:"isis_conditions,omitempty"`
	MatchInterface        *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface        `protobuf:"bytes,181335981,opt,name=match_interface,json=matchInterface,proto3" json:"match_interface,omitempty"`
	MatchNeighborSet      *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet      `protobuf:"bytes,51258085,opt,name=match_neighbor_set,json=matchNeighborSet,proto3" json:"match_neighbor_set,omitempty"`
	MatchPrefixSet        *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet        `protobuf:"bytes,508077823,opt,name=match_prefix_set,json=matchPrefixSet,proto3" json:"match_prefix_set,omitempty"`
	MatchProtocolInstance *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance `protobuf:"bytes,129458588,opt,name=match_protocol_instance,json=matchProtocolInstance,proto3" json:"match_protocol_instance,omitempty"`
	MatchTagSet           *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet           `protobuf:"bytes,512031371,opt,name=match_tag_set,json=matchTagSet,proto3" json:"match_tag_set,omitempty"`
	OspfConditions        *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions        `protobuf:"bytes,181340491,opt,name=ospf_conditions,json=ospfConditions,proto3" json:"ospf_conditions,omitempty"`
	State                 *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State                 `protobuf:"bytes,400294327,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetBgpConditions() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions {
	if x != nil {
		return x.BgpConditions
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetIsisConditions() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions {
	if x != nil {
		return x.IsisConditions
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetMatchInterface() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface {
	if x != nil {
		return x.MatchInterface
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetMatchNeighborSet() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet {
	if x != nil {
		return x.MatchNeighborSet
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetMatchPrefixSet() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet {
	if x != nil {
		return x.MatchPrefixSet
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetMatchProtocolInstance() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance {
	if x != nil {
		return x.MatchProtocolInstance
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetMatchTagSet() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet {
	if x != nil {
		return x.MatchTagSet
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetOspfConditions() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions {
	if x != nil {
		return x.OspfConditions
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,395631633,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config) ProtoMessage() {}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 2}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,290519160,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State) ProtoMessage() {}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 3}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config           *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config           `protobuf:"bytes,499604949,opt,name=config,proto3" json:"config,omitempty"`
	SetAsPathPrepend *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend `protobuf:"bytes,399197981,opt,name=set_as_path_prepend,json=setAsPathPrepend,proto3" json:"set_as_path_prepend,omitempty"`
	SetCommunity     *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity     `protobuf:"bytes,495870861,opt,name=set_community,json=setCommunity,proto3" json:"set_community,omitempty"`
	SetExtCommunity  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity  `protobuf:"bytes,502962179,opt,name=set_ext_community,json=setExtCommunity,proto3" json:"set_ext_community,omitempty"`
	State            *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State            `protobuf:"bytes,380022602,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions) GetSetAsPathPrepend() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend {
	if x != nil {
		return x.SetAsPathPrepend
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions) GetSetCommunity() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity {
	if x != nil {
		return x.SetCommunity
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions) GetSetExtCommunity() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity {
	if x != nil {
		return x.SetExtCommunity
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyResult OpenconfigRoutingPolicyPolicyResultType `protobuf:"varint,519719472,opt,name=policy_result,json=policyResult,proto3,enum=openconfig.OpenconfigRoutingPolicyPolicyResultType" json:"policy_result,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config) GetPolicyResult() OpenconfigRoutingPolicyPolicyResultType {
	if x != nil {
		return x.PolicyResult
	}
	return OpenconfigRoutingPolicyPolicyResultType_OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_UNSET
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config `protobuf:"bytes,86012194,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State  `protobuf:"bytes,161515871,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 2}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config    *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config    `protobuf:"bytes,63778782,opt,name=config,proto3" json:"config,omitempty"`
	SetMetric *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric `protobuf:"bytes,422999309,opt,name=set_metric,json=setMetric,proto3" json:"set_metric,omitempty"`
	State     *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State     `protobuf:"bytes,452961355,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 3}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions) GetSetMetric() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric {
	if x != nil {
		return x.SetMetric
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyResult OpenconfigRoutingPolicyPolicyResultType `protobuf:"varint,88773535,opt,name=policy_result,json=policyResult,proto3,enum=openconfig.OpenconfigRoutingPolicyPolicyResultType" json:"policy_result,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 4}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State) GetPolicyResult() OpenconfigRoutingPolicyPolicyResultType {
	if x != nil {
		return x.PolicyResult
	}
	return OpenconfigRoutingPolicyPolicyResultType_OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_UNSET
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetLocalPref *ywrapper.UintValue `protobuf:"bytes,235457572,opt,name=set_local_pref,json=setLocalPref,proto3" json:"set_local_pref,omitempty"`
	// Types that are assignable to SetMed:
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedSetmed
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedString
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedUint64
	SetMed isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed `protobuf_oneof:"set_med"`
	// Types that are assignable to SetNextHop:
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHopSetnexthop
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHopString
	SetNextHop     isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop `protobuf_oneof:"set_next_hop"`
	SetRouteOrigin OpenconfigBgpPolicyBgpOriginAttrType                                                                         `protobuf:"varint,418723183,opt,name=set_route_origin,json=setRouteOrigin,proto3,enum=openconfig.OpenconfigBgpPolicyBgpOriginAttrType" json:"set_route_origin,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config) GetSetLocalPref() *ywrapper.UintValue {
	if x != nil {
		return x.SetLocalPref
	}
	return nil
}

func (m *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config) GetSetMed() isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed {
	if m != nil {
		return m.SetMed
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config) GetSetMedSetmed() RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed {
	if x, ok := x.GetSetMed().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedSetmed); ok {
		return x.SetMedSetmed
	}
	return RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SETMED_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config) GetSetMedString() string {
	if x, ok := x.GetSetMed().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedString); ok {
		return x.SetMedString
	}
	return ""
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config) GetSetMedUint64() uint64 {
	if x, ok := x.GetSetMed().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedUint64); ok {
		return x.SetMedUint64
	}
	return 0
}

func (m *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config) GetSetNextHop() isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop {
	if m != nil {
		return m.SetNextHop
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config) GetSetNextHopSetnexthop() RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop {
	if x, ok := x.GetSetNextHop().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHopSetnexthop); ok {
		return x.SetNextHopSetnexthop
	}
	return RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SETNEXTHOP_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config) GetSetNextHopString() string {
	if x, ok := x.GetSetNextHop().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHopString); ok {
		return x.SetNextHopString
	}
	return ""
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config) GetSetRouteOrigin() OpenconfigBgpPolicyBgpOriginAttrType {
	if x != nil {
		return x.SetRouteOrigin
	}
	return OpenconfigBgpPolicyBgpOriginAttrType_OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_UNSET
}

type isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed interface {
	isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed()
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedSetmed struct {
	SetMedSetmed RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed `protobuf:"varint,125290882,opt,name=set_med_setmed,json=setMedSetmed,proto3,enum=openconfig.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed,oneof"`
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedString struct {
	SetMedString string `protobuf:"bytes,293699923,opt,name=set_med_string,json=setMedString,proto3,oneof"`
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedUint64 struct {
	SetMedUint64 uint64 `protobuf:"varint,81250870,opt,name=set_med_uint64,json=setMedUint64,proto3,oneof"`
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedSetmed) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed() {
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedString) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed() {
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedUint64) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed() {
}

type isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop interface {
	isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop()
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHopSetnexthop struct {
	SetNextHopSetnexthop RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop `protobuf:"varint,391990127,opt,name=set_next_hop_setnexthop,json=setNextHopSetnexthop,proto3,enum=openconfig.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop,oneof"`
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHopString struct {
	SetNextHopString string `protobuf:"bytes,456425524,opt,name=set_next_hop_string,json=setNextHopString,proto3,oneof"`
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHopSetnexthop) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop() {
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHopString) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop() {
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_Config `protobuf:"bytes,362286546,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_State  `protobuf:"bytes,57147727,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config    *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config    `protobuf:"bytes,249250594,opt,name=config,proto3" json:"config,omitempty"`
	Inline    *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline    `protobuf:"bytes,235821015,opt,name=inline,proto3" json:"inline,omitempty"`
	Reference *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference `protobuf:"bytes,93889671,opt,name=reference,proto3" json:"reference,omitempty"`
	State     *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State     `protobuf:"bytes,92647263,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 2}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity) GetInline() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline {
	if x != nil {
		return x.Inline
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity) GetReference() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config    *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config    `protobuf:"bytes,432208772,opt,name=config,proto3" json:"config,omitempty"`
	Inline    *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline    `protobuf:"bytes,781637,opt,name=inline,proto3" json:"inline,omitempty"`
	Reference *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference `protobuf:"bytes,120718061,opt,name=reference,proto3" json:"reference,omitempty"`
	State     *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State     `protobuf:"bytes,333424797,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 3}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity) GetInline() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline {
	if x != nil {
		return x.Inline
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity) GetReference() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetLocalPref *ywrapper.UintValue `protobuf:"bytes,421636233,opt,name=set_local_pref,json=setLocalPref,proto3" json:"set_local_pref,omitempty"`
	// Types that are assignable to SetMed:
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedSetmed
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedString
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedUint64
	SetMed isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed `protobuf_oneof:"set_med"`
	// Types that are assignable to SetNextHop:
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHopSetnexthop
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHopString
	SetNextHop     isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop `protobuf_oneof:"set_next_hop"`
	SetRouteOrigin OpenconfigBgpPolicyBgpOriginAttrType                                                                        `protobuf:"varint,465171346,opt,name=set_route_origin,json=setRouteOrigin,proto3,enum=openconfig.OpenconfigBgpPolicyBgpOriginAttrType" json:"set_route_origin,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 4}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State) GetSetLocalPref() *ywrapper.UintValue {
	if x != nil {
		return x.SetLocalPref
	}
	return nil
}

func (m *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State) GetSetMed() isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed {
	if m != nil {
		return m.SetMed
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State) GetSetMedSetmed() RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed {
	if x, ok := x.GetSetMed().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedSetmed); ok {
		return x.SetMedSetmed
	}
	return RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SETMED_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State) GetSetMedString() string {
	if x, ok := x.GetSetMed().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedString); ok {
		return x.SetMedString
	}
	return ""
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State) GetSetMedUint64() uint64 {
	if x, ok := x.GetSetMed().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedUint64); ok {
		return x.SetMedUint64
	}
	return 0
}

func (m *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State) GetSetNextHop() isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop {
	if m != nil {
		return m.SetNextHop
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State) GetSetNextHopSetnexthop() RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop {
	if x, ok := x.GetSetNextHop().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHopSetnexthop); ok {
		return x.SetNextHopSetnexthop
	}
	return RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SETNEXTHOP_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State) GetSetNextHopString() string {
	if x, ok := x.GetSetNextHop().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHopString); ok {
		return x.SetNextHopString
	}
	return ""
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State) GetSetRouteOrigin() OpenconfigBgpPolicyBgpOriginAttrType {
	if x != nil {
		return x.SetRouteOrigin
	}
	return OpenconfigBgpPolicyBgpOriginAttrType_OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_UNSET
}

type isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed interface {
	isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed()
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedSetmed struct {
	SetMedSetmed RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed `protobuf:"varint,72782035,opt,name=set_med_setmed,json=setMedSetmed,proto3,enum=openconfig.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed,oneof"`
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedString struct {
	SetMedString string `protobuf:"bytes,367860286,opt,name=set_med_string,json=setMedString,proto3,oneof"`
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedUint64 struct {
	SetMedUint64 uint64 `protobuf:"varint,53715295,opt,name=set_med_uint64,json=setMedUint64,proto3,oneof"`
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedSetmed) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed() {
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedString) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed() {
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedUint64) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed() {
}

type isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop interface {
	isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop()
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHopSetnexthop struct {
	SetNextHopSetnexthop RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop `protobuf:"varint,458359276,opt,name=set_next_hop_setnexthop,json=setNextHopSetnexthop,proto3,enum=openconfig.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop,oneof"`
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHopString struct {
	SetNextHopString string `protobuf:"bytes,390572515,opt,name=set_next_hop_string,json=setNextHopString,proto3,oneof"`
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHopSetnexthop) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop() {
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHopString) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop() {
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn     *ywrapper.UintValue `protobuf:"bytes,493828233,opt,name=asn,proto3" json:"asn,omitempty"`
	RepeatN *ywrapper.UintValue `protobuf:"bytes,361541661,opt,name=repeat_n,json=repeatN,proto3" json:"repeat_n,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 1, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_Config) GetAsn() *ywrapper.UintValue {
	if x != nil {
		return x.Asn
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_Config) GetRepeatN() *ywrapper.UintValue {
	if x != nil {
		return x.RepeatN
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn     *ywrapper.UintValue `protobuf:"bytes,449833564,opt,name=asn,proto3" json:"asn,omitempty"`
	RepeatN *ywrapper.UintValue `protobuf:"bytes,495416050,opt,name=repeat_n,json=repeatN,proto3" json:"repeat_n,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 1, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_State) GetAsn() *ywrapper.UintValue {
	if x != nil {
		return x.Asn
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_State) GetRepeatN() *ywrapper.UintValue {
	if x != nil {
		return x.RepeatN
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method  RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method `protobuf:"varint,56328654,opt,name=method,proto3,enum=openconfig.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method" json:"method,omitempty"`
	Options OpenconfigBgpPolicyBgpSetCommunityOptionType                                                                        `protobuf:"varint,174961269,opt,name=options,proto3,enum=openconfig.OpenconfigBgpPolicyBgpSetCommunityOptionType" json:"options,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 2, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config) GetMethod() RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method {
	if x != nil {
		return x.Method
	}
	return RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_METHOD_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config) GetOptions() OpenconfigBgpPolicyBgpSetCommunityOptionType {
	if x != nil {
		return x.Options
	}
	return OpenconfigBgpPolicyBgpSetCommunityOptionType_OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_UNSET
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config `protobuf:"bytes,194137160,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State  `protobuf:"bytes,518992353,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 2, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_Config `protobuf:"bytes,281400472,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_State  `protobuf:"bytes,185197105,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 2, 2}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method  RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method `protobuf:"varint,233738185,opt,name=method,proto3,enum=openconfig.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method" json:"method,omitempty"`
	Options OpenconfigBgpPolicyBgpSetCommunityOptionType                                                                       `protobuf:"varint,375854712,opt,name=options,proto3,enum=openconfig.OpenconfigBgpPolicyBgpSetCommunityOptionType" json:"options,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 2, 3}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State) GetMethod() RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method {
	if x != nil {
		return x.Method
	}
	return RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_METHOD_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State) GetOptions() OpenconfigBgpPolicyBgpSetCommunityOptionType {
	if x != nil {
		return x.Options
	}
	return OpenconfigBgpPolicyBgpSetCommunityOptionType_OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_UNSET
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communities []*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion `protobuf:"bytes,464785442,rep,name=communities,proto3" json:"communities,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 2, 1, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config) GetCommunities() []*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion {
	if x != nil {
		return x.Communities
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communities []*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion `protobuf:"bytes,8012783,rep,name=communities,proto3" json:"communities,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 2, 1, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State) GetCommunities() []*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion {
	if x != nil {
		return x.Communities
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunitiesOpenconfigbgptypesbgpwellknownstdcommunity OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY `protobuf:"varint,519071207,opt,name=communities_openconfigbgptypesbgpwellknownstdcommunity,json=communitiesOpenconfigbgptypesbgpwellknownstdcommunity,proto3,enum=openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY" json:"communities_openconfigbgptypesbgpwellknownstdcommunity,omitempty"`
	CommunitiesString                                     string                                     `protobuf:"bytes,41828554,opt,name=communities_string,json=communitiesString,proto3" json:"communities_string,omitempty"`
	CommunitiesUint64                                     uint64                                     `protobuf:"varint,350032459,opt,name=communities_uint64,json=communitiesUint64,proto3" json:"communities_uint64,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 2, 1, 0, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion) GetCommunitiesOpenconfigbgptypesbgpwellknownstdcommunity() OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY {
	if x != nil {
		return x.CommunitiesOpenconfigbgptypesbgpwellknownstdcommunity
	}
	return OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion) GetCommunitiesString() string {
	if x != nil {
		return x.CommunitiesString
	}
	return ""
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion) GetCommunitiesUint64() uint64 {
	if x != nil {
		return x.CommunitiesUint64
	}
	return 0
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunitiesOpenconfigbgptypesbgpwellknownstdcommunity OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY `protobuf:"varint,2538204,opt,name=communities_openconfigbgptypesbgpwellknownstdcommunity,json=communitiesOpenconfigbgptypesbgpwellknownstdcommunity,proto3,enum=openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY" json:"communities_openconfigbgptypesbgpwellknownstdcommunity,omitempty"`
	CommunitiesString                                     string                                     `protobuf:"bytes,386243117,opt,name=communities_string,json=communitiesString,proto3" json:"communities_string,omitempty"`
	CommunitiesUint64                                     uint64                                     `protobuf:"varint,181145392,opt,name=communities_uint64,json=communitiesUint64,proto3" json:"communities_uint64,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 2, 1, 1, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion) GetCommunitiesOpenconfigbgptypesbgpwellknownstdcommunity() OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY {
	if x != nil {
		return x.CommunitiesOpenconfigbgptypesbgpwellknownstdcommunity
	}
	return OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion) GetCommunitiesString() string {
	if x != nil {
		return x.CommunitiesString
	}
	return ""
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion) GetCommunitiesUint64() uint64 {
	if x != nil {
		return x.CommunitiesUint64
	}
	return 0
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunitySetRef *ywrapper.StringValue `protobuf:"bytes,187045597,opt,name=community_set_ref,json=communitySetRef,proto3" json:"community_set_ref,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 2, 2, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_Config) GetCommunitySetRef() *ywrapper.StringValue {
	if x != nil {
		return x.CommunitySetRef
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunitySetRef *ywrapper.StringValue `protobuf:"bytes,517935956,opt,name=community_set_ref,json=communitySetRef,proto3" json:"community_set_ref,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 2, 2, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_State) GetCommunitySetRef() *ywrapper.StringValue {
	if x != nil {
		return x.CommunitySetRef
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method  RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method `protobuf:"varint,293963364,opt,name=method,proto3,enum=openconfig.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method" json:"method,omitempty"`
	Options OpenconfigBgpPolicyBgpSetCommunityOptionType                                                                           `protobuf:"varint,168954491,opt,name=options,proto3,enum=openconfig.OpenconfigBgpPolicyBgpSetCommunityOptionType" json:"options,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 3, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config) GetMethod() RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method {
	if x != nil {
		return x.Method
	}
	return RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_METHOD_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config) GetOptions() OpenconfigBgpPolicyBgpSetCommunityOptionType {
	if x != nil {
		return x.Options
	}
	return OpenconfigBgpPolicyBgpSetCommunityOptionType_OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_UNSET
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config `protobuf:"bytes,506055178,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State  `protobuf:"bytes,250392487,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 3, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_Config `protobuf:"bytes,218009218,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_State  `protobuf:"bytes,331956543,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 3, 2}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method  RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method `protobuf:"varint,146547987,opt,name=method,proto3,enum=openconfig.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method" json:"method,omitempty"`
	Options OpenconfigBgpPolicyBgpSetCommunityOptionType                                                                          `protobuf:"varint,437036034,opt,name=options,proto3,enum=openconfig.OpenconfigBgpPolicyBgpSetCommunityOptionType" json:"options,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 3, 3}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State) GetMethod() RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method {
	if x != nil {
		return x.Method
	}
	return RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_METHOD_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State) GetOptions() OpenconfigBgpPolicyBgpSetCommunityOptionType {
	if x != nil {
		return x.Options
	}
	return OpenconfigBgpPolicyBgpSetCommunityOptionType_OPENCONFIGBGPPOLICYBGPSETCOMMUNITYOPTIONTYPE_UNSET
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communities []*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config_CommunitiesUnion `protobuf:"bytes,215631680,rep,name=communities,proto3" json:"communities,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 3, 1, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config) GetCommunities() []*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config_CommunitiesUnion {
	if x != nil {
		return x.Communities
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communities []*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State_CommunitiesUnion `protobuf:"bytes,410828489,rep,name=communities,proto3" json:"communities,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 3, 1, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State) GetCommunities() []*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State_CommunitiesUnion {
	if x != nil {
		return x.Communities
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config_CommunitiesUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunitiesOpenconfigbgptypesbgpwellknownstdcommunity OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY `protobuf:"varint,68629525,opt,name=communities_openconfigbgptypesbgpwellknownstdcommunity,json=communitiesOpenconfigbgptypesbgpwellknownstdcommunity,proto3,enum=openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY" json:"communities_openconfigbgptypesbgpwellknownstdcommunity,omitempty"`
	CommunitiesString                                     string                                     `protobuf:"bytes,97675648,opt,name=communities_string,json=communitiesString,proto3" json:"communities_string,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config_CommunitiesUnion) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config_CommunitiesUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config_CommunitiesUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config_CommunitiesUnion) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config_CommunitiesUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config_CommunitiesUnion.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config_CommunitiesUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 3, 1, 0, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config_CommunitiesUnion) GetCommunitiesOpenconfigbgptypesbgpwellknownstdcommunity() OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY {
	if x != nil {
		return x.CommunitiesOpenconfigbgptypesbgpwellknownstdcommunity
	}
	return OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config_CommunitiesUnion) GetCommunitiesString() string {
	if x != nil {
		return x.CommunitiesString
	}
	return ""
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State_CommunitiesUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunitiesOpenconfigbgptypesbgpwellknownstdcommunity OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY `protobuf:"varint,506007390,opt,name=communities_openconfigbgptypesbgpwellknownstdcommunity,json=communitiesOpenconfigbgptypesbgpwellknownstdcommunity,proto3,enum=openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY" json:"communities_openconfigbgptypesbgpwellknownstdcommunity,omitempty"`
	CommunitiesString                                     string                                     `protobuf:"bytes,133894319,opt,name=communities_string,json=communitiesString,proto3" json:"communities_string,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State_CommunitiesUnion) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State_CommunitiesUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State_CommunitiesUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State_CommunitiesUnion) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State_CommunitiesUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State_CommunitiesUnion.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State_CommunitiesUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 3, 1, 1, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State_CommunitiesUnion) GetCommunitiesOpenconfigbgptypesbgpwellknownstdcommunity() OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY {
	if x != nil {
		return x.CommunitiesOpenconfigbgptypesbgpwellknownstdcommunity
	}
	return OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State_CommunitiesUnion) GetCommunitiesString() string {
	if x != nil {
		return x.CommunitiesString
	}
	return ""
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtCommunitySetRef *ywrapper.StringValue `protobuf:"bytes,105754409,opt,name=ext_community_set_ref,json=extCommunitySetRef,proto3" json:"ext_community_set_ref,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 3, 2, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_Config) GetExtCommunitySetRef() *ywrapper.StringValue {
	if x != nil {
		return x.ExtCommunitySetRef
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtCommunitySetRef *ywrapper.StringValue `protobuf:"bytes,20017944,opt,name=ext_community_set_ref,json=extCommunitySetRef,proto3" json:"ext_community_set_ref,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 0, 3, 2, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_State) GetExtCommunitySetRef() *ywrapper.StringValue {
	if x != nil {
		return x.ExtCommunitySetRef
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetLevel      *ywrapper.UintValue `protobuf:"bytes,380035222,opt,name=set_level,json=setLevel,proto3" json:"set_level,omitempty"`
	SetMetric     *ywrapper.UintValue `protobuf:"bytes,5019848,opt,name=set_metric,json=setMetric,proto3" json:"set_metric,omitempty"`
	SetMetricType *ywrapper.UintValue `protobuf:"bytes,298044525,opt,name=set_metric_type,json=setMetricType,proto3" json:"set_metric_type,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 2, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config) GetSetLevel() *ywrapper.UintValue {
	if x != nil {
		return x.SetLevel
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config) GetSetMetric() *ywrapper.UintValue {
	if x != nil {
		return x.SetMetric
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config) GetSetMetricType() *ywrapper.UintValue {
	if x != nil {
		return x.SetMetricType
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetLevel      *ywrapper.UintValue `protobuf:"bytes,105096667,opt,name=set_level,json=setLevel,proto3" json:"set_level,omitempty"`
	SetMetric     *ywrapper.UintValue `protobuf:"bytes,426671695,opt,name=set_metric,json=setMetric,proto3" json:"set_metric,omitempty"`
	SetMetricType *ywrapper.UintValue `protobuf:"bytes,230850120,opt,name=set_metric_type,json=setMetricType,proto3" json:"set_metric_type,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 2, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State) GetSetLevel() *ywrapper.UintValue {
	if x != nil {
		return x.SetLevel
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State) GetSetMetric() *ywrapper.UintValue {
	if x != nil {
		return x.SetMetric
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State) GetSetMetricType() *ywrapper.UintValue {
	if x != nil {
		return x.SetMetricType
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SetArea:
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetAreaString
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetAreaUint64
	SetArea isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetArea `protobuf_oneof:"set_area"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 3, 0}
}

func (m *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config) GetSetArea() isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetArea {
	if m != nil {
		return m.SetArea
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config) GetSetAreaString() string {
	if x, ok := x.GetSetArea().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetAreaString); ok {
		return x.SetAreaString
	}
	return ""
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config) GetSetAreaUint64() uint64 {
	if x, ok := x.GetSetArea().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetAreaUint64); ok {
		return x.SetAreaUint64
	}
	return 0
}

type isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetArea interface {
	isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetArea()
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetAreaString struct {
	SetAreaString string `protobuf:"bytes,298066561,opt,name=set_area_string,json=setAreaString,proto3,oneof"`
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetAreaUint64 struct {
	SetAreaUint64 uint64 `protobuf:"varint,338075812,opt,name=set_area_uint64,json=setAreaUint64,proto3,oneof"`
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetAreaString) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetArea() {
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetAreaUint64) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetArea() {
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config `protobuf:"bytes,40790946,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State  `protobuf:"bytes,73479391,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 3, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SetArea:
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetAreaString
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetAreaUint64
	SetArea isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetArea `protobuf_oneof:"set_area"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 3, 2}
}

func (m *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State) GetSetArea() isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetArea {
	if m != nil {
		return m.SetArea
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State) GetSetAreaString() string {
	if x, ok := x.GetSetArea().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetAreaString); ok {
		return x.SetAreaString
	}
	return ""
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State) GetSetAreaUint64() uint64 {
	if x, ok := x.GetSetArea().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetAreaUint64); ok {
		return x.SetAreaUint64
	}
	return 0
}

type isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetArea interface {
	isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetArea()
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetAreaString struct {
	SetAreaString string `protobuf:"bytes,140225316,opt,name=set_area_string,json=setAreaString,proto3,oneof"`
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetAreaUint64 struct {
	SetAreaUint64 uint64 `protobuf:"varint,384069581,opt,name=set_area_uint64,json=setAreaUint64,proto3,oneof"`
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetAreaString) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetArea() {
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetAreaUint64) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetArea() {
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric     *ywrapper.UintValue                                                                                                   `protobuf:"bytes,124895085,opt,name=metric,proto3" json:"metric,omitempty"`
	MetricType RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType `protobuf:"varint,396699290,opt,name=metric_type,json=metricType,proto3,enum=openconfig.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType" json:"metric_type,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 3, 1, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config) GetMetric() *ywrapper.UintValue {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config) GetMetricType() RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType {
	if x != nil {
		return x.MetricType
	}
	return RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_METRICTYPE_EXTERNAL_TYPE_2
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric     *ywrapper.UintValue                                                                                                  `protobuf:"bytes,211121014,opt,name=metric,proto3" json:"metric,omitempty"`
	MetricType RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType `protobuf:"varint,43077687,opt,name=metric_type,json=metricType,proto3,enum=openconfig.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType" json:"metric_type,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0, 3, 1, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State) GetMetric() *ywrapper.UintValue {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State) GetMetricType() RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType {
	if x != nil {
		return x.MetricType
	}
	return RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_METRICTYPE_EXTERNAL_TYPE_2
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsPathLength   *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength   `protobuf:"bytes,72650980,opt,name=as_path_length,json=asPathLength,proto3" json:"as_path_length,omitempty"`
	CommunityCount *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount `protobuf:"bytes,126640894,opt,name=community_count,json=communityCount,proto3" json:"community_count,omitempty"`
	Config         *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config         `protobuf:"bytes,396427563,opt,name=config,proto3" json:"config,omitempty"`
	MatchAsPathSet *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet `protobuf:"bytes,498415336,opt,name=match_as_path_set,json=matchAsPathSet,proto3" json:"match_as_path_set,omitempty"`
	State          *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State          `protobuf:"bytes,313108460,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions) GetAsPathLength() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength {
	if x != nil {
		return x.AsPathLength
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions) GetCommunityCount() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount {
	if x != nil {
		return x.CommunityCount
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions) GetMatchAsPathSet() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet {
	if x != nil {
		return x.MatchAsPathSet
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallPolicy        *ywrapper.StringValue                    `protobuf:"bytes,61702820,opt,name=call_policy,json=callPolicy,proto3" json:"call_policy,omitempty"`
	InstallProtocolEq OpenconfigPolicyTypesINSTALLPROTOCOLTYPE `protobuf:"varint,365453934,opt,name=install_protocol_eq,json=installProtocolEq,proto3,enum=openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE" json:"install_protocol_eq,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config) GetCallPolicy() *ywrapper.StringValue {
	if x != nil {
		return x.CallPolicy
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config) GetInstallProtocolEq() OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	if x != nil {
		return x.InstallProtocolEq
	}
	return OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_Config `protobuf:"bytes,363421796,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_State  `protobuf:"bytes,200985853,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 2}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config `protobuf:"bytes,241942722,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State  `protobuf:"bytes,164567167,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 3}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config `protobuf:"bytes,170767530,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State  `protobuf:"bytes,456735175,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 4}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config `protobuf:"bytes,130948416,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State  `protobuf:"bytes,536664121,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 5}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_Config `protobuf:"bytes,41226737,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_State  `protobuf:"bytes,457189734,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 6}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config `protobuf:"bytes,69428956,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State  `protobuf:"bytes,432189781,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 7}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config `protobuf:"bytes,482026780,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State  `protobuf:"bytes,197798549,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 8}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallPolicy        *ywrapper.StringValue                    `protobuf:"bytes,158632765,opt,name=call_policy,json=callPolicy,proto3" json:"call_policy,omitempty"`
	InstallProtocolEq OpenconfigPolicyTypesINSTALLPROTOCOLTYPE `protobuf:"varint,41620259,opt,name=install_protocol_eq,json=installProtocolEq,proto3,enum=openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE" json:"install_protocol_eq,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 9}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State) GetCallPolicy() *ywrapper.StringValue {
	if x != nil {
		return x.CallPolicy
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State) GetInstallProtocolEq() OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	if x != nil {
		return x.InstallProtocolEq
	}
	return OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_Config `protobuf:"bytes,405295625,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_State  `protobuf:"bytes,162262622,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 0, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_Config `protobuf:"bytes,108937679,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_State  `protobuf:"bytes,252292800,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 0, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafiIn       []OpenconfigBgpTypesAFISAFITYPE                                                                                 `protobuf:"varint,249567002,rep,packed,name=afi_safi_in,json=afiSafiIn,proto3,enum=openconfig.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_in,omitempty"`
	CommunitySet    *ywrapper.StringValue                                                                                           `protobuf:"bytes,526363434,opt,name=community_set,json=communitySet,proto3" json:"community_set,omitempty"`
	ExtCommunitySet *ywrapper.StringValue                                                                                           `protobuf:"bytes,91249588,opt,name=ext_community_set,json=extCommunitySet,proto3" json:"ext_community_set,omitempty"`
	LocalPrefEq     *ywrapper.UintValue                                                                                             `protobuf:"bytes,249728498,opt,name=local_pref_eq,json=localPrefEq,proto3" json:"local_pref_eq,omitempty"`
	MedEq           *ywrapper.UintValue                                                                                             `protobuf:"bytes,78768675,opt,name=med_eq,json=medEq,proto3" json:"med_eq,omitempty"`
	NextHopIn       []*ywrapper.StringValue                                                                                         `protobuf:"bytes,471839293,rep,name=next_hop_in,json=nextHopIn,proto3" json:"next_hop_in,omitempty"`
	OriginEq        OpenconfigBgpPolicyBgpOriginAttrType                                                                            `protobuf:"varint,326140899,opt,name=origin_eq,json=originEq,proto3,enum=openconfig.OpenconfigBgpPolicyBgpOriginAttrType" json:"origin_eq,omitempty"`
	RouteType       RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType `protobuf:"varint,320680870,opt,name=route_type,json=routeType,proto3,enum=openconfig.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType" json:"route_type,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 0, 2}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config) GetAfiSafiIn() []OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiIn
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config) GetCommunitySet() *ywrapper.StringValue {
	if x != nil {
		return x.CommunitySet
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config) GetExtCommunitySet() *ywrapper.StringValue {
	if x != nil {
		return x.ExtCommunitySet
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config) GetLocalPrefEq() *ywrapper.UintValue {
	if x != nil {
		return x.LocalPrefEq
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config) GetMedEq() *ywrapper.UintValue {
	if x != nil {
		return x.MedEq
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config) GetNextHopIn() []*ywrapper.StringValue {
	if x != nil {
		return x.NextHopIn
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config) GetOriginEq() OpenconfigBgpPolicyBgpOriginAttrType {
	if x != nil {
		return x.OriginEq
	}
	return OpenconfigBgpPolicyBgpOriginAttrType_OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config) GetRouteType() RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType {
	if x != nil {
		return x.RouteType
	}
	return RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_ROUTETYPE_UNSET
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_Config `protobuf:"bytes,188416589,opt,name=config,proto3" json:"config,omitempty"`
	State  *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_State  `protobuf:"bytes,335301250,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 0, 3}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet) GetConfig() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet) GetState() *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafiIn       []OpenconfigBgpTypesAFISAFITYPE                                                                                `protobuf:"varint,327771485,rep,packed,name=afi_safi_in,json=afiSafiIn,proto3,enum=openconfig.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_in,omitempty"`
	CommunitySet    *ywrapper.StringValue                                                                                          `protobuf:"bytes,268853721,opt,name=community_set,json=communitySet,proto3" json:"community_set,omitempty"`
	ExtCommunitySet *ywrapper.StringValue                                                                                          `protobuf:"bytes,303315271,opt,name=ext_community_set,json=extCommunitySet,proto3" json:"ext_community_set,omitempty"`
	LocalPrefEq     *ywrapper.UintValue                                                                                            `protobuf:"bytes,451323565,opt,name=local_pref_eq,json=localPrefEq,proto3" json:"local_pref_eq,omitempty"`
	MedEq           *ywrapper.UintValue                                                                                            `protobuf:"bytes,519689878,opt,name=med_eq,json=medEq,proto3" json:"med_eq,omitempty"`
	NextHopIn       []*ywrapper.StringValue                                                                                        `protobuf:"bytes,298925774,rep,name=next_hop_in,json=nextHopIn,proto3" json:"next_hop_in,omitempty"`
	OriginEq        OpenconfigBgpPolicyBgpOriginAttrType                                                                           `protobuf:"varint,29642732,opt,name=origin_eq,json=originEq,proto3,enum=openconfig.OpenconfigBgpPolicyBgpOriginAttrType" json:"origin_eq,omitempty"`
	RouteType       RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType `protobuf:"varint,351234999,opt,name=route_type,json=routeType,proto3,enum=openconfig.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType" json:"route_type,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 0, 4}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State) GetAfiSafiIn() []OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiIn
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State) GetCommunitySet() *ywrapper.StringValue {
	if x != nil {
		return x.CommunitySet
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State) GetExtCommunitySet() *ywrapper.StringValue {
	if x != nil {
		return x.ExtCommunitySet
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State) GetLocalPrefEq() *ywrapper.UintValue {
	if x != nil {
		return x.LocalPrefEq
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State) GetMedEq() *ywrapper.UintValue {
	if x != nil {
		return x.MedEq
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State) GetNextHopIn() []*ywrapper.StringValue {
	if x != nil {
		return x.NextHopIn
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State) GetOriginEq() OpenconfigBgpPolicyBgpOriginAttrType {
	if x != nil {
		return x.OriginEq
	}
	return OpenconfigBgpPolicyBgpOriginAttrType_OPENCONFIGBGPPOLICYBGPORIGINATTRTYPE_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State) GetRouteType() RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType {
	if x != nil {
		return x.RouteType
	}
	return RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_ROUTETYPE_UNSET
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator OpenconfigPolicyTypesATTRIBUTECOMPARISON `protobuf:"varint,130055892,opt,name=operator,proto3,enum=openconfig.OpenconfigPolicyTypesATTRIBUTECOMPARISON" json:"operator,omitempty"`
	Value    *ywrapper.UintValue                      `protobuf:"bytes,80194919,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 0, 0, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_Config) GetOperator() OpenconfigPolicyTypesATTRIBUTECOMPARISON {
	if x != nil {
		return x.Operator
	}
	return OpenconfigPolicyTypesATTRIBUTECOMPARISON_OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_Config) GetValue() *ywrapper.UintValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator OpenconfigPolicyTypesATTRIBUTECOMPARISON `protobuf:"varint,38518581,opt,name=operator,proto3,enum=openconfig.OpenconfigPolicyTypesATTRIBUTECOMPARISON" json:"operator,omitempty"`
	Value    *ywrapper.UintValue                      `protobuf:"bytes,26444812,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 0, 0, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_State) GetOperator() OpenconfigPolicyTypesATTRIBUTECOMPARISON {
	if x != nil {
		return x.Operator
	}
	return OpenconfigPolicyTypesATTRIBUTECOMPARISON_OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_State) GetValue() *ywrapper.UintValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator OpenconfigPolicyTypesATTRIBUTECOMPARISON `protobuf:"varint,428136354,opt,name=operator,proto3,enum=openconfig.OpenconfigPolicyTypesATTRIBUTECOMPARISON" json:"operator,omitempty"`
	Value    *ywrapper.UintValue                      `protobuf:"bytes,3354125,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 0, 1, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_Config) GetOperator() OpenconfigPolicyTypesATTRIBUTECOMPARISON {
	if x != nil {
		return x.Operator
	}
	return OpenconfigPolicyTypesATTRIBUTECOMPARISON_OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_Config) GetValue() *ywrapper.UintValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator OpenconfigPolicyTypesATTRIBUTECOMPARISON `protobuf:"varint,57680311,opt,name=operator,proto3,enum=openconfig.OpenconfigPolicyTypesATTRIBUTECOMPARISON" json:"operator,omitempty"`
	Value    *ywrapper.UintValue                      `protobuf:"bytes,89267318,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 0, 1, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_State) GetOperator() OpenconfigPolicyTypesATTRIBUTECOMPARISON {
	if x != nil {
		return x.Operator
	}
	return OpenconfigPolicyTypesATTRIBUTECOMPARISON_OPENCONFIGPOLICYTYPESATTRIBUTECOMPARISON_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_State) GetValue() *ywrapper.UintValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsPathSet       *ywrapper.StringValue                      `protobuf:"bytes,443610647,opt,name=as_path_set,json=asPathSet,proto3" json:"as_path_set,omitempty"`
	MatchSetOptions OpenconfigRoutingPolicyMatchSetOptionsType `protobuf:"varint,89250277,opt,name=match_set_options,json=matchSetOptions,proto3,enum=openconfig.OpenconfigRoutingPolicyMatchSetOptionsType" json:"match_set_options,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 0, 3, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_Config) GetAsPathSet() *ywrapper.StringValue {
	if x != nil {
		return x.AsPathSet
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_Config) GetMatchSetOptions() OpenconfigRoutingPolicyMatchSetOptionsType {
	if x != nil {
		return x.MatchSetOptions
	}
	return OpenconfigRoutingPolicyMatchSetOptionsType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_ANY
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsPathSet       *ywrapper.StringValue                      `protobuf:"bytes,218230760,opt,name=as_path_set,json=asPathSet,proto3" json:"as_path_set,omitempty"`
	MatchSetOptions OpenconfigRoutingPolicyMatchSetOptionsType `protobuf:"varint,80198670,opt,name=match_set_options,json=matchSetOptions,proto3,enum=openconfig.OpenconfigRoutingPolicyMatchSetOptionsType" json:"match_set_options,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 0, 3, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_State) GetAsPathSet() *ywrapper.StringValue {
	if x != nil {
		return x.AsPathSet
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_State) GetMatchSetOptions() OpenconfigRoutingPolicyMatchSetOptionsType {
	if x != nil {
		return x.MatchSetOptions
	}
	return OpenconfigRoutingPolicyMatchSetOptionsType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSTYPE_ANY
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelEq *ywrapper.UintValue `protobuf:"bytes,363311666,opt,name=level_eq,json=levelEq,proto3" json:"level_eq,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 2, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_Config) GetLevelEq() *ywrapper.UintValue {
	if x != nil {
		return x.LevelEq
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelEq *ywrapper.UintValue `protobuf:"bytes,479375589,opt,name=level_eq,json=levelEq,proto3" json:"level_eq,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 2, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_State) GetLevelEq() *ywrapper.UintValue {
	if x != nil {
		return x.LevelEq
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,443833070,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,317336842,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 3, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,482959135,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,75172397,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 3, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchSetOptions OpenconfigRoutingPolicyMatchSetOptionsRestrictedType `protobuf:"varint,105204422,opt,name=match_set_options,json=matchSetOptions,proto3,enum=openconfig.OpenconfigRoutingPolicyMatchSetOptionsRestrictedType" json:"match_set_options,omitempty"`
	NeighborSet     *ywrapper.StringValue                                `protobuf:"bytes,280305216,opt,name=neighbor_set,json=neighborSet,proto3" json:"neighbor_set,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 4, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config) GetMatchSetOptions() OpenconfigRoutingPolicyMatchSetOptionsRestrictedType {
	if x != nil {
		return x.MatchSetOptions
	}
	return OpenconfigRoutingPolicyMatchSetOptionsRestrictedType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSRESTRICTEDTYPE_ANY
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config) GetNeighborSet() *ywrapper.StringValue {
	if x != nil {
		return x.NeighborSet
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchSetOptions OpenconfigRoutingPolicyMatchSetOptionsRestrictedType `protobuf:"varint,367627171,opt,name=match_set_options,json=matchSetOptions,proto3,enum=openconfig.OpenconfigRoutingPolicyMatchSetOptionsRestrictedType" json:"match_set_options,omitempty"`
	NeighborSet     *ywrapper.StringValue                                `protobuf:"bytes,290633539,opt,name=neighbor_set,json=neighborSet,proto3" json:"neighbor_set,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 4, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State) GetMatchSetOptions() OpenconfigRoutingPolicyMatchSetOptionsRestrictedType {
	if x != nil {
		return x.MatchSetOptions
	}
	return OpenconfigRoutingPolicyMatchSetOptionsRestrictedType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSRESTRICTEDTYPE_ANY
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State) GetNeighborSet() *ywrapper.StringValue {
	if x != nil {
		return x.NeighborSet
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchSetOptions OpenconfigRoutingPolicyMatchSetOptionsRestrictedType `protobuf:"varint,273111944,opt,name=match_set_options,json=matchSetOptions,proto3,enum=openconfig.OpenconfigRoutingPolicyMatchSetOptionsRestrictedType" json:"match_set_options,omitempty"`
	PrefixSet       *ywrapper.StringValue                                `protobuf:"bytes,469465092,opt,name=prefix_set,json=prefixSet,proto3" json:"prefix_set,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 5, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config) GetMatchSetOptions() OpenconfigRoutingPolicyMatchSetOptionsRestrictedType {
	if x != nil {
		return x.MatchSetOptions
	}
	return OpenconfigRoutingPolicyMatchSetOptionsRestrictedType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSRESTRICTEDTYPE_ANY
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config) GetPrefixSet() *ywrapper.StringValue {
	if x != nil {
		return x.PrefixSet
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchSetOptions OpenconfigRoutingPolicyMatchSetOptionsRestrictedType `protobuf:"varint,79197289,opt,name=match_set_options,json=matchSetOptions,proto3,enum=openconfig.OpenconfigRoutingPolicyMatchSetOptionsRestrictedType" json:"match_set_options,omitempty"`
	PrefixSet       *ywrapper.StringValue                                `protobuf:"bytes,479559351,opt,name=prefix_set,json=prefixSet,proto3" json:"prefix_set,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 5, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State) GetMatchSetOptions() OpenconfigRoutingPolicyMatchSetOptionsRestrictedType {
	if x != nil {
		return x.MatchSetOptions
	}
	return OpenconfigRoutingPolicyMatchSetOptionsRestrictedType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSRESTRICTEDTYPE_ANY
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State) GetPrefixSet() *ywrapper.StringValue {
	if x != nil {
		return x.PrefixSet
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIdentifier OpenconfigPolicyTypesINSTALLPROTOCOLTYPE `protobuf:"varint,102549220,opt,name=protocol_identifier,json=protocolIdentifier,proto3,enum=openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE" json:"protocol_identifier,omitempty"`
	ProtocolName       *ywrapper.StringValue                    `protobuf:"bytes,87533196,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 6, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_Config) GetProtocolIdentifier() OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	if x != nil {
		return x.ProtocolIdentifier
	}
	return OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_Config) GetProtocolName() *ywrapper.StringValue {
	if x != nil {
		return x.ProtocolName
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolIdentifier OpenconfigPolicyTypesINSTALLPROTOCOLTYPE `protobuf:"varint,280024723,opt,name=protocol_identifier,json=protocolIdentifier,proto3,enum=openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE" json:"protocol_identifier,omitempty"`
	ProtocolName       *ywrapper.StringValue                    `protobuf:"bytes,529461579,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 6, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_State) GetProtocolIdentifier() OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	if x != nil {
		return x.ProtocolIdentifier
	}
	return OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_State) GetProtocolName() *ywrapper.StringValue {
	if x != nil {
		return x.ProtocolName
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchSetOptions OpenconfigRoutingPolicyMatchSetOptionsRestrictedType `protobuf:"varint,378077276,opt,name=match_set_options,json=matchSetOptions,proto3,enum=openconfig.OpenconfigRoutingPolicyMatchSetOptionsRestrictedType" json:"match_set_options,omitempty"`
	TagSet          *ywrapper.StringValue                                `protobuf:"bytes,87937234,opt,name=tag_set,json=tagSet,proto3" json:"tag_set,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 7, 0}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config) GetMatchSetOptions() OpenconfigRoutingPolicyMatchSetOptionsRestrictedType {
	if x != nil {
		return x.MatchSetOptions
	}
	return OpenconfigRoutingPolicyMatchSetOptionsRestrictedType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSRESTRICTEDTYPE_ANY
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config) GetTagSet() *ywrapper.StringValue {
	if x != nil {
		return x.TagSet
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchSetOptions OpenconfigRoutingPolicyMatchSetOptionsRestrictedType `protobuf:"varint,65896829,opt,name=match_set_options,json=matchSetOptions,proto3,enum=openconfig.OpenconfigRoutingPolicyMatchSetOptionsRestrictedType" json:"match_set_options,omitempty"`
	TagSet          *ywrapper.StringValue                                `protobuf:"bytes,303046943,opt,name=tag_set,json=tagSet,proto3" json:"tag_set,omitempty"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 7, 1}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State) GetMatchSetOptions() OpenconfigRoutingPolicyMatchSetOptionsRestrictedType {
	if x != nil {
		return x.MatchSetOptions
	}
	return OpenconfigRoutingPolicyMatchSetOptionsRestrictedType_OPENCONFIGROUTINGPOLICYMATCHSETOPTIONSRESTRICTEDTYPE_ANY
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State) GetTagSet() *ywrapper.StringValue {
	if x != nil {
		return x.TagSet
	}
	return nil
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AreaEq:
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEqString
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEqUint64
	AreaEq isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEq `protobuf_oneof:"area_eq"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 8, 0}
}

func (m *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config) GetAreaEq() isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEq {
	if m != nil {
		return m.AreaEq
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config) GetAreaEqString() string {
	if x, ok := x.GetAreaEq().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEqString); ok {
		return x.AreaEqString
	}
	return ""
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config) GetAreaEqUint64() uint64 {
	if x, ok := x.GetAreaEq().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEqUint64); ok {
		return x.AreaEqUint64
	}
	return 0
}

type isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEq interface {
	isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEq()
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEqString struct {
	AreaEqString string `protobuf:"bytes,80632013,opt,name=area_eq_string,json=areaEqString,proto3,oneof"`
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEqUint64 struct {
	AreaEqUint64 uint64 `protobuf:"varint,524766928,opt,name=area_eq_uint64,json=areaEqUint64,proto3,oneof"`
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEqString) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEq() {
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEqUint64) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEq() {
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AreaEq:
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEqString
	//	*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEqUint64
	AreaEq isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEq `protobuf_oneof:"area_eq"`
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State) Reset() {
	*x = RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_routing_policy_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State) ProtoMessage() {
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_routing_policy_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_routing_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 1, 8, 1}
}

func (m *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State) GetAreaEq() isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEq {
	if m != nil {
		return m.AreaEq
	}
	return nil
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State) GetAreaEqString() string {
	if x, ok := x.GetAreaEq().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEqString); ok {
		return x.AreaEqString
	}
	return ""
}

func (x *RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State) GetAreaEqUint64() uint64 {
	if x, ok := x.GetAreaEq().(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEqUint64); ok {
		return x.AreaEqUint64
	}
	return 0
}

type isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEq interface {
	isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEq()
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEqString struct {
	AreaEqString string `protobuf:"bytes,467502194,opt,name=area_eq_string,json=areaEqString,proto3,oneof"`
}

type RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEqUint64 struct {
	AreaEqUint64 uint64 `protobuf:"varint,68037235,opt,name=area_eq_uint64,json=areaEqUint64,proto3,oneof"`
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEqString) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEq() {
}

func (*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEqUint64) isRoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEq() {
}

var File_openconfig_routing_policy_proto protoreflect.FileDescriptor

var file_openconfig_routing_policy_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79,
	0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xbe, 0xcc, 0x03, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x6d, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x74, 0x73, 0x18, 0xe8, 0xe5, 0xc8, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x73, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xac, 0xcf, 0xba, 0xa0, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xf0, 0x6a, 0x0a, 0x0b,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x10,
	0x62, 0x67, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x73,
	0x18, 0xe0, 0xb7, 0xb7, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x73, 0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73,
	0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x52, 0x0e, 0x62, 0x67, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x73, 0x18, 0xa1, 0xa7, 0xe2, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x65, 0x74,
	0x73, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x0c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x82,
	0x01, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0xc7,
	0xb8, 0xf7, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x73, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53,
	0x65, 0x74, 0x73, 0x12, 0x76, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18,
	0xd9, 0x91, 0xfe, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x73, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x67, 0x53, 0x65, 0x74, 0x73, 0x1a, 0xd6, 0x38, 0x0a, 0x0e,
	0x42, 0x67, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x12, 0xa4,
	0x01, 0x0a, 0x0c, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18,
	0xed, 0xd3, 0xa1, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e,
	0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x73, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x52, 0x0a, 0x61, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x65, 0x74, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x94, 0xaf, 0xa1, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x74, 0x73, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x74, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0xaa, 0xc2, 0xfb,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x67, 0x70,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x73, 0x42, 0x43, 0x82, 0x41,
	0x40, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65,
	0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x52, 0x10, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x74, 0x73, 0x1a, 0x95, 0x0c, 0x0a, 0x0a, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65,
	0x74, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x0b, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0xb7, 0xf6, 0xd5, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x73, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x2d, 0x73, 0x65, 0x74, 0x52, 0x09, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x1a,
	0xc7, 0x08, 0x0a, 0x09, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x12, 0xbe, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa8, 0xe5, 0xe3, 0xd8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xba,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc1, 0x91, 0x99, 0xe3, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xde, 0x02, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xab, 0x01, 0x0a, 0x12, 0x61, 0x73, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0xc5, 0x95,
	0x84, 0xbd, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63,
	0x82, 0x41, 0x60, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x73,
	0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0f, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0xa5, 0x01, 0x0a, 0x10, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xfe, 0xfa, 0xe7, 0xe7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74,
	0x68, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x73, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x61,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xda, 0x02, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x12, 0x61, 0x73, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x82, 0xf4,
	0xb6, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82,
	0x41, 0x5f, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x0f, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0xa4, 0x01, 0x0a, 0x10, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x95, 0xf4, 0xd9, 0x88, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74,
	0x68, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x61, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xff, 0x01, 0x0a, 0x0c, 0x41, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x61,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x0d, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x69, 0x0a, 0x0b, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x67, 0x70,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x1a, 0xcf, 0x16, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x73, 0x12, 0xca, 0x01,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0xa1, 0xe2, 0x95, 0xe9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x4d, 0x82,
	0x41, 0x4a, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x1a, 0xd5, 0x12, 0x0a, 0x0c, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0xc8, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa6, 0xb5, 0xfc, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc4, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x93, 0xca, 0xd1, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x73, 0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xda, 0x07,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x81, 0x02, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0xf7, 0x96,
	0xb3, 0xde, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x42,
	0x67, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xaf, 0x01, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xd1, 0x97, 0xf4, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x10, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xcd,
	0x01, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xca, 0xc7, 0xe6, 0x4b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xc9,
	0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xb9, 0x01, 0x0a, 0x3b, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x67, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62,
	0x67, 0x70, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x64, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x84, 0xbc, 0xb4, 0x66, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43,
	0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x52, 0x39, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x62, 0x67, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x67, 0x70, 0x77, 0x65,
	0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xd5,
	0xeb, 0xfb, 0x75, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3a,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xb8, 0xa2, 0xb4, 0xa9, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0xd5, 0x07, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xfe, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x88, 0xa0, 0xef, 0x68, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x64,
	0x82, 0x41, 0x61, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xae, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x9e, 0xf0, 0xf7,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41,
	0x63, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x97, 0xbb, 0xd1,
	0xbf, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x65,
	0x82, 0x41, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xc9, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12,
	0xb9, 0x01, 0x0a, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62,
	0x67, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x67, 0x70, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x73, 0x74, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18,
	0xbd, 0xaa, 0xf4, 0x7b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59,
	0x52, 0x39, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x67, 0x70, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x62, 0x67, 0x70, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x17, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xe8, 0xee, 0x8a, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x81, 0xfc, 0x95, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x1a, 0x98, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x8e, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x1a, 0xc4, 0x11,
	0x0a, 0x10, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x74, 0x73, 0x12, 0xdf, 0x01, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xe1, 0xfa, 0x97, 0xbe, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x55, 0x82, 0x41,
	0x52, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65,
	0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d,
	0x73, 0x65, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x74, 0x1a, 0x8e, 0x0d, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0xd6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xe6, 0xa6, 0xf1, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5c, 0x82, 0x41, 0x59,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x78,
	0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xd1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd3, 0xd1, 0x90, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe7, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xbe, 0x01, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0xad, 0x8a, 0x99, 0xa3, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x74,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x12, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0xc3, 0x01, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x87, 0x96, 0xd9,
	0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82,
	0x41, 0x70, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x78, 0x74, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x13, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xd5, 0x01, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8a, 0x88,
	0xf8, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6e,
	0x82, 0x41, 0x6b, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0xe3, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xbc, 0x01, 0x0a, 0x14, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0xba, 0xc9, 0xc2, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x12, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xc2, 0x01, 0x0a, 0x16, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xc0, 0xfd, 0xc0, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d,
	0x73, 0x65, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x13, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xd5, 0x01,
	0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xd7, 0xcf, 0xb0, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xbc, 0x02, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0xa1, 0x01, 0x0a,
	0x16, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6c, 0x82,
	0x41, 0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x13, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x81, 0x01, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x74, 0x1a, 0xd8, 0x09, 0x0a, 0x0c, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x0c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xf5, 0xf7, 0xe2, 0x5a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x0b,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x1a, 0xd6, 0x06, 0x0a, 0x0b,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0xa3, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9a, 0xf5, 0xbf, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xa0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb7, 0x9a, 0x8a, 0xa3,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xfe, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x7d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x9b, 0xff, 0xca, 0x24, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x75,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x88, 0xe6, 0xd0, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xfc, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x7d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe2, 0xfc, 0x86, 0x95, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x74,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xbf, 0xe6, 0x8b, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xc8, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0c,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53,
	0x65, 0x74, 0x52, 0x0b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x1a,
	0x83, 0x19, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x73, 0x12, 0x98,
	0x01, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xd9, 0xdd,
	0xf8, 0xd8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x1a, 0x9c, 0x16, 0x0a, 0x09, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xae, 0xc0, 0xd3, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3d,
	0x82, 0x41, 0x3a, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa4, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0xf4, 0xfa, 0xa3, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x98, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xdb, 0xf4, 0xb6, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x81, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xa1, 0x01, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xc8, 0xc9, 0xd7, 0x46,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x42, 0x82, 0x41,
	0x3f, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x71, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xf4,
	0xdc, 0x96, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x42, 0x82, 0x41, 0x3f, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x04, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12, 0x16, 0x0a, 0x09, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56,
	0x36, 0x12, 0x18, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10,
	0x03, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x1a, 0xa9, 0x0c, 0x0a, 0x08,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0xef, 0x9c, 0xfb, 0x5a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4b, 0x65, 0x79, 0x42, 0x46, 0x82, 0x41, 0x43,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x83, 0x08, 0x0a, 0x06,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xbb, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xd0, 0xb0, 0x92, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4d, 0x82,
	0x41, 0x4a, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xb7, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc9,
	0xa4, 0xa5, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x53, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc0,
	0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8f, 0x01, 0x0a, 0x09, 0x69, 0x70,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xd5, 0x9e, 0xfa, 0x93, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x08, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xa3, 0x01, 0x0a, 0x10,
	0x6d, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0xab, 0xd4, 0xd7, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6d, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0f, 0x6d, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x1a, 0xbd, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x09,
	0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xc4, 0xd1, 0xc9, 0xf3, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x08, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xa2, 0x01, 0x0a,
	0x10, 0x6d, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0xb4, 0xf5, 0xfa, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0f, 0x6d, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x1a, 0xe3, 0x02, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4b, 0x65, 0x79, 0x12,
	0x6d, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2f, 0x69, 0x70, 0x2d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x08, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x82,
	0x01, 0x0a, 0x10, 0x6d, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2f, 0x6d, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0xfe, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xa0, 0x01, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xeb, 0xfb, 0xa0, 0xfe, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x70, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xeb, 0xf3, 0x9d,
	0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82,
	0x41, 0x3e, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12, 0x16, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x12, 0x18,
	0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x08,
	0x82, 0x41, 0x05, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x1a, 0xba, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x53, 0x65, 0x74, 0x1a, 0x86, 0x0b, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74,
	0x73, 0x12, 0x86, 0x01, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x93, 0xfe,
	0xb2, 0x8b, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x54,
	0x61, 0x67, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73,
	0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x67, 0x53, 0x65, 0x74, 0x1a, 0xc9, 0x08, 0x0a, 0x06, 0x54,
	0x61, 0x67, 0x53, 0x65, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xb4, 0xfd, 0xb4, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8b, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xcd, 0xfd, 0xc6, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x73, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8f, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x6a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd6, 0x8f, 0x8e, 0x41, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xac, 0x01, 0x0a,
	0x09, 0x74, 0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xbd, 0x91, 0xea, 0x6d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x41,
	0x82, 0x41, 0x3e, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x6a, 0x0a, 0x0d, 0x54,
	0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x10,
	0x74, 0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0xeb, 0x9a, 0x95, 0xff, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x10, 0x74, 0x61,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x8e,
	0x8d, 0x84, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x8c, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x6a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc9, 0xe2, 0xf6, 0xd2, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xaa, 0x01,
	0x0a, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xcc, 0xc7, 0xa8, 0x44,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x40,
	0x82, 0x41, 0x3d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x6a, 0x0a, 0x0d, 0x54, 0x61,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x10, 0x74,
	0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0xf4, 0xeb, 0xbc, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x10, 0x74, 0x61, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xfd, 0x9f, 0x9e,
	0xbb, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0xa5, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x53, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x67,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4d, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x73, 0x2e,
	0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x67, 0x53, 0x65, 0x74, 0x1a, 0xc1,
	0xdf, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb1, 0xf0, 0xe5, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xaa, 0xdc, 0x02, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9f, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xd6, 0xcd, 0xb9, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x83, 0xed, 0xa9, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xb2, 0xbe, 0xdf, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x7c, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x72, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xbc, 0x8a, 0x99, 0xd2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x7a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x71, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x93, 0xdf, 0xaa, 0xa5, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0xa8, 0xd6, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0xc3, 0x01, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0xc0, 0xfb, 0xc8, 0x42, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42,
	0x4c, 0x82, 0x41, 0x49, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xe9, 0xd2, 0x02, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xcc, 0x01, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xf4, 0xd5, 0xf4, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf5, 0xe8, 0xbf, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x57, 0x82,
	0x41, 0x54, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xc8, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb5, 0xbf,
	0xc3, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc4, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xaa, 0xf1, 0xe3, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xc8, 0xa4, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0xeb, 0x01, 0x0a, 0x0b, 0x62, 0x67, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xe0, 0xa1, 0xa9, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x62, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0xd8, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf9, 0xdc, 0xfe, 0x7c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xee, 0x01, 0x0a, 0x0c, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8d, 0x9b, 0xea, 0x2a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x49, 0x73, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x61, 0x82, 0x41, 0x5e,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b,
	0x69, 0x73, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xee, 0x01, 0x0a, 0x0c,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe9, 0x8e, 0xfc,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x61, 0x82, 0x41,
	0x5e, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0b, 0x6f, 0x73, 0x70, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xd4, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xce, 0xd1, 0xc1, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xc3, 0x76, 0x0a, 0x0a, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xf0, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd5, 0xbb,
	0x9d, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9e, 0x02, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x73,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x9d, 0x8e,
	0xad, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x75, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x74,
	0x82, 0x41, 0x71, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x65, 0x74, 0x2d, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x70, 0x72, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x52, 0x10, 0x73, 0x65, 0x74, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x50,
	0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x8a, 0x02, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x8d, 0xc7, 0xb9, 0xec, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x71, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67,
	0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x12, 0x98, 0x02, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x83, 0xb0, 0xea, 0xef, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42,
	0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d,
	0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x73,
	0x65, 0x74, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0xec,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xca, 0xde, 0x9a, 0xb5, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67,
	0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x66,
	0x82, 0x41, 0x63, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8d, 0x08,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb4, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x74,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x18, 0xa4, 0x98, 0xa3, 0x70,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x72, 0x65,
	0x66, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x12,
	0x9d, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x6d,
	0x65, 0x64, 0x18, 0x82, 0x93, 0xdf, 0x3b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x72, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x53, 0x65, 0x74, 0x6d, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0xd3, 0x82, 0x86, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x65, 0x74, 0x4d, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x0e, 0x73,
	0x65, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xb6, 0x94,
	0xdf, 0x26, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x64,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0xb3, 0x01, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x18, 0xef, 0x96, 0xf5, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x76, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x48, 0x01, 0x52, 0x14, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x53, 0x65, 0x74, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x33, 0x0a, 0x13,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0xb4, 0x80, 0xd2, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x10, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0xd8, 0x01, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xef, 0xea, 0xd4, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x42, 0x67, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x0e, 0x73, 0x65,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x32, 0x0a, 0x06,
	0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x54, 0x4d, 0x45, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x0a, 0x53, 0x45, 0x54, 0x4d,
	0x45, 0x44, 0x5f, 0x49, 0x47, 0x50, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x49, 0x47, 0x50,
	0x22, 0x40, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x45, 0x54, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x0f, 0x53, 0x45, 0x54, 0x4e, 0x45, 0x58, 0x54, 0x48,
	0x4f, 0x50, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x53, 0x45,
	0x4c, 0x46, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x1a, 0xa4, 0x0a,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x12, 0x95, 0x02, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd2, 0x9b,
	0xe0, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x7b, 0x82, 0x41, 0x78, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x61, 0x73, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x2d, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x90, 0x02, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xcf, 0x82, 0xa0, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x7a, 0x82, 0x41, 0x77, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74,
	0x2d, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf2, 0x02,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xaa, 0x01, 0x0a, 0x03, 0x61, 0x73, 0x6e,
	0x18, 0x89, 0xf1, 0xbc, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x7f, 0x82, 0x41, 0x7c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x70, 0x72,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x73, 0x6e,
	0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0xba, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x5f, 0x6e, 0x18, 0x9d, 0xe0, 0xb2, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x85, 0x01, 0x82, 0x41, 0x81, 0x01, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74,
	0x68, 0x2d, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x2d, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x4e, 0x1a, 0xef, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa9, 0x01, 0x0a,
	0x03, 0x61, 0x73, 0x6e, 0x18, 0xdc, 0xd4, 0xbf, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x7e, 0x82, 0x41, 0x7b, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74,
	0x68, 0x2d, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x73, 0x6e, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0xb9, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x5f, 0x6e, 0x18, 0xf2, 0xe5, 0x9d, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x84, 0x01, 0x82, 0x41, 0x80, 0x01, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x61, 0x73, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x2d, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x2d, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x4e, 0x1a, 0xd0, 0x28, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x8a, 0x02, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xa2, 0x86, 0xed, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x8a, 0x02, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xd7, 0xaf,
	0xb9, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x96, 0x02, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x87, 0xc9,
	0xe2, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x86, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xdf, 0xde, 0x96, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x77, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xd8, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x98, 0x02, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0xce, 0x83, 0xee, 0x1a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x7f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x42, 0x7c, 0x82, 0x41, 0x79, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0xd4, 0x01, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xf5, 0xe4, 0xb6, 0x53, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x67, 0x70,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x7d, 0x82, 0x41, 0x7a, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5c,
	0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x0d, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x1a, 0x09, 0x82,
	0x41, 0x06, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x12, 0x22, 0x0a, 0x10, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x1a, 0x0c,
	0x82, 0x41, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x1a, 0xb4, 0x0e, 0x0a,
	0x06, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x98, 0x02, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xc8, 0x98, 0xc9, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x7c, 0x82, 0x41,
	0x79, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x95, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe1, 0xe3, 0xbc,
	0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x7b, 0x82, 0x41, 0x78, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xfc, 0x04, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc3, 0x02, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0xa2, 0xa0, 0xd0, 0xdd, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x90, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x42, 0x89, 0x01, 0x82, 0x41, 0x85, 0x01, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xab, 0x02, 0x0a, 0x10,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x12, 0xb1, 0x01, 0x0a, 0x36, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x67, 0x70, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x62, 0x67, 0x70, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0xe7, 0xcb, 0xc1, 0xf7,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x52, 0x35, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x62, 0x67, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x67, 0x70, 0x77,
	0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xca, 0x81, 0xf9, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xcb, 0xa4, 0xf4,
	0xa6, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0xf7, 0x04, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xc0, 0x02, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0xef, 0x87, 0xe9, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x8f, 0x01, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x88,
	0x01, 0x82, 0x41, 0x84, 0x01, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xaa, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xb0, 0x01, 0x0a, 0x36,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x67, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x67,
	0x70, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x64, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0xdc, 0xf5, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42,
	0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f,
	0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x52, 0x35, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x67,
	0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x67, 0x70, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x73, 0x74, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x31,
	0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0xad, 0xb4, 0x96, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x30, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xb0, 0x9e, 0xb0, 0x56, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x1a, 0x99, 0x08, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0xa0, 0x02, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x98, 0xa9, 0x97,
	0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x82, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x7f, 0x82, 0x41, 0x7c,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65,
	0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb1,
	0xc4, 0xa7, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x7e, 0x82, 0x41, 0x7b,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65,
	0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xe4, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xd9, 0x01,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0xdd, 0xad, 0x98, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2d, 0x73, 0x65, 0x74, 0x2d, 0x72, 0x65, 0x66, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66, 0x1a, 0xe3, 0x01, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xd9, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0xd4, 0xa6, 0xfc, 0xf6, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d,
	0x01, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x72, 0x65, 0x66, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66, 0x1a,
	0xd5, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x96, 0x02, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0xc9, 0x9f, 0xba, 0x6f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x7b, 0x82,
	0x41, 0x78, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0xd4, 0x01, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf8,
	0xac, 0x9c, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x67, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x67, 0x70, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x7c, 0x82, 0x41, 0x79, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5c, 0x0a, 0x06, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x0d, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x4e, 0x4c,
	0x49, 0x4e, 0x45, 0x12, 0x22, 0x0a, 0x10, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x1a, 0xf3, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x45,
	0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x92, 0x02, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x84, 0xf7, 0x8b, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x7b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x82,
	0x41, 0x76, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x65, 0x74, 0x2d, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x90, 0x02, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xc5, 0xda, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42,
	0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x79, 0x82, 0x41, 0x76, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x9d, 0x02, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0xed, 0x85, 0xc8, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x7c, 0x82, 0x41, 0x79, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74,
	0x2d, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x8e, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9d, 0xd1,
	0xfe, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xe7, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xa2, 0x02, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0xe4, 0x8c, 0x96, 0x8c, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x82, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x45,
	0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x80, 0x01, 0x82, 0x41, 0x7d, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74,
	0x2d, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0xd9, 0x01, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xfb, 0x94, 0xc8, 0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x67, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x67, 0x70, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x81, 0x01, 0x82, 0x41, 0x7e, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x65, 0x78, 0x74, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x5c, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x0d,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x1a,
	0x09, 0x82, 0x41, 0x06, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x12, 0x22, 0x0a, 0x10, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02,
	0x1a, 0x0c, 0x82, 0x41, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x1a, 0xed,
	0x0d, 0x0a, 0x06, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0xa2, 0x02, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x8a, 0x94, 0xa7, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x82,
	0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x80, 0x01, 0x82, 0x41, 0x7d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x65, 0x78, 0x74, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9c,
	0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa7, 0xdf, 0xb2, 0x77, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x81, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67,
	0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x7f, 0x82, 0x41, 0x7c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x65, 0x78, 0x74, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xce, 0x04,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc9, 0x02, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0xc0, 0x8e, 0xe9, 0x66, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x93, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67,
	0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x8d, 0x01, 0x82, 0x41, 0x89, 0x01, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d,
	0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0xf7, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xb0, 0x01, 0x0a, 0x36, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x62, 0x67, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x67, 0x70, 0x77,
	0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x18, 0x95, 0xe8, 0xdc, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50,
	0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d,
	0x55, 0x4e, 0x49, 0x54, 0x59, 0x52, 0x35, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x67, 0x70, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x62, 0x67, 0x70, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x80, 0xd3, 0xc9, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0xcd,
	0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc8, 0x02, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0xc9, 0xfd, 0xf2, 0xc3, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x92, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42,
	0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x8c, 0x01, 0x82, 0x41, 0x88, 0x01, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d,
	0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x1a, 0xf8, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xb1, 0x01, 0x0a, 0x36, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x62, 0x67, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x67, 0x70, 0x77, 0x65,
	0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x18, 0xde, 0x9e, 0xa4, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50,
	0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d,
	0x55, 0x4e, 0x49, 0x54, 0x59, 0x52, 0x35, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x67, 0x70, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x62, 0x67, 0x70, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0xaf, 0xa1, 0xec, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0xc7,
	0x08, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xa8, 0x02, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x82, 0x9d, 0xfa, 0x67, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x85, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x84, 0x01, 0x82, 0x41, 0x80, 0x01, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74,
	0x2d, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa4, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xbf, 0x82, 0xa5, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x84, 0x01, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x82, 0x01, 0x82, 0x41, 0x7f, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf3,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xe8, 0x01, 0x0a, 0x15, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0xa9, 0xde, 0xb6, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x9a, 0x01, 0x82, 0x41, 0x96, 0x01, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x65, 0x78, 0x74, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x72, 0x65, 0x66,
	0x52, 0x12, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x1a, 0xf1, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xe7,
	0x01, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x98, 0xe6, 0xc5, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x99, 0x01, 0x82, 0x41, 0x95, 0x01, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74,
	0x2d, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74,
	0x2d, 0x72, 0x65, 0x66, 0x52, 0x12, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66, 0x1a, 0xe2, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x9e, 0x02, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x93, 0xca,
	0xf0, 0x45, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x81, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x7f, 0x82, 0x41, 0x7c, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74,
	0x2d, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0xd9, 0x01, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x82, 0xc8, 0xb2, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x67, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x67, 0x70, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x80, 0x01, 0x82, 0x41, 0x7d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x65, 0x78, 0x74, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x5c, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x0d, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x1a, 0x09,
	0x82, 0x41, 0x06, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x12, 0x22, 0x0a, 0x10, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x1a,
	0x0c, 0x82, 0x41, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x1a, 0x89, 0x08,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x18, 0x89, 0xd1, 0x86, 0xc9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x72, 0x65, 0x66,
	0x52, 0x0c, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x12, 0x9c,
	0x01, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x6d, 0x65,
	0x64, 0x18, 0xd3, 0xa1, 0xda, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x71, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x53, 0x65, 0x74, 0x6d, 0x65, 0x64, 0x12, 0x2a, 0x0a,
	0x0e, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0xbe, 0xb4, 0xb4, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74,
	0x4d, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x65, 0x74,
	0x5f, 0x6d, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xdf, 0xc2, 0xce, 0x19,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0xb2, 0x01, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x18, 0xec, 0x83, 0xc8, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x75, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x48, 0x01, 0x52, 0x14, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x53,
	0x65, 0x74, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x65, 0x74,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0xe3, 0xd3, 0x9e, 0xba, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x73, 0x65,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0xd7,
	0x01, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x92, 0xe7, 0xe7, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x67,
	0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x77, 0x82, 0x41, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x32, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x4d,
	0x65, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x54, 0x4d, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x0a, 0x53, 0x45, 0x54, 0x4d, 0x45, 0x44, 0x5f, 0x49,
	0x47, 0x50, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x49, 0x47, 0x50, 0x22, 0x40, 0x0a, 0x0a,
	0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45,
	0x54, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x0f, 0x53, 0x45, 0x54, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x53,
	0x45, 0x4c, 0x46, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x53, 0x45, 0x4c, 0x46, 0x42, 0x09,
	0x0a, 0x07, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x65, 0x74,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x1a, 0xd2, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xc7, 0x01, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0xb0, 0x94, 0xe9, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xaa,
	0x0c, 0x0a, 0x0b, 0x49, 0x73, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xf1,
	0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa2, 0xe2, 0x81, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x73,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x2d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xed, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xdf, 0x92, 0x82,
	0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x49, 0x73, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x9c, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa8, 0x01,
	0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x96, 0xc1, 0x9b, 0xb5,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x69, 0x73, 0x69, 0x73, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0xaa, 0x01, 0x0a, 0x0a, 0x73, 0x65, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0xc8, 0xb1, 0xb2, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x73, 0x69, 0x73,
	0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x73, 0x65, 0x74, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x09, 0x73, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0xb9, 0x01, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xed, 0x98, 0x8f, 0x8e, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69,
	0x73, 0x69, 0x73, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0x97, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x09,
	0x73, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0xdb, 0xcb, 0x8e, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x73,
	0x69, 0x73, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x73, 0x65, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0xaa, 0x01, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0xcf, 0xfc, 0xb9, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x09, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0xb7, 0x01, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xc8, 0xfc, 0x89, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x77, 0x82, 0x41, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74,
	0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xa0, 0x15, 0x0a, 0x0b,
	0x4f, 0x73, 0x70, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xf1, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xde, 0xdf, 0xb4, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x6c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x68, 0x82,
	0x41, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x80, 0x02, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x8d,
	0xea, 0xd9, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6f, 0x73, 0x70, 0x66, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74,
	0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x09, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0xee, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xcb, 0xc8, 0xfe,
	0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x70, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a,
	0x0f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x81, 0xc5, 0x90, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65,
	0x74, 0x41, 0x72, 0x65, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x0f, 0x73,
	0x65, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xa4,
	0xc1, 0x9a, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x41,
	0x72, 0x65, 0x61, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x1a, 0xc6, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x86, 0x02, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa2,
	0xd7, 0xb9, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x73, 0x82, 0x41, 0x70, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x02, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xdf, 0xe9, 0x84, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x75, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x73, 0x70,
	0x66, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xd6, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xaa, 0x01, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0xed, 0xfe, 0xc6, 0x3b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7a, 0x82, 0x41, 0x77, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x73, 0x70, 0x66,
	0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0xa8, 0x02, 0x0a, 0x0b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x9a, 0xcd, 0x94, 0xbd, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x81, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x73, 0x70, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x42, 0x7f, 0x82, 0x41, 0x7c, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x73,
	0x70, 0x66, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x1a, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x32,
	0x10, 0x00, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x32, 0x12, 0x32, 0x0a, 0x1a, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x31, 0x10, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x1a, 0xd1, 0x04, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0xf6, 0xe6, 0xd5, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x82,
	0x41, 0x76, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0xa5, 0x02, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0xb7, 0xa0, 0xc5, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x80, 0x01, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x42, 0x7e, 0x82, 0x41,
	0x7b, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x65, 0x74, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x1a, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x32, 0x10, 0x00, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x32, 0x12, 0x32, 0x0a, 0x1a, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x10, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x45,
	0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x1a, 0x6e,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xa4, 0xd6, 0xee, 0x42, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xcd, 0xdf, 0x91, 0xb7, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x1a, 0xcf,
	0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x0d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x9f, 0xa7, 0xaa, 0x2a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x1a, 0xa9, 0xa5, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0xfc, 0x01, 0x0a, 0x0e, 0x62, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xba, 0xa4, 0xac, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0d, 0x62, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0xdf, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9a, 0xc0, 0x89, 0xd3, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x81, 0x02, 0x0a, 0x0f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe3, 0xbf, 0xfa, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x6b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x73,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x67, 0x82, 0x41,
	0x64, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x69, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x80, 0x02, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xad, 0xef, 0xbb, 0x56, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42,
	0x67, 0x82, 0x41, 0x64, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x8a, 0x02, 0x0a, 0x12, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0xe5, 0xc5, 0xb8, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x83, 0x02, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xff, 0xcd, 0xa2, 0xf2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65,
	0x74, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x0e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x12, 0x9e, 0x02, 0x0a, 0x17,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x9c, 0xc3, 0xdd, 0x3d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xf7, 0x01, 0x0a,
	0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x8b,
	0xf5, 0x93, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x67, 0x53,
	0x65, 0x74, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2d, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x12, 0x80, 0x02, 0x0a, 0x0f, 0x6f, 0x73, 0x70, 0x66, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xcb, 0x92, 0xbc, 0x56, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x2d, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x6f, 0x73, 0x70, 0x66, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xdb, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xb7, 0x83, 0xf0, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe2, 0x47, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x97, 0x02, 0x0a, 0x0e, 0x61, 0x73,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xe4, 0xa1, 0xd2,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x77, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x75,
	0x82, 0x41, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x9d, 0x02, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xfe, 0xc5, 0xb1, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x79, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42,
	0x67, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x76, 0x82, 0x41, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0xfc, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xab,
	0x82, 0x84, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6d, 0x82, 0x41, 0x6a,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xa2, 0x02, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x73, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xe8, 0xed, 0xd4, 0xed, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x79, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x42, 0x78, 0x82,
	0x41, 0x75, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x61, 0x73, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x12, 0xf8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xec, 0xcf, 0xa6, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x82,
	0x41, 0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xf8, 0x0a, 0x0a, 0x0c, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x98, 0x02, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x89,
	0xa4, 0xa1, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x7c, 0x82, 0x41, 0x79, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x93,
	0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xde, 0xdc, 0xaf, 0x4d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x7b, 0x82, 0x41, 0x78, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x9b, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xdc, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0xd4, 0xfd, 0x81,
	0x3e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x42, 0x86, 0x01, 0x82, 0x41,
	0x82, 0x01, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xb1,
	0x01, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xe7, 0xda, 0x9e, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x82, 0x01, 0x82, 0x41, 0x7f, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x98, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xdb, 0x01, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0xb5, 0xfe, 0xae, 0x12, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x42, 0x85, 0x01, 0x82, 0x41, 0x81, 0x01, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xb0, 0x01, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x8c, 0x88, 0xce, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x81, 0x01, 0x82, 0x41, 0x7e, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x73, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x86, 0x0b,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x9b, 0x02, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xcf, 0x83, 0xf9, 0x33,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x7d, 0x82, 0x41, 0x7a, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x96,
	0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc0, 0xdd, 0xa6, 0x78, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x7c, 0x82, 0x41, 0x79, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x9f, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xde, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0xa2, 0xaf, 0x93, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x42,
	0x87, 0x01, 0x82, 0x41, 0x83, 0x01, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0xb3, 0x01, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x8d, 0xdc,
	0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x84, 0x01, 0x82, 0x41,
	0x80, 0x01, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9a, 0x03, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xdc, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0xb7, 0xc3, 0xc0, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x42,
	0x86, 0x01, 0x82, 0x41, 0x82, 0x01, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0xb1, 0x01, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xf6, 0xb8, 0xc8,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x82, 0x01, 0x82, 0x41, 0x7f,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc3, 0x0d, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xc7, 0x01, 0x0a, 0x0b, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x69,
	0x6e, 0x18, 0x9a, 0xae, 0x80, 0x77, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46,
	0x49, 0x54, 0x59, 0x50, 0x45, 0x42, 0x79, 0x82, 0x41, 0x76, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2d, 0x69, 0x6e,
	0x52, 0x09, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x49, 0x6e, 0x12, 0xbb, 0x01, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xaa, 0xd6,
	0xfe, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7b,
	0x82, 0x41, 0x78, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0xc5, 0x01, 0x0a, 0x11, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0xb4, 0xb7, 0xc1, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x7f, 0x82, 0x41, 0x7c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65,
	0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74,
	0x52, 0x0f, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x74, 0x12, 0xb7, 0x01, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x5f, 0x65, 0x71, 0x18, 0xf2, 0x9b, 0x8a, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x7b, 0x82, 0x41, 0x78, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x2d, 0x65, 0x71, 0x52, 0x0b,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x45, 0x71, 0x12, 0xa3, 0x01, 0x0a, 0x06,
	0x6d, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x18, 0xa3, 0xd4, 0xc7, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6d, 0x65, 0x64, 0x2d, 0x65, 0x71, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x45,
	0x71, 0x12, 0xb4, 0x01, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69,
	0x6e, 0x18, 0xbd, 0xe4, 0xfe, 0xe0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x79, 0x82, 0x41, 0x76, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x69, 0x6e, 0x52, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x12, 0xca, 0x01, 0x0a, 0x09, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x5f, 0x65, 0x71, 0x18, 0xe3, 0x87, 0xc2, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x42, 0x67, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x77, 0x82, 0x41, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x2d, 0x65, 0x71, 0x52, 0x08, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x45, 0x71, 0x12, 0x98, 0x02, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xa6, 0xe7, 0xf4, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x6a, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x23, 0x0a, 0x12, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12, 0x23, 0x0a, 0x12, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a,
	0x0b, 0x82, 0x41, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x1a, 0xee, 0x0b, 0x0a,
	0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x12,
	0x9d, 0x02, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xcd, 0x84, 0xec, 0x59, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x7f, 0x82, 0x41, 0x7c, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2d, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x99, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x82, 0x95, 0xf1, 0x9f, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x7e, 0x82, 0x41, 0x7b, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd0, 0x03, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc8, 0x01, 0x0a, 0x0b, 0x61, 0x73, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x97, 0xec, 0xc3, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8c, 0x01, 0x82, 0x41, 0x88, 0x01, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x09, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65,
	0x74, 0x12, 0xfa, 0x01, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe5, 0xb3, 0xc7, 0x2a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xcc,
	0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x0b, 0x61, 0x73, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xe8, 0xdf, 0x87, 0x68, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8b, 0x01, 0x82, 0x41, 0x87, 0x01, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x09, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65,
	0x74, 0x12, 0xf9, 0x01, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8e, 0xf8, 0x9e, 0x26, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xbc, 0x0d,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x0b, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x5f, 0x69, 0x6e, 0x18, 0xdd, 0xca, 0xa5, 0x9c, 0x01, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x42, 0x78, 0x82, 0x41,
	0x75, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2d, 0x69, 0x6e, 0x52, 0x09, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x49,
	0x6e, 0x12, 0xba, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0xd9, 0xc3, 0x99, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x7a, 0x82, 0x41, 0x77, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x74,
	0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0xc5,
	0x01, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0xc7, 0xf2, 0xd0, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7e, 0x82, 0x41, 0x7b, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0xb7, 0x01, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x5f, 0x65, 0x71, 0x18, 0xad, 0xcd, 0x9a, 0xd7, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7a, 0x82, 0x41, 0x77, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x72, 0x65, 0x66,
	0x2d, 0x65, 0x71, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x45, 0x71,
	0x12, 0xa3, 0x01, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x18, 0x96, 0xad, 0xe7, 0xf7,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x64, 0x2d, 0x65, 0x71, 0x52,
	0x05, 0x6d, 0x65, 0x64, 0x45, 0x71, 0x12, 0xb3, 0x01, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x18, 0xce, 0xfd, 0xc4, 0x8e, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x69,
	0x6e, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x12, 0xc8, 0x01, 0x0a,
	0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x71, 0x18, 0xec, 0x9f, 0x91, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x42, 0x67, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x2d, 0x65, 0x71, 0x52, 0x08, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x45, 0x71, 0x12, 0x96, 0x02, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xb7, 0xd7, 0xbd, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x7a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42,
	0x67, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x77, 0x82, 0x41,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x6a, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x23, 0x0a, 0x12, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12, 0x23, 0x0a, 0x12, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a,
	0x0b, 0x82, 0x41, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x1a, 0x8f, 0x03, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa5, 0x01, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xa4, 0x85, 0xb6, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0xdc, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x65, 0x71, 0x18, 0xee, 0xc4, 0xa1, 0xae, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x65, 0x71, 0x52, 0x11, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x71, 0x1a, 0xfd,
	0x06, 0x0a, 0x0e, 0x49, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0xfe, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe4, 0xc0, 0xa5,
	0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xf9, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfd, 0x99, 0xeb,
	0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb6,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xab, 0x01, 0x0a, 0x08, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x65, 0x71, 0x18, 0xb2, 0xe4, 0x9e, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x77, 0x82, 0x41, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69,
	0x73, 0x69, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x65, 0x71, 0x52, 0x07,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x71, 0x1a, 0xb4, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xaa, 0x01, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x71, 0x18, 0xe5,
	0xe1, 0xca, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x76, 0x82,
	0x41, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x2d, 0x65, 0x71, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x71, 0x1a, 0xfc,
	0x09, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0xfd, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc2, 0x81, 0xaf,
	0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xf9, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xff, 0xb0, 0xbc, 0x4e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf7, 0x02,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb1, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xee, 0xb5, 0xd1, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0xb8, 0x01, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x8a, 0xda,
	0xa8, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7b, 0x82, 0x41,
	0x78, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xf3, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xb0, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x9f, 0xbe, 0xa5, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x77, 0x82, 0x41, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0xb6, 0x01, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xad, 0x94, 0xec, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x7a, 0x82, 0x41, 0x77, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x9c, 0x0b,
	0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53,
	0x65, 0x74, 0x12, 0x82, 0x02, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xaa, 0xe9,
	0xb6, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x71, 0x82, 0x41,
	0x6e, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xff, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xc7, 0xf3, 0xe4, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc0, 0x03, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xf6, 0x01, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc6, 0x95, 0x95, 0x32, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x84, 0x01, 0x82, 0x41, 0x80, 0x01, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbc, 0x01,
	0x0a, 0x0c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xc0,
	0xbc, 0xd4, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x7e, 0x82, 0x41, 0x7b, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x52,
	0x0b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x1a, 0xbd, 0x03, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xf5, 0x01, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa3, 0x97, 0xa6,
	0xaf, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x82, 0x01, 0x82, 0x41, 0x7f, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbb,
	0x01, 0x0a, 0x0c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0xc3, 0xee, 0xca, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x7d, 0x82, 0x41, 0x7a, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x52,
	0x0b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x1a, 0xfd, 0x0a, 0x0a,
	0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x12,
	0xfe, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc0, 0xba, 0xb8, 0x3e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xfb, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb9, 0xb0, 0xf3, 0xff, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb6,
	0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xf4, 0x01, 0x0a, 0x11, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x88, 0xb7, 0x9d, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x81, 0x01, 0x82, 0x41,
	0x7e, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0xb4, 0x01, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x84, 0xf0, 0xed, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x7a, 0x82, 0x41, 0x77, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x1a, 0xb2, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xf2, 0x01, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe9, 0xe8, 0xe1, 0x25, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x80, 0x01, 0x82, 0x41, 0x7d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xb7, 0xfd, 0xd5, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x82, 0x41, 0x76, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x65,
	0x74, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x1a, 0xc9, 0x0b, 0x0a,
	0x15, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x8c, 0x02, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xf1, 0xa3, 0xd4, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x89, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xe6, 0xd2, 0x80, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xc9, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xf6, 0x01, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0xe4, 0x8d, 0xf3, 0x30, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54,
	0x59, 0x50, 0x45, 0x42, 0x8b, 0x01, 0x82, 0x41, 0x87, 0x01, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xc5, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8c, 0xcd, 0xde, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x85, 0x01, 0x82, 0x41, 0x81, 0x01, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xc8, 0x03,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xf6, 0x01, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x93, 0xad, 0xc3, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x42,
	0x8a, 0x01, 0x82, 0x41, 0x86, 0x01, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0xc5, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0xcb, 0xe2, 0xbb, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x84, 0x01, 0x82, 0x41, 0x80, 0x01, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xcd, 0x0a, 0x0a, 0x0b, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x12, 0xf8, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xdc, 0xcd, 0x8d, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c, 0x82,
	0x41, 0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x61, 0x67,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xf5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd5, 0xe2,
	0x8a, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x67, 0x53, 0x65,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa5, 0x03, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xf0, 0x01, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xdc, 0x80, 0xa4,
	0xb4, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x7e, 0x82, 0x41, 0x7b, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x73, 0x65, 0x74,
	0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x07, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xd2, 0xa1, 0xf7, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x67,
	0x53, 0x65, 0x74, 0x1a, 0xa2, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xee, 0x01,
	0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xfd, 0x82, 0xb6, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x7d,
	0x82, 0x41, 0x7a, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x61,
	0x67, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa7,
	0x01, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x9f, 0xc2, 0xc0, 0x90, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x61, 0x67, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x67, 0x2d, 0x73, 0x65, 0x74,
	0x52, 0x06, 0x74, 0x61, 0x67, 0x53, 0x65, 0x74, 0x1a, 0xe4, 0x05, 0x0a, 0x0e, 0x4f, 0x73, 0x70,
	0x66, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xfe, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9c, 0xca, 0xec, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x73, 0x70, 0x66, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x73,
	0x70, 0x66, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xf9, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x95, 0xd5, 0xa8, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x71, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x73,
	0x70, 0x66, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x73, 0x70, 0x66,
	0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x6a, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x65, 0x71, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0xcd, 0xb1, 0xb9, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0c, 0x61, 0x72, 0x65, 0x61, 0x45, 0x71, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a,
	0x0e, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x65, 0x71, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0xd0, 0x9d, 0x9d, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x72, 0x65,
	0x61, 0x45, 0x71, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x65, 0x71, 0x1a, 0x69, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x0e, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x65, 0x71, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0xf2, 0x88, 0xf6, 0xde, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x72, 0x65,
	0x61, 0x45, 0x71, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x65, 0x71, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xf3, 0xd4, 0xb8, 0x20,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x72, 0x65, 0x61, 0x45, 0x71, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x65, 0x71, 0x1a,
	0x8b, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x0b, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xbd, 0x96, 0xd2, 0x4b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0xda, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x65, 0x71, 0x18, 0xa3, 0xa6, 0xec, 0x13, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x65, 0x71, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x71, 0x1a, 0x92, 0x01,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x87, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x91, 0xb8, 0xd3, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x90, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x86, 0x01, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xf8, 0xf0, 0xc3, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xe6, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x65, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6f, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xd2,
	0x01, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_routing_policy_proto_rawDescOnce sync.Once
	file_openconfig_routing_policy_proto_rawDescData = file_openconfig_routing_policy_proto_rawDesc
)

func file_openconfig_routing_policy_proto_rawDescGZIP() []byte {
	file_openconfig_routing_policy_proto_rawDescOnce.Do(func() {
		file_openconfig_routing_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_routing_policy_proto_rawDescData)
	})
	return file_openconfig_routing_policy_proto_rawDescData
}

var file_openconfig_routing_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_openconfig_routing_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 128)
var file_openconfig_routing_policy_proto_goTypes = []interface{}{
	(RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode)(0),                                                             // 0: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Config.Mode
	(RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State_Mode)(0),                                                              // 1: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.State.Mode
	(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMed)(0),                 // 2: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.Config.SetMed
	(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHop)(0),             // 3: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.Config.SetNextHop
	(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config_Method)(0),    // 4: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Config.Method
	(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State_Method)(0),     // 5: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.State.Method
	(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config_Method)(0), // 6: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Config.Method
	(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State_Method)(0),  // 7: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.State.Method
	(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMed)(0),                  // 8: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.State.SetMed
	(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHop)(0),              // 9: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.State.SetNextHop
	(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config_MetricType)(0),  // 10: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric.Config.MetricType
	(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State_MetricType)(0),   // 11: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric.State.MetricType
	(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config_RouteType)(0),        // 12: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.Config.RouteType
	(RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State_RouteType)(0),         // 13: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.State.RouteType
	(*RoutingPolicy)(nil),                                                                                                                           // 14: openconfig.RoutingPolicy
	(*RoutingPolicy_DefinedSets)(nil),                                                                                                               // 15: openconfig.RoutingPolicy.DefinedSets
	(*RoutingPolicy_PolicyDefinitions)(nil),                                                                                                         // 16: openconfig.RoutingPolicy.PolicyDefinitions
	(*RoutingPolicy_DefinedSets_BgpDefinedSets)(nil),                                                                                                // 17: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets
	(*RoutingPolicy_DefinedSets_NeighborSets)(nil),                                                                                                  // 18: openconfig.RoutingPolicy.DefinedSets.NeighborSets
	(*RoutingPolicy_DefinedSets_PrefixSets)(nil),                                                                                                    // 19: openconfig.RoutingPolicy.DefinedSets.PrefixSets
	(*RoutingPolicy_DefinedSets_TagSets)(nil),                                                                                                       // 20: openconfig.RoutingPolicy.DefinedSets.TagSets
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets)(nil),                                                                                     // 21: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets)(nil),                                                                                  // 22: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets)(nil),                                                                               // 23: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet)(nil),                                                                           // 24: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSet
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSetKey)(nil),                                                                        // 25: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSetKey
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_Config)(nil),                                                                    // 26: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSet.Config
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_State)(nil),                                                                     // 27: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSet.State
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet)(nil),                                                                     // 28: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySetKey)(nil),                                                                  // 29: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySetKey
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config)(nil),                                                              // 30: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.Config
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State)(nil),                                                               // 31: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.State
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion)(nil),                                         // 32: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.Config.CommunityMemberUnion
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion)(nil),                                          // 33: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.State.CommunityMemberUnion
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet)(nil),                                                               // 34: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySet
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySetKey)(nil),                                                            // 35: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySetKey
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config)(nil),                                                        // 36: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySet.Config
	(*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State)(nil),                                                         // 37: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySet.State
	(*RoutingPolicy_DefinedSets_NeighborSets_NeighborSet)(nil),                                                                                      // 38: openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSet
	(*RoutingPolicy_DefinedSets_NeighborSets_NeighborSetKey)(nil),                                                                                   // 39: openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSetKey
	(*RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config)(nil),                                                                               // 40: openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSet.Config
	(*RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State)(nil),                                                                                // 41: openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSet.State
	(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet)(nil),                                                                                          // 42: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet
	(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSetKey)(nil),                                                                                       // 43: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSetKey
	(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config)(nil),                                                                                   // 44: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Config
	(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes)(nil),                                                                                 // 45: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes
	(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State)(nil),                                                                                    // 46: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.State
	(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix)(nil),                                                                          // 47: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.Prefix
	(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey)(nil),                                                                       // 48: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.PrefixKey
	(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config)(nil),                                                                   // 49: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.Prefix.Config
	(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State)(nil),                                                                    // 50: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.Prefix.State
	(*RoutingPolicy_DefinedSets_TagSets_TagSet)(nil),                                                                                                // 51: openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet
	(*RoutingPolicy_DefinedSets_TagSets_TagSetKey)(nil),                                                                                             // 52: openconfig.RoutingPolicy.DefinedSets.TagSets.TagSetKey
	(*RoutingPolicy_DefinedSets_TagSets_TagSet_Config)(nil),                                                                                         // 53: openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet.Config
	(*RoutingPolicy_DefinedSets_TagSets_TagSet_State)(nil),                                                                                          // 54: openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet.State
	(*RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValueUnion)(nil),                                                                           // 55: openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet.Config.TagValueUnion
	(*RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValueUnion)(nil),                                                                            // 56: openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet.State.TagValueUnion
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition)(nil),                                                                                        // 57: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinitionKey)(nil),                                                                                     // 58: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinitionKey
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config)(nil),                                                                                 // 59: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_State)(nil),                                                                                  // 60: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements)(nil),                                                                             // 61: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement)(nil),                                                                   // 62: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_StatementKey)(nil),                                                                // 63: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.StatementKey
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions)(nil),                                                           // 64: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions)(nil),                                                        // 65: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config)(nil),                                                            // 66: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State)(nil),                                                             // 67: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions)(nil),                                                // 68: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config)(nil),                                                    // 69: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions)(nil),                                               // 70: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.IsisActions
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions)(nil),                                               // 71: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State)(nil),                                                     // 72: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config)(nil),                                         // 73: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend)(nil),                               // 74: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetAsPathPrepend
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity)(nil),                                   // 75: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity)(nil),                                // 76: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State)(nil),                                          // 77: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_Config)(nil),                        // 78: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetAsPathPrepend.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_State)(nil),                         // 79: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetAsPathPrepend.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config)(nil),                            // 80: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline)(nil),                            // 81: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference)(nil),                         // 82: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Reference
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State)(nil),                             // 83: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config)(nil),                     // 84: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State)(nil),                      // 85: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion)(nil),    // 86: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline.Config.CommunitiesUnion
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion)(nil),     // 87: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline.State.CommunitiesUnion
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_Config)(nil),                  // 88: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Reference.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_State)(nil),                   // 89: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Reference.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config)(nil),                         // 90: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline)(nil),                         // 91: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference)(nil),                      // 92: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Reference
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State)(nil),                          // 93: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config)(nil),                  // 94: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State)(nil),                   // 95: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config_CommunitiesUnion)(nil), // 96: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline.Config.CommunitiesUnion
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State_CommunitiesUnion)(nil),  // 97: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline.State.CommunitiesUnion
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_Config)(nil),               // 98: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Reference.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_State)(nil),                // 99: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Reference.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config)(nil),                                        // 100: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.IsisActions.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State)(nil),                                         // 101: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.IsisActions.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config)(nil),                                        // 102: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric)(nil),                                     // 103: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State)(nil),                                         // 104: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config)(nil),                              // 105: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State)(nil),                               // 106: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions)(nil),                                          // 107: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config)(nil),                                                 // 108: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions)(nil),                                         // 109: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.IsisConditions
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface)(nil),                                         // 110: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchInterface
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet)(nil),                                       // 111: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchNeighborSet
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet)(nil),                                         // 112: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchPrefixSet
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance)(nil),                                  // 113: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchProtocolInstance
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet)(nil),                                            // 114: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchTagSet
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions)(nil),                                         // 115: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.OspfConditions
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State)(nil),                                                  // 116: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength)(nil),                             // 117: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.AsPathLength
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount)(nil),                           // 118: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.CommunityCount
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config)(nil),                                   // 119: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet)(nil),                           // 120: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.MatchAsPathSet
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State)(nil),                                    // 121: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_Config)(nil),                      // 122: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.AsPathLength.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_State)(nil),                       // 123: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.AsPathLength.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_Config)(nil),                    // 124: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.CommunityCount.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_State)(nil),                     // 125: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.CommunityCount.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_Config)(nil),                    // 126: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.MatchAsPathSet.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_State)(nil),                     // 127: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.MatchAsPathSet.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_Config)(nil),                                  // 128: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.IsisConditions.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_State)(nil),                                   // 129: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.IsisConditions.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config)(nil),                                  // 130: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchInterface.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State)(nil),                                   // 131: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchInterface.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config)(nil),                                // 132: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchNeighborSet.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State)(nil),                                 // 133: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchNeighborSet.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config)(nil),                                  // 134: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchPrefixSet.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State)(nil),                                   // 135: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchPrefixSet.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_Config)(nil),                           // 136: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchProtocolInstance.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_State)(nil),                            // 137: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchProtocolInstance.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config)(nil),                                     // 138: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchTagSet.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State)(nil),                                      // 139: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchTagSet.State
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config)(nil),                                  // 140: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.OspfConditions.Config
	(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State)(nil),                                   // 141: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.OspfConditions.State
	(*ywrapper.StringValue)(nil),                              // 142: ywrapper.StringValue
	(OpenconfigRoutingPolicyMatchSetOptionsType)(0),           // 143: openconfig.OpenconfigRoutingPolicyMatchSetOptionsType
	(OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY)(0),           // 144: openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY
	(OpenconfigRoutingPolicyPolicyResultType)(0),              // 145: openconfig.OpenconfigRoutingPolicyPolicyResultType
	(*ywrapper.UintValue)(nil),                                // 146: ywrapper.UintValue
	(OpenconfigBgpPolicyBgpOriginAttrType)(0),                 // 147: openconfig.OpenconfigBgpPolicyBgpOriginAttrType
	(OpenconfigBgpPolicyBgpSetCommunityOptionType)(0),         // 148: openconfig.OpenconfigBgpPolicyBgpSetCommunityOptionType
	(OpenconfigPolicyTypesINSTALLPROTOCOLTYPE)(0),             // 149: openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	(OpenconfigBgpTypesAFISAFITYPE)(0),                        // 150: openconfig.OpenconfigBgpTypesAFISAFITYPE
	(OpenconfigPolicyTypesATTRIBUTECOMPARISON)(0),             // 151: openconfig.OpenconfigPolicyTypesATTRIBUTECOMPARISON
	(OpenconfigRoutingPolicyMatchSetOptionsRestrictedType)(0), // 152: openconfig.OpenconfigRoutingPolicyMatchSetOptionsRestrictedType
}
var file_openconfig_routing_policy_proto_depIdxs = []int32{
	15,  // 0: openconfig.RoutingPolicy.defined_sets:type_name -> openconfig.RoutingPolicy.DefinedSets
	16,  // 1: openconfig.RoutingPolicy.policy_definitions:type_name -> openconfig.RoutingPolicy.PolicyDefinitions
	17,  // 2: openconfig.RoutingPolicy.DefinedSets.bgp_defined_sets:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets
	18,  // 3: openconfig.RoutingPolicy.DefinedSets.neighbor_sets:type_name -> openconfig.RoutingPolicy.DefinedSets.NeighborSets
	19,  // 4: openconfig.RoutingPolicy.DefinedSets.prefix_sets:type_name -> openconfig.RoutingPolicy.DefinedSets.PrefixSets
	20,  // 5: openconfig.RoutingPolicy.DefinedSets.tag_sets:type_name -> openconfig.RoutingPolicy.DefinedSets.TagSets
	58,  // 6: openconfig.RoutingPolicy.PolicyDefinitions.policy_definition:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinitionKey
	21,  // 7: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.as_path_sets:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets
	22,  // 8: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.community_sets:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets
	23,  // 9: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ext_community_sets:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets
	39,  // 10: openconfig.RoutingPolicy.DefinedSets.NeighborSets.neighbor_set:type_name -> openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSetKey
	43,  // 11: openconfig.RoutingPolicy.DefinedSets.PrefixSets.prefix_set:type_name -> openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSetKey
	52,  // 12: openconfig.RoutingPolicy.DefinedSets.TagSets.tag_set:type_name -> openconfig.RoutingPolicy.DefinedSets.TagSets.TagSetKey
	25,  // 13: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.as_path_set:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSetKey
	29,  // 14: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.community_set:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySetKey
	35,  // 15: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ext_community_set:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySetKey
	26,  // 16: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSet.config:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSet.Config
	27,  // 17: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSet.state:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSet.State
	24,  // 18: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSetKey.as_path_set:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSet
	142, // 19: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSet.Config.as_path_set_member:type_name -> ywrapper.StringValue
	142, // 20: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSet.Config.as_path_set_name:type_name -> ywrapper.StringValue
	142, // 21: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSet.State.as_path_set_member:type_name -> ywrapper.StringValue
	142, // 22: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.AsPathSets.AsPathSet.State.as_path_set_name:type_name -> ywrapper.StringValue
	30,  // 23: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.config:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.Config
	31,  // 24: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.state:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.State
	28,  // 25: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySetKey.community_set:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet
	32,  // 26: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.Config.community_member:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.Config.CommunityMemberUnion
	142, // 27: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.Config.community_set_name:type_name -> ywrapper.StringValue
	143, // 28: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.Config.match_set_options:type_name -> openconfig.OpenconfigRoutingPolicyMatchSetOptionsType
	33,  // 29: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.State.community_member:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.State.CommunityMemberUnion
	142, // 30: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.State.community_set_name:type_name -> ywrapper.StringValue
	143, // 31: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.State.match_set_options:type_name -> openconfig.OpenconfigRoutingPolicyMatchSetOptionsType
	144, // 32: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.Config.CommunityMemberUnion.community_member_openconfigbgptypesbgpwellknownstdcommunity:type_name -> openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY
	144, // 33: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.CommunitySets.CommunitySet.State.CommunityMemberUnion.community_member_openconfigbgptypesbgpwellknownstdcommunity:type_name -> openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY
	36,  // 34: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySet.config:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySet.Config
	37,  // 35: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySet.state:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySet.State
	34,  // 36: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySetKey.ext_community_set:type_name -> openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySet
	142, // 37: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySet.Config.ext_community_member:type_name -> ywrapper.StringValue
	142, // 38: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySet.Config.ext_community_set_name:type_name -> ywrapper.StringValue
	143, // 39: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySet.Config.match_set_options:type_name -> openconfig.OpenconfigRoutingPolicyMatchSetOptionsType
	142, // 40: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySet.State.ext_community_member:type_name -> ywrapper.StringValue
	142, // 41: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySet.State.ext_community_set_name:type_name -> ywrapper.StringValue
	143, // 42: openconfig.RoutingPolicy.DefinedSets.BgpDefinedSets.ExtCommunitySets.ExtCommunitySet.State.match_set_options:type_name -> openconfig.OpenconfigRoutingPolicyMatchSetOptionsType
	40,  // 43: openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSet.config:type_name -> openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSet.Config
	41,  // 44: openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSet.state:type_name -> openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSet.State
	38,  // 45: openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSetKey.neighbor_set:type_name -> openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSet
	142, // 46: openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSet.Config.address:type_name -> ywrapper.StringValue
	142, // 47: openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSet.Config.name:type_name -> ywrapper.StringValue
	142, // 48: openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSet.State.address:type_name -> ywrapper.StringValue
	142, // 49: openconfig.RoutingPolicy.DefinedSets.NeighborSets.NeighborSet.State.name:type_name -> ywrapper.StringValue
	44,  // 50: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.config:type_name -> openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Config
	45,  // 51: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.prefixes:type_name -> openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes
	46,  // 52: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.state:type_name -> openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.State
	42,  // 53: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSetKey.prefix_set:type_name -> openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet
	0,   // 54: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Config.mode:type_name -> openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Config.Mode
	142, // 55: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Config.name:type_name -> ywrapper.StringValue
	48,  // 56: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.prefix:type_name -> openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.PrefixKey
	1,   // 57: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.State.mode:type_name -> openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.State.Mode
	142, // 58: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.State.name:type_name -> ywrapper.StringValue
	49,  // 59: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.Prefix.config:type_name -> openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.Prefix.Config
	50,  // 60: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.Prefix.state:type_name -> openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.Prefix.State
	47,  // 61: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.PrefixKey.prefix:type_name -> openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.Prefix
	142, // 62: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.Prefix.Config.ip_prefix:type_name -> ywrapper.StringValue
	142, // 63: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.Prefix.Config.masklength_range:type_name -> ywrapper.StringValue
	142, // 64: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.Prefix.State.ip_prefix:type_name -> ywrapper.StringValue
	142, // 65: openconfig.RoutingPolicy.DefinedSets.PrefixSets.PrefixSet.Prefixes.Prefix.State.masklength_range:type_name -> ywrapper.StringValue
	53,  // 66: openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet.config:type_name -> openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet.Config
	54,  // 67: openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet.state:type_name -> openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet.State
	51,  // 68: openconfig.RoutingPolicy.DefinedSets.TagSets.TagSetKey.tag_set:type_name -> openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet
	142, // 69: openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet.Config.name:type_name -> ywrapper.StringValue
	55,  // 70: openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet.Config.tag_value:type_name -> openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet.Config.TagValueUnion
	142, // 71: openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet.State.name:type_name -> ywrapper.StringValue
	56,  // 72: openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet.State.tag_value:type_name -> openconfig.RoutingPolicy.DefinedSets.TagSets.TagSet.State.TagValueUnion
	59,  // 73: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Config
	60,  // 74: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.State
	61,  // 75: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.statements:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements
	57,  // 76: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinitionKey.policy_definition:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition
	142, // 77: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Config.name:type_name -> ywrapper.StringValue
	142, // 78: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.State.name:type_name -> ywrapper.StringValue
	63,  // 79: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.statement:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.StatementKey
	64,  // 80: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.actions:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions
	65,  // 81: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.conditions:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions
	66,  // 82: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Config
	67,  // 83: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.State
	62,  // 84: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.StatementKey.statement:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement
	68,  // 85: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.bgp_actions:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions
	69,  // 86: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.Config
	70,  // 87: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.isis_actions:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.IsisActions
	71,  // 88: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.ospf_actions:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions
	72,  // 89: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.State
	107, // 90: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.bgp_conditions:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions
	108, // 91: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.Config
	109, // 92: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.isis_conditions:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.IsisConditions
	110, // 93: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.match_interface:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchInterface
	111, // 94: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.match_neighbor_set:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchNeighborSet
	112, // 95: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.match_prefix_set:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchPrefixSet
	113, // 96: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.match_protocol_instance:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchProtocolInstance
	114, // 97: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.match_tag_set:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchTagSet
	115, // 98: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.ospf_conditions:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.OspfConditions
	116, // 99: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.State
	142, // 100: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Config.name:type_name -> ywrapper.StringValue
	142, // 101: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.State.name:type_name -> ywrapper.StringValue
	73,  // 102: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.Config
	74,  // 103: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.set_as_path_prepend:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetAsPathPrepend
	75,  // 104: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.set_community:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity
	76,  // 105: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.set_ext_community:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity
	77,  // 106: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.State
	145, // 107: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.Config.policy_result:type_name -> openconfig.OpenconfigRoutingPolicyPolicyResultType
	100, // 108: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.IsisActions.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.IsisActions.Config
	101, // 109: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.IsisActions.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.IsisActions.State
	102, // 110: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.Config
	103, // 111: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.set_metric:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric
	104, // 112: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.State
	145, // 113: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.State.policy_result:type_name -> openconfig.OpenconfigRoutingPolicyPolicyResultType
	146, // 114: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.Config.set_local_pref:type_name -> ywrapper.UintValue
	2,   // 115: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.Config.set_med_setmed:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.Config.SetMed
	3,   // 116: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.Config.set_next_hop_setnexthop:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.Config.SetNextHop
	147, // 117: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.Config.set_route_origin:type_name -> openconfig.OpenconfigBgpPolicyBgpOriginAttrType
	78,  // 118: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetAsPathPrepend.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetAsPathPrepend.Config
	79,  // 119: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetAsPathPrepend.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetAsPathPrepend.State
	80,  // 120: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Config
	81,  // 121: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.inline:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline
	82,  // 122: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.reference:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Reference
	83,  // 123: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.State
	90,  // 124: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Config
	91,  // 125: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.inline:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline
	92,  // 126: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.reference:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Reference
	93,  // 127: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.State
	146, // 128: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.State.set_local_pref:type_name -> ywrapper.UintValue
	8,   // 129: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.State.set_med_setmed:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.State.SetMed
	9,   // 130: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.State.set_next_hop_setnexthop:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.State.SetNextHop
	147, // 131: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.State.set_route_origin:type_name -> openconfig.OpenconfigBgpPolicyBgpOriginAttrType
	146, // 132: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetAsPathPrepend.Config.asn:type_name -> ywrapper.UintValue
	146, // 133: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetAsPathPrepend.Config.repeat_n:type_name -> ywrapper.UintValue
	146, // 134: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetAsPathPrepend.State.asn:type_name -> ywrapper.UintValue
	146, // 135: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetAsPathPrepend.State.repeat_n:type_name -> ywrapper.UintValue
	4,   // 136: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Config.method:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Config.Method
	148, // 137: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Config.options:type_name -> openconfig.OpenconfigBgpPolicyBgpSetCommunityOptionType
	84,  // 138: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline.Config
	85,  // 139: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline.State
	88,  // 140: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Reference.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Reference.Config
	89,  // 141: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Reference.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Reference.State
	5,   // 142: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.State.method:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.State.Method
	148, // 143: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.State.options:type_name -> openconfig.OpenconfigBgpPolicyBgpSetCommunityOptionType
	86,  // 144: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline.Config.communities:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline.Config.CommunitiesUnion
	87,  // 145: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline.State.communities:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline.State.CommunitiesUnion
	144, // 146: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline.Config.CommunitiesUnion.communities_openconfigbgptypesbgpwellknownstdcommunity:type_name -> openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY
	144, // 147: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Inline.State.CommunitiesUnion.communities_openconfigbgptypesbgpwellknownstdcommunity:type_name -> openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY
	142, // 148: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Reference.Config.community_set_ref:type_name -> ywrapper.StringValue
	142, // 149: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetCommunity.Reference.State.community_set_ref:type_name -> ywrapper.StringValue
	6,   // 150: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Config.method:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Config.Method
	148, // 151: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Config.options:type_name -> openconfig.OpenconfigBgpPolicyBgpSetCommunityOptionType
	94,  // 152: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline.Config
	95,  // 153: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline.State
	98,  // 154: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Reference.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Reference.Config
	99,  // 155: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Reference.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Reference.State
	7,   // 156: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.State.method:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.State.Method
	148, // 157: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.State.options:type_name -> openconfig.OpenconfigBgpPolicyBgpSetCommunityOptionType
	96,  // 158: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline.Config.communities:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline.Config.CommunitiesUnion
	97,  // 159: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline.State.communities:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline.State.CommunitiesUnion
	144, // 160: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline.Config.CommunitiesUnion.communities_openconfigbgptypesbgpwellknownstdcommunity:type_name -> openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY
	144, // 161: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Inline.State.CommunitiesUnion.communities_openconfigbgptypesbgpwellknownstdcommunity:type_name -> openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY
	142, // 162: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Reference.Config.ext_community_set_ref:type_name -> ywrapper.StringValue
	142, // 163: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.BgpActions.SetExtCommunity.Reference.State.ext_community_set_ref:type_name -> ywrapper.StringValue
	146, // 164: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.IsisActions.Config.set_level:type_name -> ywrapper.UintValue
	146, // 165: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.IsisActions.Config.set_metric:type_name -> ywrapper.UintValue
	146, // 166: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.IsisActions.Config.set_metric_type:type_name -> ywrapper.UintValue
	146, // 167: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.IsisActions.State.set_level:type_name -> ywrapper.UintValue
	146, // 168: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.IsisActions.State.set_metric:type_name -> ywrapper.UintValue
	146, // 169: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.IsisActions.State.set_metric_type:type_name -> ywrapper.UintValue
	105, // 170: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric.Config
	106, // 171: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric.State
	146, // 172: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric.Config.metric:type_name -> ywrapper.UintValue
	10,  // 173: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric.Config.metric_type:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric.Config.MetricType
	146, // 174: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric.State.metric:type_name -> ywrapper.UintValue
	11,  // 175: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric.State.metric_type:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Actions.OspfActions.SetMetric.State.MetricType
	117, // 176: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.as_path_length:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.AsPathLength
	118, // 177: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.community_count:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.CommunityCount
	119, // 178: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.Config
	120, // 179: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.match_as_path_set:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.MatchAsPathSet
	121, // 180: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.State
	142, // 181: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.Config.call_policy:type_name -> ywrapper.StringValue
	149, // 182: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.Config.install_protocol_eq:type_name -> openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	128, // 183: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.IsisConditions.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.IsisConditions.Config
	129, // 184: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.IsisConditions.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.IsisConditions.State
	130, // 185: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchInterface.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchInterface.Config
	131, // 186: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchInterface.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchInterface.State
	132, // 187: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchNeighborSet.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchNeighborSet.Config
	133, // 188: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchNeighborSet.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchNeighborSet.State
	134, // 189: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchPrefixSet.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchPrefixSet.Config
	135, // 190: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchPrefixSet.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchPrefixSet.State
	136, // 191: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchProtocolInstance.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchProtocolInstance.Config
	137, // 192: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchProtocolInstance.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchProtocolInstance.State
	138, // 193: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchTagSet.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchTagSet.Config
	139, // 194: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchTagSet.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchTagSet.State
	140, // 195: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.OspfConditions.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.OspfConditions.Config
	141, // 196: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.OspfConditions.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.OspfConditions.State
	142, // 197: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.State.call_policy:type_name -> ywrapper.StringValue
	149, // 198: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.State.install_protocol_eq:type_name -> openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	122, // 199: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.AsPathLength.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.AsPathLength.Config
	123, // 200: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.AsPathLength.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.AsPathLength.State
	124, // 201: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.CommunityCount.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.CommunityCount.Config
	125, // 202: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.CommunityCount.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.CommunityCount.State
	150, // 203: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.Config.afi_safi_in:type_name -> openconfig.OpenconfigBgpTypesAFISAFITYPE
	142, // 204: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.Config.community_set:type_name -> ywrapper.StringValue
	142, // 205: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.Config.ext_community_set:type_name -> ywrapper.StringValue
	146, // 206: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.Config.local_pref_eq:type_name -> ywrapper.UintValue
	146, // 207: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.Config.med_eq:type_name -> ywrapper.UintValue
	142, // 208: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.Config.next_hop_in:type_name -> ywrapper.StringValue
	147, // 209: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.Config.origin_eq:type_name -> openconfig.OpenconfigBgpPolicyBgpOriginAttrType
	12,  // 210: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.Config.route_type:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.Config.RouteType
	126, // 211: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.MatchAsPathSet.config:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.MatchAsPathSet.Config
	127, // 212: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.MatchAsPathSet.state:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.MatchAsPathSet.State
	150, // 213: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.State.afi_safi_in:type_name -> openconfig.OpenconfigBgpTypesAFISAFITYPE
	142, // 214: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.State.community_set:type_name -> ywrapper.StringValue
	142, // 215: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.State.ext_community_set:type_name -> ywrapper.StringValue
	146, // 216: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.State.local_pref_eq:type_name -> ywrapper.UintValue
	146, // 217: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.State.med_eq:type_name -> ywrapper.UintValue
	142, // 218: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.State.next_hop_in:type_name -> ywrapper.StringValue
	147, // 219: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.State.origin_eq:type_name -> openconfig.OpenconfigBgpPolicyBgpOriginAttrType
	13,  // 220: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.State.route_type:type_name -> openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.State.RouteType
	151, // 221: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.AsPathLength.Config.operator:type_name -> openconfig.OpenconfigPolicyTypesATTRIBUTECOMPARISON
	146, // 222: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.AsPathLength.Config.value:type_name -> ywrapper.UintValue
	151, // 223: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.AsPathLength.State.operator:type_name -> openconfig.OpenconfigPolicyTypesATTRIBUTECOMPARISON
	146, // 224: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.AsPathLength.State.value:type_name -> ywrapper.UintValue
	151, // 225: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.CommunityCount.Config.operator:type_name -> openconfig.OpenconfigPolicyTypesATTRIBUTECOMPARISON
	146, // 226: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.CommunityCount.Config.value:type_name -> ywrapper.UintValue
	151, // 227: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.CommunityCount.State.operator:type_name -> openconfig.OpenconfigPolicyTypesATTRIBUTECOMPARISON
	146, // 228: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.CommunityCount.State.value:type_name -> ywrapper.UintValue
	142, // 229: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.MatchAsPathSet.Config.as_path_set:type_name -> ywrapper.StringValue
	143, // 230: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.MatchAsPathSet.Config.match_set_options:type_name -> openconfig.OpenconfigRoutingPolicyMatchSetOptionsType
	142, // 231: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.MatchAsPathSet.State.as_path_set:type_name -> ywrapper.StringValue
	143, // 232: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.BgpConditions.MatchAsPathSet.State.match_set_options:type_name -> openconfig.OpenconfigRoutingPolicyMatchSetOptionsType
	146, // 233: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.IsisConditions.Config.level_eq:type_name -> ywrapper.UintValue
	146, // 234: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.IsisConditions.State.level_eq:type_name -> ywrapper.UintValue
	142, // 235: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchInterface.Config.interface:type_name -> ywrapper.StringValue
	146, // 236: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchInterface.Config.subinterface:type_name -> ywrapper.UintValue
	142, // 237: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchInterface.State.interface:type_name -> ywrapper.StringValue
	146, // 238: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchInterface.State.subinterface:type_name -> ywrapper.UintValue
	152, // 239: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchNeighborSet.Config.match_set_options:type_name -> openconfig.OpenconfigRoutingPolicyMatchSetOptionsRestrictedType
	142, // 240: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchNeighborSet.Config.neighbor_set:type_name -> ywrapper.StringValue
	152, // 241: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchNeighborSet.State.match_set_options:type_name -> openconfig.OpenconfigRoutingPolicyMatchSetOptionsRestrictedType
	142, // 242: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchNeighborSet.State.neighbor_set:type_name -> ywrapper.StringValue
	152, // 243: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchPrefixSet.Config.match_set_options:type_name -> openconfig.OpenconfigRoutingPolicyMatchSetOptionsRestrictedType
	142, // 244: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchPrefixSet.Config.prefix_set:type_name -> ywrapper.StringValue
	152, // 245: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchPrefixSet.State.match_set_options:type_name -> openconfig.OpenconfigRoutingPolicyMatchSetOptionsRestrictedType
	142, // 246: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchPrefixSet.State.prefix_set:type_name -> ywrapper.StringValue
	149, // 247: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchProtocolInstance.Config.protocol_identifier:type_name -> openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	142, // 248: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchProtocolInstance.Config.protocol_name:type_name -> ywrapper.StringValue
	149, // 249: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchProtocolInstance.State.protocol_identifier:type_name -> openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	142, // 250: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchProtocolInstance.State.protocol_name:type_name -> ywrapper.StringValue
	152, // 251: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchTagSet.Config.match_set_options:type_name -> openconfig.OpenconfigRoutingPolicyMatchSetOptionsRestrictedType
	142, // 252: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchTagSet.Config.tag_set:type_name -> ywrapper.StringValue
	152, // 253: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchTagSet.State.match_set_options:type_name -> openconfig.OpenconfigRoutingPolicyMatchSetOptionsRestrictedType
	142, // 254: openconfig.RoutingPolicy.PolicyDefinitions.PolicyDefinition.Statements.Statement.Conditions.MatchTagSet.State.tag_set:type_name -> ywrapper.StringValue
	255, // [255:255] is the sub-list for method output_type
	255, // [255:255] is the sub-list for method input_type
	255, // [255:255] is the sub-list for extension type_name
	255, // [255:255] is the sub-list for extension extendee
	0,   // [0:255] is the sub-list for field type_name
}

func init() { file_openconfig_routing_policy_proto_init() }
func file_openconfig_routing_policy_proto_init() {
	if File_openconfig_routing_policy_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_routing_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_NeighborSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_PrefixSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_TagSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSets_AsPathSet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_Config_CommunityMemberUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySets_CommunitySet_State_CommunityMemberUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySets_ExtCommunitySet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_NeighborSets_NeighborSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_NeighborSets_NeighborSetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_PrefixKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_TagSets_TagSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_TagSets_TagSetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_TagSets_TagSet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_TagSets_TagSet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValueUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValueUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinitionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_StatementKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetAsPathPrepend_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_Config_CommunitiesUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Inline_State_CommunitiesUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetCommunity_Reference_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_Config_CommunitiesUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Inline_State_CommunitiesUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_SetExtCommunity_Reference_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_IsisActions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_SetMetric_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_AsPathLength_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_CommunityCount_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_BgpConditions_MatchAsPathSet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_IsisConditions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchProtocolInstance_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_routing_policy_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openconfig_routing_policy_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedSetmed)(nil),
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedString)(nil),
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetMedUint64)(nil),
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHopSetnexthop)(nil),
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_Config_SetNextHopString)(nil),
	}
	file_openconfig_routing_policy_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedSetmed)(nil),
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedString)(nil),
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetMedUint64)(nil),
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHopSetnexthop)(nil),
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_BgpActions_State_SetNextHopString)(nil),
	}
	file_openconfig_routing_policy_proto_msgTypes[88].OneofWrappers = []interface{}{
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetAreaString)(nil),
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_Config_SetAreaUint64)(nil),
	}
	file_openconfig_routing_policy_proto_msgTypes[90].OneofWrappers = []interface{}{
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetAreaString)(nil),
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_OspfActions_State_SetAreaUint64)(nil),
	}
	file_openconfig_routing_policy_proto_msgTypes[126].OneofWrappers = []interface{}{
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEqString)(nil),
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_Config_AreaEqUint64)(nil),
	}
	file_openconfig_routing_policy_proto_msgTypes[127].OneofWrappers = []interface{}{
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEqString)(nil),
		(*RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_OspfConditions_State_AreaEqUint64)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_routing_policy_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   128,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_routing_policy_proto_goTypes,
		DependencyIndexes: file_openconfig_routing_policy_proto_depIdxs,
		EnumInfos:         file_openconfig_routing_policy_proto_enumTypes,
		MessageInfos:      file_openconfig_routing_policy_proto_msgTypes,
	}.Build()
	File_openconfig_routing_policy_proto = out.File
	file_openconfig_routing_policy_proto_rawDesc = nil
	file_openconfig_routing_policy_proto_goTypes = nil
	file_openconfig_routing_policy_proto_depIdxs = nil
}
