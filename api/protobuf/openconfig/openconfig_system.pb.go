// openconfig.openconfig_system is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_system.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type System_Aaa_Accounting_Events_Event_Config_Record int32

const (
	System_Aaa_Accounting_Events_Event_Config_RECORD_UNSET      System_Aaa_Accounting_Events_Event_Config_Record = 0
	System_Aaa_Accounting_Events_Event_Config_RECORD_START_STOP System_Aaa_Accounting_Events_Event_Config_Record = 1
	System_Aaa_Accounting_Events_Event_Config_RECORD_STOP       System_Aaa_Accounting_Events_Event_Config_Record = 2
)

// Enum value maps for System_Aaa_Accounting_Events_Event_Config_Record.
var (
	System_Aaa_Accounting_Events_Event_Config_Record_name = map[int32]string{
		0: "RECORD_UNSET",
		1: "RECORD_START_STOP",
		2: "RECORD_STOP",
	}
	System_Aaa_Accounting_Events_Event_Config_Record_value = map[string]int32{
		"RECORD_UNSET":      0,
		"RECORD_START_STOP": 1,
		"RECORD_STOP":       2,
	}
)

func (x System_Aaa_Accounting_Events_Event_Config_Record) Enum() *System_Aaa_Accounting_Events_Event_Config_Record {
	p := new(System_Aaa_Accounting_Events_Event_Config_Record)
	*p = x
	return p
}

func (x System_Aaa_Accounting_Events_Event_Config_Record) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System_Aaa_Accounting_Events_Event_Config_Record) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_system_proto_enumTypes[0].Descriptor()
}

func (System_Aaa_Accounting_Events_Event_Config_Record) Type() protoreflect.EnumType {
	return &file_openconfig_system_proto_enumTypes[0]
}

func (x System_Aaa_Accounting_Events_Event_Config_Record) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System_Aaa_Accounting_Events_Event_Config_Record.Descriptor instead.
func (System_Aaa_Accounting_Events_Event_Config_Record) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0, 0}
}

type System_Aaa_Accounting_Events_Event_State_Record int32

const (
	System_Aaa_Accounting_Events_Event_State_RECORD_UNSET      System_Aaa_Accounting_Events_Event_State_Record = 0
	System_Aaa_Accounting_Events_Event_State_RECORD_START_STOP System_Aaa_Accounting_Events_Event_State_Record = 1
	System_Aaa_Accounting_Events_Event_State_RECORD_STOP       System_Aaa_Accounting_Events_Event_State_Record = 2
)

// Enum value maps for System_Aaa_Accounting_Events_Event_State_Record.
var (
	System_Aaa_Accounting_Events_Event_State_Record_name = map[int32]string{
		0: "RECORD_UNSET",
		1: "RECORD_START_STOP",
		2: "RECORD_STOP",
	}
	System_Aaa_Accounting_Events_Event_State_Record_value = map[string]int32{
		"RECORD_UNSET":      0,
		"RECORD_START_STOP": 1,
		"RECORD_STOP":       2,
	}
)

func (x System_Aaa_Accounting_Events_Event_State_Record) Enum() *System_Aaa_Accounting_Events_Event_State_Record {
	p := new(System_Aaa_Accounting_Events_Event_State_Record)
	*p = x
	return p
}

func (x System_Aaa_Accounting_Events_Event_State_Record) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System_Aaa_Accounting_Events_Event_State_Record) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_system_proto_enumTypes[1].Descriptor()
}

func (System_Aaa_Accounting_Events_Event_State_Record) Type() protoreflect.EnumType {
	return &file_openconfig_system_proto_enumTypes[1]
}

func (x System_Aaa_Accounting_Events_Event_State_Record) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System_Aaa_Accounting_Events_Event_State_Record.Descriptor instead.
func (System_Aaa_Accounting_Events_Event_State_Record) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 1, 0}
}

type System_Cpus_Cpu_State_Index int32

const (
	System_Cpus_Cpu_State_INDEX_UNSET System_Cpus_Cpu_State_Index = 0
	System_Cpus_Cpu_State_INDEX_ALL   System_Cpus_Cpu_State_Index = 1
)

// Enum value maps for System_Cpus_Cpu_State_Index.
var (
	System_Cpus_Cpu_State_Index_name = map[int32]string{
		0: "INDEX_UNSET",
		1: "INDEX_ALL",
	}
	System_Cpus_Cpu_State_Index_value = map[string]int32{
		"INDEX_UNSET": 0,
		"INDEX_ALL":   1,
	}
)

func (x System_Cpus_Cpu_State_Index) Enum() *System_Cpus_Cpu_State_Index {
	p := new(System_Cpus_Cpu_State_Index)
	*p = x
	return p
}

func (x System_Cpus_Cpu_State_Index) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System_Cpus_Cpu_State_Index) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_system_proto_enumTypes[2].Descriptor()
}

func (System_Cpus_Cpu_State_Index) Type() protoreflect.EnumType {
	return &file_openconfig_system_proto_enumTypes[2]
}

func (x System_Cpus_Cpu_State_Index) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System_Cpus_Cpu_State_Index.Descriptor instead.
func (System_Cpus_Cpu_State_Index) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 4, 0, 0, 0}
}

type System_Cpus_CpuKey_Index int32

const (
	System_Cpus_CpuKey_INDEX_UNSET System_Cpus_CpuKey_Index = 0
	System_Cpus_CpuKey_INDEX_ALL   System_Cpus_CpuKey_Index = 1
)

// Enum value maps for System_Cpus_CpuKey_Index.
var (
	System_Cpus_CpuKey_Index_name = map[int32]string{
		0: "INDEX_UNSET",
		1: "INDEX_ALL",
	}
	System_Cpus_CpuKey_Index_value = map[string]int32{
		"INDEX_UNSET": 0,
		"INDEX_ALL":   1,
	}
)

func (x System_Cpus_CpuKey_Index) Enum() *System_Cpus_CpuKey_Index {
	p := new(System_Cpus_CpuKey_Index)
	*p = x
	return p
}

func (x System_Cpus_CpuKey_Index) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System_Cpus_CpuKey_Index) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_system_proto_enumTypes[3].Descriptor()
}

func (System_Cpus_CpuKey_Index) Type() protoreflect.EnumType {
	return &file_openconfig_system_proto_enumTypes[3]
}

func (x System_Cpus_CpuKey_Index) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System_Cpus_CpuKey_Index.Descriptor instead.
func (System_Cpus_CpuKey_Index) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 4, 1, 0}
}

type System_GrpcServer_Config_ListenAddresses int32

const (
	System_GrpcServer_Config_LISTENADDRESSES_UNSET System_GrpcServer_Config_ListenAddresses = 0
	System_GrpcServer_Config_LISTENADDRESSES_ANY   System_GrpcServer_Config_ListenAddresses = 1
)

// Enum value maps for System_GrpcServer_Config_ListenAddresses.
var (
	System_GrpcServer_Config_ListenAddresses_name = map[int32]string{
		0: "LISTENADDRESSES_UNSET",
		1: "LISTENADDRESSES_ANY",
	}
	System_GrpcServer_Config_ListenAddresses_value = map[string]int32{
		"LISTENADDRESSES_UNSET": 0,
		"LISTENADDRESSES_ANY":   1,
	}
)

func (x System_GrpcServer_Config_ListenAddresses) Enum() *System_GrpcServer_Config_ListenAddresses {
	p := new(System_GrpcServer_Config_ListenAddresses)
	*p = x
	return p
}

func (x System_GrpcServer_Config_ListenAddresses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System_GrpcServer_Config_ListenAddresses) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_system_proto_enumTypes[4].Descriptor()
}

func (System_GrpcServer_Config_ListenAddresses) Type() protoreflect.EnumType {
	return &file_openconfig_system_proto_enumTypes[4]
}

func (x System_GrpcServer_Config_ListenAddresses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System_GrpcServer_Config_ListenAddresses.Descriptor instead.
func (System_GrpcServer_Config_ListenAddresses) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 6, 0, 0}
}

type System_GrpcServer_State_ListenAddresses int32

const (
	System_GrpcServer_State_LISTENADDRESSES_UNSET System_GrpcServer_State_ListenAddresses = 0
	System_GrpcServer_State_LISTENADDRESSES_ANY   System_GrpcServer_State_ListenAddresses = 1
)

// Enum value maps for System_GrpcServer_State_ListenAddresses.
var (
	System_GrpcServer_State_ListenAddresses_name = map[int32]string{
		0: "LISTENADDRESSES_UNSET",
		1: "LISTENADDRESSES_ANY",
	}
	System_GrpcServer_State_ListenAddresses_value = map[string]int32{
		"LISTENADDRESSES_UNSET": 0,
		"LISTENADDRESSES_ANY":   1,
	}
)

func (x System_GrpcServer_State_ListenAddresses) Enum() *System_GrpcServer_State_ListenAddresses {
	p := new(System_GrpcServer_State_ListenAddresses)
	*p = x
	return p
}

func (x System_GrpcServer_State_ListenAddresses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System_GrpcServer_State_ListenAddresses) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_system_proto_enumTypes[5].Descriptor()
}

func (System_GrpcServer_State_ListenAddresses) Type() protoreflect.EnumType {
	return &file_openconfig_system_proto_enumTypes[5]
}

func (x System_GrpcServer_State_ListenAddresses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System_GrpcServer_State_ListenAddresses.Descriptor instead.
func (System_GrpcServer_State_ListenAddresses) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 6, 1, 0}
}

type System_Ntp_Servers_Server_Config_AssociationType int32

const (
	System_Ntp_Servers_Server_Config_ASSOCIATIONTYPE_SERVER System_Ntp_Servers_Server_Config_AssociationType = 0
	System_Ntp_Servers_Server_Config_ASSOCIATIONTYPE_PEER   System_Ntp_Servers_Server_Config_AssociationType = 2
	System_Ntp_Servers_Server_Config_ASSOCIATIONTYPE_POOL   System_Ntp_Servers_Server_Config_AssociationType = 3
)

// Enum value maps for System_Ntp_Servers_Server_Config_AssociationType.
var (
	System_Ntp_Servers_Server_Config_AssociationType_name = map[int32]string{
		0: "ASSOCIATIONTYPE_SERVER",
		2: "ASSOCIATIONTYPE_PEER",
		3: "ASSOCIATIONTYPE_POOL",
	}
	System_Ntp_Servers_Server_Config_AssociationType_value = map[string]int32{
		"ASSOCIATIONTYPE_SERVER": 0,
		"ASSOCIATIONTYPE_PEER":   2,
		"ASSOCIATIONTYPE_POOL":   3,
	}
)

func (x System_Ntp_Servers_Server_Config_AssociationType) Enum() *System_Ntp_Servers_Server_Config_AssociationType {
	p := new(System_Ntp_Servers_Server_Config_AssociationType)
	*p = x
	return p
}

func (x System_Ntp_Servers_Server_Config_AssociationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System_Ntp_Servers_Server_Config_AssociationType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_system_proto_enumTypes[6].Descriptor()
}

func (System_Ntp_Servers_Server_Config_AssociationType) Type() protoreflect.EnumType {
	return &file_openconfig_system_proto_enumTypes[6]
}

func (x System_Ntp_Servers_Server_Config_AssociationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System_Ntp_Servers_Server_Config_AssociationType.Descriptor instead.
func (System_Ntp_Servers_Server_Config_AssociationType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11, 2, 0, 0, 0}
}

type System_Ntp_Servers_Server_State_AssociationType int32

const (
	System_Ntp_Servers_Server_State_ASSOCIATIONTYPE_SERVER System_Ntp_Servers_Server_State_AssociationType = 0
	System_Ntp_Servers_Server_State_ASSOCIATIONTYPE_PEER   System_Ntp_Servers_Server_State_AssociationType = 2
	System_Ntp_Servers_Server_State_ASSOCIATIONTYPE_POOL   System_Ntp_Servers_Server_State_AssociationType = 3
)

// Enum value maps for System_Ntp_Servers_Server_State_AssociationType.
var (
	System_Ntp_Servers_Server_State_AssociationType_name = map[int32]string{
		0: "ASSOCIATIONTYPE_SERVER",
		2: "ASSOCIATIONTYPE_PEER",
		3: "ASSOCIATIONTYPE_POOL",
	}
	System_Ntp_Servers_Server_State_AssociationType_value = map[string]int32{
		"ASSOCIATIONTYPE_SERVER": 0,
		"ASSOCIATIONTYPE_PEER":   2,
		"ASSOCIATIONTYPE_POOL":   3,
	}
)

func (x System_Ntp_Servers_Server_State_AssociationType) Enum() *System_Ntp_Servers_Server_State_AssociationType {
	p := new(System_Ntp_Servers_Server_State_AssociationType)
	*p = x
	return p
}

func (x System_Ntp_Servers_Server_State_AssociationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System_Ntp_Servers_Server_State_AssociationType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_system_proto_enumTypes[7].Descriptor()
}

func (System_Ntp_Servers_Server_State_AssociationType) Type() protoreflect.EnumType {
	return &file_openconfig_system_proto_enumTypes[7]
}

func (x System_Ntp_Servers_Server_State_AssociationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System_Ntp_Servers_Server_State_AssociationType.Descriptor instead.
func (System_Ntp_Servers_Server_State_AssociationType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11, 2, 0, 1, 0}
}

type System_SshServer_Config_ProtocolVersion int32

const (
	System_SshServer_Config_PROTOCOLVERSION_V2    System_SshServer_Config_ProtocolVersion = 0
	System_SshServer_Config_PROTOCOLVERSION_V1    System_SshServer_Config_ProtocolVersion = 2
	System_SshServer_Config_PROTOCOLVERSION_V1_V2 System_SshServer_Config_ProtocolVersion = 3
)

// Enum value maps for System_SshServer_Config_ProtocolVersion.
var (
	System_SshServer_Config_ProtocolVersion_name = map[int32]string{
		0: "PROTOCOLVERSION_V2",
		2: "PROTOCOLVERSION_V1",
		3: "PROTOCOLVERSION_V1_V2",
	}
	System_SshServer_Config_ProtocolVersion_value = map[string]int32{
		"PROTOCOLVERSION_V2":    0,
		"PROTOCOLVERSION_V1":    2,
		"PROTOCOLVERSION_V1_V2": 3,
	}
)

func (x System_SshServer_Config_ProtocolVersion) Enum() *System_SshServer_Config_ProtocolVersion {
	p := new(System_SshServer_Config_ProtocolVersion)
	*p = x
	return p
}

func (x System_SshServer_Config_ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System_SshServer_Config_ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_system_proto_enumTypes[8].Descriptor()
}

func (System_SshServer_Config_ProtocolVersion) Type() protoreflect.EnumType {
	return &file_openconfig_system_proto_enumTypes[8]
}

func (x System_SshServer_Config_ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System_SshServer_Config_ProtocolVersion.Descriptor instead.
func (System_SshServer_Config_ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 14, 0, 0}
}

type System_SshServer_State_ProtocolVersion int32

const (
	System_SshServer_State_PROTOCOLVERSION_V2    System_SshServer_State_ProtocolVersion = 0
	System_SshServer_State_PROTOCOLVERSION_V1    System_SshServer_State_ProtocolVersion = 2
	System_SshServer_State_PROTOCOLVERSION_V1_V2 System_SshServer_State_ProtocolVersion = 3
)

// Enum value maps for System_SshServer_State_ProtocolVersion.
var (
	System_SshServer_State_ProtocolVersion_name = map[int32]string{
		0: "PROTOCOLVERSION_V2",
		2: "PROTOCOLVERSION_V1",
		3: "PROTOCOLVERSION_V1_V2",
	}
	System_SshServer_State_ProtocolVersion_value = map[string]int32{
		"PROTOCOLVERSION_V2":    0,
		"PROTOCOLVERSION_V1":    2,
		"PROTOCOLVERSION_V1_V2": 3,
	}
)

func (x System_SshServer_State_ProtocolVersion) Enum() *System_SshServer_State_ProtocolVersion {
	p := new(System_SshServer_State_ProtocolVersion)
	*p = x
	return p
}

func (x System_SshServer_State_ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System_SshServer_State_ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_system_proto_enumTypes[9].Descriptor()
}

func (System_SshServer_State_ProtocolVersion) Type() protoreflect.EnumType {
	return &file_openconfig_system_proto_enumTypes[9]
}

func (x System_SshServer_State_ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System_SshServer_State_ProtocolVersion.Descriptor instead.
func (System_SshServer_State_ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 14, 1, 0}
}

type System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aaa          *System_Aaa          `protobuf:"bytes,128178706,opt,name=aaa,proto3" json:"aaa,omitempty"`
	Alarms       *System_Alarms       `protobuf:"bytes,388714845,opt,name=alarms,proto3" json:"alarms,omitempty"`
	Clock        *System_Clock        `protobuf:"bytes,298112203,opt,name=clock,proto3" json:"clock,omitempty"`
	Config       *System_Config       `protobuf:"bytes,99961649,opt,name=config,proto3" json:"config,omitempty"`
	Cpus         *System_Cpus         `protobuf:"bytes,105197190,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Dns          *System_Dns          `protobuf:"bytes,380694544,opt,name=dns,proto3" json:"dns,omitempty"`
	GrpcServer   *System_GrpcServer   `protobuf:"bytes,115074741,opt,name=grpc_server,json=grpcServer,proto3" json:"grpc_server,omitempty"`
	License      *System_License      `protobuf:"bytes,24927320,opt,name=license,proto3" json:"license,omitempty"`
	Logging      *System_Logging      `protobuf:"bytes,147116502,opt,name=logging,proto3" json:"logging,omitempty"`
	Memory       *System_Memory       `protobuf:"bytes,238855198,opt,name=memory,proto3" json:"memory,omitempty"`
	Messages     *System_Messages     `protobuf:"bytes,243479275,opt,name=messages,proto3" json:"messages,omitempty"`
	Ntp          *System_Ntp          `protobuf:"bytes,214492667,opt,name=ntp,proto3" json:"ntp,omitempty"`
	Openflow     *System_Openflow     `protobuf:"bytes,471419951,opt,name=openflow,proto3" json:"openflow,omitempty"`
	Processes    *System_Processes    `protobuf:"bytes,133979618,opt,name=processes,proto3" json:"processes,omitempty"`
	SshServer    *System_SshServer    `protobuf:"bytes,92111553,opt,name=ssh_server,json=sshServer,proto3" json:"ssh_server,omitempty"`
	State        *System_State        `protobuf:"bytes,510750630,opt,name=state,proto3" json:"state,omitempty"`
	TelnetServer *System_TelnetServer `protobuf:"bytes,426646341,opt,name=telnet_server,json=telnetServer,proto3" json:"telnet_server,omitempty"`
}

func (x *System) Reset() {
	*x = System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System) ProtoMessage() {}

func (x *System) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System.ProtoReflect.Descriptor instead.
func (*System) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0}
}

func (x *System) GetAaa() *System_Aaa {
	if x != nil {
		return x.Aaa
	}
	return nil
}

func (x *System) GetAlarms() *System_Alarms {
	if x != nil {
		return x.Alarms
	}
	return nil
}

func (x *System) GetClock() *System_Clock {
	if x != nil {
		return x.Clock
	}
	return nil
}

func (x *System) GetConfig() *System_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System) GetCpus() *System_Cpus {
	if x != nil {
		return x.Cpus
	}
	return nil
}

func (x *System) GetDns() *System_Dns {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *System) GetGrpcServer() *System_GrpcServer {
	if x != nil {
		return x.GrpcServer
	}
	return nil
}

func (x *System) GetLicense() *System_License {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *System) GetLogging() *System_Logging {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *System) GetMemory() *System_Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *System) GetMessages() *System_Messages {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *System) GetNtp() *System_Ntp {
	if x != nil {
		return x.Ntp
	}
	return nil
}

func (x *System) GetOpenflow() *System_Openflow {
	if x != nil {
		return x.Openflow
	}
	return nil
}

func (x *System) GetProcesses() *System_Processes {
	if x != nil {
		return x.Processes
	}
	return nil
}

func (x *System) GetSshServer() *System_SshServer {
	if x != nil {
		return x.SshServer
	}
	return nil
}

func (x *System) GetState() *System_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *System) GetTelnetServer() *System_TelnetServer {
	if x != nil {
		return x.TelnetServer
	}
	return nil
}

type System_Aaa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounting     *System_Aaa_Accounting     `protobuf:"bytes,175231094,opt,name=accounting,proto3" json:"accounting,omitempty"`
	Authentication *System_Aaa_Authentication `protobuf:"bytes,520430581,opt,name=authentication,proto3" json:"authentication,omitempty"`
	Authorization  *System_Aaa_Authorization  `protobuf:"bytes,92979796,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Config         *System_Aaa_Config         `protobuf:"bytes,352352339,opt,name=config,proto3" json:"config,omitempty"`
	ServerGroups   *System_Aaa_ServerGroups   `protobuf:"bytes,366692613,opt,name=server_groups,json=serverGroups,proto3" json:"server_groups,omitempty"`
	State          *System_Aaa_State          `protobuf:"bytes,23163956,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Aaa) Reset() {
	*x = System_Aaa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa) ProtoMessage() {}

func (x *System_Aaa) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa.ProtoReflect.Descriptor instead.
func (*System_Aaa) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0}
}

func (x *System_Aaa) GetAccounting() *System_Aaa_Accounting {
	if x != nil {
		return x.Accounting
	}
	return nil
}

func (x *System_Aaa) GetAuthentication() *System_Aaa_Authentication {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *System_Aaa) GetAuthorization() *System_Aaa_Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *System_Aaa) GetConfig() *System_Aaa_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Aaa) GetServerGroups() *System_Aaa_ServerGroups {
	if x != nil {
		return x.ServerGroups
	}
	return nil
}

func (x *System_Aaa) GetState() *System_Aaa_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Alarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alarm []*System_Alarms_AlarmKey `protobuf:"bytes,221321319,rep,name=alarm,proto3" json:"alarm,omitempty"`
}

func (x *System_Alarms) Reset() {
	*x = System_Alarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Alarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Alarms) ProtoMessage() {}

func (x *System_Alarms) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Alarms.ProtoReflect.Descriptor instead.
func (*System_Alarms) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 1}
}

func (x *System_Alarms) GetAlarm() []*System_Alarms_AlarmKey {
	if x != nil {
		return x.Alarm
	}
	return nil
}

type System_Clock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Clock_Config `protobuf:"bytes,375106460,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Clock_State  `protobuf:"bytes,162896405,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Clock) Reset() {
	*x = System_Clock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Clock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Clock) ProtoMessage() {}

func (x *System_Clock) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Clock.ProtoReflect.Descriptor instead.
func (*System_Clock) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 2}
}

func (x *System_Clock) GetConfig() *System_Clock_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Clock) GetState() *System_Clock_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainName  *ywrapper.StringValue `protobuf:"bytes,514451884,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	LoginBanner *ywrapper.StringValue `protobuf:"bytes,161971574,opt,name=login_banner,json=loginBanner,proto3" json:"login_banner,omitempty"`
	MotdBanner  *ywrapper.StringValue `protobuf:"bytes,428956479,opt,name=motd_banner,json=motdBanner,proto3" json:"motd_banner,omitempty"`
}

func (x *System_Config) Reset() {
	*x = System_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Config) ProtoMessage() {}

func (x *System_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Config.ProtoReflect.Descriptor instead.
func (*System_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 3}
}

func (x *System_Config) GetDomainName() *ywrapper.StringValue {
	if x != nil {
		return x.DomainName
	}
	return nil
}

func (x *System_Config) GetLoginBanner() *ywrapper.StringValue {
	if x != nil {
		return x.LoginBanner
	}
	return nil
}

func (x *System_Config) GetMotdBanner() *ywrapper.StringValue {
	if x != nil {
		return x.MotdBanner
	}
	return nil
}

type System_Cpus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu []*System_Cpus_CpuKey `protobuf:"bytes,70314881,rep,name=cpu,proto3" json:"cpu,omitempty"`
}

func (x *System_Cpus) Reset() {
	*x = System_Cpus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Cpus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Cpus) ProtoMessage() {}

func (x *System_Cpus) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Cpus.ProtoReflect.Descriptor instead.
func (*System_Cpus) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 4}
}

func (x *System_Cpus) GetCpu() []*System_Cpus_CpuKey {
	if x != nil {
		return x.Cpu
	}
	return nil
}

type System_Dns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *System_Dns_Config      `protobuf:"bytes,260417829,opt,name=config,proto3" json:"config,omitempty"`
	HostEntries *System_Dns_HostEntries `protobuf:"bytes,355029034,opt,name=host_entries,json=hostEntries,proto3" json:"host_entries,omitempty"`
	Servers     *System_Dns_Servers     `protobuf:"bytes,44375401,opt,name=servers,proto3" json:"servers,omitempty"`
	State       *System_Dns_State       `protobuf:"bytes,425367962,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Dns) Reset() {
	*x = System_Dns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Dns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Dns) ProtoMessage() {}

func (x *System_Dns) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Dns.ProtoReflect.Descriptor instead.
func (*System_Dns) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 5}
}

func (x *System_Dns) GetConfig() *System_Dns_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Dns) GetHostEntries() *System_Dns_HostEntries {
	if x != nil {
		return x.HostEntries
	}
	return nil
}

func (x *System_Dns) GetServers() *System_Dns_Servers {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *System_Dns) GetState() *System_Dns_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_GrpcServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_GrpcServer_Config `protobuf:"bytes,516783066,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_GrpcServer_State  `protobuf:"bytes,247149175,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_GrpcServer) Reset() {
	*x = System_GrpcServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_GrpcServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_GrpcServer) ProtoMessage() {}

func (x *System_GrpcServer) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_GrpcServer.ProtoReflect.Descriptor instead.
func (*System_GrpcServer) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 6}
}

func (x *System_GrpcServer) GetConfig() *System_GrpcServer_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_GrpcServer) GetState() *System_GrpcServer_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Licenses *System_License_Licenses `protobuf:"bytes,367599511,opt,name=licenses,proto3" json:"licenses,omitempty"`
}

func (x *System_License) Reset() {
	*x = System_License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_License) ProtoMessage() {}

func (x *System_License) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_License.ProtoReflect.Descriptor instead.
func (*System_License) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 7}
}

func (x *System_License) GetLicenses() *System_License_Licenses {
	if x != nil {
		return x.Licenses
	}
	return nil
}

type System_Logging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Console       *System_Logging_Console       `protobuf:"bytes,197921220,opt,name=console,proto3" json:"console,omitempty"`
	RemoteServers *System_Logging_RemoteServers `protobuf:"bytes,224027600,opt,name=remote_servers,json=remoteServers,proto3" json:"remote_servers,omitempty"`
}

func (x *System_Logging) Reset() {
	*x = System_Logging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging) ProtoMessage() {}

func (x *System_Logging) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging.ProtoReflect.Descriptor instead.
func (*System_Logging) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8}
}

func (x *System_Logging) GetConsole() *System_Logging_Console {
	if x != nil {
		return x.Console
	}
	return nil
}

func (x *System_Logging) GetRemoteServers() *System_Logging_RemoteServers {
	if x != nil {
		return x.RemoteServers
	}
	return nil
}

type System_Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Memory_Config `protobuf:"bytes,525457903,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Memory_State  `protobuf:"bytes,444004704,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Memory) Reset() {
	*x = System_Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Memory) ProtoMessage() {}

func (x *System_Memory) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Memory.ProtoReflect.Descriptor instead.
func (*System_Memory) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 9}
}

func (x *System_Memory) GetConfig() *System_Memory_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Memory) GetState() *System_Memory_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Messages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *System_Messages_Config       `protobuf:"bytes,31172540,opt,name=config,proto3" json:"config,omitempty"`
	DebugEntries *System_Messages_DebugEntries `protobuf:"bytes,393681440,opt,name=debug_entries,json=debugEntries,proto3" json:"debug_entries,omitempty"`
	State        *System_Messages_State        `protobuf:"bytes,463117237,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Messages) Reset() {
	*x = System_Messages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Messages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Messages) ProtoMessage() {}

func (x *System_Messages) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Messages.ProtoReflect.Descriptor instead.
func (*System_Messages) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 10}
}

func (x *System_Messages) GetConfig() *System_Messages_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Messages) GetDebugEntries() *System_Messages_DebugEntries {
	if x != nil {
		return x.DebugEntries
	}
	return nil
}

func (x *System_Messages) GetState() *System_Messages_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Ntp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config  *System_Ntp_Config  `protobuf:"bytes,113415980,opt,name=config,proto3" json:"config,omitempty"`
	NtpKeys *System_Ntp_NtpKeys `protobuf:"bytes,130147733,opt,name=ntp_keys,json=ntpKeys,proto3" json:"ntp_keys,omitempty"`
	Servers *System_Ntp_Servers `protobuf:"bytes,37051726,opt,name=servers,proto3" json:"servers,omitempty"`
	State   *System_Ntp_State   `protobuf:"bytes,402702117,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Ntp) Reset() {
	*x = System_Ntp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Ntp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Ntp) ProtoMessage() {}

func (x *System_Ntp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Ntp.ProtoReflect.Descriptor instead.
func (*System_Ntp) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11}
}

func (x *System_Ntp) GetConfig() *System_Ntp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Ntp) GetNtpKeys() *System_Ntp_NtpKeys {
	if x != nil {
		return x.NtpKeys
	}
	return nil
}

func (x *System_Ntp) GetServers() *System_Ntp_Servers {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *System_Ntp) GetState() *System_Ntp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Openflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent       *System_Openflow_Agent       `protobuf:"bytes,35640369,opt,name=agent,proto3" json:"agent,omitempty"`
	Controllers *System_Openflow_Controllers `protobuf:"bytes,331082837,opt,name=controllers,proto3" json:"controllers,omitempty"`
}

func (x *System_Openflow) Reset() {
	*x = System_Openflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Openflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Openflow) ProtoMessage() {}

func (x *System_Openflow) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Openflow.ProtoReflect.Descriptor instead.
func (*System_Openflow) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 12}
}

func (x *System_Openflow) GetAgent() *System_Openflow_Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *System_Openflow) GetControllers() *System_Openflow_Controllers {
	if x != nil {
		return x.Controllers
	}
	return nil
}

type System_Processes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process []*System_Processes_ProcessKey `protobuf:"bytes,8835840,rep,name=process,proto3" json:"process,omitempty"`
}

func (x *System_Processes) Reset() {
	*x = System_Processes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Processes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Processes) ProtoMessage() {}

func (x *System_Processes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Processes.ProtoReflect.Descriptor instead.
func (*System_Processes) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 13}
}

func (x *System_Processes) GetProcess() []*System_Processes_ProcessKey {
	if x != nil {
		return x.Process
	}
	return nil
}

type System_SshServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_SshServer_Config `protobuf:"bytes,350686150,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_SshServer_State  `protobuf:"bytes,380296627,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_SshServer) Reset() {
	*x = System_SshServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_SshServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_SshServer) ProtoMessage() {}

func (x *System_SshServer) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_SshServer.ProtoReflect.Descriptor instead.
func (*System_SshServer) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 14}
}

func (x *System_SshServer) GetConfig() *System_SshServer_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_SshServer) GetState() *System_SshServer_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BootTime        *ywrapper.UintValue   `protobuf:"bytes,174811281,opt,name=boot_time,json=bootTime,proto3" json:"boot_time,omitempty"`
	CurrentDatetime *ywrapper.StringValue `protobuf:"bytes,14846070,opt,name=current_datetime,json=currentDatetime,proto3" json:"current_datetime,omitempty"`
	DomainName      *ywrapper.StringValue `protobuf:"bytes,325663011,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	LoginBanner     *ywrapper.StringValue `protobuf:"bytes,441420887,opt,name=login_banner,json=loginBanner,proto3" json:"login_banner,omitempty"`
	MotdBanner      *ywrapper.StringValue `protobuf:"bytes,264146320,opt,name=motd_banner,json=motdBanner,proto3" json:"motd_banner,omitempty"`
}

func (x *System_State) Reset() {
	*x = System_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_State) ProtoMessage() {}

func (x *System_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_State.ProtoReflect.Descriptor instead.
func (*System_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 15}
}

func (x *System_State) GetBootTime() *ywrapper.UintValue {
	if x != nil {
		return x.BootTime
	}
	return nil
}

func (x *System_State) GetCurrentDatetime() *ywrapper.StringValue {
	if x != nil {
		return x.CurrentDatetime
	}
	return nil
}

func (x *System_State) GetDomainName() *ywrapper.StringValue {
	if x != nil {
		return x.DomainName
	}
	return nil
}

func (x *System_State) GetLoginBanner() *ywrapper.StringValue {
	if x != nil {
		return x.LoginBanner
	}
	return nil
}

func (x *System_State) GetMotdBanner() *ywrapper.StringValue {
	if x != nil {
		return x.MotdBanner
	}
	return nil
}

type System_TelnetServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_TelnetServer_Config `protobuf:"bytes,267707402,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_TelnetServer_State  `protobuf:"bytes,533556647,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_TelnetServer) Reset() {
	*x = System_TelnetServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_TelnetServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_TelnetServer) ProtoMessage() {}

func (x *System_TelnetServer) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_TelnetServer.ProtoReflect.Descriptor instead.
func (*System_TelnetServer) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 16}
}

func (x *System_TelnetServer) GetConfig() *System_TelnetServer_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_TelnetServer) GetState() *System_TelnetServer_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Aaa_Accounting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Aaa_Accounting_Config `protobuf:"bytes,65960919,opt,name=config,proto3" json:"config,omitempty"`
	Events *System_Aaa_Accounting_Events `protobuf:"bytes,254145510,opt,name=events,proto3" json:"events,omitempty"`
	State  *System_Aaa_Accounting_State  `protobuf:"bytes,158118280,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Aaa_Accounting) Reset() {
	*x = System_Aaa_Accounting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Accounting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Accounting) ProtoMessage() {}

func (x *System_Aaa_Accounting) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Accounting.ProtoReflect.Descriptor instead.
func (*System_Aaa_Accounting) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *System_Aaa_Accounting) GetConfig() *System_Aaa_Accounting_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Aaa_Accounting) GetEvents() *System_Aaa_Accounting_Events {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *System_Aaa_Accounting) GetState() *System_Aaa_Accounting_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Aaa_Authentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminUser *System_Aaa_Authentication_AdminUser `protobuf:"bytes,322829291,opt,name=admin_user,json=adminUser,proto3" json:"admin_user,omitempty"`
	Config    *System_Aaa_Authentication_Config    `protobuf:"bytes,161084058,opt,name=config,proto3" json:"config,omitempty"`
	State     *System_Aaa_Authentication_State     `protobuf:"bytes,392934711,opt,name=state,proto3" json:"state,omitempty"`
	Users     *System_Aaa_Authentication_Users     `protobuf:"bytes,331617008,opt,name=users,proto3" json:"users,omitempty"`
}

func (x *System_Aaa_Authentication) Reset() {
	*x = System_Aaa_Authentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authentication) ProtoMessage() {}

func (x *System_Aaa_Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authentication.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authentication) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *System_Aaa_Authentication) GetAdminUser() *System_Aaa_Authentication_AdminUser {
	if x != nil {
		return x.AdminUser
	}
	return nil
}

func (x *System_Aaa_Authentication) GetConfig() *System_Aaa_Authentication_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Aaa_Authentication) GetState() *System_Aaa_Authentication_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *System_Aaa_Authentication) GetUsers() *System_Aaa_Authentication_Users {
	if x != nil {
		return x.Users
	}
	return nil
}

type System_Aaa_Authorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Aaa_Authorization_Config `protobuf:"bytes,60541017,opt,name=config,proto3" json:"config,omitempty"`
	Events *System_Aaa_Authorization_Events `protobuf:"bytes,103903920,opt,name=events,proto3" json:"events,omitempty"`
	State  *System_Aaa_Authorization_State  `protobuf:"bytes,441078062,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Aaa_Authorization) Reset() {
	*x = System_Aaa_Authorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authorization) ProtoMessage() {}

func (x *System_Aaa_Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authorization.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authorization) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *System_Aaa_Authorization) GetConfig() *System_Aaa_Authorization_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Aaa_Authorization) GetEvents() *System_Aaa_Authorization_Events {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *System_Aaa_Authorization) GetState() *System_Aaa_Authorization_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Aaa_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *System_Aaa_Config) Reset() {
	*x = System_Aaa_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Config) ProtoMessage() {}

func (x *System_Aaa_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Config.ProtoReflect.Descriptor instead.
func (*System_Aaa_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 3}
}

type System_Aaa_ServerGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerGroup []*System_Aaa_ServerGroups_ServerGroupKey `protobuf:"bytes,249960919,rep,name=server_group,json=serverGroup,proto3" json:"server_group,omitempty"`
}

func (x *System_Aaa_ServerGroups) Reset() {
	*x = System_Aaa_ServerGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups) ProtoMessage() {}

func (x *System_Aaa_ServerGroups) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *System_Aaa_ServerGroups) GetServerGroup() []*System_Aaa_ServerGroups_ServerGroupKey {
	if x != nil {
		return x.ServerGroup
	}
	return nil
}

type System_Aaa_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *System_Aaa_State) Reset() {
	*x = System_Aaa_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_State) ProtoMessage() {}

func (x *System_Aaa_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_State.ProtoReflect.Descriptor instead.
func (*System_Aaa_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 5}
}

type System_Aaa_Accounting_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountingMethod []*System_Aaa_Accounting_Config_AccountingMethodUnion `protobuf:"bytes,29748713,rep,name=accounting_method,json=accountingMethod,proto3" json:"accounting_method,omitempty"`
}

func (x *System_Aaa_Accounting_Config) Reset() {
	*x = System_Aaa_Accounting_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Accounting_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Accounting_Config) ProtoMessage() {}

func (x *System_Aaa_Accounting_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Accounting_Config.ProtoReflect.Descriptor instead.
func (*System_Aaa_Accounting_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *System_Aaa_Accounting_Config) GetAccountingMethod() []*System_Aaa_Accounting_Config_AccountingMethodUnion {
	if x != nil {
		return x.AccountingMethod
	}
	return nil
}

type System_Aaa_Accounting_Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event []*System_Aaa_Accounting_Events_EventKey `protobuf:"bytes,76913831,rep,name=event,proto3" json:"event,omitempty"`
}

func (x *System_Aaa_Accounting_Events) Reset() {
	*x = System_Aaa_Accounting_Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Accounting_Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Accounting_Events) ProtoMessage() {}

func (x *System_Aaa_Accounting_Events) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Accounting_Events.ProtoReflect.Descriptor instead.
func (*System_Aaa_Accounting_Events) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *System_Aaa_Accounting_Events) GetEvent() []*System_Aaa_Accounting_Events_EventKey {
	if x != nil {
		return x.Event
	}
	return nil
}

type System_Aaa_Accounting_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountingMethod []*System_Aaa_Accounting_State_AccountingMethodUnion `protobuf:"bytes,103028022,rep,name=accounting_method,json=accountingMethod,proto3" json:"accounting_method,omitempty"`
}

func (x *System_Aaa_Accounting_State) Reset() {
	*x = System_Aaa_Accounting_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Accounting_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Accounting_State) ProtoMessage() {}

func (x *System_Aaa_Accounting_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Accounting_State.ProtoReflect.Descriptor instead.
func (*System_Aaa_Accounting_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *System_Aaa_Accounting_State) GetAccountingMethod() []*System_Aaa_Accounting_State_AccountingMethodUnion {
	if x != nil {
		return x.AccountingMethod
	}
	return nil
}

type System_Aaa_Accounting_Config_AccountingMethodUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountingMethodOpenconfigaaatypesaaamethodtype OpenconfigAaaTypesAAAMETHODTYPE `protobuf:"varint,520228688,opt,name=accounting_method_openconfigaaatypesaaamethodtype,json=accountingMethodOpenconfigaaatypesaaamethodtype,proto3,enum=openconfig.OpenconfigAaaTypesAAAMETHODTYPE" json:"accounting_method_openconfigaaatypesaaamethodtype,omitempty"`
	AccountingMethodString                          string                          `protobuf:"bytes,308208143,opt,name=accounting_method_string,json=accountingMethodString,proto3" json:"accounting_method_string,omitempty"`
}

func (x *System_Aaa_Accounting_Config_AccountingMethodUnion) Reset() {
	*x = System_Aaa_Accounting_Config_AccountingMethodUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Accounting_Config_AccountingMethodUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Accounting_Config_AccountingMethodUnion) ProtoMessage() {}

func (x *System_Aaa_Accounting_Config_AccountingMethodUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Accounting_Config_AccountingMethodUnion.ProtoReflect.Descriptor instead.
func (*System_Aaa_Accounting_Config_AccountingMethodUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *System_Aaa_Accounting_Config_AccountingMethodUnion) GetAccountingMethodOpenconfigaaatypesaaamethodtype() OpenconfigAaaTypesAAAMETHODTYPE {
	if x != nil {
		return x.AccountingMethodOpenconfigaaatypesaaamethodtype
	}
	return OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET
}

func (x *System_Aaa_Accounting_Config_AccountingMethodUnion) GetAccountingMethodString() string {
	if x != nil {
		return x.AccountingMethodString
	}
	return ""
}

type System_Aaa_Accounting_Events_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Aaa_Accounting_Events_Event_Config `protobuf:"bytes,285134520,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Aaa_Accounting_Events_Event_State  `protobuf:"bytes,229991121,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Aaa_Accounting_Events_Event) Reset() {
	*x = System_Aaa_Accounting_Events_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Accounting_Events_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Accounting_Events_Event) ProtoMessage() {}

func (x *System_Aaa_Accounting_Events_Event) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Accounting_Events_Event.ProtoReflect.Descriptor instead.
func (*System_Aaa_Accounting_Events_Event) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *System_Aaa_Accounting_Events_Event) GetConfig() *System_Aaa_Accounting_Events_Event_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Aaa_Accounting_Events_Event) GetState() *System_Aaa_Accounting_Events_Event_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Aaa_Accounting_Events_EventKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE" json:"event_type,omitempty"`
	Event     *System_Aaa_Accounting_Events_Event      `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *System_Aaa_Accounting_Events_EventKey) Reset() {
	*x = System_Aaa_Accounting_Events_EventKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Accounting_Events_EventKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Accounting_Events_EventKey) ProtoMessage() {}

func (x *System_Aaa_Accounting_Events_EventKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Accounting_Events_EventKey.ProtoReflect.Descriptor instead.
func (*System_Aaa_Accounting_Events_EventKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1}
}

func (x *System_Aaa_Accounting_Events_EventKey) GetEventType() OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE {
	if x != nil {
		return x.EventType
	}
	return OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_UNSET
}

func (x *System_Aaa_Accounting_Events_EventKey) GetEvent() *System_Aaa_Accounting_Events_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type System_Aaa_Accounting_Events_Event_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE         `protobuf:"varint,31080482,opt,name=event_type,json=eventType,proto3,enum=openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE" json:"event_type,omitempty"`
	Record    System_Aaa_Accounting_Events_Event_Config_Record `protobuf:"varint,140048324,opt,name=record,proto3,enum=openconfig.System_Aaa_Accounting_Events_Event_Config_Record" json:"record,omitempty"`
}

func (x *System_Aaa_Accounting_Events_Event_Config) Reset() {
	*x = System_Aaa_Accounting_Events_Event_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Accounting_Events_Event_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Accounting_Events_Event_Config) ProtoMessage() {}

func (x *System_Aaa_Accounting_Events_Event_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Accounting_Events_Event_Config.ProtoReflect.Descriptor instead.
func (*System_Aaa_Accounting_Events_Event_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0}
}

func (x *System_Aaa_Accounting_Events_Event_Config) GetEventType() OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE {
	if x != nil {
		return x.EventType
	}
	return OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_UNSET
}

func (x *System_Aaa_Accounting_Events_Event_Config) GetRecord() System_Aaa_Accounting_Events_Event_Config_Record {
	if x != nil {
		return x.Record
	}
	return System_Aaa_Accounting_Events_Event_Config_RECORD_UNSET
}

type System_Aaa_Accounting_Events_Event_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE        `protobuf:"varint,35039801,opt,name=event_type,json=eventType,proto3,enum=openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE" json:"event_type,omitempty"`
	Record    System_Aaa_Accounting_Events_Event_State_Record `protobuf:"varint,502978155,opt,name=record,proto3,enum=openconfig.System_Aaa_Accounting_Events_Event_State_Record" json:"record,omitempty"`
}

func (x *System_Aaa_Accounting_Events_Event_State) Reset() {
	*x = System_Aaa_Accounting_Events_Event_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Accounting_Events_Event_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Accounting_Events_Event_State) ProtoMessage() {}

func (x *System_Aaa_Accounting_Events_Event_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Accounting_Events_Event_State.ProtoReflect.Descriptor instead.
func (*System_Aaa_Accounting_Events_Event_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 1}
}

func (x *System_Aaa_Accounting_Events_Event_State) GetEventType() OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE {
	if x != nil {
		return x.EventType
	}
	return OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_UNSET
}

func (x *System_Aaa_Accounting_Events_Event_State) GetRecord() System_Aaa_Accounting_Events_Event_State_Record {
	if x != nil {
		return x.Record
	}
	return System_Aaa_Accounting_Events_Event_State_RECORD_UNSET
}

type System_Aaa_Accounting_State_AccountingMethodUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountingMethodOpenconfigaaatypesaaamethodtype OpenconfigAaaTypesAAAMETHODTYPE `protobuf:"varint,397538795,opt,name=accounting_method_openconfigaaatypesaaamethodtype,json=accountingMethodOpenconfigaaatypesaaamethodtype,proto3,enum=openconfig.OpenconfigAaaTypesAAAMETHODTYPE" json:"accounting_method_openconfigaaatypesaaamethodtype,omitempty"`
	AccountingMethodString                          string                          `protobuf:"bytes,398060102,opt,name=accounting_method_string,json=accountingMethodString,proto3" json:"accounting_method_string,omitempty"`
}

func (x *System_Aaa_Accounting_State_AccountingMethodUnion) Reset() {
	*x = System_Aaa_Accounting_State_AccountingMethodUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Accounting_State_AccountingMethodUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Accounting_State_AccountingMethodUnion) ProtoMessage() {}

func (x *System_Aaa_Accounting_State_AccountingMethodUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Accounting_State_AccountingMethodUnion.ProtoReflect.Descriptor instead.
func (*System_Aaa_Accounting_State_AccountingMethodUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (x *System_Aaa_Accounting_State_AccountingMethodUnion) GetAccountingMethodOpenconfigaaatypesaaamethodtype() OpenconfigAaaTypesAAAMETHODTYPE {
	if x != nil {
		return x.AccountingMethodOpenconfigaaatypesaaamethodtype
	}
	return OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET
}

func (x *System_Aaa_Accounting_State_AccountingMethodUnion) GetAccountingMethodString() string {
	if x != nil {
		return x.AccountingMethodString
	}
	return ""
}

type System_Aaa_Authentication_AdminUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Aaa_Authentication_AdminUser_Config `protobuf:"bytes,37403324,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Aaa_Authentication_AdminUser_State  `protobuf:"bytes,171383989,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Aaa_Authentication_AdminUser) Reset() {
	*x = System_Aaa_Authentication_AdminUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authentication_AdminUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authentication_AdminUser) ProtoMessage() {}

func (x *System_Aaa_Authentication_AdminUser) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authentication_AdminUser.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authentication_AdminUser) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *System_Aaa_Authentication_AdminUser) GetConfig() *System_Aaa_Authentication_AdminUser_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Aaa_Authentication_AdminUser) GetState() *System_Aaa_Authentication_AdminUser_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Aaa_Authentication_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticationMethod []*System_Aaa_Authentication_Config_AuthenticationMethodUnion `protobuf:"bytes,38969025,rep,name=authentication_method,json=authenticationMethod,proto3" json:"authentication_method,omitempty"`
}

func (x *System_Aaa_Authentication_Config) Reset() {
	*x = System_Aaa_Authentication_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authentication_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authentication_Config) ProtoMessage() {}

func (x *System_Aaa_Authentication_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authentication_Config.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authentication_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

func (x *System_Aaa_Authentication_Config) GetAuthenticationMethod() []*System_Aaa_Authentication_Config_AuthenticationMethodUnion {
	if x != nil {
		return x.AuthenticationMethod
	}
	return nil
}

type System_Aaa_Authentication_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticationMethod []*System_Aaa_Authentication_State_AuthenticationMethodUnion `protobuf:"bytes,177264392,rep,name=authentication_method,json=authenticationMethod,proto3" json:"authentication_method,omitempty"`
}

func (x *System_Aaa_Authentication_State) Reset() {
	*x = System_Aaa_Authentication_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authentication_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authentication_State) ProtoMessage() {}

func (x *System_Aaa_Authentication_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authentication_State.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authentication_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 1, 2}
}

func (x *System_Aaa_Authentication_State) GetAuthenticationMethod() []*System_Aaa_Authentication_State_AuthenticationMethodUnion {
	if x != nil {
		return x.AuthenticationMethod
	}
	return nil
}

type System_Aaa_Authentication_Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User []*System_Aaa_Authentication_Users_UserKey `protobuf:"bytes,344997694,rep,name=user,proto3" json:"user,omitempty"`
}

func (x *System_Aaa_Authentication_Users) Reset() {
	*x = System_Aaa_Authentication_Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authentication_Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authentication_Users) ProtoMessage() {}

func (x *System_Aaa_Authentication_Users) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authentication_Users.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authentication_Users) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 1, 3}
}

func (x *System_Aaa_Authentication_Users) GetUser() []*System_Aaa_Authentication_Users_UserKey {
	if x != nil {
		return x.User
	}
	return nil
}

type System_Aaa_Authentication_AdminUser_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminPassword       *ywrapper.StringValue `protobuf:"bytes,17433386,opt,name=admin_password,json=adminPassword,proto3" json:"admin_password,omitempty"`
	AdminPasswordHashed *ywrapper.StringValue `protobuf:"bytes,471791444,opt,name=admin_password_hashed,json=adminPasswordHashed,proto3" json:"admin_password_hashed,omitempty"`
}

func (x *System_Aaa_Authentication_AdminUser_Config) Reset() {
	*x = System_Aaa_Authentication_AdminUser_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authentication_AdminUser_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authentication_AdminUser_Config) ProtoMessage() {}

func (x *System_Aaa_Authentication_AdminUser_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authentication_AdminUser_Config.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authentication_AdminUser_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (x *System_Aaa_Authentication_AdminUser_Config) GetAdminPassword() *ywrapper.StringValue {
	if x != nil {
		return x.AdminPassword
	}
	return nil
}

func (x *System_Aaa_Authentication_AdminUser_Config) GetAdminPasswordHashed() *ywrapper.StringValue {
	if x != nil {
		return x.AdminPasswordHashed
	}
	return nil
}

type System_Aaa_Authentication_AdminUser_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminPassword       *ywrapper.StringValue `protobuf:"bytes,466907761,opt,name=admin_password,json=adminPassword,proto3" json:"admin_password,omitempty"`
	AdminPasswordHashed *ywrapper.StringValue `protobuf:"bytes,265524005,opt,name=admin_password_hashed,json=adminPasswordHashed,proto3" json:"admin_password_hashed,omitempty"`
	AdminUsername       *ywrapper.StringValue `protobuf:"bytes,58771374,opt,name=admin_username,json=adminUsername,proto3" json:"admin_username,omitempty"`
}

func (x *System_Aaa_Authentication_AdminUser_State) Reset() {
	*x = System_Aaa_Authentication_AdminUser_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authentication_AdminUser_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authentication_AdminUser_State) ProtoMessage() {}

func (x *System_Aaa_Authentication_AdminUser_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authentication_AdminUser_State.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authentication_AdminUser_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1}
}

func (x *System_Aaa_Authentication_AdminUser_State) GetAdminPassword() *ywrapper.StringValue {
	if x != nil {
		return x.AdminPassword
	}
	return nil
}

func (x *System_Aaa_Authentication_AdminUser_State) GetAdminPasswordHashed() *ywrapper.StringValue {
	if x != nil {
		return x.AdminPasswordHashed
	}
	return nil
}

func (x *System_Aaa_Authentication_AdminUser_State) GetAdminUsername() *ywrapper.StringValue {
	if x != nil {
		return x.AdminUsername
	}
	return nil
}

type System_Aaa_Authentication_Config_AuthenticationMethodUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticationMethodOpenconfigaaatypesaaamethodtype OpenconfigAaaTypesAAAMETHODTYPE `protobuf:"varint,512247800,opt,name=authentication_method_openconfigaaatypesaaamethodtype,json=authenticationMethodOpenconfigaaatypesaaamethodtype,proto3,enum=openconfig.OpenconfigAaaTypesAAAMETHODTYPE" json:"authentication_method_openconfigaaatypesaaamethodtype,omitempty"`
	AuthenticationMethodString                          string                          `protobuf:"bytes,438459495,opt,name=authentication_method_string,json=authenticationMethodString,proto3" json:"authentication_method_string,omitempty"`
}

func (x *System_Aaa_Authentication_Config_AuthenticationMethodUnion) Reset() {
	*x = System_Aaa_Authentication_Config_AuthenticationMethodUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authentication_Config_AuthenticationMethodUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authentication_Config_AuthenticationMethodUnion) ProtoMessage() {}

func (x *System_Aaa_Authentication_Config_AuthenticationMethodUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authentication_Config_AuthenticationMethodUnion.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authentication_Config_AuthenticationMethodUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 1, 1, 0}
}

func (x *System_Aaa_Authentication_Config_AuthenticationMethodUnion) GetAuthenticationMethodOpenconfigaaatypesaaamethodtype() OpenconfigAaaTypesAAAMETHODTYPE {
	if x != nil {
		return x.AuthenticationMethodOpenconfigaaatypesaaamethodtype
	}
	return OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET
}

func (x *System_Aaa_Authentication_Config_AuthenticationMethodUnion) GetAuthenticationMethodString() string {
	if x != nil {
		return x.AuthenticationMethodString
	}
	return ""
}

type System_Aaa_Authentication_State_AuthenticationMethodUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticationMethodOpenconfigaaatypesaaamethodtype OpenconfigAaaTypesAAAMETHODTYPE `protobuf:"varint,300892437,opt,name=authentication_method_openconfigaaatypesaaamethodtype,json=authenticationMethodOpenconfigaaatypesaaamethodtype,proto3,enum=openconfig.OpenconfigAaaTypesAAAMETHODTYPE" json:"authentication_method_openconfigaaatypesaaamethodtype,omitempty"`
	AuthenticationMethodString                          string                          `protobuf:"bytes,398759016,opt,name=authentication_method_string,json=authenticationMethodString,proto3" json:"authentication_method_string,omitempty"`
}

func (x *System_Aaa_Authentication_State_AuthenticationMethodUnion) Reset() {
	*x = System_Aaa_Authentication_State_AuthenticationMethodUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authentication_State_AuthenticationMethodUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authentication_State_AuthenticationMethodUnion) ProtoMessage() {}

func (x *System_Aaa_Authentication_State_AuthenticationMethodUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authentication_State_AuthenticationMethodUnion.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authentication_State_AuthenticationMethodUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 1, 2, 0}
}

func (x *System_Aaa_Authentication_State_AuthenticationMethodUnion) GetAuthenticationMethodOpenconfigaaatypesaaamethodtype() OpenconfigAaaTypesAAAMETHODTYPE {
	if x != nil {
		return x.AuthenticationMethodOpenconfigaaatypesaaamethodtype
	}
	return OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET
}

func (x *System_Aaa_Authentication_State_AuthenticationMethodUnion) GetAuthenticationMethodString() string {
	if x != nil {
		return x.AuthenticationMethodString
	}
	return ""
}

type System_Aaa_Authentication_Users_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Aaa_Authentication_Users_User_Config `protobuf:"bytes,298787471,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Aaa_Authentication_Users_User_State  `protobuf:"bytes,285421696,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Aaa_Authentication_Users_User) Reset() {
	*x = System_Aaa_Authentication_Users_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authentication_Users_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authentication_Users_User) ProtoMessage() {}

func (x *System_Aaa_Authentication_Users_User) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authentication_Users_User.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authentication_Users_User) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 1, 3, 0}
}

func (x *System_Aaa_Authentication_Users_User) GetConfig() *System_Aaa_Authentication_Users_User_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Aaa_Authentication_Users_User) GetState() *System_Aaa_Authentication_Users_User_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Aaa_Authentication_Users_UserKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string                                `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	User     *System_Aaa_Authentication_Users_User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *System_Aaa_Authentication_Users_UserKey) Reset() {
	*x = System_Aaa_Authentication_Users_UserKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authentication_Users_UserKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authentication_Users_UserKey) ProtoMessage() {}

func (x *System_Aaa_Authentication_Users_UserKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authentication_Users_UserKey.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authentication_Users_UserKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 1, 3, 1}
}

func (x *System_Aaa_Authentication_Users_UserKey) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *System_Aaa_Authentication_Users_UserKey) GetUser() *System_Aaa_Authentication_Users_User {
	if x != nil {
		return x.User
	}
	return nil
}

type System_Aaa_Authentication_Users_User_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password       *ywrapper.StringValue `protobuf:"bytes,140193929,opt,name=password,proto3" json:"password,omitempty"`
	PasswordHashed *ywrapper.StringValue `protobuf:"bytes,439845341,opt,name=password_hashed,json=passwordHashed,proto3" json:"password_hashed,omitempty"`
	// Types that are assignable to Role:
	//	*System_Aaa_Authentication_Users_User_Config_RoleOpenconfigaaatypessystemdefinedroles
	//	*System_Aaa_Authentication_Users_User_Config_RoleString
	Role     isSystem_Aaa_Authentication_Users_User_Config_Role `protobuf_oneof:"role"`
	SshKey   *ywrapper.StringValue                              `protobuf:"bytes,372550502,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	Username *ywrapper.StringValue                              `protobuf:"bytes,46155670,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *System_Aaa_Authentication_Users_User_Config) Reset() {
	*x = System_Aaa_Authentication_Users_User_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authentication_Users_User_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authentication_Users_User_Config) ProtoMessage() {}

func (x *System_Aaa_Authentication_Users_User_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authentication_Users_User_Config.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authentication_Users_User_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 1, 3, 0, 0}
}

func (x *System_Aaa_Authentication_Users_User_Config) GetPassword() *ywrapper.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *System_Aaa_Authentication_Users_User_Config) GetPasswordHashed() *ywrapper.StringValue {
	if x != nil {
		return x.PasswordHashed
	}
	return nil
}

func (m *System_Aaa_Authentication_Users_User_Config) GetRole() isSystem_Aaa_Authentication_Users_User_Config_Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (x *System_Aaa_Authentication_Users_User_Config) GetRoleOpenconfigaaatypessystemdefinedroles() OpenconfigAaaTypesSYSTEMDEFINEDROLES {
	if x, ok := x.GetRole().(*System_Aaa_Authentication_Users_User_Config_RoleOpenconfigaaatypessystemdefinedroles); ok {
		return x.RoleOpenconfigaaatypessystemdefinedroles
	}
	return OpenconfigAaaTypesSYSTEMDEFINEDROLES_OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_UNSET
}

func (x *System_Aaa_Authentication_Users_User_Config) GetRoleString() string {
	if x, ok := x.GetRole().(*System_Aaa_Authentication_Users_User_Config_RoleString); ok {
		return x.RoleString
	}
	return ""
}

func (x *System_Aaa_Authentication_Users_User_Config) GetSshKey() *ywrapper.StringValue {
	if x != nil {
		return x.SshKey
	}
	return nil
}

func (x *System_Aaa_Authentication_Users_User_Config) GetUsername() *ywrapper.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

type isSystem_Aaa_Authentication_Users_User_Config_Role interface {
	isSystem_Aaa_Authentication_Users_User_Config_Role()
}

type System_Aaa_Authentication_Users_User_Config_RoleOpenconfigaaatypessystemdefinedroles struct {
	RoleOpenconfigaaatypessystemdefinedroles OpenconfigAaaTypesSYSTEMDEFINEDROLES `protobuf:"varint,398783100,opt,name=role_openconfigaaatypessystemdefinedroles,json=roleOpenconfigaaatypessystemdefinedroles,proto3,enum=openconfig.OpenconfigAaaTypesSYSTEMDEFINEDROLES,oneof"`
}

type System_Aaa_Authentication_Users_User_Config_RoleString struct {
	RoleString string `protobuf:"bytes,284966162,opt,name=role_string,json=roleString,proto3,oneof"`
}

func (*System_Aaa_Authentication_Users_User_Config_RoleOpenconfigaaatypessystemdefinedroles) isSystem_Aaa_Authentication_Users_User_Config_Role() {
}

func (*System_Aaa_Authentication_Users_User_Config_RoleString) isSystem_Aaa_Authentication_Users_User_Config_Role() {
}

type System_Aaa_Authentication_Users_User_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password       *ywrapper.StringValue `protobuf:"bytes,85246016,opt,name=password,proto3" json:"password,omitempty"`
	PasswordHashed *ywrapper.StringValue `protobuf:"bytes,335276866,opt,name=password_hashed,json=passwordHashed,proto3" json:"password_hashed,omitempty"`
	// Types that are assignable to Role:
	//	*System_Aaa_Authentication_Users_User_State_RoleOpenconfigaaatypessystemdefinedroles
	//	*System_Aaa_Authentication_Users_User_State_RoleString
	Role     isSystem_Aaa_Authentication_Users_User_State_Role `protobuf_oneof:"role"`
	SshKey   *ywrapper.StringValue                             `protobuf:"bytes,174493753,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	Username *ywrapper.StringValue                             `protobuf:"bytes,529155339,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *System_Aaa_Authentication_Users_User_State) Reset() {
	*x = System_Aaa_Authentication_Users_User_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authentication_Users_User_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authentication_Users_User_State) ProtoMessage() {}

func (x *System_Aaa_Authentication_Users_User_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authentication_Users_User_State.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authentication_Users_User_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 1, 3, 0, 1}
}

func (x *System_Aaa_Authentication_Users_User_State) GetPassword() *ywrapper.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *System_Aaa_Authentication_Users_User_State) GetPasswordHashed() *ywrapper.StringValue {
	if x != nil {
		return x.PasswordHashed
	}
	return nil
}

func (m *System_Aaa_Authentication_Users_User_State) GetRole() isSystem_Aaa_Authentication_Users_User_State_Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (x *System_Aaa_Authentication_Users_User_State) GetRoleOpenconfigaaatypessystemdefinedroles() OpenconfigAaaTypesSYSTEMDEFINEDROLES {
	if x, ok := x.GetRole().(*System_Aaa_Authentication_Users_User_State_RoleOpenconfigaaatypessystemdefinedroles); ok {
		return x.RoleOpenconfigaaatypessystemdefinedroles
	}
	return OpenconfigAaaTypesSYSTEMDEFINEDROLES_OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_UNSET
}

func (x *System_Aaa_Authentication_Users_User_State) GetRoleString() string {
	if x, ok := x.GetRole().(*System_Aaa_Authentication_Users_User_State_RoleString); ok {
		return x.RoleString
	}
	return ""
}

func (x *System_Aaa_Authentication_Users_User_State) GetSshKey() *ywrapper.StringValue {
	if x != nil {
		return x.SshKey
	}
	return nil
}

func (x *System_Aaa_Authentication_Users_User_State) GetUsername() *ywrapper.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

type isSystem_Aaa_Authentication_Users_User_State_Role interface {
	isSystem_Aaa_Authentication_Users_User_State_Role()
}

type System_Aaa_Authentication_Users_User_State_RoleOpenconfigaaatypessystemdefinedroles struct {
	RoleOpenconfigaaatypessystemdefinedroles OpenconfigAaaTypesSYSTEMDEFINEDROLES `protobuf:"varint,530122979,opt,name=role_openconfigaaatypessystemdefinedroles,json=roleOpenconfigaaatypessystemdefinedroles,proto3,enum=openconfig.OpenconfigAaaTypesSYSTEMDEFINEDROLES,oneof"`
}

type System_Aaa_Authentication_Users_User_State_RoleString struct {
	RoleString string `protobuf:"bytes,161472625,opt,name=role_string,json=roleString,proto3,oneof"`
}

func (*System_Aaa_Authentication_Users_User_State_RoleOpenconfigaaatypessystemdefinedroles) isSystem_Aaa_Authentication_Users_User_State_Role() {
}

func (*System_Aaa_Authentication_Users_User_State_RoleString) isSystem_Aaa_Authentication_Users_User_State_Role() {
}

type System_Aaa_Authorization_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationMethod []*System_Aaa_Authorization_Config_AuthorizationMethodUnion `protobuf:"bytes,399020027,rep,name=authorization_method,json=authorizationMethod,proto3" json:"authorization_method,omitempty"`
}

func (x *System_Aaa_Authorization_Config) Reset() {
	*x = System_Aaa_Authorization_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authorization_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authorization_Config) ProtoMessage() {}

func (x *System_Aaa_Authorization_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authorization_Config.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authorization_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *System_Aaa_Authorization_Config) GetAuthorizationMethod() []*System_Aaa_Authorization_Config_AuthorizationMethodUnion {
	if x != nil {
		return x.AuthorizationMethod
	}
	return nil
}

type System_Aaa_Authorization_Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event []*System_Aaa_Authorization_Events_EventKey `protobuf:"bytes,517393149,rep,name=event,proto3" json:"event,omitempty"`
}

func (x *System_Aaa_Authorization_Events) Reset() {
	*x = System_Aaa_Authorization_Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authorization_Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authorization_Events) ProtoMessage() {}

func (x *System_Aaa_Authorization_Events) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authorization_Events.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authorization_Events) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

func (x *System_Aaa_Authorization_Events) GetEvent() []*System_Aaa_Authorization_Events_EventKey {
	if x != nil {
		return x.Event
	}
	return nil
}

type System_Aaa_Authorization_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationMethod []*System_Aaa_Authorization_State_AuthorizationMethodUnion `protobuf:"bytes,60171346,rep,name=authorization_method,json=authorizationMethod,proto3" json:"authorization_method,omitempty"`
}

func (x *System_Aaa_Authorization_State) Reset() {
	*x = System_Aaa_Authorization_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authorization_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authorization_State) ProtoMessage() {}

func (x *System_Aaa_Authorization_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authorization_State.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authorization_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 2, 2}
}

func (x *System_Aaa_Authorization_State) GetAuthorizationMethod() []*System_Aaa_Authorization_State_AuthorizationMethodUnion {
	if x != nil {
		return x.AuthorizationMethod
	}
	return nil
}

type System_Aaa_Authorization_Config_AuthorizationMethodUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationMethodOpenconfigaaatypesaaamethodtype OpenconfigAaaTypesAAAMETHODTYPE `protobuf:"varint,261320746,opt,name=authorization_method_openconfigaaatypesaaamethodtype,json=authorizationMethodOpenconfigaaatypesaaamethodtype,proto3,enum=openconfig.OpenconfigAaaTypesAAAMETHODTYPE" json:"authorization_method_openconfigaaatypesaaamethodtype,omitempty"`
	AuthorizationMethodString                          string                          `protobuf:"bytes,508375681,opt,name=authorization_method_string,json=authorizationMethodString,proto3" json:"authorization_method_string,omitempty"`
}

func (x *System_Aaa_Authorization_Config_AuthorizationMethodUnion) Reset() {
	*x = System_Aaa_Authorization_Config_AuthorizationMethodUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authorization_Config_AuthorizationMethodUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authorization_Config_AuthorizationMethodUnion) ProtoMessage() {}

func (x *System_Aaa_Authorization_Config_AuthorizationMethodUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authorization_Config_AuthorizationMethodUnion.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authorization_Config_AuthorizationMethodUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0}
}

func (x *System_Aaa_Authorization_Config_AuthorizationMethodUnion) GetAuthorizationMethodOpenconfigaaatypesaaamethodtype() OpenconfigAaaTypesAAAMETHODTYPE {
	if x != nil {
		return x.AuthorizationMethodOpenconfigaaatypesaaamethodtype
	}
	return OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET
}

func (x *System_Aaa_Authorization_Config_AuthorizationMethodUnion) GetAuthorizationMethodString() string {
	if x != nil {
		return x.AuthorizationMethodString
	}
	return ""
}

type System_Aaa_Authorization_Events_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Aaa_Authorization_Events_Event_Config `protobuf:"bytes,284746930,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Aaa_Authorization_Events_Event_State  `protobuf:"bytes,241306543,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Aaa_Authorization_Events_Event) Reset() {
	*x = System_Aaa_Authorization_Events_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authorization_Events_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authorization_Events_Event) ProtoMessage() {}

func (x *System_Aaa_Authorization_Events_Event) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authorization_Events_Event.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authorization_Events_Event) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 2, 1, 0}
}

func (x *System_Aaa_Authorization_Events_Event) GetConfig() *System_Aaa_Authorization_Events_Event_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Aaa_Authorization_Events_Event) GetState() *System_Aaa_Authorization_Events_Event_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Aaa_Authorization_Events_EventKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE" json:"event_type,omitempty"`
	Event     *System_Aaa_Authorization_Events_Event      `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *System_Aaa_Authorization_Events_EventKey) Reset() {
	*x = System_Aaa_Authorization_Events_EventKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authorization_Events_EventKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authorization_Events_EventKey) ProtoMessage() {}

func (x *System_Aaa_Authorization_Events_EventKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authorization_Events_EventKey.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authorization_Events_EventKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 2, 1, 1}
}

func (x *System_Aaa_Authorization_Events_EventKey) GetEventType() OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE {
	if x != nil {
		return x.EventType
	}
	return OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_UNSET
}

func (x *System_Aaa_Authorization_Events_EventKey) GetEvent() *System_Aaa_Authorization_Events_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type System_Aaa_Authorization_Events_Event_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE `protobuf:"varint,449780140,opt,name=event_type,json=eventType,proto3,enum=openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE" json:"event_type,omitempty"`
}

func (x *System_Aaa_Authorization_Events_Event_Config) Reset() {
	*x = System_Aaa_Authorization_Events_Event_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authorization_Events_Event_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authorization_Events_Event_Config) ProtoMessage() {}

func (x *System_Aaa_Authorization_Events_Event_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authorization_Events_Event_Config.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authorization_Events_Event_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 2, 1, 0, 0}
}

func (x *System_Aaa_Authorization_Events_Event_Config) GetEventType() OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE {
	if x != nil {
		return x.EventType
	}
	return OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_UNSET
}

type System_Aaa_Authorization_Events_Event_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE `protobuf:"varint,301693687,opt,name=event_type,json=eventType,proto3,enum=openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE" json:"event_type,omitempty"`
}

func (x *System_Aaa_Authorization_Events_Event_State) Reset() {
	*x = System_Aaa_Authorization_Events_Event_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authorization_Events_Event_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authorization_Events_Event_State) ProtoMessage() {}

func (x *System_Aaa_Authorization_Events_Event_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authorization_Events_Event_State.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authorization_Events_Event_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 2, 1, 0, 1}
}

func (x *System_Aaa_Authorization_Events_Event_State) GetEventType() OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE {
	if x != nil {
		return x.EventType
	}
	return OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_UNSET
}

type System_Aaa_Authorization_State_AuthorizationMethodUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationMethodOpenconfigaaatypesaaamethodtype OpenconfigAaaTypesAAAMETHODTYPE `protobuf:"varint,531382335,opt,name=authorization_method_openconfigaaatypesaaamethodtype,json=authorizationMethodOpenconfigaaatypesaaamethodtype,proto3,enum=openconfig.OpenconfigAaaTypesAAAMETHODTYPE" json:"authorization_method_openconfigaaatypesaaamethodtype,omitempty"`
	AuthorizationMethodString                          string                          `protobuf:"bytes,123095898,opt,name=authorization_method_string,json=authorizationMethodString,proto3" json:"authorization_method_string,omitempty"`
}

func (x *System_Aaa_Authorization_State_AuthorizationMethodUnion) Reset() {
	*x = System_Aaa_Authorization_State_AuthorizationMethodUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_Authorization_State_AuthorizationMethodUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_Authorization_State_AuthorizationMethodUnion) ProtoMessage() {}

func (x *System_Aaa_Authorization_State_AuthorizationMethodUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_Authorization_State_AuthorizationMethodUnion.ProtoReflect.Descriptor instead.
func (*System_Aaa_Authorization_State_AuthorizationMethodUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 2, 2, 0}
}

func (x *System_Aaa_Authorization_State_AuthorizationMethodUnion) GetAuthorizationMethodOpenconfigaaatypesaaamethodtype() OpenconfigAaaTypesAAAMETHODTYPE {
	if x != nil {
		return x.AuthorizationMethodOpenconfigaaatypesaaamethodtype
	}
	return OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET
}

func (x *System_Aaa_Authorization_State_AuthorizationMethodUnion) GetAuthorizationMethodString() string {
	if x != nil {
		return x.AuthorizationMethodString
	}
	return ""
}

type System_Aaa_ServerGroups_ServerGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config  *System_Aaa_ServerGroups_ServerGroup_Config  `protobuf:"bytes,315982408,opt,name=config,proto3" json:"config,omitempty"`
	Servers *System_Aaa_ServerGroups_ServerGroup_Servers `protobuf:"bytes,454821498,opt,name=servers,proto3" json:"servers,omitempty"`
	State   *System_Aaa_ServerGroups_ServerGroup_State   `protobuf:"bytes,116974561,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0}
}

func (x *System_Aaa_ServerGroups_ServerGroup) GetConfig() *System_Aaa_ServerGroups_ServerGroup_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup) GetServers() *System_Aaa_ServerGroups_ServerGroup_Servers {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup) GetState() *System_Aaa_ServerGroups_ServerGroup_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Aaa_ServerGroups_ServerGroupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ServerGroup *System_Aaa_ServerGroups_ServerGroup `protobuf:"bytes,2,opt,name=server_group,json=serverGroup,proto3" json:"server_group,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroupKey) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroupKey) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroupKey.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroupKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 1}
}

func (x *System_Aaa_ServerGroups_ServerGroupKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *System_Aaa_ServerGroups_ServerGroupKey) GetServerGroup() *System_Aaa_ServerGroups_ServerGroup {
	if x != nil {
		return x.ServerGroup
	}
	return nil
}

type System_Aaa_ServerGroups_ServerGroup_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue           `protobuf:"bytes,347729010,opt,name=name,proto3" json:"name,omitempty"`
	Type OpenconfigAaaTypesAAASERVERTYPE `protobuf:"varint,70733999,opt,name=type,proto3,enum=openconfig.OpenconfigAaaTypesAAASERVERTYPE" json:"type,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup_Config) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup_Config) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup_Config.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0, 0}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Config) GetType() OpenconfigAaaTypesAAASERVERTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigAaaTypesAAASERVERTYPE_OPENCONFIGAAATYPESAAASERVERTYPE_UNSET
}

type System_Aaa_ServerGroups_ServerGroup_Servers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server []*System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey `protobuf:"bytes,253859376,rep,name=server,proto3" json:"server,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup_Servers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup_Servers) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup_Servers.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup_Servers) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers) GetServer() []*System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey {
	if x != nil {
		return x.Server
	}
	return nil
}

type System_Aaa_ServerGroups_ServerGroup_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue           `protobuf:"bytes,443695125,opt,name=name,proto3" json:"name,omitempty"`
	Type OpenconfigAaaTypesAAASERVERTYPE `protobuf:"varint,60901908,opt,name=type,proto3,enum=openconfig.OpenconfigAaaTypesAAASERVERTYPE" json:"type,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup_State) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup_State) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup_State.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0, 2}
}

func (x *System_Aaa_ServerGroups_ServerGroup_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_State) GetType() OpenconfigAaaTypesAAASERVERTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigAaaTypesAAASERVERTYPE_OPENCONFIGAAATYPESAAASERVERTYPE_UNSET
}

type System_Aaa_ServerGroups_ServerGroup_Servers_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config `protobuf:"bytes,251002053,opt,name=config,proto3" json:"config,omitempty"`
	Radius *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius `protobuf:"bytes,184878025,opt,name=radius,proto3" json:"radius,omitempty"`
	State  *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State  `protobuf:"bytes,5093306,opt,name=state,proto3" json:"state,omitempty"`
	Tacacs *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs `protobuf:"bytes,273909248,opt,name=tacacs,proto3" json:"tacacs,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup_Servers_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup_Servers_Server.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetConfig() *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetRadius() *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius {
	if x != nil {
		return x.Radius
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetState() *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetTacacs() *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs {
	if x != nil {
		return x.Tacacs
	}
	return nil
}

type System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string                                              `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Server  *System_Aaa_ServerGroups_ServerGroup_Servers_Server `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 1}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey) GetServer() *System_Aaa_ServerGroups_ServerGroup_Servers_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *ywrapper.StringValue `protobuf:"bytes,25514256,opt,name=address,proto3" json:"address,omitempty"`
	Name    *ywrapper.StringValue `protobuf:"bytes,197201537,opt,name=name,proto3" json:"name,omitempty"`
	Timeout *ywrapper.UintValue   `protobuf:"bytes,308122545,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 0}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) GetTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config `protobuf:"bytes,380583358,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State  `protobuf:"bytes,245647275,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 1}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetConfig() *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetState() *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Aaa_ServerGroups_ServerGroup_Servers_Server_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address            *ywrapper.StringValue `protobuf:"bytes,108601531,opt,name=address,proto3" json:"address,omitempty"`
	ConnectionAborts   *ywrapper.UintValue   `protobuf:"bytes,125162735,opt,name=connection_aborts,json=connectionAborts,proto3" json:"connection_aborts,omitempty"`
	ConnectionCloses   *ywrapper.UintValue   `protobuf:"bytes,161631333,opt,name=connection_closes,json=connectionCloses,proto3" json:"connection_closes,omitempty"`
	ConnectionFailures *ywrapper.UintValue   `protobuf:"bytes,113553227,opt,name=connection_failures,json=connectionFailures,proto3" json:"connection_failures,omitempty"`
	ConnectionOpens    *ywrapper.UintValue   `protobuf:"bytes,74843905,opt,name=connection_opens,json=connectionOpens,proto3" json:"connection_opens,omitempty"`
	ConnectionTimeouts *ywrapper.UintValue   `protobuf:"bytes,408747310,opt,name=connection_timeouts,json=connectionTimeouts,proto3" json:"connection_timeouts,omitempty"`
	ErrorsReceived     *ywrapper.UintValue   `protobuf:"bytes,531130208,opt,name=errors_received,json=errorsReceived,proto3" json:"errors_received,omitempty"`
	MessagesReceived   *ywrapper.UintValue   `protobuf:"bytes,183175971,opt,name=messages_received,json=messagesReceived,proto3" json:"messages_received,omitempty"`
	MessagesSent       *ywrapper.UintValue   `protobuf:"bytes,461917808,opt,name=messages_sent,json=messagesSent,proto3" json:"messages_sent,omitempty"`
	Name               *ywrapper.StringValue `protobuf:"bytes,179223720,opt,name=name,proto3" json:"name,omitempty"`
	Timeout            *ywrapper.UintValue   `protobuf:"bytes,255067946,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup_Servers_Server_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup_Servers_Server_State.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 2}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionAborts() *ywrapper.UintValue {
	if x != nil {
		return x.ConnectionAborts
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionCloses() *ywrapper.UintValue {
	if x != nil {
		return x.ConnectionCloses
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionFailures() *ywrapper.UintValue {
	if x != nil {
		return x.ConnectionFailures
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionOpens() *ywrapper.UintValue {
	if x != nil {
		return x.ConnectionOpens
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionTimeouts() *ywrapper.UintValue {
	if x != nil {
		return x.ConnectionTimeouts
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetErrorsReceived() *ywrapper.UintValue {
	if x != nil {
		return x.ErrorsReceived
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetMessagesReceived() *ywrapper.UintValue {
	if x != nil {
		return x.MessagesReceived
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetMessagesSent() *ywrapper.UintValue {
	if x != nil {
		return x.MessagesSent
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config `protobuf:"bytes,151997813,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State  `protobuf:"bytes,88743530,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 3}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetConfig() *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetState() *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcctPort           *ywrapper.UintValue   `protobuf:"bytes,289040892,opt,name=acct_port,json=acctPort,proto3" json:"acct_port,omitempty"`
	AuthPort           *ywrapper.UintValue   `protobuf:"bytes,298939869,opt,name=auth_port,json=authPort,proto3" json:"auth_port,omitempty"`
	RetransmitAttempts *ywrapper.UintValue   `protobuf:"bytes,418545541,opt,name=retransmit_attempts,json=retransmitAttempts,proto3" json:"retransmit_attempts,omitempty"`
	SecretKey          *ywrapper.StringValue `protobuf:"bytes,91269351,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SourceAddress      *ywrapper.StringValue `protobuf:"bytes,529894017,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 1, 0}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetAcctPort() *ywrapper.UintValue {
	if x != nil {
		return x.AcctPort
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetAuthPort() *ywrapper.UintValue {
	if x != nil {
		return x.AuthPort
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetRetransmitAttempts() *ywrapper.UintValue {
	if x != nil {
		return x.RetransmitAttempts
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetSecretKey() *ywrapper.StringValue {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcctPort           *ywrapper.UintValue                                                       `protobuf:"bytes,333746757,opt,name=acct_port,json=acctPort,proto3" json:"acct_port,omitempty"`
	AuthPort           *ywrapper.UintValue                                                       `protobuf:"bytes,214229728,opt,name=auth_port,json=authPort,proto3" json:"auth_port,omitempty"`
	Counters           *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters `protobuf:"bytes,38611033,opt,name=counters,proto3" json:"counters,omitempty"`
	RetransmitAttempts *ywrapper.UintValue                                                       `protobuf:"bytes,30010608,opt,name=retransmit_attempts,json=retransmitAttempts,proto3" json:"retransmit_attempts,omitempty"`
	SecretKey          *ywrapper.StringValue                                                     `protobuf:"bytes,162926660,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SourceAddress      *ywrapper.StringValue                                                     `protobuf:"bytes,50916050,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 1, 1}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetAcctPort() *ywrapper.UintValue {
	if x != nil {
		return x.AcctPort
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetAuthPort() *ywrapper.UintValue {
	if x != nil {
		return x.AuthPort
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetCounters() *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetRetransmitAttempts() *ywrapper.UintValue {
	if x != nil {
		return x.RetransmitAttempts
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetSecretKey() *ywrapper.StringValue {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessAccepts         *ywrapper.UintValue `protobuf:"bytes,215193910,opt,name=access_accepts,json=accessAccepts,proto3" json:"access_accepts,omitempty"`
	AccessRejects         *ywrapper.UintValue `protobuf:"bytes,25892249,opt,name=access_rejects,json=accessRejects,proto3" json:"access_rejects,omitempty"`
	RetriedAccessRequests *ywrapper.UintValue `protobuf:"bytes,400682451,opt,name=retried_access_requests,json=retriedAccessRequests,proto3" json:"retried_access_requests,omitempty"`
	TimeoutAccessRequests *ywrapper.UintValue `protobuf:"bytes,24602675,opt,name=timeout_access_requests,json=timeoutAccessRequests,proto3" json:"timeout_access_requests,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 1, 1, 0}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetAccessAccepts() *ywrapper.UintValue {
	if x != nil {
		return x.AccessAccepts
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetAccessRejects() *ywrapper.UintValue {
	if x != nil {
		return x.AccessRejects
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetRetriedAccessRequests() *ywrapper.UintValue {
	if x != nil {
		return x.RetriedAccessRequests
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetTimeoutAccessRequests() *ywrapper.UintValue {
	if x != nil {
		return x.TimeoutAccessRequests
	}
	return nil
}

type System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port          *ywrapper.UintValue   `protobuf:"bytes,52133369,opt,name=port,proto3" json:"port,omitempty"`
	SecretKey     *ywrapper.StringValue `protobuf:"bytes,390882862,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SourceAddress *ywrapper.StringValue `protobuf:"bytes,165060088,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 3, 0}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) GetSecretKey() *ywrapper.StringValue {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port          *ywrapper.UintValue   `protobuf:"bytes,256191988,opt,name=port,proto3" json:"port,omitempty"`
	SecretKey     *ywrapper.StringValue `protobuf:"bytes,176870715,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SourceAddress *ywrapper.StringValue `protobuf:"bytes,407535333,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) Reset() {
	*x = System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) ProtoMessage() {}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State.ProtoReflect.Descriptor instead.
func (*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1, 0, 3, 1}
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) GetSecretKey() *ywrapper.StringValue {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type System_Alarms_Alarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Alarms_Alarm_Config `protobuf:"bytes,139180024,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Alarms_Alarm_State  `protobuf:"bytes,273821713,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Alarms_Alarm) Reset() {
	*x = System_Alarms_Alarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Alarms_Alarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Alarms_Alarm) ProtoMessage() {}

func (x *System_Alarms_Alarm) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Alarms_Alarm.ProtoReflect.Descriptor instead.
func (*System_Alarms_Alarm) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *System_Alarms_Alarm) GetConfig() *System_Alarms_Alarm_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Alarms_Alarm) GetState() *System_Alarms_Alarm_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Alarms_AlarmKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Alarm *System_Alarms_Alarm `protobuf:"bytes,2,opt,name=alarm,proto3" json:"alarm,omitempty"`
}

func (x *System_Alarms_AlarmKey) Reset() {
	*x = System_Alarms_AlarmKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Alarms_AlarmKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Alarms_AlarmKey) ProtoMessage() {}

func (x *System_Alarms_AlarmKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Alarms_AlarmKey.ProtoReflect.Descriptor instead.
func (*System_Alarms_AlarmKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *System_Alarms_AlarmKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *System_Alarms_AlarmKey) GetAlarm() *System_Alarms_Alarm {
	if x != nil {
		return x.Alarm
	}
	return nil
}

type System_Alarms_Alarm_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *System_Alarms_Alarm_Config) Reset() {
	*x = System_Alarms_Alarm_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Alarms_Alarm_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Alarms_Alarm_Config) ProtoMessage() {}

func (x *System_Alarms_Alarm_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Alarms_Alarm_Config.ProtoReflect.Descriptor instead.
func (*System_Alarms_Alarm_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type System_Alarms_Alarm_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *ywrapper.StringValue                       `protobuf:"bytes,207370355,opt,name=id,proto3" json:"id,omitempty"`
	Resource    *ywrapper.StringValue                       `protobuf:"bytes,290470824,opt,name=resource,proto3" json:"resource,omitempty"`
	Severity    OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY `protobuf:"varint,464665929,opt,name=severity,proto3,enum=openconfig.OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY" json:"severity,omitempty"`
	Text        *ywrapper.StringValue                       `protobuf:"bytes,19701185,opt,name=text,proto3" json:"text,omitempty"`
	TimeCreated *ywrapper.UintValue                         `protobuf:"bytes,258054456,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	// Types that are assignable to TypeId:
	//	*System_Alarms_Alarm_State_TypeIdOpenconfigalarmtypesopenconfigalarmtypeid
	//	*System_Alarms_Alarm_State_TypeIdString
	TypeId isSystem_Alarms_Alarm_State_TypeId `protobuf_oneof:"type_id"`
}

func (x *System_Alarms_Alarm_State) Reset() {
	*x = System_Alarms_Alarm_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Alarms_Alarm_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Alarms_Alarm_State) ProtoMessage() {}

func (x *System_Alarms_Alarm_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Alarms_Alarm_State.ProtoReflect.Descriptor instead.
func (*System_Alarms_Alarm_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *System_Alarms_Alarm_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *System_Alarms_Alarm_State) GetResource() *ywrapper.StringValue {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *System_Alarms_Alarm_State) GetSeverity() OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY {
	if x != nil {
		return x.Severity
	}
	return OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNSET
}

func (x *System_Alarms_Alarm_State) GetText() *ywrapper.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *System_Alarms_Alarm_State) GetTimeCreated() *ywrapper.UintValue {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (m *System_Alarms_Alarm_State) GetTypeId() isSystem_Alarms_Alarm_State_TypeId {
	if m != nil {
		return m.TypeId
	}
	return nil
}

func (x *System_Alarms_Alarm_State) GetTypeIdOpenconfigalarmtypesopenconfigalarmtypeid() OpenconfigAlarmTypesOPENCONFIGALARMTYPEID {
	if x, ok := x.GetTypeId().(*System_Alarms_Alarm_State_TypeIdOpenconfigalarmtypesopenconfigalarmtypeid); ok {
		return x.TypeIdOpenconfigalarmtypesopenconfigalarmtypeid
	}
	return OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_UNSET
}

func (x *System_Alarms_Alarm_State) GetTypeIdString() string {
	if x, ok := x.GetTypeId().(*System_Alarms_Alarm_State_TypeIdString); ok {
		return x.TypeIdString
	}
	return ""
}

type isSystem_Alarms_Alarm_State_TypeId interface {
	isSystem_Alarms_Alarm_State_TypeId()
}

type System_Alarms_Alarm_State_TypeIdOpenconfigalarmtypesopenconfigalarmtypeid struct {
	TypeIdOpenconfigalarmtypesopenconfigalarmtypeid OpenconfigAlarmTypesOPENCONFIGALARMTYPEID `protobuf:"varint,375918181,opt,name=type_id_openconfigalarmtypesopenconfigalarmtypeid,json=typeIdOpenconfigalarmtypesopenconfigalarmtypeid,proto3,enum=openconfig.OpenconfigAlarmTypesOPENCONFIGALARMTYPEID,oneof"`
}

type System_Alarms_Alarm_State_TypeIdString struct {
	TypeIdString string `protobuf:"bytes,387256722,opt,name=type_id_string,json=typeIdString,proto3,oneof"`
}

func (*System_Alarms_Alarm_State_TypeIdOpenconfigalarmtypesopenconfigalarmtypeid) isSystem_Alarms_Alarm_State_TypeId() {
}

func (*System_Alarms_Alarm_State_TypeIdString) isSystem_Alarms_Alarm_State_TypeId() {}

type System_Clock_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimezoneName *ywrapper.StringValue `protobuf:"bytes,100228070,opt,name=timezone_name,json=timezoneName,proto3" json:"timezone_name,omitempty"`
}

func (x *System_Clock_Config) Reset() {
	*x = System_Clock_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Clock_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Clock_Config) ProtoMessage() {}

func (x *System_Clock_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Clock_Config.ProtoReflect.Descriptor instead.
func (*System_Clock_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *System_Clock_Config) GetTimezoneName() *ywrapper.StringValue {
	if x != nil {
		return x.TimezoneName
	}
	return nil
}

type System_Clock_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimezoneName *ywrapper.StringValue `protobuf:"bytes,390124251,opt,name=timezone_name,json=timezoneName,proto3" json:"timezone_name,omitempty"`
}

func (x *System_Clock_State) Reset() {
	*x = System_Clock_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Clock_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Clock_State) ProtoMessage() {}

func (x *System_Clock_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Clock_State.ProtoReflect.Descriptor instead.
func (*System_Clock_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *System_Clock_State) GetTimezoneName() *ywrapper.StringValue {
	if x != nil {
		return x.TimezoneName
	}
	return nil
}

type System_Cpus_Cpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *System_Cpus_Cpu_State `protobuf:"bytes,284865267,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Cpus_Cpu) Reset() {
	*x = System_Cpus_Cpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Cpus_Cpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Cpus_Cpu) ProtoMessage() {}

func (x *System_Cpus_Cpu) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Cpus_Cpu.ProtoReflect.Descriptor instead.
func (*System_Cpus_Cpu) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *System_Cpus_Cpu) GetState() *System_Cpus_Cpu_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Cpus_CpuKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Index:
	//	*System_Cpus_CpuKey_IndexIndex
	//	*System_Cpus_CpuKey_IndexUint64
	Index isSystem_Cpus_CpuKey_Index `protobuf_oneof:"index"`
	Cpu   *System_Cpus_Cpu           `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
}

func (x *System_Cpus_CpuKey) Reset() {
	*x = System_Cpus_CpuKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Cpus_CpuKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Cpus_CpuKey) ProtoMessage() {}

func (x *System_Cpus_CpuKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Cpus_CpuKey.ProtoReflect.Descriptor instead.
func (*System_Cpus_CpuKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (m *System_Cpus_CpuKey) GetIndex() isSystem_Cpus_CpuKey_Index {
	if m != nil {
		return m.Index
	}
	return nil
}

func (x *System_Cpus_CpuKey) GetIndexIndex() System_Cpus_CpuKey_Index {
	if x, ok := x.GetIndex().(*System_Cpus_CpuKey_IndexIndex); ok {
		return x.IndexIndex
	}
	return System_Cpus_CpuKey_INDEX_UNSET
}

func (x *System_Cpus_CpuKey) GetIndexUint64() uint64 {
	if x, ok := x.GetIndex().(*System_Cpus_CpuKey_IndexUint64); ok {
		return x.IndexUint64
	}
	return 0
}

func (x *System_Cpus_CpuKey) GetCpu() *System_Cpus_Cpu {
	if x != nil {
		return x.Cpu
	}
	return nil
}

type isSystem_Cpus_CpuKey_Index interface {
	isSystem_Cpus_CpuKey_Index()
}

type System_Cpus_CpuKey_IndexIndex struct {
	IndexIndex System_Cpus_CpuKey_Index `protobuf:"varint,408896491,opt,name=index_index,json=indexIndex,proto3,enum=openconfig.System_Cpus_CpuKey_Index,oneof"`
}

type System_Cpus_CpuKey_IndexUint64 struct {
	IndexUint64 uint64 `protobuf:"varint,247396011,opt,name=index_uint64,json=indexUint64,proto3,oneof"`
}

func (*System_Cpus_CpuKey_IndexIndex) isSystem_Cpus_CpuKey_Index() {}

func (*System_Cpus_CpuKey_IndexUint64) isSystem_Cpus_CpuKey_Index() {}

type System_Cpus_Cpu_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareInterrupt *System_Cpus_Cpu_State_HardwareInterrupt `protobuf:"bytes,81518708,opt,name=hardware_interrupt,json=hardwareInterrupt,proto3" json:"hardware_interrupt,omitempty"`
	Idle              *System_Cpus_Cpu_State_Idle              `protobuf:"bytes,511801900,opt,name=idle,proto3" json:"idle,omitempty"`
	// Types that are assignable to Index:
	//	*System_Cpus_Cpu_State_IndexIndex
	//	*System_Cpus_Cpu_State_IndexUint64
	Index             isSystem_Cpus_Cpu_State_Index            `protobuf_oneof:"index"`
	Kernel            *System_Cpus_Cpu_State_Kernel            `protobuf:"bytes,23883017,opt,name=kernel,proto3" json:"kernel,omitempty"`
	Nice              *System_Cpus_Cpu_State_Nice              `protobuf:"bytes,74777833,opt,name=nice,proto3" json:"nice,omitempty"`
	SoftwareInterrupt *System_Cpus_Cpu_State_SoftwareInterrupt `protobuf:"bytes,350532999,opt,name=software_interrupt,json=softwareInterrupt,proto3" json:"software_interrupt,omitempty"`
	Total             *System_Cpus_Cpu_State_Total             `protobuf:"bytes,497504852,opt,name=total,proto3" json:"total,omitempty"`
	User              *System_Cpus_Cpu_State_User              `protobuf:"bytes,329002807,opt,name=user,proto3" json:"user,omitempty"`
	Wait              *System_Cpus_Cpu_State_Wait              `protobuf:"bytes,517899549,opt,name=wait,proto3" json:"wait,omitempty"`
}

func (x *System_Cpus_Cpu_State) Reset() {
	*x = System_Cpus_Cpu_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Cpus_Cpu_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Cpus_Cpu_State) ProtoMessage() {}

func (x *System_Cpus_Cpu_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Cpus_Cpu_State.ProtoReflect.Descriptor instead.
func (*System_Cpus_Cpu_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

func (x *System_Cpus_Cpu_State) GetHardwareInterrupt() *System_Cpus_Cpu_State_HardwareInterrupt {
	if x != nil {
		return x.HardwareInterrupt
	}
	return nil
}

func (x *System_Cpus_Cpu_State) GetIdle() *System_Cpus_Cpu_State_Idle {
	if x != nil {
		return x.Idle
	}
	return nil
}

func (m *System_Cpus_Cpu_State) GetIndex() isSystem_Cpus_Cpu_State_Index {
	if m != nil {
		return m.Index
	}
	return nil
}

func (x *System_Cpus_Cpu_State) GetIndexIndex() System_Cpus_Cpu_State_Index {
	if x, ok := x.GetIndex().(*System_Cpus_Cpu_State_IndexIndex); ok {
		return x.IndexIndex
	}
	return System_Cpus_Cpu_State_INDEX_UNSET
}

func (x *System_Cpus_Cpu_State) GetIndexUint64() uint64 {
	if x, ok := x.GetIndex().(*System_Cpus_Cpu_State_IndexUint64); ok {
		return x.IndexUint64
	}
	return 0
}

func (x *System_Cpus_Cpu_State) GetKernel() *System_Cpus_Cpu_State_Kernel {
	if x != nil {
		return x.Kernel
	}
	return nil
}

func (x *System_Cpus_Cpu_State) GetNice() *System_Cpus_Cpu_State_Nice {
	if x != nil {
		return x.Nice
	}
	return nil
}

func (x *System_Cpus_Cpu_State) GetSoftwareInterrupt() *System_Cpus_Cpu_State_SoftwareInterrupt {
	if x != nil {
		return x.SoftwareInterrupt
	}
	return nil
}

func (x *System_Cpus_Cpu_State) GetTotal() *System_Cpus_Cpu_State_Total {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *System_Cpus_Cpu_State) GetUser() *System_Cpus_Cpu_State_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *System_Cpus_Cpu_State) GetWait() *System_Cpus_Cpu_State_Wait {
	if x != nil {
		return x.Wait
	}
	return nil
}

type isSystem_Cpus_Cpu_State_Index interface {
	isSystem_Cpus_Cpu_State_Index()
}

type System_Cpus_Cpu_State_IndexIndex struct {
	IndexIndex System_Cpus_Cpu_State_Index `protobuf:"varint,408896491,opt,name=index_index,json=indexIndex,proto3,enum=openconfig.System_Cpus_Cpu_State_Index,oneof"`
}

type System_Cpus_Cpu_State_IndexUint64 struct {
	IndexUint64 uint64 `protobuf:"varint,247396011,opt,name=index_uint64,json=indexUint64,proto3,oneof"`
}

func (*System_Cpus_Cpu_State_IndexIndex) isSystem_Cpus_Cpu_State_Index() {}

func (*System_Cpus_Cpu_State_IndexUint64) isSystem_Cpus_Cpu_State_Index() {}

type System_Cpus_Cpu_State_HardwareInterrupt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,422453613,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,196083674,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,343471148,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,203756111,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,12201747,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,69535217,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,511436553,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *System_Cpus_Cpu_State_HardwareInterrupt) Reset() {
	*x = System_Cpus_Cpu_State_HardwareInterrupt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Cpus_Cpu_State_HardwareInterrupt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Cpus_Cpu_State_HardwareInterrupt) ProtoMessage() {}

func (x *System_Cpus_Cpu_State_HardwareInterrupt) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Cpus_Cpu_State_HardwareInterrupt.ProtoReflect.Descriptor instead.
func (*System_Cpus_Cpu_State_HardwareInterrupt) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 4, 0, 0, 0}
}

func (x *System_Cpus_Cpu_State_HardwareInterrupt) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *System_Cpus_Cpu_State_HardwareInterrupt) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *System_Cpus_Cpu_State_HardwareInterrupt) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *System_Cpus_Cpu_State_HardwareInterrupt) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *System_Cpus_Cpu_State_HardwareInterrupt) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *System_Cpus_Cpu_State_HardwareInterrupt) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *System_Cpus_Cpu_State_HardwareInterrupt) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type System_Cpus_Cpu_State_Idle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,124715605,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,230199506,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,496096436,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,445461847,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,503768027,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,42811817,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,265827073,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *System_Cpus_Cpu_State_Idle) Reset() {
	*x = System_Cpus_Cpu_State_Idle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Cpus_Cpu_State_Idle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Cpus_Cpu_State_Idle) ProtoMessage() {}

func (x *System_Cpus_Cpu_State_Idle) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Cpus_Cpu_State_Idle.ProtoReflect.Descriptor instead.
func (*System_Cpus_Cpu_State_Idle) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 4, 0, 0, 1}
}

func (x *System_Cpus_Cpu_State_Idle) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Idle) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Idle) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Idle) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Idle) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Idle) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Idle) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type System_Cpus_Cpu_State_Kernel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,253885460,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,168068719,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,444985103,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,470023086,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,329601932,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,67373056,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,235683554,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *System_Cpus_Cpu_State_Kernel) Reset() {
	*x = System_Cpus_Cpu_State_Kernel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Cpus_Cpu_State_Kernel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Cpus_Cpu_State_Kernel) ProtoMessage() {}

func (x *System_Cpus_Cpu_State_Kernel) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Cpus_Cpu_State_Kernel.ProtoReflect.Descriptor instead.
func (*System_Cpus_Cpu_State_Kernel) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 4, 0, 0, 2}
}

func (x *System_Cpus_Cpu_State_Kernel) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Kernel) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Kernel) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Kernel) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Kernel) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Kernel) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Kernel) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type System_Cpus_Cpu_State_Nice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,329385588,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,453505999,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,48963055,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,8755214,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,136550124,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,142976352,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,330377410,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *System_Cpus_Cpu_State_Nice) Reset() {
	*x = System_Cpus_Cpu_State_Nice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Cpus_Cpu_State_Nice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Cpus_Cpu_State_Nice) ProtoMessage() {}

func (x *System_Cpus_Cpu_State_Nice) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Cpus_Cpu_State_Nice.ProtoReflect.Descriptor instead.
func (*System_Cpus_Cpu_State_Nice) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 4, 0, 0, 3}
}

func (x *System_Cpus_Cpu_State_Nice) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Nice) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Nice) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Nice) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Nice) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Nice) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Nice) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type System_Cpus_Cpu_State_SoftwareInterrupt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,458756582,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,162043877,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,336602009,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,71002944,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,94425762,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,473652942,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,160385836,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *System_Cpus_Cpu_State_SoftwareInterrupt) Reset() {
	*x = System_Cpus_Cpu_State_SoftwareInterrupt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Cpus_Cpu_State_SoftwareInterrupt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Cpus_Cpu_State_SoftwareInterrupt) ProtoMessage() {}

func (x *System_Cpus_Cpu_State_SoftwareInterrupt) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Cpus_Cpu_State_SoftwareInterrupt.ProtoReflect.Descriptor instead.
func (*System_Cpus_Cpu_State_SoftwareInterrupt) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 4, 0, 0, 4}
}

func (x *System_Cpus_Cpu_State_SoftwareInterrupt) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *System_Cpus_Cpu_State_SoftwareInterrupt) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *System_Cpus_Cpu_State_SoftwareInterrupt) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *System_Cpus_Cpu_State_SoftwareInterrupt) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *System_Cpus_Cpu_State_SoftwareInterrupt) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *System_Cpus_Cpu_State_SoftwareInterrupt) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *System_Cpus_Cpu_State_SoftwareInterrupt) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type System_Cpus_Cpu_State_Total struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,132944461,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,386144186,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,496728204,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,451014703,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,333757299,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,316793809,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,130415593,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *System_Cpus_Cpu_State_Total) Reset() {
	*x = System_Cpus_Cpu_State_Total{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Cpus_Cpu_State_Total) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Cpus_Cpu_State_Total) ProtoMessage() {}

func (x *System_Cpus_Cpu_State_Total) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Cpus_Cpu_State_Total.ProtoReflect.Descriptor instead.
func (*System_Cpus_Cpu_State_Total) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 4, 0, 0, 5}
}

func (x *System_Cpus_Cpu_State_Total) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Total) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Total) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Total) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Total) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Total) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Total) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type System_Cpus_Cpu_State_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,360451894,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,3525685,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,14529097,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,509582096,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,31166770,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,375361214,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,506696348,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *System_Cpus_Cpu_State_User) Reset() {
	*x = System_Cpus_Cpu_State_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Cpus_Cpu_State_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Cpus_Cpu_State_User) ProtoMessage() {}

func (x *System_Cpus_Cpu_State_User) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Cpus_Cpu_State_User.ProtoReflect.Descriptor instead.
func (*System_Cpus_Cpu_State_User) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 4, 0, 0, 6}
}

func (x *System_Cpus_Cpu_State_User) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *System_Cpus_Cpu_State_User) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *System_Cpus_Cpu_State_User) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *System_Cpus_Cpu_State_User) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *System_Cpus_Cpu_State_User) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *System_Cpus_Cpu_State_User) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *System_Cpus_Cpu_State_User) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type System_Cpus_Cpu_State_Wait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,461699088,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,14128043,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,227652571,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,276556978,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,71337832,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,142336092,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,42140422,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *System_Cpus_Cpu_State_Wait) Reset() {
	*x = System_Cpus_Cpu_State_Wait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Cpus_Cpu_State_Wait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Cpus_Cpu_State_Wait) ProtoMessage() {}

func (x *System_Cpus_Cpu_State_Wait) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Cpus_Cpu_State_Wait.ProtoReflect.Descriptor instead.
func (*System_Cpus_Cpu_State_Wait) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 4, 0, 0, 7}
}

func (x *System_Cpus_Cpu_State_Wait) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Wait) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Wait) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Wait) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Wait) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Wait) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *System_Cpus_Cpu_State_Wait) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type System_Dns_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search []*ywrapper.StringValue `protobuf:"bytes,529094948,rep,name=search,proto3" json:"search,omitempty"`
}

func (x *System_Dns_Config) Reset() {
	*x = System_Dns_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Dns_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Dns_Config) ProtoMessage() {}

func (x *System_Dns_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Dns_Config.ProtoReflect.Descriptor instead.
func (*System_Dns_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *System_Dns_Config) GetSearch() []*ywrapper.StringValue {
	if x != nil {
		return x.Search
	}
	return nil
}

type System_Dns_HostEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostEntry []*System_Dns_HostEntries_HostEntryKey `protobuf:"bytes,297400348,rep,name=host_entry,json=hostEntry,proto3" json:"host_entry,omitempty"`
}

func (x *System_Dns_HostEntries) Reset() {
	*x = System_Dns_HostEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Dns_HostEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Dns_HostEntries) ProtoMessage() {}

func (x *System_Dns_HostEntries) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Dns_HostEntries.ProtoReflect.Descriptor instead.
func (*System_Dns_HostEntries) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 5, 1}
}

func (x *System_Dns_HostEntries) GetHostEntry() []*System_Dns_HostEntries_HostEntryKey {
	if x != nil {
		return x.HostEntry
	}
	return nil
}

type System_Dns_Servers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server []*System_Dns_Servers_ServerKey `protobuf:"bytes,234465781,rep,name=server,proto3" json:"server,omitempty"`
}

func (x *System_Dns_Servers) Reset() {
	*x = System_Dns_Servers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Dns_Servers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Dns_Servers) ProtoMessage() {}

func (x *System_Dns_Servers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Dns_Servers.ProtoReflect.Descriptor instead.
func (*System_Dns_Servers) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 5, 2}
}

func (x *System_Dns_Servers) GetServer() []*System_Dns_Servers_ServerKey {
	if x != nil {
		return x.Server
	}
	return nil
}

type System_Dns_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search []*ywrapper.StringValue `protobuf:"bytes,17042089,rep,name=search,proto3" json:"search,omitempty"`
}

func (x *System_Dns_State) Reset() {
	*x = System_Dns_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Dns_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Dns_State) ProtoMessage() {}

func (x *System_Dns_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Dns_State.ProtoReflect.Descriptor instead.
func (*System_Dns_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 5, 3}
}

func (x *System_Dns_State) GetSearch() []*ywrapper.StringValue {
	if x != nil {
		return x.Search
	}
	return nil
}

type System_Dns_HostEntries_HostEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Dns_HostEntries_HostEntry_Config `protobuf:"bytes,429171057,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Dns_HostEntries_HostEntry_State  `protobuf:"bytes,259656678,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Dns_HostEntries_HostEntry) Reset() {
	*x = System_Dns_HostEntries_HostEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Dns_HostEntries_HostEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Dns_HostEntries_HostEntry) ProtoMessage() {}

func (x *System_Dns_HostEntries_HostEntry) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Dns_HostEntries_HostEntry.ProtoReflect.Descriptor instead.
func (*System_Dns_HostEntries_HostEntry) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 5, 1, 0}
}

func (x *System_Dns_HostEntries_HostEntry) GetConfig() *System_Dns_HostEntries_HostEntry_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Dns_HostEntries_HostEntry) GetState() *System_Dns_HostEntries_HostEntry_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Dns_HostEntries_HostEntryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname  string                            `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	HostEntry *System_Dns_HostEntries_HostEntry `protobuf:"bytes,2,opt,name=host_entry,json=hostEntry,proto3" json:"host_entry,omitempty"`
}

func (x *System_Dns_HostEntries_HostEntryKey) Reset() {
	*x = System_Dns_HostEntries_HostEntryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Dns_HostEntries_HostEntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Dns_HostEntries_HostEntryKey) ProtoMessage() {}

func (x *System_Dns_HostEntries_HostEntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Dns_HostEntries_HostEntryKey.ProtoReflect.Descriptor instead.
func (*System_Dns_HostEntries_HostEntryKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 5, 1, 1}
}

func (x *System_Dns_HostEntries_HostEntryKey) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *System_Dns_HostEntries_HostEntryKey) GetHostEntry() *System_Dns_HostEntries_HostEntry {
	if x != nil {
		return x.HostEntry
	}
	return nil
}

type System_Dns_HostEntries_HostEntry_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias       []*ywrapper.StringValue `protobuf:"bytes,202464928,rep,name=alias,proto3" json:"alias,omitempty"`
	Hostname    *ywrapper.StringValue   `protobuf:"bytes,145653559,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ipv4Address []*ywrapper.StringValue `protobuf:"bytes,47682642,rep,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address []*ywrapper.StringValue `protobuf:"bytes,89261280,rep,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
}

func (x *System_Dns_HostEntries_HostEntry_Config) Reset() {
	*x = System_Dns_HostEntries_HostEntry_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Dns_HostEntries_HostEntry_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Dns_HostEntries_HostEntry_Config) ProtoMessage() {}

func (x *System_Dns_HostEntries_HostEntry_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Dns_HostEntries_HostEntry_Config.ProtoReflect.Descriptor instead.
func (*System_Dns_HostEntries_HostEntry_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 5, 1, 0, 0}
}

func (x *System_Dns_HostEntries_HostEntry_Config) GetAlias() []*ywrapper.StringValue {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *System_Dns_HostEntries_HostEntry_Config) GetHostname() *ywrapper.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *System_Dns_HostEntries_HostEntry_Config) GetIpv4Address() []*ywrapper.StringValue {
	if x != nil {
		return x.Ipv4Address
	}
	return nil
}

func (x *System_Dns_HostEntries_HostEntry_Config) GetIpv6Address() []*ywrapper.StringValue {
	if x != nil {
		return x.Ipv6Address
	}
	return nil
}

type System_Dns_HostEntries_HostEntry_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias       []*ywrapper.StringValue `protobuf:"bytes,117816075,rep,name=alias,proto3" json:"alias,omitempty"`
	Hostname    *ywrapper.StringValue   `protobuf:"bytes,171107854,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ipv4Address []*ywrapper.StringValue `protobuf:"bytes,444828131,rep,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address []*ywrapper.StringValue `protobuf:"bytes,360963057,rep,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
}

func (x *System_Dns_HostEntries_HostEntry_State) Reset() {
	*x = System_Dns_HostEntries_HostEntry_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Dns_HostEntries_HostEntry_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Dns_HostEntries_HostEntry_State) ProtoMessage() {}

func (x *System_Dns_HostEntries_HostEntry_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Dns_HostEntries_HostEntry_State.ProtoReflect.Descriptor instead.
func (*System_Dns_HostEntries_HostEntry_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 5, 1, 0, 1}
}

func (x *System_Dns_HostEntries_HostEntry_State) GetAlias() []*ywrapper.StringValue {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *System_Dns_HostEntries_HostEntry_State) GetHostname() *ywrapper.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *System_Dns_HostEntries_HostEntry_State) GetIpv4Address() []*ywrapper.StringValue {
	if x != nil {
		return x.Ipv4Address
	}
	return nil
}

func (x *System_Dns_HostEntries_HostEntry_State) GetIpv6Address() []*ywrapper.StringValue {
	if x != nil {
		return x.Ipv6Address
	}
	return nil
}

type System_Dns_Servers_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Dns_Servers_Server_Config `protobuf:"bytes,293688474,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Dns_Servers_Server_State  `protobuf:"bytes,244058935,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Dns_Servers_Server) Reset() {
	*x = System_Dns_Servers_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Dns_Servers_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Dns_Servers_Server) ProtoMessage() {}

func (x *System_Dns_Servers_Server) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Dns_Servers_Server.ProtoReflect.Descriptor instead.
func (*System_Dns_Servers_Server) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 5, 2, 0}
}

func (x *System_Dns_Servers_Server) GetConfig() *System_Dns_Servers_Server_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Dns_Servers_Server) GetState() *System_Dns_Servers_Server_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Dns_Servers_ServerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string                     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Server  *System_Dns_Servers_Server `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *System_Dns_Servers_ServerKey) Reset() {
	*x = System_Dns_Servers_ServerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Dns_Servers_ServerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Dns_Servers_ServerKey) ProtoMessage() {}

func (x *System_Dns_Servers_ServerKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Dns_Servers_ServerKey.ProtoReflect.Descriptor instead.
func (*System_Dns_Servers_ServerKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 5, 2, 1}
}

func (x *System_Dns_Servers_ServerKey) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *System_Dns_Servers_ServerKey) GetServer() *System_Dns_Servers_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type System_Dns_Servers_Server_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *ywrapper.StringValue `protobuf:"bytes,141908379,opt,name=address,proto3" json:"address,omitempty"`
	Port    *ywrapper.UintValue   `protobuf:"bytes,441306980,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *System_Dns_Servers_Server_Config) Reset() {
	*x = System_Dns_Servers_Server_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Dns_Servers_Server_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Dns_Servers_Server_Config) ProtoMessage() {}

func (x *System_Dns_Servers_Server_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Dns_Servers_Server_Config.ProtoReflect.Descriptor instead.
func (*System_Dns_Servers_Server_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 5, 2, 0, 0}
}

func (x *System_Dns_Servers_Server_Config) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *System_Dns_Servers_Server_Config) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

type System_Dns_Servers_Server_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *ywrapper.StringValue `protobuf:"bytes,364706914,opt,name=address,proto3" json:"address,omitempty"`
	Port    *ywrapper.UintValue   `protobuf:"bytes,528842771,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *System_Dns_Servers_Server_State) Reset() {
	*x = System_Dns_Servers_Server_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Dns_Servers_Server_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Dns_Servers_Server_State) ProtoMessage() {}

func (x *System_Dns_Servers_Server_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Dns_Servers_Server_State.ProtoReflect.Descriptor instead.
func (*System_Dns_Servers_Server_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 5, 2, 0, 1}
}

func (x *System_Dns_Servers_Server_State) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *System_Dns_Servers_Server_State) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

type System_GrpcServer_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId          *ywrapper.StringValue                            `protobuf:"bytes,441121224,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	Enable                 *ywrapper.BoolValue                              `protobuf:"bytes,25007668,opt,name=enable,proto3" json:"enable,omitempty"`
	ListenAddresses        []*System_GrpcServer_Config_ListenAddressesUnion `protobuf:"bytes,269758191,rep,name=listen_addresses,json=listenAddresses,proto3" json:"listen_addresses,omitempty"`
	MetadataAuthentication *ywrapper.BoolValue                              `protobuf:"bytes,459595831,opt,name=metadata_authentication,json=metadataAuthentication,proto3" json:"metadata_authentication,omitempty"`
	Port                   *ywrapper.UintValue                              `protobuf:"bytes,118468388,opt,name=port,proto3" json:"port,omitempty"`
	TransportSecurity      *ywrapper.BoolValue                              `protobuf:"bytes,161056339,opt,name=transport_security,json=transportSecurity,proto3" json:"transport_security,omitempty"`
}

func (x *System_GrpcServer_Config) Reset() {
	*x = System_GrpcServer_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_GrpcServer_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_GrpcServer_Config) ProtoMessage() {}

func (x *System_GrpcServer_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_GrpcServer_Config.ProtoReflect.Descriptor instead.
func (*System_GrpcServer_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *System_GrpcServer_Config) GetCertificateId() *ywrapper.StringValue {
	if x != nil {
		return x.CertificateId
	}
	return nil
}

func (x *System_GrpcServer_Config) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *System_GrpcServer_Config) GetListenAddresses() []*System_GrpcServer_Config_ListenAddressesUnion {
	if x != nil {
		return x.ListenAddresses
	}
	return nil
}

func (x *System_GrpcServer_Config) GetMetadataAuthentication() *ywrapper.BoolValue {
	if x != nil {
		return x.MetadataAuthentication
	}
	return nil
}

func (x *System_GrpcServer_Config) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *System_GrpcServer_Config) GetTransportSecurity() *ywrapper.BoolValue {
	if x != nil {
		return x.TransportSecurity
	}
	return nil
}

type System_GrpcServer_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId          *ywrapper.StringValue                           `protobuf:"bytes,193137307,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	Enable                 *ywrapper.BoolValue                             `protobuf:"bytes,372137983,opt,name=enable,proto3" json:"enable,omitempty"`
	ListenAddresses        []*System_GrpcServer_State_ListenAddressesUnion `protobuf:"bytes,150383896,rep,name=listen_addresses,json=listenAddresses,proto3" json:"listen_addresses,omitempty"`
	MetadataAuthentication *ywrapper.BoolValue                             `protobuf:"bytes,402791218,opt,name=metadata_authentication,json=metadataAuthentication,proto3" json:"metadata_authentication,omitempty"`
	Port                   *ywrapper.UintValue                             `protobuf:"bytes,70176211,opt,name=port,proto3" json:"port,omitempty"`
	TransportSecurity      *ywrapper.BoolValue                             `protobuf:"bytes,316334916,opt,name=transport_security,json=transportSecurity,proto3" json:"transport_security,omitempty"`
}

func (x *System_GrpcServer_State) Reset() {
	*x = System_GrpcServer_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_GrpcServer_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_GrpcServer_State) ProtoMessage() {}

func (x *System_GrpcServer_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_GrpcServer_State.ProtoReflect.Descriptor instead.
func (*System_GrpcServer_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 6, 1}
}

func (x *System_GrpcServer_State) GetCertificateId() *ywrapper.StringValue {
	if x != nil {
		return x.CertificateId
	}
	return nil
}

func (x *System_GrpcServer_State) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *System_GrpcServer_State) GetListenAddresses() []*System_GrpcServer_State_ListenAddressesUnion {
	if x != nil {
		return x.ListenAddresses
	}
	return nil
}

func (x *System_GrpcServer_State) GetMetadataAuthentication() *ywrapper.BoolValue {
	if x != nil {
		return x.MetadataAuthentication
	}
	return nil
}

func (x *System_GrpcServer_State) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *System_GrpcServer_State) GetTransportSecurity() *ywrapper.BoolValue {
	if x != nil {
		return x.TransportSecurity
	}
	return nil
}

type System_GrpcServer_Config_ListenAddressesUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListenAddressesListenaddresses System_GrpcServer_Config_ListenAddresses `protobuf:"varint,443616413,opt,name=listen_addresses_listenaddresses,json=listenAddressesListenaddresses,proto3,enum=openconfig.System_GrpcServer_Config_ListenAddresses" json:"listen_addresses_listenaddresses,omitempty"`
	ListenAddressesString          string                                   `protobuf:"bytes,442696493,opt,name=listen_addresses_string,json=listenAddressesString,proto3" json:"listen_addresses_string,omitempty"`
}

func (x *System_GrpcServer_Config_ListenAddressesUnion) Reset() {
	*x = System_GrpcServer_Config_ListenAddressesUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_GrpcServer_Config_ListenAddressesUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_GrpcServer_Config_ListenAddressesUnion) ProtoMessage() {}

func (x *System_GrpcServer_Config_ListenAddressesUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_GrpcServer_Config_ListenAddressesUnion.ProtoReflect.Descriptor instead.
func (*System_GrpcServer_Config_ListenAddressesUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 6, 0, 0}
}

func (x *System_GrpcServer_Config_ListenAddressesUnion) GetListenAddressesListenaddresses() System_GrpcServer_Config_ListenAddresses {
	if x != nil {
		return x.ListenAddressesListenaddresses
	}
	return System_GrpcServer_Config_LISTENADDRESSES_UNSET
}

func (x *System_GrpcServer_Config_ListenAddressesUnion) GetListenAddressesString() string {
	if x != nil {
		return x.ListenAddressesString
	}
	return ""
}

type System_GrpcServer_State_ListenAddressesUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListenAddressesListenaddresses System_GrpcServer_State_ListenAddresses `protobuf:"varint,434290066,opt,name=listen_addresses_listenaddresses,json=listenAddressesListenaddresses,proto3,enum=openconfig.System_GrpcServer_State_ListenAddresses" json:"listen_addresses_listenaddresses,omitempty"`
	ListenAddressesString          string                                  `protobuf:"bytes,294251800,opt,name=listen_addresses_string,json=listenAddressesString,proto3" json:"listen_addresses_string,omitempty"`
}

func (x *System_GrpcServer_State_ListenAddressesUnion) Reset() {
	*x = System_GrpcServer_State_ListenAddressesUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_GrpcServer_State_ListenAddressesUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_GrpcServer_State_ListenAddressesUnion) ProtoMessage() {}

func (x *System_GrpcServer_State_ListenAddressesUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_GrpcServer_State_ListenAddressesUnion.ProtoReflect.Descriptor instead.
func (*System_GrpcServer_State_ListenAddressesUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 6, 1, 0}
}

func (x *System_GrpcServer_State_ListenAddressesUnion) GetListenAddressesListenaddresses() System_GrpcServer_State_ListenAddresses {
	if x != nil {
		return x.ListenAddressesListenaddresses
	}
	return System_GrpcServer_State_LISTENADDRESSES_UNSET
}

func (x *System_GrpcServer_State_ListenAddressesUnion) GetListenAddressesString() string {
	if x != nil {
		return x.ListenAddressesString
	}
	return ""
}

type System_License_Licenses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License []*System_License_Licenses_LicenseKey `protobuf:"bytes,270840475,rep,name=license,proto3" json:"license,omitempty"`
}

func (x *System_License_Licenses) Reset() {
	*x = System_License_Licenses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_License_Licenses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_License_Licenses) ProtoMessage() {}

func (x *System_License_Licenses) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_License_Licenses.ProtoReflect.Descriptor instead.
func (*System_License_Licenses) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *System_License_Licenses) GetLicense() []*System_License_Licenses_LicenseKey {
	if x != nil {
		return x.License
	}
	return nil
}

type System_License_Licenses_License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_License_Licenses_License_Config `protobuf:"bytes,500164428,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_License_Licenses_License_State  `protobuf:"bytes,5059525,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_License_Licenses_License) Reset() {
	*x = System_License_Licenses_License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_License_Licenses_License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_License_Licenses_License) ProtoMessage() {}

func (x *System_License_Licenses_License) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_License_Licenses_License.ProtoReflect.Descriptor instead.
func (*System_License_Licenses_License) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 7, 0, 0}
}

func (x *System_License_Licenses_License) GetConfig() *System_License_Licenses_License_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_License_Licenses_License) GetState() *System_License_Licenses_License_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_License_Licenses_LicenseKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseId string                           `protobuf:"bytes,1,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
	License   *System_License_Licenses_License `protobuf:"bytes,2,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *System_License_Licenses_LicenseKey) Reset() {
	*x = System_License_Licenses_LicenseKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_License_Licenses_LicenseKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_License_Licenses_LicenseKey) ProtoMessage() {}

func (x *System_License_Licenses_LicenseKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_License_Licenses_LicenseKey.ProtoReflect.Descriptor instead.
func (*System_License_Licenses_LicenseKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 7, 0, 1}
}

func (x *System_License_Licenses_LicenseKey) GetLicenseId() string {
	if x != nil {
		return x.LicenseId
	}
	return ""
}

func (x *System_License_Licenses_LicenseKey) GetLicense() *System_License_Licenses_License {
	if x != nil {
		return x.License
	}
	return nil
}

type System_License_Licenses_License_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active *ywrapper.BoolValue `protobuf:"bytes,195351281,opt,name=active,proto3" json:"active,omitempty"`
	// Types that are assignable to LicenseData:
	//	*System_License_Licenses_License_Config_LicenseDataBytes
	//	*System_License_Licenses_License_Config_LicenseDataString
	LicenseData isSystem_License_Licenses_License_Config_LicenseData `protobuf_oneof:"license_data"`
	LicenseId   *ywrapper.StringValue                                `protobuf:"bytes,336014390,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
}

func (x *System_License_Licenses_License_Config) Reset() {
	*x = System_License_Licenses_License_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_License_Licenses_License_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_License_Licenses_License_Config) ProtoMessage() {}

func (x *System_License_Licenses_License_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_License_Licenses_License_Config.ProtoReflect.Descriptor instead.
func (*System_License_Licenses_License_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 7, 0, 0, 0}
}

func (x *System_License_Licenses_License_Config) GetActive() *ywrapper.BoolValue {
	if x != nil {
		return x.Active
	}
	return nil
}

func (m *System_License_Licenses_License_Config) GetLicenseData() isSystem_License_Licenses_License_Config_LicenseData {
	if m != nil {
		return m.LicenseData
	}
	return nil
}

func (x *System_License_Licenses_License_Config) GetLicenseDataBytes() []byte {
	if x, ok := x.GetLicenseData().(*System_License_Licenses_License_Config_LicenseDataBytes); ok {
		return x.LicenseDataBytes
	}
	return nil
}

func (x *System_License_Licenses_License_Config) GetLicenseDataString() string {
	if x, ok := x.GetLicenseData().(*System_License_Licenses_License_Config_LicenseDataString); ok {
		return x.LicenseDataString
	}
	return ""
}

func (x *System_License_Licenses_License_Config) GetLicenseId() *ywrapper.StringValue {
	if x != nil {
		return x.LicenseId
	}
	return nil
}

type isSystem_License_Licenses_License_Config_LicenseData interface {
	isSystem_License_Licenses_License_Config_LicenseData()
}

type System_License_Licenses_License_Config_LicenseDataBytes struct {
	LicenseDataBytes []byte `protobuf:"bytes,11159249,opt,name=license_data_bytes,json=licenseDataBytes,proto3,oneof"`
}

type System_License_Licenses_License_Config_LicenseDataString struct {
	LicenseDataString string `protobuf:"bytes,98958331,opt,name=license_data_string,json=licenseDataString,proto3,oneof"`
}

func (*System_License_Licenses_License_Config_LicenseDataBytes) isSystem_License_Licenses_License_Config_LicenseData() {
}

func (*System_License_Licenses_License_Config_LicenseDataString) isSystem_License_Licenses_License_Config_LicenseData() {
}

type System_License_Licenses_License_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active         *ywrapper.BoolValue   `protobuf:"bytes,102162942,opt,name=active,proto3" json:"active,omitempty"`
	Description    *ywrapper.StringValue `protobuf:"bytes,358883070,opt,name=description,proto3" json:"description,omitempty"`
	ExpirationDate *ywrapper.UintValue   `protobuf:"bytes,424959596,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Expired        *ywrapper.BoolValue   `protobuf:"bytes,71966603,opt,name=expired,proto3" json:"expired,omitempty"`
	InUse          *ywrapper.BoolValue   `protobuf:"bytes,345273195,opt,name=in_use,json=inUse,proto3" json:"in_use,omitempty"`
	IssueDate      *ywrapper.UintValue   `protobuf:"bytes,409862194,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	// Types that are assignable to LicenseData:
	//	*System_License_Licenses_License_State_LicenseDataBytes
	//	*System_License_Licenses_License_State_LicenseDataString
	LicenseData isSystem_License_Licenses_License_State_LicenseData `protobuf_oneof:"license_data"`
	LicenseId   *ywrapper.StringValue                               `protobuf:"bytes,359277421,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
	Valid       *ywrapper.BoolValue                                 `protobuf:"bytes,431597894,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *System_License_Licenses_License_State) Reset() {
	*x = System_License_Licenses_License_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_License_Licenses_License_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_License_Licenses_License_State) ProtoMessage() {}

func (x *System_License_Licenses_License_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_License_Licenses_License_State.ProtoReflect.Descriptor instead.
func (*System_License_Licenses_License_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 7, 0, 0, 1}
}

func (x *System_License_Licenses_License_State) GetActive() *ywrapper.BoolValue {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *System_License_Licenses_License_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *System_License_Licenses_License_State) GetExpirationDate() *ywrapper.UintValue {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *System_License_Licenses_License_State) GetExpired() *ywrapper.BoolValue {
	if x != nil {
		return x.Expired
	}
	return nil
}

func (x *System_License_Licenses_License_State) GetInUse() *ywrapper.BoolValue {
	if x != nil {
		return x.InUse
	}
	return nil
}

func (x *System_License_Licenses_License_State) GetIssueDate() *ywrapper.UintValue {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (m *System_License_Licenses_License_State) GetLicenseData() isSystem_License_Licenses_License_State_LicenseData {
	if m != nil {
		return m.LicenseData
	}
	return nil
}

func (x *System_License_Licenses_License_State) GetLicenseDataBytes() []byte {
	if x, ok := x.GetLicenseData().(*System_License_Licenses_License_State_LicenseDataBytes); ok {
		return x.LicenseDataBytes
	}
	return nil
}

func (x *System_License_Licenses_License_State) GetLicenseDataString() string {
	if x, ok := x.GetLicenseData().(*System_License_Licenses_License_State_LicenseDataString); ok {
		return x.LicenseDataString
	}
	return ""
}

func (x *System_License_Licenses_License_State) GetLicenseId() *ywrapper.StringValue {
	if x != nil {
		return x.LicenseId
	}
	return nil
}

func (x *System_License_Licenses_License_State) GetValid() *ywrapper.BoolValue {
	if x != nil {
		return x.Valid
	}
	return nil
}

type isSystem_License_Licenses_License_State_LicenseData interface {
	isSystem_License_Licenses_License_State_LicenseData()
}

type System_License_Licenses_License_State_LicenseDataBytes struct {
	LicenseDataBytes []byte `protobuf:"bytes,113996574,opt,name=license_data_bytes,json=licenseDataBytes,proto3,oneof"`
}

type System_License_Licenses_License_State_LicenseDataString struct {
	LicenseDataString string `protobuf:"bytes,460328222,opt,name=license_data_string,json=licenseDataString,proto3,oneof"`
}

func (*System_License_Licenses_License_State_LicenseDataBytes) isSystem_License_Licenses_License_State_LicenseData() {
}

func (*System_License_Licenses_License_State_LicenseDataString) isSystem_License_Licenses_License_State_LicenseData() {
}

type System_Logging_Console struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config    *System_Logging_Console_Config    `protobuf:"bytes,368391401,opt,name=config,proto3" json:"config,omitempty"`
	Selectors *System_Logging_Console_Selectors `protobuf:"bytes,518795003,opt,name=selectors,proto3" json:"selectors,omitempty"`
	State     *System_Logging_Console_State     `protobuf:"bytes,135296190,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Logging_Console) Reset() {
	*x = System_Logging_Console{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_Console) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_Console) ProtoMessage() {}

func (x *System_Logging_Console) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_Console.ProtoReflect.Descriptor instead.
func (*System_Logging_Console) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 0}
}

func (x *System_Logging_Console) GetConfig() *System_Logging_Console_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Logging_Console) GetSelectors() *System_Logging_Console_Selectors {
	if x != nil {
		return x.Selectors
	}
	return nil
}

func (x *System_Logging_Console) GetState() *System_Logging_Console_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Logging_RemoteServers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteServer []*System_Logging_RemoteServers_RemoteServerKey `protobuf:"bytes,157599479,rep,name=remote_server,json=remoteServer,proto3" json:"remote_server,omitempty"`
}

func (x *System_Logging_RemoteServers) Reset() {
	*x = System_Logging_RemoteServers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_RemoteServers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_RemoteServers) ProtoMessage() {}

func (x *System_Logging_RemoteServers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_RemoteServers.ProtoReflect.Descriptor instead.
func (*System_Logging_RemoteServers) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 1}
}

func (x *System_Logging_RemoteServers) GetRemoteServer() []*System_Logging_RemoteServers_RemoteServerKey {
	if x != nil {
		return x.RemoteServer
	}
	return nil
}

type System_Logging_Console_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *System_Logging_Console_Config) Reset() {
	*x = System_Logging_Console_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_Console_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_Console_Config) ProtoMessage() {}

func (x *System_Logging_Console_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_Console_Config.ProtoReflect.Descriptor instead.
func (*System_Logging_Console_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 0, 0}
}

type System_Logging_Console_Selectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector []*System_Logging_Console_Selectors_SelectorKey `protobuf:"bytes,442447029,rep,name=selector,proto3" json:"selector,omitempty"`
}

func (x *System_Logging_Console_Selectors) Reset() {
	*x = System_Logging_Console_Selectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_Console_Selectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_Console_Selectors) ProtoMessage() {}

func (x *System_Logging_Console_Selectors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_Console_Selectors.ProtoReflect.Descriptor instead.
func (*System_Logging_Console_Selectors) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 0, 1}
}

func (x *System_Logging_Console_Selectors) GetSelector() []*System_Logging_Console_Selectors_SelectorKey {
	if x != nil {
		return x.Selector
	}
	return nil
}

type System_Logging_Console_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *System_Logging_Console_State) Reset() {
	*x = System_Logging_Console_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_Console_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_Console_State) ProtoMessage() {}

func (x *System_Logging_Console_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_Console_State.ProtoReflect.Descriptor instead.
func (*System_Logging_Console_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 0, 2}
}

type System_Logging_Console_Selectors_Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Logging_Console_Selectors_Selector_Config `protobuf:"bytes,378729946,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Logging_Console_Selectors_Selector_State  `protobuf:"bytes,531894391,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Logging_Console_Selectors_Selector) Reset() {
	*x = System_Logging_Console_Selectors_Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_Console_Selectors_Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_Console_Selectors_Selector) ProtoMessage() {}

func (x *System_Logging_Console_Selectors_Selector) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_Console_Selectors_Selector.ProtoReflect.Descriptor instead.
func (*System_Logging_Console_Selectors_Selector) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 0, 1, 0}
}

func (x *System_Logging_Console_Selectors_Selector) GetConfig() *System_Logging_Console_Selectors_Selector_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Logging_Console_Selectors_Selector) GetState() *System_Logging_Console_Selectors_Selector_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Logging_Console_Selectors_SelectorKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facility OpenconfigSystemLoggingSYSLOGFACILITY      `protobuf:"varint,1,opt,name=facility,proto3,enum=openconfig.OpenconfigSystemLoggingSYSLOGFACILITY" json:"facility,omitempty"`
	Severity OpenconfigSystemLoggingSyslogSeverity      `protobuf:"varint,2,opt,name=severity,proto3,enum=openconfig.OpenconfigSystemLoggingSyslogSeverity" json:"severity,omitempty"`
	Selector *System_Logging_Console_Selectors_Selector `protobuf:"bytes,3,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *System_Logging_Console_Selectors_SelectorKey) Reset() {
	*x = System_Logging_Console_Selectors_SelectorKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_Console_Selectors_SelectorKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_Console_Selectors_SelectorKey) ProtoMessage() {}

func (x *System_Logging_Console_Selectors_SelectorKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_Console_Selectors_SelectorKey.ProtoReflect.Descriptor instead.
func (*System_Logging_Console_Selectors_SelectorKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 0, 1, 1}
}

func (x *System_Logging_Console_Selectors_SelectorKey) GetFacility() OpenconfigSystemLoggingSYSLOGFACILITY {
	if x != nil {
		return x.Facility
	}
	return OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET
}

func (x *System_Logging_Console_Selectors_SelectorKey) GetSeverity() OpenconfigSystemLoggingSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET
}

func (x *System_Logging_Console_Selectors_SelectorKey) GetSelector() *System_Logging_Console_Selectors_Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

type System_Logging_Console_Selectors_Selector_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facility OpenconfigSystemLoggingSYSLOGFACILITY `protobuf:"varint,390435594,opt,name=facility,proto3,enum=openconfig.OpenconfigSystemLoggingSYSLOGFACILITY" json:"facility,omitempty"`
	Severity OpenconfigSystemLoggingSyslogSeverity `protobuf:"varint,205508476,opt,name=severity,proto3,enum=openconfig.OpenconfigSystemLoggingSyslogSeverity" json:"severity,omitempty"`
}

func (x *System_Logging_Console_Selectors_Selector_Config) Reset() {
	*x = System_Logging_Console_Selectors_Selector_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_Console_Selectors_Selector_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_Console_Selectors_Selector_Config) ProtoMessage() {}

func (x *System_Logging_Console_Selectors_Selector_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_Console_Selectors_Selector_Config.ProtoReflect.Descriptor instead.
func (*System_Logging_Console_Selectors_Selector_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 0, 1, 0, 0}
}

func (x *System_Logging_Console_Selectors_Selector_Config) GetFacility() OpenconfigSystemLoggingSYSLOGFACILITY {
	if x != nil {
		return x.Facility
	}
	return OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET
}

func (x *System_Logging_Console_Selectors_Selector_Config) GetSeverity() OpenconfigSystemLoggingSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET
}

type System_Logging_Console_Selectors_Selector_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facility OpenconfigSystemLoggingSYSLOGFACILITY `protobuf:"varint,271468881,opt,name=facility,proto3,enum=openconfig.OpenconfigSystemLoggingSYSLOGFACILITY" json:"facility,omitempty"`
	Severity OpenconfigSystemLoggingSyslogSeverity `protobuf:"varint,427446243,opt,name=severity,proto3,enum=openconfig.OpenconfigSystemLoggingSyslogSeverity" json:"severity,omitempty"`
}

func (x *System_Logging_Console_Selectors_Selector_State) Reset() {
	*x = System_Logging_Console_Selectors_Selector_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_Console_Selectors_Selector_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_Console_Selectors_Selector_State) ProtoMessage() {}

func (x *System_Logging_Console_Selectors_Selector_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_Console_Selectors_Selector_State.ProtoReflect.Descriptor instead.
func (*System_Logging_Console_Selectors_Selector_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 0, 1, 0, 1}
}

func (x *System_Logging_Console_Selectors_Selector_State) GetFacility() OpenconfigSystemLoggingSYSLOGFACILITY {
	if x != nil {
		return x.Facility
	}
	return OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET
}

func (x *System_Logging_Console_Selectors_Selector_State) GetSeverity() OpenconfigSystemLoggingSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET
}

type System_Logging_RemoteServers_RemoteServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config    *System_Logging_RemoteServers_RemoteServer_Config    `protobuf:"bytes,173866728,opt,name=config,proto3" json:"config,omitempty"`
	Selectors *System_Logging_RemoteServers_RemoteServer_Selectors `protobuf:"bytes,472291544,opt,name=selectors,proto3" json:"selectors,omitempty"`
	State     *System_Logging_RemoteServers_RemoteServer_State     `protobuf:"bytes,268770049,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Logging_RemoteServers_RemoteServer) Reset() {
	*x = System_Logging_RemoteServers_RemoteServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_RemoteServers_RemoteServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_RemoteServers_RemoteServer) ProtoMessage() {}

func (x *System_Logging_RemoteServers_RemoteServer) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_RemoteServers_RemoteServer.ProtoReflect.Descriptor instead.
func (*System_Logging_RemoteServers_RemoteServer) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 1, 0}
}

func (x *System_Logging_RemoteServers_RemoteServer) GetConfig() *System_Logging_RemoteServers_RemoteServer_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Logging_RemoteServers_RemoteServer) GetSelectors() *System_Logging_RemoteServers_RemoteServer_Selectors {
	if x != nil {
		return x.Selectors
	}
	return nil
}

func (x *System_Logging_RemoteServers_RemoteServer) GetState() *System_Logging_RemoteServers_RemoteServer_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Logging_RemoteServers_RemoteServerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host         string                                     `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	RemoteServer *System_Logging_RemoteServers_RemoteServer `protobuf:"bytes,2,opt,name=remote_server,json=remoteServer,proto3" json:"remote_server,omitempty"`
}

func (x *System_Logging_RemoteServers_RemoteServerKey) Reset() {
	*x = System_Logging_RemoteServers_RemoteServerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_RemoteServers_RemoteServerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_RemoteServers_RemoteServerKey) ProtoMessage() {}

func (x *System_Logging_RemoteServers_RemoteServerKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_RemoteServers_RemoteServerKey.ProtoReflect.Descriptor instead.
func (*System_Logging_RemoteServers_RemoteServerKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 1, 1}
}

func (x *System_Logging_RemoteServers_RemoteServerKey) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *System_Logging_RemoteServers_RemoteServerKey) GetRemoteServer() *System_Logging_RemoteServers_RemoteServer {
	if x != nil {
		return x.RemoteServer
	}
	return nil
}

type System_Logging_RemoteServers_RemoteServer_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host          *ywrapper.StringValue `protobuf:"bytes,525171333,opt,name=host,proto3" json:"host,omitempty"`
	RemotePort    *ywrapper.UintValue   `protobuf:"bytes,22145415,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
	SourceAddress *ywrapper.StringValue `protobuf:"bytes,4922255,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *System_Logging_RemoteServers_RemoteServer_Config) Reset() {
	*x = System_Logging_RemoteServers_RemoteServer_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_RemoteServers_RemoteServer_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_RemoteServers_RemoteServer_Config) ProtoMessage() {}

func (x *System_Logging_RemoteServers_RemoteServer_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_RemoteServers_RemoteServer_Config.ProtoReflect.Descriptor instead.
func (*System_Logging_RemoteServers_RemoteServer_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 1, 0, 0}
}

func (x *System_Logging_RemoteServers_RemoteServer_Config) GetHost() *ywrapper.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *System_Logging_RemoteServers_RemoteServer_Config) GetRemotePort() *ywrapper.UintValue {
	if x != nil {
		return x.RemotePort
	}
	return nil
}

func (x *System_Logging_RemoteServers_RemoteServer_Config) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type System_Logging_RemoteServers_RemoteServer_Selectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector []*System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey `protobuf:"bytes,300442996,rep,name=selector,proto3" json:"selector,omitempty"`
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors) Reset() {
	*x = System_Logging_RemoteServers_RemoteServer_Selectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_RemoteServers_RemoteServer_Selectors) ProtoMessage() {}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_RemoteServers_RemoteServer_Selectors.ProtoReflect.Descriptor instead.
func (*System_Logging_RemoteServers_RemoteServer_Selectors) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 1, 0, 1}
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors) GetSelector() []*System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey {
	if x != nil {
		return x.Selector
	}
	return nil
}

type System_Logging_RemoteServers_RemoteServer_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host          *ywrapper.StringValue `protobuf:"bytes,365944418,opt,name=host,proto3" json:"host,omitempty"`
	RemotePort    *ywrapper.UintValue   `protobuf:"bytes,319783978,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
	SourceAddress *ywrapper.StringValue `protobuf:"bytes,141503900,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *System_Logging_RemoteServers_RemoteServer_State) Reset() {
	*x = System_Logging_RemoteServers_RemoteServer_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_RemoteServers_RemoteServer_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_RemoteServers_RemoteServer_State) ProtoMessage() {}

func (x *System_Logging_RemoteServers_RemoteServer_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_RemoteServers_RemoteServer_State.ProtoReflect.Descriptor instead.
func (*System_Logging_RemoteServers_RemoteServer_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 1, 0, 2}
}

func (x *System_Logging_RemoteServers_RemoteServer_State) GetHost() *ywrapper.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *System_Logging_RemoteServers_RemoteServer_State) GetRemotePort() *ywrapper.UintValue {
	if x != nil {
		return x.RemotePort
	}
	return nil
}

func (x *System_Logging_RemoteServers_RemoteServer_State) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config `protobuf:"bytes,254282233,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State  `protobuf:"bytes,311283534,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector) Reset() {
	*x = System_Logging_RemoteServers_RemoteServer_Selectors_Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ProtoMessage() {}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_RemoteServers_RemoteServer_Selectors_Selector.ProtoReflect.Descriptor instead.
func (*System_Logging_RemoteServers_RemoteServer_Selectors_Selector) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 1, 0, 1, 0}
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetConfig() *System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetState() *System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facility OpenconfigSystemLoggingSYSLOGFACILITY                         `protobuf:"varint,1,opt,name=facility,proto3,enum=openconfig.OpenconfigSystemLoggingSYSLOGFACILITY" json:"facility,omitempty"`
	Severity OpenconfigSystemLoggingSyslogSeverity                         `protobuf:"varint,2,opt,name=severity,proto3,enum=openconfig.OpenconfigSystemLoggingSyslogSeverity" json:"severity,omitempty"`
	Selector *System_Logging_RemoteServers_RemoteServer_Selectors_Selector `protobuf:"bytes,3,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) Reset() {
	*x = System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) ProtoMessage() {}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey.ProtoReflect.Descriptor instead.
func (*System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 1, 0, 1, 1}
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) GetFacility() OpenconfigSystemLoggingSYSLOGFACILITY {
	if x != nil {
		return x.Facility
	}
	return OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) GetSeverity() OpenconfigSystemLoggingSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey) GetSelector() *System_Logging_RemoteServers_RemoteServer_Selectors_Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

type System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facility OpenconfigSystemLoggingSYSLOGFACILITY `protobuf:"varint,164191643,opt,name=facility,proto3,enum=openconfig.OpenconfigSystemLoggingSYSLOGFACILITY" json:"facility,omitempty"`
	Severity OpenconfigSystemLoggingSyslogSeverity `protobuf:"varint,247618577,opt,name=severity,proto3,enum=openconfig.OpenconfigSystemLoggingSyslogSeverity" json:"severity,omitempty"`
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) Reset() {
	*x = System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) ProtoMessage() {}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config.ProtoReflect.Descriptor instead.
func (*System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 1, 0, 1, 0, 0}
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) GetFacility() OpenconfigSystemLoggingSYSLOGFACILITY {
	if x != nil {
		return x.Facility
	}
	return OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) GetSeverity() OpenconfigSystemLoggingSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET
}

type System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facility OpenconfigSystemLoggingSYSLOGFACILITY `protobuf:"varint,16806630,opt,name=facility,proto3,enum=openconfig.OpenconfigSystemLoggingSYSLOGFACILITY" json:"facility,omitempty"`
	Severity OpenconfigSystemLoggingSyslogSeverity `protobuf:"varint,317876144,opt,name=severity,proto3,enum=openconfig.OpenconfigSystemLoggingSyslogSeverity" json:"severity,omitempty"`
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) Reset() {
	*x = System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) ProtoMessage() {}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State.ProtoReflect.Descriptor instead.
func (*System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 8, 1, 0, 1, 0, 1}
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) GetFacility() OpenconfigSystemLoggingSYSLOGFACILITY {
	if x != nil {
		return x.Facility
	}
	return OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET
}

func (x *System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) GetSeverity() OpenconfigSystemLoggingSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET
}

type System_Memory_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *System_Memory_Config) Reset() {
	*x = System_Memory_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Memory_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Memory_Config) ProtoMessage() {}

func (x *System_Memory_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Memory_Config.ProtoReflect.Descriptor instead.
func (*System_Memory_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 9, 0}
}

type System_Memory_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Physical *ywrapper.UintValue `protobuf:"bytes,108400520,opt,name=physical,proto3" json:"physical,omitempty"`
	Reserved *ywrapper.UintValue `protobuf:"bytes,140759447,opt,name=reserved,proto3" json:"reserved,omitempty"`
}

func (x *System_Memory_State) Reset() {
	*x = System_Memory_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Memory_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Memory_State) ProtoMessage() {}

func (x *System_Memory_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Memory_State.ProtoReflect.Descriptor instead.
func (*System_Memory_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 9, 1}
}

func (x *System_Memory_State) GetPhysical() *ywrapper.UintValue {
	if x != nil {
		return x.Physical
	}
	return nil
}

func (x *System_Memory_State) GetReserved() *ywrapper.UintValue {
	if x != nil {
		return x.Reserved
	}
	return nil
}

type System_Messages_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity OpenconfigMessagesSyslogSeverity `protobuf:"varint,77893034,opt,name=severity,proto3,enum=openconfig.OpenconfigMessagesSyslogSeverity" json:"severity,omitempty"`
}

func (x *System_Messages_Config) Reset() {
	*x = System_Messages_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Messages_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Messages_Config) ProtoMessage() {}

func (x *System_Messages_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Messages_Config.ProtoReflect.Descriptor instead.
func (*System_Messages_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 10, 0}
}

func (x *System_Messages_Config) GetSeverity() OpenconfigMessagesSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigMessagesSyslogSeverity_OPENCONFIGMESSAGESSYSLOGSEVERITY_UNSET
}

type System_Messages_DebugEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugService []*System_Messages_DebugEntries_DebugServiceKey `protobuf:"bytes,396463998,rep,name=debug_service,json=debugService,proto3" json:"debug_service,omitempty"`
}

func (x *System_Messages_DebugEntries) Reset() {
	*x = System_Messages_DebugEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Messages_DebugEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Messages_DebugEntries) ProtoMessage() {}

func (x *System_Messages_DebugEntries) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Messages_DebugEntries.ProtoReflect.Descriptor instead.
func (*System_Messages_DebugEntries) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 10, 1}
}

func (x *System_Messages_DebugEntries) GetDebugService() []*System_Messages_DebugEntries_DebugServiceKey {
	if x != nil {
		return x.DebugService
	}
	return nil
}

type System_Messages_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  *System_Messages_State_Message   `protobuf:"bytes,16499629,opt,name=message,proto3" json:"message,omitempty"`
	Severity OpenconfigMessagesSyslogSeverity `protobuf:"varint,160351517,opt,name=severity,proto3,enum=openconfig.OpenconfigMessagesSyslogSeverity" json:"severity,omitempty"`
}

func (x *System_Messages_State) Reset() {
	*x = System_Messages_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Messages_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Messages_State) ProtoMessage() {}

func (x *System_Messages_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Messages_State.ProtoReflect.Descriptor instead.
func (*System_Messages_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 10, 2}
}

func (x *System_Messages_State) GetMessage() *System_Messages_State_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *System_Messages_State) GetSeverity() OpenconfigMessagesSyslogSeverity {
	if x != nil {
		return x.Severity
	}
	return OpenconfigMessagesSyslogSeverity_OPENCONFIGMESSAGESSYSLOGSEVERITY_UNSET
}

type System_Messages_DebugEntries_DebugService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Messages_DebugEntries_DebugService_Config `protobuf:"bytes,230613839,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Messages_DebugEntries_DebugService_State  `protobuf:"bytes,135362368,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Messages_DebugEntries_DebugService) Reset() {
	*x = System_Messages_DebugEntries_DebugService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Messages_DebugEntries_DebugService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Messages_DebugEntries_DebugService) ProtoMessage() {}

func (x *System_Messages_DebugEntries_DebugService) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Messages_DebugEntries_DebugService.ProtoReflect.Descriptor instead.
func (*System_Messages_DebugEntries_DebugService) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 10, 1, 0}
}

func (x *System_Messages_DebugEntries_DebugService) GetConfig() *System_Messages_DebugEntries_DebugService_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Messages_DebugEntries_DebugService) GetState() *System_Messages_DebugEntries_DebugService_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Messages_DebugEntries_DebugServiceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service      OpenconfigMessagesDEBUGSERVICE             `protobuf:"varint,1,opt,name=service,proto3,enum=openconfig.OpenconfigMessagesDEBUGSERVICE" json:"service,omitempty"`
	DebugService *System_Messages_DebugEntries_DebugService `protobuf:"bytes,2,opt,name=debug_service,json=debugService,proto3" json:"debug_service,omitempty"`
}

func (x *System_Messages_DebugEntries_DebugServiceKey) Reset() {
	*x = System_Messages_DebugEntries_DebugServiceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Messages_DebugEntries_DebugServiceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Messages_DebugEntries_DebugServiceKey) ProtoMessage() {}

func (x *System_Messages_DebugEntries_DebugServiceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Messages_DebugEntries_DebugServiceKey.ProtoReflect.Descriptor instead.
func (*System_Messages_DebugEntries_DebugServiceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 10, 1, 1}
}

func (x *System_Messages_DebugEntries_DebugServiceKey) GetService() OpenconfigMessagesDEBUGSERVICE {
	if x != nil {
		return x.Service
	}
	return OpenconfigMessagesDEBUGSERVICE_OPENCONFIGMESSAGESDEBUGSERVICE_UNSET
}

func (x *System_Messages_DebugEntries_DebugServiceKey) GetDebugService() *System_Messages_DebugEntries_DebugService {
	if x != nil {
		return x.DebugService
	}
	return nil
}

type System_Messages_DebugEntries_DebugService_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue            `protobuf:"bytes,255266609,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Service OpenconfigMessagesDEBUGSERVICE `protobuf:"varint,340954751,opt,name=service,proto3,enum=openconfig.OpenconfigMessagesDEBUGSERVICE" json:"service,omitempty"`
}

func (x *System_Messages_DebugEntries_DebugService_Config) Reset() {
	*x = System_Messages_DebugEntries_DebugService_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Messages_DebugEntries_DebugService_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Messages_DebugEntries_DebugService_Config) ProtoMessage() {}

func (x *System_Messages_DebugEntries_DebugService_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Messages_DebugEntries_DebugService_Config.ProtoReflect.Descriptor instead.
func (*System_Messages_DebugEntries_DebugService_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 10, 1, 0, 0}
}

func (x *System_Messages_DebugEntries_DebugService_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *System_Messages_DebugEntries_DebugService_Config) GetService() OpenconfigMessagesDEBUGSERVICE {
	if x != nil {
		return x.Service
	}
	return OpenconfigMessagesDEBUGSERVICE_OPENCONFIGMESSAGESDEBUGSERVICE_UNSET
}

type System_Messages_DebugEntries_DebugService_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue            `protobuf:"bytes,372193794,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Service OpenconfigMessagesDEBUGSERVICE `protobuf:"varint,32039636,opt,name=service,proto3,enum=openconfig.OpenconfigMessagesDEBUGSERVICE" json:"service,omitempty"`
}

func (x *System_Messages_DebugEntries_DebugService_State) Reset() {
	*x = System_Messages_DebugEntries_DebugService_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Messages_DebugEntries_DebugService_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Messages_DebugEntries_DebugService_State) ProtoMessage() {}

func (x *System_Messages_DebugEntries_DebugService_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Messages_DebugEntries_DebugService_State.ProtoReflect.Descriptor instead.
func (*System_Messages_DebugEntries_DebugService_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 10, 1, 0, 1}
}

func (x *System_Messages_DebugEntries_DebugService_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *System_Messages_DebugEntries_DebugService_State) GetService() OpenconfigMessagesDEBUGSERVICE {
	if x != nil {
		return x.Service
	}
	return OpenconfigMessagesDEBUGSERVICE_OPENCONFIGMESSAGESDEBUGSERVICE_UNSET
}

type System_Messages_State_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName  *ywrapper.StringValue `protobuf:"bytes,209460747,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	Msg      *ywrapper.StringValue `protobuf:"bytes,224593699,opt,name=msg,proto3" json:"msg,omitempty"`
	Msgid    *ywrapper.StringValue `protobuf:"bytes,105587764,opt,name=msgid,proto3" json:"msgid,omitempty"`
	Priority *ywrapper.UintValue   `protobuf:"bytes,157172736,opt,name=priority,proto3" json:"priority,omitempty"`
	Procid   *ywrapper.StringValue `protobuf:"bytes,92046335,opt,name=procid,proto3" json:"procid,omitempty"`
}

func (x *System_Messages_State_Message) Reset() {
	*x = System_Messages_State_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Messages_State_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Messages_State_Message) ProtoMessage() {}

func (x *System_Messages_State_Message) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Messages_State_Message.ProtoReflect.Descriptor instead.
func (*System_Messages_State_Message) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 10, 2, 0}
}

func (x *System_Messages_State_Message) GetAppName() *ywrapper.StringValue {
	if x != nil {
		return x.AppName
	}
	return nil
}

func (x *System_Messages_State_Message) GetMsg() *ywrapper.StringValue {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *System_Messages_State_Message) GetMsgid() *ywrapper.StringValue {
	if x != nil {
		return x.Msgid
	}
	return nil
}

func (x *System_Messages_State_Message) GetPriority() *ywrapper.UintValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *System_Messages_State_Message) GetProcid() *ywrapper.StringValue {
	if x != nil {
		return x.Procid
	}
	return nil
}

type System_Ntp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableNtpAuth    *ywrapper.BoolValue   `protobuf:"bytes,345800954,opt,name=enable_ntp_auth,json=enableNtpAuth,proto3" json:"enable_ntp_auth,omitempty"`
	Enabled          *ywrapper.BoolValue   `protobuf:"bytes,520946078,opt,name=enabled,proto3" json:"enabled,omitempty"`
	NtpSourceAddress *ywrapper.StringValue `protobuf:"bytes,418322460,opt,name=ntp_source_address,json=ntpSourceAddress,proto3" json:"ntp_source_address,omitempty"`
}

func (x *System_Ntp_Config) Reset() {
	*x = System_Ntp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Ntp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Ntp_Config) ProtoMessage() {}

func (x *System_Ntp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Ntp_Config.ProtoReflect.Descriptor instead.
func (*System_Ntp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11, 0}
}

func (x *System_Ntp_Config) GetEnableNtpAuth() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableNtpAuth
	}
	return nil
}

func (x *System_Ntp_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *System_Ntp_Config) GetNtpSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.NtpSourceAddress
	}
	return nil
}

type System_Ntp_NtpKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NtpKey []*System_Ntp_NtpKeys_NtpKeyKey `protobuf:"bytes,265614496,rep,name=ntp_key,json=ntpKey,proto3" json:"ntp_key,omitempty"`
}

func (x *System_Ntp_NtpKeys) Reset() {
	*x = System_Ntp_NtpKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Ntp_NtpKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Ntp_NtpKeys) ProtoMessage() {}

func (x *System_Ntp_NtpKeys) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Ntp_NtpKeys.ProtoReflect.Descriptor instead.
func (*System_Ntp_NtpKeys) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11, 1}
}

func (x *System_Ntp_NtpKeys) GetNtpKey() []*System_Ntp_NtpKeys_NtpKeyKey {
	if x != nil {
		return x.NtpKey
	}
	return nil
}

type System_Ntp_Servers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server []*System_Ntp_Servers_ServerKey `protobuf:"bytes,453498492,rep,name=server,proto3" json:"server,omitempty"`
}

func (x *System_Ntp_Servers) Reset() {
	*x = System_Ntp_Servers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Ntp_Servers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Ntp_Servers) ProtoMessage() {}

func (x *System_Ntp_Servers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Ntp_Servers.ProtoReflect.Descriptor instead.
func (*System_Ntp_Servers) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11, 2}
}

func (x *System_Ntp_Servers) GetServer() []*System_Ntp_Servers_ServerKey {
	if x != nil {
		return x.Server
	}
	return nil
}

type System_Ntp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthMismatch     *ywrapper.UintValue   `protobuf:"bytes,264062383,opt,name=auth_mismatch,json=authMismatch,proto3" json:"auth_mismatch,omitempty"`
	EnableNtpAuth    *ywrapper.BoolValue   `protobuf:"bytes,181726607,opt,name=enable_ntp_auth,json=enableNtpAuth,proto3" json:"enable_ntp_auth,omitempty"`
	Enabled          *ywrapper.BoolValue   `protobuf:"bytes,149560907,opt,name=enabled,proto3" json:"enabled,omitempty"`
	NtpSourceAddress *ywrapper.StringValue `protobuf:"bytes,137356691,opt,name=ntp_source_address,json=ntpSourceAddress,proto3" json:"ntp_source_address,omitempty"`
}

func (x *System_Ntp_State) Reset() {
	*x = System_Ntp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Ntp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Ntp_State) ProtoMessage() {}

func (x *System_Ntp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Ntp_State.ProtoReflect.Descriptor instead.
func (*System_Ntp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11, 3}
}

func (x *System_Ntp_State) GetAuthMismatch() *ywrapper.UintValue {
	if x != nil {
		return x.AuthMismatch
	}
	return nil
}

func (x *System_Ntp_State) GetEnableNtpAuth() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableNtpAuth
	}
	return nil
}

func (x *System_Ntp_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *System_Ntp_State) GetNtpSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.NtpSourceAddress
	}
	return nil
}

type System_Ntp_NtpKeys_NtpKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Ntp_NtpKeys_NtpKey_Config `protobuf:"bytes,92682517,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Ntp_NtpKeys_NtpKey_State  `protobuf:"bytes,467759498,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Ntp_NtpKeys_NtpKey) Reset() {
	*x = System_Ntp_NtpKeys_NtpKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Ntp_NtpKeys_NtpKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Ntp_NtpKeys_NtpKey) ProtoMessage() {}

func (x *System_Ntp_NtpKeys_NtpKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Ntp_NtpKeys_NtpKey.ProtoReflect.Descriptor instead.
func (*System_Ntp_NtpKeys_NtpKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11, 1, 0}
}

func (x *System_Ntp_NtpKeys_NtpKey) GetConfig() *System_Ntp_NtpKeys_NtpKey_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Ntp_NtpKeys_NtpKey) GetState() *System_Ntp_NtpKeys_NtpKey_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Ntp_NtpKeys_NtpKeyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId  uint64                     `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	NtpKey *System_Ntp_NtpKeys_NtpKey `protobuf:"bytes,2,opt,name=ntp_key,json=ntpKey,proto3" json:"ntp_key,omitempty"`
}

func (x *System_Ntp_NtpKeys_NtpKeyKey) Reset() {
	*x = System_Ntp_NtpKeys_NtpKeyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Ntp_NtpKeys_NtpKeyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Ntp_NtpKeys_NtpKeyKey) ProtoMessage() {}

func (x *System_Ntp_NtpKeys_NtpKeyKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Ntp_NtpKeys_NtpKeyKey.ProtoReflect.Descriptor instead.
func (*System_Ntp_NtpKeys_NtpKeyKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11, 1, 1}
}

func (x *System_Ntp_NtpKeys_NtpKeyKey) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *System_Ntp_NtpKeys_NtpKeyKey) GetNtpKey() *System_Ntp_NtpKeys_NtpKey {
	if x != nil {
		return x.NtpKey
	}
	return nil
}

type System_Ntp_NtpKeys_NtpKey_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId    *ywrapper.UintValue         `protobuf:"bytes,222155977,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	KeyType  OpenconfigSystemNTPAUTHTYPE `protobuf:"varint,68795202,opt,name=key_type,json=keyType,proto3,enum=openconfig.OpenconfigSystemNTPAUTHTYPE" json:"key_type,omitempty"`
	KeyValue *ywrapper.StringValue       `protobuf:"bytes,491993133,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
}

func (x *System_Ntp_NtpKeys_NtpKey_Config) Reset() {
	*x = System_Ntp_NtpKeys_NtpKey_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Ntp_NtpKeys_NtpKey_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Ntp_NtpKeys_NtpKey_Config) ProtoMessage() {}

func (x *System_Ntp_NtpKeys_NtpKey_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Ntp_NtpKeys_NtpKey_Config.ProtoReflect.Descriptor instead.
func (*System_Ntp_NtpKeys_NtpKey_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11, 1, 0, 0}
}

func (x *System_Ntp_NtpKeys_NtpKey_Config) GetKeyId() *ywrapper.UintValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *System_Ntp_NtpKeys_NtpKey_Config) GetKeyType() OpenconfigSystemNTPAUTHTYPE {
	if x != nil {
		return x.KeyType
	}
	return OpenconfigSystemNTPAUTHTYPE_OPENCONFIGSYSTEMNTPAUTHTYPE_UNSET
}

func (x *System_Ntp_NtpKeys_NtpKey_Config) GetKeyValue() *ywrapper.StringValue {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

type System_Ntp_NtpKeys_NtpKey_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId    *ywrapper.UintValue         `protobuf:"bytes,526881776,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	KeyType  OpenconfigSystemNTPAUTHTYPE `protobuf:"varint,360346767,opt,name=key_type,json=keyType,proto3,enum=openconfig.OpenconfigSystemNTPAUTHTYPE" json:"key_type,omitempty"`
	KeyValue *ywrapper.StringValue       `protobuf:"bytes,234995902,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
}

func (x *System_Ntp_NtpKeys_NtpKey_State) Reset() {
	*x = System_Ntp_NtpKeys_NtpKey_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Ntp_NtpKeys_NtpKey_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Ntp_NtpKeys_NtpKey_State) ProtoMessage() {}

func (x *System_Ntp_NtpKeys_NtpKey_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Ntp_NtpKeys_NtpKey_State.ProtoReflect.Descriptor instead.
func (*System_Ntp_NtpKeys_NtpKey_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11, 1, 0, 1}
}

func (x *System_Ntp_NtpKeys_NtpKey_State) GetKeyId() *ywrapper.UintValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *System_Ntp_NtpKeys_NtpKey_State) GetKeyType() OpenconfigSystemNTPAUTHTYPE {
	if x != nil {
		return x.KeyType
	}
	return OpenconfigSystemNTPAUTHTYPE_OPENCONFIGSYSTEMNTPAUTHTYPE_UNSET
}

func (x *System_Ntp_NtpKeys_NtpKey_State) GetKeyValue() *ywrapper.StringValue {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

type System_Ntp_Servers_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Ntp_Servers_Server_Config `protobuf:"bytes,336048721,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Ntp_Servers_Server_State  `protobuf:"bytes,280461638,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Ntp_Servers_Server) Reset() {
	*x = System_Ntp_Servers_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Ntp_Servers_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Ntp_Servers_Server) ProtoMessage() {}

func (x *System_Ntp_Servers_Server) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Ntp_Servers_Server.ProtoReflect.Descriptor instead.
func (*System_Ntp_Servers_Server) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11, 2, 0}
}

func (x *System_Ntp_Servers_Server) GetConfig() *System_Ntp_Servers_Server_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Ntp_Servers_Server) GetState() *System_Ntp_Servers_Server_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Ntp_Servers_ServerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string                     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Server  *System_Ntp_Servers_Server `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *System_Ntp_Servers_ServerKey) Reset() {
	*x = System_Ntp_Servers_ServerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Ntp_Servers_ServerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Ntp_Servers_ServerKey) ProtoMessage() {}

func (x *System_Ntp_Servers_ServerKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Ntp_Servers_ServerKey.ProtoReflect.Descriptor instead.
func (*System_Ntp_Servers_ServerKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11, 2, 1}
}

func (x *System_Ntp_Servers_ServerKey) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *System_Ntp_Servers_ServerKey) GetServer() *System_Ntp_Servers_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type System_Ntp_Servers_Server_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         *ywrapper.StringValue                            `protobuf:"bytes,410259212,opt,name=address,proto3" json:"address,omitempty"`
	AssociationType System_Ntp_Servers_Server_Config_AssociationType `protobuf:"varint,403743446,opt,name=association_type,json=associationType,proto3,enum=openconfig.System_Ntp_Servers_Server_Config_AssociationType" json:"association_type,omitempty"`
	Iburst          *ywrapper.BoolValue                              `protobuf:"bytes,520002257,opt,name=iburst,proto3" json:"iburst,omitempty"`
	Port            *ywrapper.UintValue                              `protobuf:"bytes,23953045,opt,name=port,proto3" json:"port,omitempty"`
	Prefer          *ywrapper.BoolValue                              `protobuf:"bytes,63587710,opt,name=prefer,proto3" json:"prefer,omitempty"`
	Version         *ywrapper.UintValue                              `protobuf:"bytes,385126824,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *System_Ntp_Servers_Server_Config) Reset() {
	*x = System_Ntp_Servers_Server_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Ntp_Servers_Server_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Ntp_Servers_Server_Config) ProtoMessage() {}

func (x *System_Ntp_Servers_Server_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Ntp_Servers_Server_Config.ProtoReflect.Descriptor instead.
func (*System_Ntp_Servers_Server_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11, 2, 0, 0}
}

func (x *System_Ntp_Servers_Server_Config) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *System_Ntp_Servers_Server_Config) GetAssociationType() System_Ntp_Servers_Server_Config_AssociationType {
	if x != nil {
		return x.AssociationType
	}
	return System_Ntp_Servers_Server_Config_ASSOCIATIONTYPE_SERVER
}

func (x *System_Ntp_Servers_Server_Config) GetIburst() *ywrapper.BoolValue {
	if x != nil {
		return x.Iburst
	}
	return nil
}

func (x *System_Ntp_Servers_Server_Config) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *System_Ntp_Servers_Server_Config) GetPrefer() *ywrapper.BoolValue {
	if x != nil {
		return x.Prefer
	}
	return nil
}

func (x *System_Ntp_Servers_Server_Config) GetVersion() *ywrapper.UintValue {
	if x != nil {
		return x.Version
	}
	return nil
}

type System_Ntp_Servers_Server_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         *ywrapper.StringValue                           `protobuf:"bytes,376190615,opt,name=address,proto3" json:"address,omitempty"`
	AssociationType System_Ntp_Servers_Server_State_AssociationType `protobuf:"varint,409884071,opt,name=association_type,json=associationType,proto3,enum=openconfig.System_Ntp_Servers_Server_State_AssociationType" json:"association_type,omitempty"`
	Iburst          *ywrapper.BoolValue                             `protobuf:"bytes,447044400,opt,name=iburst,proto3" json:"iburst,omitempty"`
	Offset          *ywrapper.UintValue                             `protobuf:"bytes,2287252,opt,name=offset,proto3" json:"offset,omitempty"`
	PollInterval    *ywrapper.UintValue                             `protobuf:"bytes,394021196,opt,name=poll_interval,json=pollInterval,proto3" json:"poll_interval,omitempty"`
	Port            *ywrapper.UintValue                             `protobuf:"bytes,470437856,opt,name=port,proto3" json:"port,omitempty"`
	Prefer          *ywrapper.BoolValue                             `protobuf:"bytes,424414343,opt,name=prefer,proto3" json:"prefer,omitempty"`
	RootDelay       *ywrapper.UintValue                             `protobuf:"bytes,363692935,opt,name=root_delay,json=rootDelay,proto3" json:"root_delay,omitempty"`
	RootDispersion  *ywrapper.UintValue                             `protobuf:"bytes,81112484,opt,name=root_dispersion,json=rootDispersion,proto3" json:"root_dispersion,omitempty"`
	Stratum         *ywrapper.UintValue                             `protobuf:"bytes,297803783,opt,name=stratum,proto3" json:"stratum,omitempty"`
	Version         *ywrapper.UintValue                             `protobuf:"bytes,110839315,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *System_Ntp_Servers_Server_State) Reset() {
	*x = System_Ntp_Servers_Server_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Ntp_Servers_Server_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Ntp_Servers_Server_State) ProtoMessage() {}

func (x *System_Ntp_Servers_Server_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Ntp_Servers_Server_State.ProtoReflect.Descriptor instead.
func (*System_Ntp_Servers_Server_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 11, 2, 0, 1}
}

func (x *System_Ntp_Servers_Server_State) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *System_Ntp_Servers_Server_State) GetAssociationType() System_Ntp_Servers_Server_State_AssociationType {
	if x != nil {
		return x.AssociationType
	}
	return System_Ntp_Servers_Server_State_ASSOCIATIONTYPE_SERVER
}

func (x *System_Ntp_Servers_Server_State) GetIburst() *ywrapper.BoolValue {
	if x != nil {
		return x.Iburst
	}
	return nil
}

func (x *System_Ntp_Servers_Server_State) GetOffset() *ywrapper.UintValue {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *System_Ntp_Servers_Server_State) GetPollInterval() *ywrapper.UintValue {
	if x != nil {
		return x.PollInterval
	}
	return nil
}

func (x *System_Ntp_Servers_Server_State) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *System_Ntp_Servers_Server_State) GetPrefer() *ywrapper.BoolValue {
	if x != nil {
		return x.Prefer
	}
	return nil
}

func (x *System_Ntp_Servers_Server_State) GetRootDelay() *ywrapper.UintValue {
	if x != nil {
		return x.RootDelay
	}
	return nil
}

func (x *System_Ntp_Servers_Server_State) GetRootDispersion() *ywrapper.UintValue {
	if x != nil {
		return x.RootDispersion
	}
	return nil
}

func (x *System_Ntp_Servers_Server_State) GetStratum() *ywrapper.UintValue {
	if x != nil {
		return x.Stratum
	}
	return nil
}

func (x *System_Ntp_Servers_Server_State) GetVersion() *ywrapper.UintValue {
	if x != nil {
		return x.Version
	}
	return nil
}

type System_Openflow_Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Openflow_Agent_Config `protobuf:"bytes,423271126,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Openflow_Agent_State  `protobuf:"bytes,421393027,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Openflow_Agent) Reset() {
	*x = System_Openflow_Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Openflow_Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Openflow_Agent) ProtoMessage() {}

func (x *System_Openflow_Agent) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Openflow_Agent.ProtoReflect.Descriptor instead.
func (*System_Openflow_Agent) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 12, 0}
}

func (x *System_Openflow_Agent) GetConfig() *System_Openflow_Agent_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Openflow_Agent) GetState() *System_Openflow_Agent_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Openflow_Controllers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller []*System_Openflow_Controllers_ControllerKey `protobuf:"bytes,445539224,rep,name=controller,proto3" json:"controller,omitempty"`
}

func (x *System_Openflow_Controllers) Reset() {
	*x = System_Openflow_Controllers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Openflow_Controllers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Openflow_Controllers) ProtoMessage() {}

func (x *System_Openflow_Controllers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Openflow_Controllers.ProtoReflect.Descriptor instead.
func (*System_Openflow_Controllers) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 12, 1}
}

func (x *System_Openflow_Controllers) GetController() []*System_Openflow_Controllers_ControllerKey {
	if x != nil {
		return x.Controller
	}
	return nil
}

type System_Openflow_Agent_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackoffInterval *ywrapper.UintValue           `protobuf:"bytes,169425115,opt,name=backoff_interval,json=backoffInterval,proto3" json:"backoff_interval,omitempty"`
	DatapathId      *ywrapper.StringValue         `protobuf:"bytes,372529014,opt,name=datapath_id,json=datapathId,proto3" json:"datapath_id,omitempty"`
	FailureMode     OpenconfigOpenflowFailureMode `protobuf:"varint,283440703,opt,name=failure_mode,json=failureMode,proto3,enum=openconfig.OpenconfigOpenflowFailureMode" json:"failure_mode,omitempty"`
	InactivityProbe *ywrapper.UintValue           `protobuf:"bytes,343613026,opt,name=inactivity_probe,json=inactivityProbe,proto3" json:"inactivity_probe,omitempty"`
	MaxBackoff      *ywrapper.UintValue           `protobuf:"bytes,360108366,opt,name=max_backoff,json=maxBackoff,proto3" json:"max_backoff,omitempty"`
}

func (x *System_Openflow_Agent_Config) Reset() {
	*x = System_Openflow_Agent_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Openflow_Agent_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Openflow_Agent_Config) ProtoMessage() {}

func (x *System_Openflow_Agent_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Openflow_Agent_Config.ProtoReflect.Descriptor instead.
func (*System_Openflow_Agent_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 12, 0, 0}
}

func (x *System_Openflow_Agent_Config) GetBackoffInterval() *ywrapper.UintValue {
	if x != nil {
		return x.BackoffInterval
	}
	return nil
}

func (x *System_Openflow_Agent_Config) GetDatapathId() *ywrapper.StringValue {
	if x != nil {
		return x.DatapathId
	}
	return nil
}

func (x *System_Openflow_Agent_Config) GetFailureMode() OpenconfigOpenflowFailureMode {
	if x != nil {
		return x.FailureMode
	}
	return OpenconfigOpenflowFailureMode_OPENCONFIGOPENFLOWFAILUREMODE_UNSET
}

func (x *System_Openflow_Agent_Config) GetInactivityProbe() *ywrapper.UintValue {
	if x != nil {
		return x.InactivityProbe
	}
	return nil
}

func (x *System_Openflow_Agent_Config) GetMaxBackoff() *ywrapper.UintValue {
	if x != nil {
		return x.MaxBackoff
	}
	return nil
}

type System_Openflow_Agent_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackoffInterval *ywrapper.UintValue           `protobuf:"bytes,534092116,opt,name=backoff_interval,json=backoffInterval,proto3" json:"backoff_interval,omitempty"`
	DatapathId      *ywrapper.StringValue         `protobuf:"bytes,170087235,opt,name=datapath_id,json=datapathId,proto3" json:"datapath_id,omitempty"`
	FailureMode     OpenconfigOpenflowFailureMode `protobuf:"varint,170198352,opt,name=failure_mode,json=failureMode,proto3,enum=openconfig.OpenconfigOpenflowFailureMode" json:"failure_mode,omitempty"`
	InactivityProbe *ywrapper.UintValue           `protobuf:"bytes,72940597,opt,name=inactivity_probe,json=inactivityProbe,proto3" json:"inactivity_probe,omitempty"`
	MaxBackoff      *ywrapper.UintValue           `protobuf:"bytes,75622835,opt,name=max_backoff,json=maxBackoff,proto3" json:"max_backoff,omitempty"`
}

func (x *System_Openflow_Agent_State) Reset() {
	*x = System_Openflow_Agent_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Openflow_Agent_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Openflow_Agent_State) ProtoMessage() {}

func (x *System_Openflow_Agent_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Openflow_Agent_State.ProtoReflect.Descriptor instead.
func (*System_Openflow_Agent_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 12, 0, 1}
}

func (x *System_Openflow_Agent_State) GetBackoffInterval() *ywrapper.UintValue {
	if x != nil {
		return x.BackoffInterval
	}
	return nil
}

func (x *System_Openflow_Agent_State) GetDatapathId() *ywrapper.StringValue {
	if x != nil {
		return x.DatapathId
	}
	return nil
}

func (x *System_Openflow_Agent_State) GetFailureMode() OpenconfigOpenflowFailureMode {
	if x != nil {
		return x.FailureMode
	}
	return OpenconfigOpenflowFailureMode_OPENCONFIGOPENFLOWFAILUREMODE_UNSET
}

func (x *System_Openflow_Agent_State) GetInactivityProbe() *ywrapper.UintValue {
	if x != nil {
		return x.InactivityProbe
	}
	return nil
}

func (x *System_Openflow_Agent_State) GetMaxBackoff() *ywrapper.UintValue {
	if x != nil {
		return x.MaxBackoff
	}
	return nil
}

type System_Openflow_Controllers_Controller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *System_Openflow_Controllers_Controller_Config      `protobuf:"bytes,48549533,opt,name=config,proto3" json:"config,omitempty"`
	Connections *System_Openflow_Controllers_Controller_Connections `protobuf:"bytes,216565066,opt,name=connections,proto3" json:"connections,omitempty"`
	State       *System_Openflow_Controllers_Controller_State       `protobuf:"bytes,479997074,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Openflow_Controllers_Controller) Reset() {
	*x = System_Openflow_Controllers_Controller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Openflow_Controllers_Controller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Openflow_Controllers_Controller) ProtoMessage() {}

func (x *System_Openflow_Controllers_Controller) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Openflow_Controllers_Controller.ProtoReflect.Descriptor instead.
func (*System_Openflow_Controllers_Controller) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 12, 1, 0}
}

func (x *System_Openflow_Controllers_Controller) GetConfig() *System_Openflow_Controllers_Controller_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller) GetConnections() *System_Openflow_Controllers_Controller_Connections {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller) GetState() *System_Openflow_Controllers_Controller_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Openflow_Controllers_ControllerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Controller *System_Openflow_Controllers_Controller `protobuf:"bytes,2,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *System_Openflow_Controllers_ControllerKey) Reset() {
	*x = System_Openflow_Controllers_ControllerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Openflow_Controllers_ControllerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Openflow_Controllers_ControllerKey) ProtoMessage() {}

func (x *System_Openflow_Controllers_ControllerKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Openflow_Controllers_ControllerKey.ProtoReflect.Descriptor instead.
func (*System_Openflow_Controllers_ControllerKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 12, 1, 1}
}

func (x *System_Openflow_Controllers_ControllerKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *System_Openflow_Controllers_ControllerKey) GetController() *System_Openflow_Controllers_Controller {
	if x != nil {
		return x.Controller
	}
	return nil
}

type System_Openflow_Controllers_Controller_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,68148217,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *System_Openflow_Controllers_Controller_Config) Reset() {
	*x = System_Openflow_Controllers_Controller_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Openflow_Controllers_Controller_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Openflow_Controllers_Controller_Config) ProtoMessage() {}

func (x *System_Openflow_Controllers_Controller_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Openflow_Controllers_Controller_Config.ProtoReflect.Descriptor instead.
func (*System_Openflow_Controllers_Controller_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 12, 1, 0, 0}
}

func (x *System_Openflow_Controllers_Controller_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type System_Openflow_Controllers_Controller_Connections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection []*System_Openflow_Controllers_Controller_Connections_ConnectionKey `protobuf:"bytes,216691009,rep,name=connection,proto3" json:"connection,omitempty"`
}

func (x *System_Openflow_Controllers_Controller_Connections) Reset() {
	*x = System_Openflow_Controllers_Controller_Connections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Openflow_Controllers_Controller_Connections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Openflow_Controllers_Controller_Connections) ProtoMessage() {}

func (x *System_Openflow_Controllers_Controller_Connections) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Openflow_Controllers_Controller_Connections.ProtoReflect.Descriptor instead.
func (*System_Openflow_Controllers_Controller_Connections) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 12, 1, 0, 1}
}

func (x *System_Openflow_Controllers_Controller_Connections) GetConnection() []*System_Openflow_Controllers_Controller_Connections_ConnectionKey {
	if x != nil {
		return x.Connection
	}
	return nil
}

type System_Openflow_Controllers_Controller_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,412957472,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *System_Openflow_Controllers_Controller_State) Reset() {
	*x = System_Openflow_Controllers_Controller_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Openflow_Controllers_Controller_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Openflow_Controllers_Controller_State) ProtoMessage() {}

func (x *System_Openflow_Controllers_Controller_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Openflow_Controllers_Controller_State.ProtoReflect.Descriptor instead.
func (*System_Openflow_Controllers_Controller_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 12, 1, 0, 2}
}

func (x *System_Openflow_Controllers_Controller_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type System_Openflow_Controllers_Controller_Connections_Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *System_Openflow_Controllers_Controller_Connections_Connection_Config `protobuf:"bytes,317383494,opt,name=config,proto3" json:"config,omitempty"`
	State  *System_Openflow_Controllers_Controller_Connections_Connection_State  `protobuf:"bytes,440162355,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection) Reset() {
	*x = System_Openflow_Controllers_Controller_Connections_Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Openflow_Controllers_Controller_Connections_Connection) ProtoMessage() {}

func (x *System_Openflow_Controllers_Controller_Connections_Connection) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Openflow_Controllers_Controller_Connections_Connection.ProtoReflect.Descriptor instead.
func (*System_Openflow_Controllers_Controller_Connections_Connection) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 12, 1, 0, 1, 0}
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection) GetConfig() *System_Openflow_Controllers_Controller_Connections_Connection_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection) GetState() *System_Openflow_Controllers_Controller_Connections_Connection_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Openflow_Controllers_Controller_Connections_ConnectionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuxId      uint64                                                         `protobuf:"varint,1,opt,name=aux_id,json=auxId,proto3" json:"aux_id,omitempty"`
	Connection *System_Openflow_Controllers_Controller_Connections_Connection `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *System_Openflow_Controllers_Controller_Connections_ConnectionKey) Reset() {
	*x = System_Openflow_Controllers_Controller_Connections_ConnectionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Openflow_Controllers_Controller_Connections_ConnectionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Openflow_Controllers_Controller_Connections_ConnectionKey) ProtoMessage() {}

func (x *System_Openflow_Controllers_Controller_Connections_ConnectionKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Openflow_Controllers_Controller_Connections_ConnectionKey.ProtoReflect.Descriptor instead.
func (*System_Openflow_Controllers_Controller_Connections_ConnectionKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 12, 1, 0, 1, 1}
}

func (x *System_Openflow_Controllers_Controller_Connections_ConnectionKey) GetAuxId() uint64 {
	if x != nil {
		return x.AuxId
	}
	return 0
}

func (x *System_Openflow_Controllers_Controller_Connections_ConnectionKey) GetConnection() *System_Openflow_Controllers_Controller_Connections_Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type System_Openflow_Controllers_Controller_Connections_Connection_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         *ywrapper.StringValue       `protobuf:"bytes,308926615,opt,name=address,proto3" json:"address,omitempty"`
	AuxId           *ywrapper.UintValue         `protobuf:"bytes,120533297,opt,name=aux_id,json=auxId,proto3" json:"aux_id,omitempty"`
	CertificateId   *ywrapper.StringValue       `protobuf:"bytes,405084556,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	Port            *ywrapper.UintValue         `protobuf:"bytes,391902688,opt,name=port,proto3" json:"port,omitempty"`
	Priority        *ywrapper.UintValue         `protobuf:"bytes,291559989,opt,name=priority,proto3" json:"priority,omitempty"`
	SourceInterface *ywrapper.StringValue       `protobuf:"bytes,275006968,opt,name=source_interface,json=sourceInterface,proto3" json:"source_interface,omitempty"`
	Transport       OpenconfigOpenflowTransport `protobuf:"varint,438606924,opt,name=transport,proto3,enum=openconfig.OpenconfigOpenflowTransport" json:"transport,omitempty"`
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_Config) Reset() {
	*x = System_Openflow_Controllers_Controller_Connections_Connection_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Openflow_Controllers_Controller_Connections_Connection_Config) ProtoMessage() {}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Openflow_Controllers_Controller_Connections_Connection_Config.ProtoReflect.Descriptor instead.
func (*System_Openflow_Controllers_Controller_Connections_Connection_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 12, 1, 0, 1, 0, 0}
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_Config) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_Config) GetAuxId() *ywrapper.UintValue {
	if x != nil {
		return x.AuxId
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_Config) GetCertificateId() *ywrapper.StringValue {
	if x != nil {
		return x.CertificateId
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_Config) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_Config) GetPriority() *ywrapper.UintValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_Config) GetSourceInterface() *ywrapper.StringValue {
	if x != nil {
		return x.SourceInterface
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_Config) GetTransport() OpenconfigOpenflowTransport {
	if x != nil {
		return x.Transport
	}
	return OpenconfigOpenflowTransport_OPENCONFIGOPENFLOWTRANSPORT_TCP
}

type System_Openflow_Controllers_Controller_Connections_Connection_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         *ywrapper.StringValue       `protobuf:"bytes,342213662,opt,name=address,proto3" json:"address,omitempty"`
	AuxId           *ywrapper.UintValue         `protobuf:"bytes,120157314,opt,name=aux_id,json=auxId,proto3" json:"aux_id,omitempty"`
	CertificateId   *ywrapper.StringValue       `protobuf:"bytes,129910687,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	Connected       *ywrapper.BoolValue         `protobuf:"bytes,195931019,opt,name=connected,proto3" json:"connected,omitempty"`
	Port            *ywrapper.UintValue         `protobuf:"bytes,277237519,opt,name=port,proto3" json:"port,omitempty"`
	Priority        *ywrapper.UintValue         `protobuf:"bytes,413676866,opt,name=priority,proto3" json:"priority,omitempty"`
	SourceInterface *ywrapper.StringValue       `protobuf:"bytes,274729247,opt,name=source_interface,json=sourceInterface,proto3" json:"source_interface,omitempty"`
	Transport       OpenconfigOpenflowTransport `protobuf:"varint,377206093,opt,name=transport,proto3,enum=openconfig.OpenconfigOpenflowTransport" json:"transport,omitempty"`
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_State) Reset() {
	*x = System_Openflow_Controllers_Controller_Connections_Connection_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Openflow_Controllers_Controller_Connections_Connection_State) ProtoMessage() {}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Openflow_Controllers_Controller_Connections_Connection_State.ProtoReflect.Descriptor instead.
func (*System_Openflow_Controllers_Controller_Connections_Connection_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 12, 1, 0, 1, 0, 1}
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_State) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_State) GetAuxId() *ywrapper.UintValue {
	if x != nil {
		return x.AuxId
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_State) GetCertificateId() *ywrapper.StringValue {
	if x != nil {
		return x.CertificateId
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_State) GetConnected() *ywrapper.BoolValue {
	if x != nil {
		return x.Connected
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_State) GetPort() *ywrapper.UintValue {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_State) GetPriority() *ywrapper.UintValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_State) GetSourceInterface() *ywrapper.StringValue {
	if x != nil {
		return x.SourceInterface
	}
	return nil
}

func (x *System_Openflow_Controllers_Controller_Connections_Connection_State) GetTransport() OpenconfigOpenflowTransport {
	if x != nil {
		return x.Transport
	}
	return OpenconfigOpenflowTransport_OPENCONFIGOPENFLOWTRANSPORT_TCP
}

type System_Processes_Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *System_Processes_Process_State `protobuf:"bytes,393937770,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *System_Processes_Process) Reset() {
	*x = System_Processes_Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Processes_Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Processes_Process) ProtoMessage() {}

func (x *System_Processes_Process) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Processes_Process.ProtoReflect.Descriptor instead.
func (*System_Processes_Process) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 13, 0}
}

func (x *System_Processes_Process) GetState() *System_Processes_Process_State {
	if x != nil {
		return x.State
	}
	return nil
}

type System_Processes_ProcessKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid     uint64                    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Process *System_Processes_Process `protobuf:"bytes,2,opt,name=process,proto3" json:"process,omitempty"`
}

func (x *System_Processes_ProcessKey) Reset() {
	*x = System_Processes_ProcessKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Processes_ProcessKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Processes_ProcessKey) ProtoMessage() {}

func (x *System_Processes_ProcessKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Processes_ProcessKey.ProtoReflect.Descriptor instead.
func (*System_Processes_ProcessKey) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 13, 1}
}

func (x *System_Processes_ProcessKey) GetPid() uint64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *System_Processes_ProcessKey) GetProcess() *System_Processes_Process {
	if x != nil {
		return x.Process
	}
	return nil
}

type System_Processes_Process_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args              []*ywrapper.StringValue `protobuf:"bytes,136113714,rep,name=args,proto3" json:"args,omitempty"`
	CpuUsageSystem    *ywrapper.UintValue     `protobuf:"bytes,221645263,opt,name=cpu_usage_system,json=cpuUsageSystem,proto3" json:"cpu_usage_system,omitempty"`
	CpuUsageUser      *ywrapper.UintValue     `protobuf:"bytes,6624253,opt,name=cpu_usage_user,json=cpuUsageUser,proto3" json:"cpu_usage_user,omitempty"`
	CpuUtilization    *ywrapper.UintValue     `protobuf:"bytes,346097790,opt,name=cpu_utilization,json=cpuUtilization,proto3" json:"cpu_utilization,omitempty"`
	MemoryUsage       *ywrapper.UintValue     `protobuf:"bytes,70248886,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	MemoryUtilization *ywrapper.UintValue     `protobuf:"bytes,283685455,opt,name=memory_utilization,json=memoryUtilization,proto3" json:"memory_utilization,omitempty"`
	Name              *ywrapper.StringValue   `protobuf:"bytes,245651384,opt,name=name,proto3" json:"name,omitempty"`
	Pid               *ywrapper.UintValue     `protobuf:"bytes,210942180,opt,name=pid,proto3" json:"pid,omitempty"`
	StartTime         *ywrapper.UintValue     `protobuf:"bytes,320727543,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *System_Processes_Process_State) Reset() {
	*x = System_Processes_Process_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Processes_Process_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Processes_Process_State) ProtoMessage() {}

func (x *System_Processes_Process_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Processes_Process_State.ProtoReflect.Descriptor instead.
func (*System_Processes_Process_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 13, 0, 0}
}

func (x *System_Processes_Process_State) GetArgs() []*ywrapper.StringValue {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *System_Processes_Process_State) GetCpuUsageSystem() *ywrapper.UintValue {
	if x != nil {
		return x.CpuUsageSystem
	}
	return nil
}

func (x *System_Processes_Process_State) GetCpuUsageUser() *ywrapper.UintValue {
	if x != nil {
		return x.CpuUsageUser
	}
	return nil
}

func (x *System_Processes_Process_State) GetCpuUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.CpuUtilization
	}
	return nil
}

func (x *System_Processes_Process_State) GetMemoryUsage() *ywrapper.UintValue {
	if x != nil {
		return x.MemoryUsage
	}
	return nil
}

func (x *System_Processes_Process_State) GetMemoryUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.MemoryUtilization
	}
	return nil
}

func (x *System_Processes_Process_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *System_Processes_Process_State) GetPid() *ywrapper.UintValue {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *System_Processes_Process_State) GetStartTime() *ywrapper.UintValue {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type System_SshServer_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable          *ywrapper.BoolValue                     `protobuf:"bytes,475045872,opt,name=enable,proto3" json:"enable,omitempty"`
	ProtocolVersion System_SshServer_Config_ProtocolVersion `protobuf:"varint,334522130,opt,name=protocol_version,json=protocolVersion,proto3,enum=openconfig.System_SshServer_Config_ProtocolVersion" json:"protocol_version,omitempty"`
	RateLimit       *ywrapper.UintValue                     `protobuf:"bytes,194633841,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	SessionLimit    *ywrapper.UintValue                     `protobuf:"bytes,401851517,opt,name=session_limit,json=sessionLimit,proto3" json:"session_limit,omitempty"`
	Timeout         *ywrapper.UintValue                     `protobuf:"bytes,447813214,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *System_SshServer_Config) Reset() {
	*x = System_SshServer_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_SshServer_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_SshServer_Config) ProtoMessage() {}

func (x *System_SshServer_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_SshServer_Config.ProtoReflect.Descriptor instead.
func (*System_SshServer_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 14, 0}
}

func (x *System_SshServer_Config) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *System_SshServer_Config) GetProtocolVersion() System_SshServer_Config_ProtocolVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return System_SshServer_Config_PROTOCOLVERSION_V2
}

func (x *System_SshServer_Config) GetRateLimit() *ywrapper.UintValue {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *System_SshServer_Config) GetSessionLimit() *ywrapper.UintValue {
	if x != nil {
		return x.SessionLimit
	}
	return nil
}

func (x *System_SshServer_Config) GetTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type System_SshServer_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable          *ywrapper.BoolValue                    `protobuf:"bytes,107574011,opt,name=enable,proto3" json:"enable,omitempty"`
	ProtocolVersion System_SshServer_State_ProtocolVersion `protobuf:"varint,420819557,opt,name=protocol_version,json=protocolVersion,proto3,enum=openconfig.System_SshServer_State_ProtocolVersion" json:"protocol_version,omitempty"`
	RateLimit       *ywrapper.UintValue                    `protobuf:"bytes,313289414,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	SessionLimit    *ywrapper.UintValue                    `protobuf:"bytes,301700896,opt,name=session_limit,json=sessionLimit,proto3" json:"session_limit,omitempty"`
	Timeout         *ywrapper.UintValue                    `protobuf:"bytes,183732583,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *System_SshServer_State) Reset() {
	*x = System_SshServer_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_SshServer_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_SshServer_State) ProtoMessage() {}

func (x *System_SshServer_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_SshServer_State.ProtoReflect.Descriptor instead.
func (*System_SshServer_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 14, 1}
}

func (x *System_SshServer_State) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *System_SshServer_State) GetProtocolVersion() System_SshServer_State_ProtocolVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return System_SshServer_State_PROTOCOLVERSION_V2
}

func (x *System_SshServer_State) GetRateLimit() *ywrapper.UintValue {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *System_SshServer_State) GetSessionLimit() *ywrapper.UintValue {
	if x != nil {
		return x.SessionLimit
	}
	return nil
}

func (x *System_SshServer_State) GetTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type System_TelnetServer_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable       *ywrapper.BoolValue `protobuf:"bytes,131142084,opt,name=enable,proto3" json:"enable,omitempty"`
	RateLimit    *ywrapper.UintValue `protobuf:"bytes,174879637,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	SessionLimit *ywrapper.UintValue `protobuf:"bytes,205487953,opt,name=session_limit,json=sessionLimit,proto3" json:"session_limit,omitempty"`
	Timeout      *ywrapper.UintValue `protobuf:"bytes,360726298,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *System_TelnetServer_Config) Reset() {
	*x = System_TelnetServer_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_TelnetServer_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_TelnetServer_Config) ProtoMessage() {}

func (x *System_TelnetServer_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_TelnetServer_Config.ProtoReflect.Descriptor instead.
func (*System_TelnetServer_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 16, 0}
}

func (x *System_TelnetServer_Config) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *System_TelnetServer_Config) GetRateLimit() *ywrapper.UintValue {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *System_TelnetServer_Config) GetSessionLimit() *ywrapper.UintValue {
	if x != nil {
		return x.SessionLimit
	}
	return nil
}

func (x *System_TelnetServer_Config) GetTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type System_TelnetServer_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable       *ywrapper.BoolValue `protobuf:"bytes,254591055,opt,name=enable,proto3" json:"enable,omitempty"`
	RateLimit    *ywrapper.UintValue `protobuf:"bytes,329011690,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	SessionLimit *ywrapper.UintValue `protobuf:"bytes,405418532,opt,name=session_limit,json=sessionLimit,proto3" json:"session_limit,omitempty"`
	Timeout      *ywrapper.UintValue `protobuf:"bytes,253730963,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *System_TelnetServer_State) Reset() {
	*x = System_TelnetServer_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_system_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_TelnetServer_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_TelnetServer_State) ProtoMessage() {}

func (x *System_TelnetServer_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_system_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_TelnetServer_State.ProtoReflect.Descriptor instead.
func (*System_TelnetServer_State) Descriptor() ([]byte, []int) {
	return file_openconfig_system_proto_rawDescGZIP(), []int{0, 16, 1}
}

func (x *System_TelnetServer_State) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *System_TelnetServer_State) GetRateLimit() *ywrapper.UintValue {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *System_TelnetServer_State) GetSessionLimit() *ywrapper.UintValue {
	if x != nil {
		return x.SessionLimit
	}
	return nil
}

func (x *System_TelnetServer_State) GetTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Timeout
	}
	return nil
}

var File_openconfig_system_proto protoreflect.FileDescriptor

var file_openconfig_system_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0xbf, 0x03, 0x0a, 0x06, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x03, 0x61, 0x61, 0x61, 0x18, 0x92, 0xb4, 0x8f,
	0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x42, 0x0e, 0x82,
	0x41, 0x0b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x52, 0x03, 0x61,
	0x61, 0x61, 0x12, 0x48, 0x0a, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0xdd, 0xa2, 0xad,
	0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x73, 0x42, 0x11, 0x82, 0x41, 0x0e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x73, 0x52, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x44, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0xcb, 0xa9, 0x93, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x10, 0x82, 0x41, 0x0d, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb1, 0x96, 0xd5,
	0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x11, 0x82, 0x41, 0x0e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x04, 0x63,
	0x70, 0x75, 0x73, 0x18, 0x86, 0xdd, 0x94, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x43, 0x70, 0x75, 0x73, 0x42, 0x0f, 0x82, 0x41, 0x0c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x52, 0x04, 0x63, 0x70, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x03,
	0x64, 0x6e, 0x73, 0x18, 0x90, 0xe0, 0xc3, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x42, 0x0e, 0x82, 0x41, 0x0b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x0b, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0xb5, 0xcd, 0xef, 0x36, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x42, 0x16, 0x82, 0x41, 0x13, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x18, 0xd8, 0xb8, 0xf1, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x12, 0x82, 0x41, 0x0f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xd6, 0xa3,
	0x93, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x42, 0x12, 0x82, 0x41, 0x0f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x47, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x9e, 0xc8, 0xf2, 0x71, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x11, 0x82,
	0x41, 0x0e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0xeb, 0xe5, 0x8c, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x13, 0x82, 0x41, 0x10, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x03, 0x6e, 0x74, 0x70,
	0x18, 0xfb, 0xcb, 0xa3, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74,
	0x70, 0x42, 0x0e, 0x82, 0x41, 0x0b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74,
	0x70, 0x52, 0x03, 0x6e, 0x74, 0x70, 0x12, 0x50, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0xaf, 0x98, 0xe5, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x13, 0x82, 0x41, 0x10, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x53, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0xe2, 0xbb, 0xf1, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x14, 0x82, 0x41,
	0x11, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x55, 0x0a,
	0x0a, 0x73, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0xc1, 0x85, 0xf6, 0x2b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x42, 0x15, 0x82, 0x41, 0x12, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73,
	0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x09, 0x73, 0x73, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa6, 0xdf,
	0xc5, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x10, 0x82, 0x41, 0x0d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x74, 0x65,
	0x6c, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0xc5, 0xb6, 0xb8, 0xcb,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x65, 0x6c, 0x6e, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x18, 0x82, 0x41, 0x15, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x0c, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0xa8,
	0x8b, 0x01, 0x0a, 0x03, 0x41, 0x61, 0x61, 0x12, 0x5f, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xf6, 0xa0, 0xc7, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x19, 0x82, 0x41, 0x16, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x70, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf5, 0xc7, 0x94, 0xf8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1d, 0x82, 0x41, 0x1a,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd4, 0x84, 0xab, 0x2c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xd3, 0xf0, 0x81, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x41, 0x61, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x15, 0x82, 0x41, 0x12, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x85, 0x92, 0xed, 0xae, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb4,
	0xe8, 0x85, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x14, 0x82, 0x41, 0x11, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xfc, 0x13, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x65, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd7, 0xf7, 0xb9, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x20,
	0x82, 0x41, 0x1d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0xe6, 0xe7, 0x97, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x41, 0x61, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x61, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x88, 0xe3, 0xb2, 0x4b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xa3, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa2, 0x01,
	0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0xe9, 0xdb, 0x97, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x32, 0x82, 0x41,
	0x2f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x1a, 0xf3, 0x01, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x9b, 0x01, 0x0a,
	0x31, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x18, 0xd0, 0x9e, 0x88, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x52, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61, 0x61,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x18, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x8f, 0xc4, 0xfb, 0x92, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0xf3, 0x0a, 0x0a, 0x06, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x72, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xa7, 0xb9, 0xd6,
	0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x98, 0x08, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb8, 0x9d, 0xfb,
	0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2d, 0x82,
	0x41, 0x2a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x7b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd1, 0xc5,
	0xd5, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2c, 0x82, 0x41,
	0x29, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x87, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x90, 0x01, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xa2, 0x80, 0xe9, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e,
	0x47, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x8d, 0x01, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0xc4, 0xef, 0xe3, 0x42, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0x5a, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x11, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x10, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x12, 0x18, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x1a, 0x84, 0x03, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xb9, 0xd4, 0xda, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0xeb, 0xac, 0xeb, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x5a, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x11, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x12, 0x18, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x53, 0x54,
	0x4f, 0x50, 0x1a, 0xd9, 0x01, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x86, 0x01, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e,
	0x47, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0xa0,
	0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x11, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0xb6,
	0xaa, 0x90, 0x31, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0xf3, 0x01, 0x0a, 0x15,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x9b, 0x01, 0x0a, 0x31, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61,
	0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0xeb, 0xeb, 0xc7, 0xbd,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x52, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0xc6, 0xd4, 0xe7, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x1a, 0xc1, 0x21, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0xeb, 0xf7, 0xf7, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x28, 0x82,
	0x41, 0x25, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x6d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9a, 0xe5, 0xe7,
	0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x6a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb7, 0xea, 0xae, 0xbb, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0xf0, 0xa5, 0x90, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x23, 0x82,
	0x41, 0x20, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0xd3, 0x07, 0x0a, 0x09, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xbc, 0xf5, 0xea, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb5, 0xb9, 0xdc, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa0, 0x02, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0xaa, 0x86, 0xa8, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x94, 0x01, 0x0a, 0x15, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x18, 0xd4, 0xee, 0xfb, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x52, 0x13, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x1a,
	0x9d, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x0e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0xf1, 0xe4, 0xd1, 0xde,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41,
	0x3a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x15, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x65, 0x64, 0x18, 0xa5, 0xa6, 0xce, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x52, 0x13, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x7e, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xae, 0x8f, 0x83, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0xcf, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xba, 0x01, 0x0a, 0x15, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0xc1, 0xbd, 0xca, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x87, 0x02, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xa3, 0x01, 0x0a, 0x35, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18,
	0xf8, 0x8f, 0xa1, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x52, 0x33, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61,
	0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x1c, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xe7, 0xb8, 0x89, 0xd1,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x1a, 0xcc, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x15,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x88, 0xae, 0xc3, 0x54, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x87, 0x02, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xa3, 0x01, 0x0a, 0x35, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x95,
	0x82, 0xbd, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x54, 0x59, 0x50, 0x45, 0x52, 0x33, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61, 0x61,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x1c, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xe8, 0xa8, 0x92, 0xbe, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0xf2, 0x0e, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x75, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0xbe, 0xfe, 0xc0, 0xa4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x1a, 0xd0, 0x0c, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x8f, 0xc5, 0xbc, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x80, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x80, 0xe1, 0x8c, 0x88,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2e, 0x82,
	0x41, 0x2b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xa0, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x6e, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x89, 0xe1, 0xec, 0x42,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x83, 0x01, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x18, 0xdd, 0x83, 0xde, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x93, 0x01, 0x0a, 0x29, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0xfc, 0xe4, 0x93, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x48,
	0x00, 0x52, 0x28, 0x72, 0x6f, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x92, 0xfa, 0xf0, 0x87, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x07, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xe6, 0xd6,
	0xd2, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37,
	0x82, 0x41, 0x34, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x73, 0x73, 0x68, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12,
	0x6e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x96, 0x8f, 0x81, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x9a, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x6d, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0xc0, 0x80,
	0xd3, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82,
	0x41, 0x34, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x82, 0x01, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x65, 0x64, 0x18, 0xc2, 0xd6, 0xef, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x93, 0x01, 0x0a, 0x29, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0xe3, 0x91, 0xe4, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x48,
	0x00, 0x52, 0x28, 0x72, 0x6f, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xf1, 0xc0, 0xff, 0x4c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x69, 0x0a, 0x07, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xb9, 0xa0, 0x9a,
	0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41,
	0x33, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x73, 0x68,
	0x2d, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x6e, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8b, 0x8a, 0xa9, 0xfc, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x9e, 0x01, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x4d, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x44, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0xa7, 0x11, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xd9, 0x90, 0xef, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xb0,
	0xe5, 0xc5, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x68, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xae, 0xa2, 0xa9, 0xd2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc4, 0x03, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb5, 0x01, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0xfb, 0x9f, 0xa2, 0xbe, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61,
	0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42,
	0x38, 0x82, 0x41, 0x35, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x81,
	0x02, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xa0, 0x01, 0x0a, 0x34,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61,
	0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xaa, 0xe0, 0xcd, 0x7c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x52, 0x32, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42,
	0x0a, 0x1b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x81, 0xe5,
	0xb4, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x1a, 0xc7, 0x07, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x79, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xfd, 0x95, 0xdb, 0xf6, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0xdc, 0x04, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb2, 0xc9,
	0xe3, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xaf, 0x97, 0x88, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0xa2, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x97, 0x01, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xac, 0xb3, 0xbc, 0xd6, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x42, 0x3b, 0x82, 0x41,
	0x38, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0xa0, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x96,
	0x01, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xf7, 0xf5,
	0xed, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41,
	0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xe2, 0x01, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x8c, 0x01, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x61, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0xc0, 0x03, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0xd2, 0xc8, 0xd8, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x37, 0x82,
	0x41, 0x34, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x81, 0x02, 0x0a, 0x18,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xa1, 0x01, 0x0a, 0x34, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x61, 0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x18, 0xbf, 0x80, 0xb1, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x52, 0x32, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61,
	0x61, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x1b,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xda, 0x96, 0xd9, 0x3a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a,
	0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xd5, 0x3f, 0x0a, 0x0c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xd7, 0xb3, 0x98, 0x77,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x1a, 0x93, 0x3d, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x84, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc8, 0x84, 0xd6, 0x96,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x30, 0x82,
	0x41, 0x2d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0xfa, 0x8c, 0xf0, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x7f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe1, 0xc7, 0xe3, 0x37,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xe9, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x64,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xf2, 0xd8, 0xe7, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x79, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xaf, 0xa1, 0xdd,
	0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a,
	0x9b, 0x36, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0xb0, 0xac, 0x86, 0x79, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x1a, 0xb4, 0x33, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0xa1, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc5, 0xf9, 0xd7, 0x77, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xa1, 0x01, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0xc9,
	0x87, 0x94, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x52,
	0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xba, 0xef, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x06, 0x74, 0x61, 0x63, 0x61,
	0x63, 0x73, 0x18, 0x80, 0x8c, 0xce, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x63,
	0x61, 0x63, 0x73, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x61,
	0x63, 0x61, 0x63, 0x73, 0x52, 0x06, 0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x1a, 0xf5, 0x02, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x90, 0xa2, 0x95, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x72, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x81, 0x9d, 0x84,
	0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41,
	0x41, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0xb1, 0xa7, 0xf6, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x1a, 0xba, 0x15, 0x0a, 0x06, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12,
	0xb0, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xbe, 0xfb, 0xbc, 0xb5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xab, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xab, 0x8f, 0x91,
	0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xe8, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xfc, 0xd3, 0xe9, 0x89, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x61, 0x63, 0x63, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0xdd, 0xeb, 0xc5, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0xa4, 0x01,
	0x0a, 0x13, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x85, 0xff, 0xc9, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0xe7, 0xd1, 0xc2, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x97, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x81, 0x95, 0xd6, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xe3, 0x0c, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0xc5, 0xa4, 0x92, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x84, 0x01,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xe0, 0xc5, 0x93, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0xc3, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x18, 0xd9, 0xd0, 0xb4, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x13, 0x72,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x18, 0xf0, 0xd9, 0xa7, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x52, 0x12, 0x72, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12,
	0x89, 0x01, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xc4,
	0xa0, 0xd8, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50,
	0x82, 0x41, 0x4d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2d, 0x6b, 0x65, 0x79,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x95, 0x01, 0x0a, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xd2,
	0xd5, 0xa3, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54,
	0x82, 0x41, 0x51, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0xbb, 0x05, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x9c, 0x01, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x73, 0x18, 0xb6, 0xb2, 0xce, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12,
	0x9c, 0x01, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x99, 0xab, 0xac, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0xb7,
	0x01, 0x0a, 0x17, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0xd3, 0xdb, 0x87, 0xbf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x64, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x15, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0xb6, 0x01, 0x0a, 0x17, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0xb3, 0xd0, 0xdd, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x1a, 0xaa, 0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7a, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xbb, 0xc1, 0xe4, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x73, 0x18, 0xef, 0xa9,
	0xd7, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x95, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x73, 0x18, 0xe5, 0x98, 0x89, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18,
	0xcb, 0xde, 0x92, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82,
	0x41, 0x4f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x18, 0x81, 0x8e, 0xd8, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x73, 0x18, 0xae, 0xfa, 0xf3, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xe0, 0xce,
	0xa1, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41,
	0x4b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x0e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x95, 0x01, 0x0a,
	0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0xa3, 0x96, 0xac, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xf0, 0x9c, 0xa1, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65, 0x6e,
	0x74, 0x12, 0x71, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa8, 0xf9, 0xba, 0x55, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x78, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0xaa, 0x8e, 0xd0, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82,
	0x41, 0x43, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0xba,
	0x09, 0x0a, 0x06, 0x54, 0x61, 0x63, 0x61, 0x63, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xf5, 0x9a, 0xbd, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x63, 0x61, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x46, 0x82, 0x41, 0x43,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xab, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xea, 0xbc, 0xa8, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x63, 0x61, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa8, 0x03, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x77, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xf9, 0xfb, 0xed,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x8b, 0x01,
	0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xae, 0xcc, 0xb1,
	0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82,
	0x41, 0x4e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2d, 0x6b, 0x65, 0x79,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x96, 0x01, 0x0a, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xf8,
	0xbb, 0xda, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55,
	0x82, 0x41, 0x52, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0xa4, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x76,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xf4, 0xdb, 0x94, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74,
	0x61, 0x63, 0x61, 0x63, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xbb, 0xaa, 0xab, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x96, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe5, 0xfd, 0xa9, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x74, 0x61, 0x63, 0x61, 0x63, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xbf, 0x01, 0x0a, 0x09,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x5a, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0xe6, 0x01,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x95, 0x80, 0xc9, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x78, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x94, 0x94, 0x85, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xa8, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x61, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf4, 0x08, 0x0a, 0x06, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x54, 0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0xe7,
	0xb0, 0xc4, 0x69, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x42, 0x17, 0x82, 0x41, 0x14,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x52, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0xa4, 0x07, 0x0a, 0x05,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x61, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xf8, 0xef, 0xae, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x91, 0xe0, 0xc8, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0xcd, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0xf3, 0xf0, 0xf0, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0xa8, 0xf7, 0xc0, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0xc9, 0xfa, 0xc8, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0xc1, 0xbb, 0xb2, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x65, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0xb8, 0xb2, 0x86, 0x7b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0xa7, 0x01, 0x0a, 0x31, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64, 0x18, 0xe5, 0x9c, 0xa0, 0xb3, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41,
	0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x49, 0x44, 0x48, 0x00, 0x52, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x92, 0xa3,
	0xd4, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x1a, 0x6d, 0x0a, 0x08, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x05, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x1a, 0x8d, 0x03, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x54, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9c, 0xd7, 0xee, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x17, 0x82, 0x41, 0x14, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x4f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x95, 0xb4, 0xd6, 0x4d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x16, 0x82, 0x41, 0x13, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x6e, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x64, 0x0a, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe6, 0xb7,
	0xe5, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82,
	0x41, 0x22, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x6d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xdb, 0xa5, 0x83,
	0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x82,
	0x41, 0x21, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x9b, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x0b,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xac, 0xd3, 0xa7, 0xf5,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1d, 0x82, 0x41,
	0x1a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0xf6, 0xfa, 0x9d, 0x4d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x2d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x64, 0x5f, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0xbf, 0xb6, 0xc5, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x6f, 0x74, 0x64, 0x2d, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x1a,
	0xec, 0x33, 0x0a, 0x04, 0x43, 0x70, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18,
	0x81, 0xd7, 0xc3, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x70, 0x75,
	0x73, 0x2e, 0x43, 0x70, 0x75, 0x4b, 0x65, 0x79, 0x42, 0x13, 0x82, 0x41, 0x10, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x52, 0x03, 0x63,
	0x70, 0x75, 0x1a, 0xb0, 0x31, 0x0a, 0x03, 0x43, 0x70, 0x75, 0x12, 0x56, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xf3, 0xe5, 0xea, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x19, 0x82, 0x41, 0x16, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75,
	0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xd0, 0x30, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x93, 0x01, 0x0a,
	0x12, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x18, 0xf4, 0xc0, 0xef, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x52,
	0x11, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x12, 0x5e, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0xac, 0xf4, 0x85, 0xf4, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70,
	0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x64, 0x6c, 0x65, 0x42, 0x1e, 0x82, 0x41,
	0x1b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x52, 0x04, 0x69, 0x64,
	0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0xeb, 0x87, 0xfd, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0xab, 0xed, 0xfb, 0x75, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x65, 0x0a, 0x06, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x18, 0x89, 0xda, 0xb1, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x12, 0x5d, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x18, 0xe9, 0x89, 0xd4, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x69, 0x63, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x65,
	0x12, 0x94, 0x01, 0x0a, 0x12, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0x87, 0xeb, 0x92, 0xa7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x52, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x62, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0xd4, 0xa4, 0x9d, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43,
	0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0xb7, 0xde, 0xf0, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x04, 0x77,
	0x61, 0x69, 0x74, 0x18, 0x9d, 0x8a, 0xfa, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x57, 0x61, 0x69, 0x74, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x77, 0x61, 0x69, 0x74, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x1a, 0xd1, 0x05, 0x0a, 0x11,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x12, 0x5b, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xed, 0xc2, 0xb8, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x66,
	0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xda, 0xff, 0xbf, 0x5d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0xac, 0xe8, 0xe3, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x5a, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xcf, 0xa4, 0x94, 0x61, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x68,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x93, 0xde, 0xe8, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0xf1, 0x8b, 0x94, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82,
	0x41, 0x2d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63,
	0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x69, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x89, 0xce, 0xef, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73,
	0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x69,
	0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0xe2, 0x04, 0x0a, 0x04, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18,
	0xd5, 0x84, 0xbc, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82,
	0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63,
	0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f, 0x61, 0x76,
	0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x58, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x18, 0xd2, 0xa1, 0xe2, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73,
	0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x5c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xb4, 0xa9, 0xc7,
	0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4d,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xd7, 0xea, 0xb4, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x5b, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xdb, 0xc7, 0x9b, 0xf0, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0xa9, 0x83, 0xb5, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73,
	0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f,
	0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x5a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x81, 0xe6, 0xe0, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63,
	0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64,
	0x6c, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0xf2, 0x04, 0x0a, 0x06, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12,
	0x4e, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x94, 0xf8, 0x87, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12,
	0x5a, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xef, 0x8c, 0x92, 0x50, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x8f, 0xde, 0x97, 0xd4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0xae, 0xf7, 0x8f, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x5d, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x8c, 0xa7, 0x95, 0x9d, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x80, 0x90, 0x90, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75,
	0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x5c, 0x0a, 0x08, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xe2, 0xfd, 0xb0, 0x70, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xe2, 0x04, 0x0a, 0x04, 0x4e, 0x69,
	0x63, 0x65, 0x12, 0x4d, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xf4, 0x8c, 0x88, 0x9d, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76,
	0x67, 0x12, 0x59, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xcf, 0xe7, 0x9f,
	0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xef, 0xbb, 0xac, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x8e, 0xb0, 0x96, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22,
	0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f,
	0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x6d,
	0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x5a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0xec, 0xad, 0x8e, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63,
	0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xe0, 0xca, 0x96, 0x44, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x5b, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc2, 0xd1,
	0xc4, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41,
	0x24, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x6e,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xd1,
	0x05, 0x0a, 0x11, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x12, 0x5b, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xe6, 0xa3, 0xe0, 0xda,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76,
	0x67, 0x12, 0x66, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xe5, 0xaf, 0xa2,
	0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x99, 0xc7, 0xc0, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x5a, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xc0, 0xd6, 0xed,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x12, 0x68, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xa2, 0xa5,
	0x83, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0xce, 0xbd, 0xed, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f,
	0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x68, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0xac, 0x96, 0xbd, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63,
	0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x1a, 0xec, 0x04, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x03,
	0x61, 0x76, 0x67, 0x18, 0xcd, 0xa4, 0xb2, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x5a, 0x0a, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xba, 0xaf, 0x90, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x8c, 0xf1, 0xed, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63,
	0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xaf, 0xe0,
	0x87, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41,
	0x20, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x61,
	0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xf3, 0xf6, 0x92, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xd1, 0xc7, 0x87, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x5b, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xe9, 0xf7, 0x97, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28,
	0x82, 0x41, 0x25, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f,
	0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f,
	0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0xe3, 0x04, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x03, 0x61, 0x76,
	0x67, 0x18, 0xb6, 0x9e, 0xf0, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75,
	0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x58, 0x0a, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x18, 0xb5, 0x98, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63,
	0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0xc9, 0xe4, 0xf6, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82,
	0x41, 0x24, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63,
	0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x4d, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x90, 0xb6, 0xfe, 0xf2, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x5a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb2, 0xa2, 0xee, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0xbe, 0x9d, 0xfe, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x5b, 0x0a, 0x08, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x9c, 0xa5, 0xce, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xe1, 0x04, 0x0a, 0x04, 0x57, 0x61, 0x69, 0x74,
	0x12, 0x4d, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x90, 0xf0, 0x93, 0xdc, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12,
	0x58, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xab, 0xa7, 0xde, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xdb, 0xe7, 0xc6, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77,
	0x61, 0x69, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xb2, 0xd9,
	0xef, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82, 0x41,
	0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x2f, 0x6d, 0x61, 0x78,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x5a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0xe8, 0x8e, 0x82, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73,
	0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x2f,
	0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4c, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xdc, 0xc0, 0xef, 0x43, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x5a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x86, 0x86, 0x8c, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x09, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4c, 0x4c, 0x42, 0x07, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xe6, 0x01, 0x0a, 0x06, 0x43, 0x70, 0x75, 0x4b, 0x65, 0x79,
	0x12, 0x4b, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0xeb, 0x87, 0xfd, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x70,
	0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x4b, 0x65, 0x79, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48,
	0x00, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a,
	0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xab, 0xed,
	0xfb, 0x75, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x52,
	0x03, 0x63, 0x70, 0x75, 0x22, 0x2f, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x09, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x06, 0x82,
	0x41, 0x03, 0x41, 0x4c, 0x4c, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xdd,
	0x16, 0x0a, 0x03, 0x44, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xa5, 0xd2, 0x96, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x15, 0x82, 0x41, 0x12, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x66, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0xaa, 0xa0, 0xa5, 0xa9, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x53, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0xe9, 0xba, 0x94, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x42, 0x16, 0x82, 0x41, 0x13, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9a, 0xb3,
	0xea, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x14, 0x82, 0x41, 0x11, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x59, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0xa4, 0xb2, 0xa5, 0xfc, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0xda, 0x0b,
	0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x7a, 0x0a,
	0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x9c, 0xf0, 0xe7, 0x8d,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x68, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xa3, 0x09, 0x0a, 0x09, 0x48, 0x6f,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x7e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xf1, 0xc2, 0xd2, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x44, 0x6e, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73,
	0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f,
	0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x79, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xe6, 0x97, 0xe8, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e,
	0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2c, 0x82,
	0x41, 0x29, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f,
	0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xcd, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x63, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0xa0, 0xbd, 0xc5, 0x60, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x6c, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xb7,
	0xfe, 0xb9, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36,
	0x82, 0x41, 0x33, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68,
	0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x77, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0xd2, 0xa8, 0xde, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73,
	0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f,
	0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x69, 0x70,
	0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x77, 0x0a, 0x0c, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe0, 0x89, 0xc8, 0x2a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0xca, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x8b, 0xf6, 0x96, 0x38, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x6b, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8e, 0xcc, 0xcb,
	0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41,
	0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73,
	0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x77, 0x0a,
	0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe3, 0x93,
	0x8e, 0xd4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39,
	0x82, 0x41, 0x36, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68,
	0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x77, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xf1, 0xb7, 0x8f, 0xac, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a,
	0xa8, 0x01, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x4b, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64,
	0x6e, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x68, 0x6f, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a,
	0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x68, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xe9, 0x06, 0x0a, 0x07, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0xf5, 0xd3, 0xe6, 0x6f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0xeb, 0x04, 0x0a, 0x06, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x9a, 0xa9, 0x85, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x69, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb7,
	0x96, 0xb0, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xc2, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x9b, 0xb3, 0xd5, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xe4, 0x9e, 0xb7, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xc0, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x60, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe2, 0xf8, 0xf3, 0xad, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x93, 0x80, 0x96, 0xfc, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x8b, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6e, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x56, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4d, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0xa9, 0x95, 0x90, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x90,
	0x11, 0x0a, 0x0a, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x5f, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xda, 0xf7, 0xb5, 0xf6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5a,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf7, 0xe4, 0xec, 0x75, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe5, 0x07, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xc8, 0xf3, 0xab, 0xd2, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0xb4, 0xac, 0xf6, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x82,
	0x41, 0x21, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x10,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0xef, 0xdd, 0xd0, 0x80, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47,
	0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xb7, 0xc0, 0x93, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4e, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xa4, 0xde, 0xbe, 0x38, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x77, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0xd3, 0x8c, 0xe6, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xd7, 0x01, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x9d, 0x99, 0xc4, 0xd3, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x1e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0xad, 0x86, 0x8c, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0x4d, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x13, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41,
	0x4e, 0x59, 0x1a, 0xdc, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x0e,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x9b,
	0x95, 0x8c, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b,
	0x82, 0x41, 0x28, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0d, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0xff, 0xbf, 0xb9, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x95, 0x01, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x98, 0xda, 0xda, 0x47, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb2, 0xb6, 0x88, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xd3, 0x9b, 0xbb, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x77, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0xc4, 0xc6, 0xeb, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xd6, 0x01, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x92, 0xfb, 0x8a, 0xcf, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x1e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x98, 0xda, 0xa7, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0x4d, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x13, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4e,
	0x59, 0x1a, 0xc1, 0x0f, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x97, 0xbf, 0xa4, 0xaf, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x1a,
	0xd3, 0x0e, 0x0a, 0x08, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x07,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x9b, 0xe5, 0x92, 0x81, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65,
	0x79, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a,
	0xae, 0x0c, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xcc, 0xce, 0xbf, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x75, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xc5, 0xe7, 0xb4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x29, 0x82, 0x41,
	0x26, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd4,
	0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x61, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0xf1, 0xa5, 0x93, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x12,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0xd1, 0x8d, 0xa9, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x10, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x13, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xfb, 0xf7, 0x97, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x6f, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0xb6, 0xd8, 0x9c, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xd8, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x60, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0xfe, 0xc3, 0xdb, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x72, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xfe, 0xbd, 0x90, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0xec, 0xbc, 0xd1, 0xca, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x63, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x8b, 0xbf,
	0xa8, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x07,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x06, 0x69, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x18, 0xeb, 0xe6, 0xd1, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x2d, 0x75,
	0x73, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0a, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0xb2, 0x80, 0xb8, 0xc3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x52, 0x09, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x9e, 0xe6,
	0xad, 0x36, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x13, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x9e, 0x9a, 0xc0, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x6e, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xed,
	0xc6, 0xa8, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x5e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0xc6, 0xd2, 0xe6, 0xcd, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0xa2, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x4d, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2d, 0x69, 0x64, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0x97, 0x29, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x12, 0x5b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x18, 0xc4, 0x93, 0xb0,
	0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x75,
	0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0xd0, 0xc7, 0xe9, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0xf5, 0x0d, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x12, 0x68, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe9, 0xe9, 0xd4, 0xaf,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x74, 0x0a, 0x09, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0xfb, 0xdd, 0xb0, 0xf7, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x63, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbe, 0xe9, 0xc1, 0x40, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x20, 0x82,
	0x41, 0x1d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x91, 0x0b, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x87,
	0x01, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0xb5, 0xe9, 0xfc, 0xd2,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42,
	0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x86, 0x07, 0x0a, 0x08, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x8e, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xda, 0xeb, 0xcb, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xf7, 0xa0, 0xd0, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xad, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x90,
	0x01, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x8a, 0xa6, 0x96, 0xba,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47,
	0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x8f, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0xfc,
	0x9e, 0xff, 0x61, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x6c,
	0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x1a, 0xab, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8f, 0x01,
	0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xd1, 0x92, 0xb9, 0x81, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46,
	0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x8f, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0xe3, 0x9f, 0xe9,
	0xcb, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x1a, 0xf0, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x65,
	0x79, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46,
	0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42,
	0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x51, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xbf, 0x19,
	0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x91, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0xf7, 0x8d, 0x93, 0x4b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x1a, 0xdf, 0x16, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x8f, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xe8, 0xfd, 0xf3, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9c, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0xd8, 0xb1, 0x9a, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42,
	0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x81, 0xb6, 0x94, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xfa, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x6a, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x85, 0xf5, 0xb5, 0xfa, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x0b, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x87, 0xd3, 0xc7, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x8f, 0xb7, 0xac, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0x97, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0xaf, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0xf4, 0xca, 0xa1,
	0x8f, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4b, 0x65, 0x79, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x1a, 0xa7, 0x08, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0xb5,
	0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf9, 0x93, 0xa0, 0x79, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xce, 0x9e, 0xb7, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd6, 0x02, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa4, 0x01, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x9b, 0xbb, 0xa5, 0x4e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x42,
	0x52, 0x82, 0x41, 0x4f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66, 0x61, 0x63, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0xa4, 0x01,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x91, 0xb8, 0x89, 0x76, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x1a, 0xd4, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa3,
	0x01, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xe6, 0xe5, 0x81, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46,
	0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0xa4, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0xb0, 0xcf, 0xc9, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x51,
	0x82, 0x41, 0x4e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xad, 0x03, 0x0a, 0x0b,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x9a, 0x01, 0x0a, 0x08,
	0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x9a, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x4b,
	0x82, 0x41, 0x48, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xf7, 0x02, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x69, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0xe2, 0xbc,
	0xbf, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a,
	0x82, 0x41, 0x37, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x7b, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0xaa, 0x88, 0xbe, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41,
	0x82, 0x41, 0x3e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x85, 0x01,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x9c, 0xdb, 0xbc, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xb7, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a,
	0xf4, 0x02, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x56, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xef, 0xb3, 0xc7, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x18, 0x82, 0x41, 0x15, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x52, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe0, 0xf2, 0xdb, 0xd3,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x17, 0x82, 0x41, 0x14, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0xb3, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x88, 0x9f, 0xd8, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x12, 0x54, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x97, 0xa3, 0x8f,
	0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x1a, 0xbd, 0x12, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xbc, 0xcf,
	0xee, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x74,
	0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0xa0, 0xb4, 0xdc, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb5, 0xb7,
	0xea, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x19, 0x82, 0x41, 0x16, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x7a, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x70, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0xaa, 0x9b, 0x92, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xd0, 0x09, 0x0a, 0x0c, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x0d, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xfe, 0x9e, 0x86, 0xbd,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x42,
	0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0xbb,
	0x06, 0x0a, 0x0c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x8f, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xcf, 0xc6, 0xfb, 0x6d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x8b, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc0, 0xee, 0xc5, 0x40,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x85, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x70, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xb1, 0x9e, 0xdc, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x88, 0x01, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xff, 0x9c, 0xca, 0xa2, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x44, 0x45, 0x42, 0x55, 0x47, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x42, 0x3e,
	0x82, 0x41, 0x3b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x82, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x70, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x82, 0xf4, 0xbc,
	0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0xd4, 0xc5, 0xa3, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x44, 0x45, 0x42, 0x55, 0x47, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0xec, 0x01, 0x0a,
	0x0f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x7d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x44, 0x45, 0x42, 0x55, 0x47, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x42, 0x37, 0x82,
	0x41, 0x34, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x5a, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0xb8, 0x05, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x69, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0xad, 0x87, 0xef, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x6f, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x9d, 0x8a, 0xbb,
	0x4c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x1a, 0xd2, 0x03, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5f, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8b, 0xbc, 0xf0, 0x63, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x70, 0x70,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0xa3, 0x8e, 0x8c, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x57, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0xb4, 0xc8, 0xac, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x73,
	0x67, 0x69, 0x64, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x80, 0x88, 0xf9, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x06, 0x70, 0x72,
	0x6f, 0x63, 0x69, 0x64, 0x18, 0xff, 0x87, 0xf2, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x69, 0x64, 0x52, 0x06,
	0x70, 0x72, 0x6f, 0x63, 0x69, 0x64, 0x1a, 0x8d, 0x25, 0x0a, 0x03, 0x4e, 0x74, 0x70, 0x12, 0x4f,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xac, 0xae, 0x8a, 0x36, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x15, 0x82, 0x41, 0x12, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x55, 0x0a, 0x08, 0x6e, 0x74, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x95, 0xcb, 0x87, 0x3e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x4e, 0x74, 0x70,
	0x4b, 0x65, 0x79, 0x73, 0x42, 0x17, 0x82, 0x41, 0x14, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x52, 0x07, 0x6e,
	0x74, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x53, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0xce, 0xba, 0xd5, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e,
	0x74, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x42, 0x16, 0x82, 0x41, 0x13, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xa5, 0xfe, 0x82, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x14, 0x82, 0x41,
	0x11, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x02, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x66, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x74, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0xfa, 0x81, 0xf2, 0xa4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6e, 0x74, 0x70, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x52, 0x0d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x74, 0x70, 0x41, 0x75, 0x74, 0x68, 0x12, 0x50, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x9e, 0x83, 0xb4, 0xf8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x71,
	0x0a, 0x12, 0x6e, 0x74, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x9c, 0xb0, 0xbc, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x74, 0x70,
	0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x10, 0x6e, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0xfa, 0x08, 0x0a, 0x07, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x65, 0x0a,
	0x07, 0x6e, 0x74, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xa0, 0xe9, 0xd3, 0x7e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79,
	0x73, 0x2e, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x1f, 0x82, 0x41, 0x1c,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d,
	0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x6e, 0x74,
	0x70, 0x4b, 0x65, 0x79, 0x1a, 0xfa, 0x06, 0x0a, 0x06, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x12,
	0x6f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x95, 0xf2, 0x98, 0x2c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x4e, 0x74, 0x70, 0x4b, 0x65,
	0x79, 0x73, 0x2e, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70,
	0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65,
	0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x6c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8a, 0xe3, 0x85, 0xdf, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x4e, 0x74, 0x70, 0x4b,
	0x65, 0x79, 0x73, 0x2e, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70,
	0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65,
	0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc8,
	0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5c, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0xc9, 0xa9, 0xf7, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74,
	0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b,
	0x65, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x69, 0x64,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0xc2, 0xf6, 0xe6, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x54, 0x50, 0x41, 0x55, 0x54,
	0x48, 0x54, 0x59, 0x50, 0x45, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e,
	0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6b, 0x65,
	0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x68, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xad, 0xf0, 0xcc,
	0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82,
	0x41, 0x2d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74,
	0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc5, 0x02, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0xf0, 0xa7,
	0x9e, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41,
	0x29, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70,
	0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x69, 0x64, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x76, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x8f, 0xe9,
	0xe9, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x54, 0x50, 0x41, 0x55, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45,
	0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70,
	0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65,
	0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x66, 0x0a, 0x09, 0x6b, 0x65, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xbe, 0x81, 0x87, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f,
	0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65,
	0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x8a, 0x01, 0x0a, 0x09, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x3d, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f,
	0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x6b, 0x65, 0x79,
	0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x69, 0x64, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x07, 0x6e, 0x74, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x2e,
	0x4e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x6e, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x1a, 0xf3,
	0x13, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x63, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0xfc, 0xac, 0x9f, 0xd8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a,
	0xf4, 0x11, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xd1, 0xe4, 0x9e, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x24, 0x82, 0x41,
	0x21, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xc6, 0x82, 0xde, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x83, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x61, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x8c, 0x9e, 0xd0,
	0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82,
	0x41, 0x29, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xd6, 0xc5, 0xc2, 0xc0, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74,
	0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x69, 0x62, 0x75,
	0x72, 0x73, 0x74, 0x18, 0xd1, 0xb5, 0xfa, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e,
	0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x62, 0x75, 0x72, 0x73, 0x74, 0x52,
	0x06, 0x69, 0x62, 0x75, 0x72, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x95, 0xfd, 0xb5, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82,
	0x41, 0x26, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5b,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x18, 0xfe, 0x8a, 0xa9, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa8, 0xa3, 0xd2, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x0f,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x16, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x00, 0x1a, 0x09, 0x82, 0x41, 0x06,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x12, 0x21, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x02,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x50, 0x45, 0x45, 0x52, 0x12, 0x21, 0x0a, 0x14, 0x41, 0x53, 0x53,
	0x4f, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4f,
	0x4c, 0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x50, 0x4f, 0x4f, 0x4c, 0x1a, 0x87, 0x0a, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x60, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x97, 0xed, 0xb0, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e,
	0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x10, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xa7, 0xab,
	0xb9, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x69,
	0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0xb0, 0xb6, 0x95, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x62, 0x75, 0x72, 0x73, 0x74,
	0x52, 0x06, 0x69, 0x62, 0x75, 0x72, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x94, 0xcd, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x6f, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xcc, 0x92, 0xf1, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x6c, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xe0, 0x9f,
	0xa9, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41,
	0x25, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5b, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x18, 0x87, 0x99, 0xb0, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x0a, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x87, 0x87, 0xb6, 0xad, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x6f, 0x6f, 0x74,
	0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x74, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa4, 0xdb, 0xd6, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e,
	0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x64, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x18, 0x87, 0xc0, 0x80, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74,
	0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x07,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x5d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x93, 0x8c, 0xed, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x16, 0x41, 0x53, 0x53,
	0x4f, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x10, 0x00, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x12, 0x21, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x50,
	0x45, 0x45, 0x52, 0x12, 0x21, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x50, 0x4f, 0x4f, 0x4c, 0x1a, 0x8b, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x74, 0x70, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x1a, 0x8f, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5f,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0xaf, 0x8b, 0xf5, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82,
	0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x64, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x74, 0x70, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x8f, 0xdb, 0xd3, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6e, 0x74,
	0x70, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x74,
	0x70, 0x41, 0x75, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0xcb, 0xbc, 0xa8, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c,
	0x82, 0x41, 0x19, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x12, 0x6e, 0x74, 0x70, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x93, 0xcb, 0xbf, 0x41,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6e, 0x74, 0x70, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6e, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xa1, 0x2b, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x55, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0xb1, 0xa8, 0xff,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x19, 0x82, 0x41, 0x16, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0xd5, 0xd8, 0xef, 0x9d, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x42, 0x1f, 0x82, 0x41,
	0x1c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x1a, 0xe0, 0x0a, 0x0a, 0x05, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd6,
	0xb5, 0xea, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x62, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x83, 0xe5, 0xf7, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xc8, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x74, 0x0a, 0x10, 0x62,
	0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0xdb, 0xf1, 0xe4, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82,
	0x41, 0x2e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x68, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0xf6, 0xae, 0xd1, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x7f, 0x0a, 0x0c, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xbf, 0xec, 0x93, 0x87,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65,
	0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x75, 0x0a, 0x10,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x18, 0xe2, 0xbc, 0xec, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x12, 0x66, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f,
	0x66, 0x66, 0x18, 0xce, 0xa2, 0xdb, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x1a, 0xbf, 0x04, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x74, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xd4, 0xb2, 0xd6, 0xfe, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x66, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0xc3, 0xa6, 0x8d, 0x51, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x70, 0x61, 0x74,
	0x68, 0x49, 0x64, 0x12, 0x7d, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0xd0, 0x8a, 0x94, 0x51, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x73, 0x0a, 0x10, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0xb5, 0xf8, 0xe3, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2d, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0xb3, 0xd3, 0x87, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x1a, 0xea, 0x1e,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x85, 0x01,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x98, 0xc7, 0xb9,
	0xd4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x2a, 0x82,
	0x41, 0x27, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0xa7, 0x1c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x9d, 0x9d, 0x93, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b,
	0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xca,
	0x8a, 0xa2, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x84, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x92, 0xd9, 0xf0, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x6e, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x64, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xf9, 0xb7, 0xbf, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x8a, 0x17, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xc1, 0xe2, 0xa9, 0x67, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe7, 0x13, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xc6, 0xc6, 0xab, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x48,
	0x82, 0x41, 0x45, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xb2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb3, 0xb0, 0xf1, 0xd1, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf3, 0x07, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x85, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x97, 0xb1, 0xa7,
	0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82,
	0x41, 0x4d, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x7e, 0x0a, 0x06, 0x61, 0x75, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0xb1, 0xe2, 0xbc, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x75, 0x78, 0x2d, 0x69,
	0x64, 0x52, 0x05, 0x61, 0x75, 0x78, 0x49, 0x64, 0x12, 0x99, 0x01, 0x0a, 0x0e, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x8c, 0xb3, 0x94, 0xc1,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41,
	0x54, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x7a, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xe0, 0xeb, 0xef,
	0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x86, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xb5, 0xb4,
	0x83, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41,
	0x4e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x9f, 0x01, 0x0a, 0x10, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xf8,
	0x8b, 0x91, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x59, 0x82, 0x41, 0x56, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xcc, 0xb8, 0x92, 0xd1, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x52, 0x82, 0x41,
	0x4f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xf4, 0x08, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x9e, 0x88, 0x97, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x7d, 0x0a, 0x06,
	0x61, 0x75, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x82, 0xe9, 0xa5, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x75,
	0x78, 0x2d, 0x69, 0x64, 0x52, 0x05, 0x61, 0x75, 0x78, 0x49, 0x64, 0x12, 0x97, 0x01, 0x0a, 0x0e,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x9f,
	0x8f, 0xf9, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56,
	0x82, 0x41, 0x53, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x8b, 0xd7, 0xb6, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x79, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x8f, 0x9e, 0x99, 0x84, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xc2, 0xea, 0xa0, 0xc5, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x9f, 0x92, 0x80, 0x83, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0xcd, 0xea, 0xee, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x1a, 0xdb, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x5f, 0x0a, 0x06, 0x61, 0x75, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x75, 0x78, 0x2d, 0x69, 0x64, 0x52, 0x05,
	0x61, 0x75, 0x78, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x6d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xa0, 0xf6, 0xf4, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0xa8, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0xa2, 0x0a, 0x0a, 0x09, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x80, 0xa6, 0x9b, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x1a, 0xad, 0x08, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x68, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xea, 0x86, 0xec, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xb7, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0xb2, 0xdc, 0xf3, 0x40, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x12, 0x75, 0x0a, 0x10, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0xcf, 0x93, 0xd8, 0x69, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x70, 0x75, 0x2d, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x6f, 0x0a, 0x0e, 0x63, 0x70,
	0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0xfd, 0xa7, 0x94,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x70, 0x75, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x63,
	0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x74, 0x0a, 0x0f, 0x63,
	0x70, 0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfe,
	0x90, 0x84, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82,
	0x41, 0x2f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x70, 0x75, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6a, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0xb6, 0xd3, 0xbf, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7d, 0x0a,
	0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xcf, 0xe4, 0xa2, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0xb8, 0xaf, 0x91, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0xe4, 0xf1, 0xca, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x69, 0x64,
	0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x65, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0xf7, 0xd3, 0xf7, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x80, 0x01, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x70, 0x69, 0x64, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12,
	0x3e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x1a,
	0xd9, 0x0b, 0x0a, 0x09, 0x53, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x5d, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc6, 0x97, 0x9c, 0xa7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb3, 0xbb, 0xab, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x53, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8b, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x54, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xf0, 0xbf, 0xc2,
	0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x92, 0xce,
	0xc1, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x73, 0x68, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x82, 0x41,
	0x2a, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0a,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xf1, 0xc0, 0xe7, 0x5c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x68, 0x0a, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xfd, 0x88,
	0xcf, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41,
	0x27, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x57, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0xde, 0xac, 0xc4, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x74, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x32, 0x10, 0x00, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x56,
	0x32, 0x12, 0x1d, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x31, 0x10, 0x02, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x56, 0x31,
	0x12, 0x23, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x31, 0x5f, 0x56, 0x32, 0x10, 0x03, 0x1a, 0x08, 0x82, 0x41, 0x05,
	0x56, 0x31, 0x5f, 0x56, 0x32, 0x1a, 0x83, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x52, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xfb, 0xe5, 0xa5, 0x33, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xe5, 0xe4, 0xd4, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0xc6, 0xd5, 0xb1, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73,
	0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x67, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xa0, 0xae, 0xee, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xe7, 0x92, 0xce, 0x57, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x74, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x32, 0x10, 0x00,
	0x1a, 0x05, 0x82, 0x41, 0x02, 0x56, 0x32, 0x12, 0x1d, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x31, 0x10, 0x02, 0x1a,
	0x05, 0x82, 0x41, 0x02, 0x56, 0x31, 0x12, 0x23, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x31, 0x5f, 0x56, 0x32, 0x10,
	0x03, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x56, 0x31, 0x5f, 0x56, 0x32, 0x1a, 0xd0, 0x03, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x91, 0xd1, 0xad, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x62, 0x6f, 0x6f, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x62, 0x6f,
	0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xf6, 0x90, 0x8a, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x58,
	0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa3, 0xf2,
	0xa4, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c,
	0x82, 0x41, 0x19, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0xd7, 0x98, 0xbe, 0xd2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x2d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x64, 0x5f, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x90, 0x9b, 0xfa, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x64, 0x2d, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0xeb,
	0x07, 0x0a, 0x0c, 0x54, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x62, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x8a, 0xc8, 0xd3, 0x7f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x5f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa7, 0xdb, 0xb5,
	0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x65, 0x6c, 0x6e, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1e, 0x82,
	0x41, 0x1b, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x8b, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x56, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xc4, 0xa3, 0xc4, 0x3e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x95, 0xe7, 0xb1, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x6a, 0x0a, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xd1, 0xfe, 0xfd, 0x61,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5a, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x9a, 0xfe, 0x80, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c,
	0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x1a, 0x87, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xcf, 0x80, 0xb3, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0xea, 0xa3, 0xf1, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c,
	0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x09, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x6a, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xa4, 0xe4, 0xa8, 0xc1, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x58, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x93, 0xc1,
	0xfe, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x17, 0x0a, 0x15,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_system_proto_rawDescOnce sync.Once
	file_openconfig_system_proto_rawDescData = file_openconfig_system_proto_rawDesc
)

func file_openconfig_system_proto_rawDescGZIP() []byte {
	file_openconfig_system_proto_rawDescOnce.Do(func() {
		file_openconfig_system_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_system_proto_rawDescData)
	})
	return file_openconfig_system_proto_rawDescData
}

var file_openconfig_system_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_openconfig_system_proto_msgTypes = make([]protoimpl.MessageInfo, 168)
var file_openconfig_system_proto_goTypes = []interface{}{
	(System_Aaa_Accounting_Events_Event_Config_Record)(0), // 0: openconfig.System.Aaa.Accounting.Events.Event.Config.Record
	(System_Aaa_Accounting_Events_Event_State_Record)(0),  // 1: openconfig.System.Aaa.Accounting.Events.Event.State.Record
	(System_Cpus_Cpu_State_Index)(0),                      // 2: openconfig.System.Cpus.Cpu.State.Index
	(System_Cpus_CpuKey_Index)(0),                         // 3: openconfig.System.Cpus.CpuKey.Index
	(System_GrpcServer_Config_ListenAddresses)(0),         // 4: openconfig.System.GrpcServer.Config.ListenAddresses
	(System_GrpcServer_State_ListenAddresses)(0),          // 5: openconfig.System.GrpcServer.State.ListenAddresses
	(System_Ntp_Servers_Server_Config_AssociationType)(0), // 6: openconfig.System.Ntp.Servers.Server.Config.AssociationType
	(System_Ntp_Servers_Server_State_AssociationType)(0),  // 7: openconfig.System.Ntp.Servers.Server.State.AssociationType
	(System_SshServer_Config_ProtocolVersion)(0),          // 8: openconfig.System.SshServer.Config.ProtocolVersion
	(System_SshServer_State_ProtocolVersion)(0),           // 9: openconfig.System.SshServer.State.ProtocolVersion
	(*System)(nil),                                                                   // 10: openconfig.System
	(*System_Aaa)(nil),                                                               // 11: openconfig.System.Aaa
	(*System_Alarms)(nil),                                                            // 12: openconfig.System.Alarms
	(*System_Clock)(nil),                                                             // 13: openconfig.System.Clock
	(*System_Config)(nil),                                                            // 14: openconfig.System.Config
	(*System_Cpus)(nil),                                                              // 15: openconfig.System.Cpus
	(*System_Dns)(nil),                                                               // 16: openconfig.System.Dns
	(*System_GrpcServer)(nil),                                                        // 17: openconfig.System.GrpcServer
	(*System_License)(nil),                                                           // 18: openconfig.System.License
	(*System_Logging)(nil),                                                           // 19: openconfig.System.Logging
	(*System_Memory)(nil),                                                            // 20: openconfig.System.Memory
	(*System_Messages)(nil),                                                          // 21: openconfig.System.Messages
	(*System_Ntp)(nil),                                                               // 22: openconfig.System.Ntp
	(*System_Openflow)(nil),                                                          // 23: openconfig.System.Openflow
	(*System_Processes)(nil),                                                         // 24: openconfig.System.Processes
	(*System_SshServer)(nil),                                                         // 25: openconfig.System.SshServer
	(*System_State)(nil),                                                             // 26: openconfig.System.State
	(*System_TelnetServer)(nil),                                                      // 27: openconfig.System.TelnetServer
	(*System_Aaa_Accounting)(nil),                                                    // 28: openconfig.System.Aaa.Accounting
	(*System_Aaa_Authentication)(nil),                                                // 29: openconfig.System.Aaa.Authentication
	(*System_Aaa_Authorization)(nil),                                                 // 30: openconfig.System.Aaa.Authorization
	(*System_Aaa_Config)(nil),                                                        // 31: openconfig.System.Aaa.Config
	(*System_Aaa_ServerGroups)(nil),                                                  // 32: openconfig.System.Aaa.ServerGroups
	(*System_Aaa_State)(nil),                                                         // 33: openconfig.System.Aaa.State
	(*System_Aaa_Accounting_Config)(nil),                                             // 34: openconfig.System.Aaa.Accounting.Config
	(*System_Aaa_Accounting_Events)(nil),                                             // 35: openconfig.System.Aaa.Accounting.Events
	(*System_Aaa_Accounting_State)(nil),                                              // 36: openconfig.System.Aaa.Accounting.State
	(*System_Aaa_Accounting_Config_AccountingMethodUnion)(nil),                       // 37: openconfig.System.Aaa.Accounting.Config.AccountingMethodUnion
	(*System_Aaa_Accounting_Events_Event)(nil),                                       // 38: openconfig.System.Aaa.Accounting.Events.Event
	(*System_Aaa_Accounting_Events_EventKey)(nil),                                    // 39: openconfig.System.Aaa.Accounting.Events.EventKey
	(*System_Aaa_Accounting_Events_Event_Config)(nil),                                // 40: openconfig.System.Aaa.Accounting.Events.Event.Config
	(*System_Aaa_Accounting_Events_Event_State)(nil),                                 // 41: openconfig.System.Aaa.Accounting.Events.Event.State
	(*System_Aaa_Accounting_State_AccountingMethodUnion)(nil),                        // 42: openconfig.System.Aaa.Accounting.State.AccountingMethodUnion
	(*System_Aaa_Authentication_AdminUser)(nil),                                      // 43: openconfig.System.Aaa.Authentication.AdminUser
	(*System_Aaa_Authentication_Config)(nil),                                         // 44: openconfig.System.Aaa.Authentication.Config
	(*System_Aaa_Authentication_State)(nil),                                          // 45: openconfig.System.Aaa.Authentication.State
	(*System_Aaa_Authentication_Users)(nil),                                          // 46: openconfig.System.Aaa.Authentication.Users
	(*System_Aaa_Authentication_AdminUser_Config)(nil),                               // 47: openconfig.System.Aaa.Authentication.AdminUser.Config
	(*System_Aaa_Authentication_AdminUser_State)(nil),                                // 48: openconfig.System.Aaa.Authentication.AdminUser.State
	(*System_Aaa_Authentication_Config_AuthenticationMethodUnion)(nil),               // 49: openconfig.System.Aaa.Authentication.Config.AuthenticationMethodUnion
	(*System_Aaa_Authentication_State_AuthenticationMethodUnion)(nil),                // 50: openconfig.System.Aaa.Authentication.State.AuthenticationMethodUnion
	(*System_Aaa_Authentication_Users_User)(nil),                                     // 51: openconfig.System.Aaa.Authentication.Users.User
	(*System_Aaa_Authentication_Users_UserKey)(nil),                                  // 52: openconfig.System.Aaa.Authentication.Users.UserKey
	(*System_Aaa_Authentication_Users_User_Config)(nil),                              // 53: openconfig.System.Aaa.Authentication.Users.User.Config
	(*System_Aaa_Authentication_Users_User_State)(nil),                               // 54: openconfig.System.Aaa.Authentication.Users.User.State
	(*System_Aaa_Authorization_Config)(nil),                                          // 55: openconfig.System.Aaa.Authorization.Config
	(*System_Aaa_Authorization_Events)(nil),                                          // 56: openconfig.System.Aaa.Authorization.Events
	(*System_Aaa_Authorization_State)(nil),                                           // 57: openconfig.System.Aaa.Authorization.State
	(*System_Aaa_Authorization_Config_AuthorizationMethodUnion)(nil),                 // 58: openconfig.System.Aaa.Authorization.Config.AuthorizationMethodUnion
	(*System_Aaa_Authorization_Events_Event)(nil),                                    // 59: openconfig.System.Aaa.Authorization.Events.Event
	(*System_Aaa_Authorization_Events_EventKey)(nil),                                 // 60: openconfig.System.Aaa.Authorization.Events.EventKey
	(*System_Aaa_Authorization_Events_Event_Config)(nil),                             // 61: openconfig.System.Aaa.Authorization.Events.Event.Config
	(*System_Aaa_Authorization_Events_Event_State)(nil),                              // 62: openconfig.System.Aaa.Authorization.Events.Event.State
	(*System_Aaa_Authorization_State_AuthorizationMethodUnion)(nil),                  // 63: openconfig.System.Aaa.Authorization.State.AuthorizationMethodUnion
	(*System_Aaa_ServerGroups_ServerGroup)(nil),                                      // 64: openconfig.System.Aaa.ServerGroups.ServerGroup
	(*System_Aaa_ServerGroups_ServerGroupKey)(nil),                                   // 65: openconfig.System.Aaa.ServerGroups.ServerGroupKey
	(*System_Aaa_ServerGroups_ServerGroup_Config)(nil),                               // 66: openconfig.System.Aaa.ServerGroups.ServerGroup.Config
	(*System_Aaa_ServerGroups_ServerGroup_Servers)(nil),                              // 67: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers
	(*System_Aaa_ServerGroups_ServerGroup_State)(nil),                                // 68: openconfig.System.Aaa.ServerGroups.ServerGroup.State
	(*System_Aaa_ServerGroups_ServerGroup_Servers_Server)(nil),                       // 69: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server
	(*System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey)(nil),                    // 70: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.ServerKey
	(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config)(nil),                // 71: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Config
	(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius)(nil),                // 72: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius
	(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_State)(nil),                 // 73: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State
	(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs)(nil),                // 74: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs
	(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config)(nil),         // 75: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.Config
	(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State)(nil),          // 76: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State
	(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters)(nil), // 77: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.Counters
	(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config)(nil),         // 78: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.Config
	(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State)(nil),          // 79: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.State
	(*System_Alarms_Alarm)(nil),                                                      // 80: openconfig.System.Alarms.Alarm
	(*System_Alarms_AlarmKey)(nil),                                                   // 81: openconfig.System.Alarms.AlarmKey
	(*System_Alarms_Alarm_Config)(nil),                                               // 82: openconfig.System.Alarms.Alarm.Config
	(*System_Alarms_Alarm_State)(nil),                                                // 83: openconfig.System.Alarms.Alarm.State
	(*System_Clock_Config)(nil),                                                      // 84: openconfig.System.Clock.Config
	(*System_Clock_State)(nil),                                                       // 85: openconfig.System.Clock.State
	(*System_Cpus_Cpu)(nil),                                                          // 86: openconfig.System.Cpus.Cpu
	(*System_Cpus_CpuKey)(nil),                                                       // 87: openconfig.System.Cpus.CpuKey
	(*System_Cpus_Cpu_State)(nil),                                                    // 88: openconfig.System.Cpus.Cpu.State
	(*System_Cpus_Cpu_State_HardwareInterrupt)(nil),                                  // 89: openconfig.System.Cpus.Cpu.State.HardwareInterrupt
	(*System_Cpus_Cpu_State_Idle)(nil),                                               // 90: openconfig.System.Cpus.Cpu.State.Idle
	(*System_Cpus_Cpu_State_Kernel)(nil),                                             // 91: openconfig.System.Cpus.Cpu.State.Kernel
	(*System_Cpus_Cpu_State_Nice)(nil),                                               // 92: openconfig.System.Cpus.Cpu.State.Nice
	(*System_Cpus_Cpu_State_SoftwareInterrupt)(nil),                                  // 93: openconfig.System.Cpus.Cpu.State.SoftwareInterrupt
	(*System_Cpus_Cpu_State_Total)(nil),                                              // 94: openconfig.System.Cpus.Cpu.State.Total
	(*System_Cpus_Cpu_State_User)(nil),                                               // 95: openconfig.System.Cpus.Cpu.State.User
	(*System_Cpus_Cpu_State_Wait)(nil),                                               // 96: openconfig.System.Cpus.Cpu.State.Wait
	(*System_Dns_Config)(nil),                                                        // 97: openconfig.System.Dns.Config
	(*System_Dns_HostEntries)(nil),                                                   // 98: openconfig.System.Dns.HostEntries
	(*System_Dns_Servers)(nil),                                                       // 99: openconfig.System.Dns.Servers
	(*System_Dns_State)(nil),                                                         // 100: openconfig.System.Dns.State
	(*System_Dns_HostEntries_HostEntry)(nil),                                         // 101: openconfig.System.Dns.HostEntries.HostEntry
	(*System_Dns_HostEntries_HostEntryKey)(nil),                                      // 102: openconfig.System.Dns.HostEntries.HostEntryKey
	(*System_Dns_HostEntries_HostEntry_Config)(nil),                                  // 103: openconfig.System.Dns.HostEntries.HostEntry.Config
	(*System_Dns_HostEntries_HostEntry_State)(nil),                                   // 104: openconfig.System.Dns.HostEntries.HostEntry.State
	(*System_Dns_Servers_Server)(nil),                                                // 105: openconfig.System.Dns.Servers.Server
	(*System_Dns_Servers_ServerKey)(nil),                                             // 106: openconfig.System.Dns.Servers.ServerKey
	(*System_Dns_Servers_Server_Config)(nil),                                         // 107: openconfig.System.Dns.Servers.Server.Config
	(*System_Dns_Servers_Server_State)(nil),                                          // 108: openconfig.System.Dns.Servers.Server.State
	(*System_GrpcServer_Config)(nil),                                                 // 109: openconfig.System.GrpcServer.Config
	(*System_GrpcServer_State)(nil),                                                  // 110: openconfig.System.GrpcServer.State
	(*System_GrpcServer_Config_ListenAddressesUnion)(nil),                            // 111: openconfig.System.GrpcServer.Config.ListenAddressesUnion
	(*System_GrpcServer_State_ListenAddressesUnion)(nil),                             // 112: openconfig.System.GrpcServer.State.ListenAddressesUnion
	(*System_License_Licenses)(nil),                                                  // 113: openconfig.System.License.Licenses
	(*System_License_Licenses_License)(nil),                                          // 114: openconfig.System.License.Licenses.License
	(*System_License_Licenses_LicenseKey)(nil),                                       // 115: openconfig.System.License.Licenses.LicenseKey
	(*System_License_Licenses_License_Config)(nil),                                   // 116: openconfig.System.License.Licenses.License.Config
	(*System_License_Licenses_License_State)(nil),                                    // 117: openconfig.System.License.Licenses.License.State
	(*System_Logging_Console)(nil),                                                   // 118: openconfig.System.Logging.Console
	(*System_Logging_RemoteServers)(nil),                                             // 119: openconfig.System.Logging.RemoteServers
	(*System_Logging_Console_Config)(nil),                                            // 120: openconfig.System.Logging.Console.Config
	(*System_Logging_Console_Selectors)(nil),                                         // 121: openconfig.System.Logging.Console.Selectors
	(*System_Logging_Console_State)(nil),                                             // 122: openconfig.System.Logging.Console.State
	(*System_Logging_Console_Selectors_Selector)(nil),                                // 123: openconfig.System.Logging.Console.Selectors.Selector
	(*System_Logging_Console_Selectors_SelectorKey)(nil),                             // 124: openconfig.System.Logging.Console.Selectors.SelectorKey
	(*System_Logging_Console_Selectors_Selector_Config)(nil),                         // 125: openconfig.System.Logging.Console.Selectors.Selector.Config
	(*System_Logging_Console_Selectors_Selector_State)(nil),                          // 126: openconfig.System.Logging.Console.Selectors.Selector.State
	(*System_Logging_RemoteServers_RemoteServer)(nil),                                // 127: openconfig.System.Logging.RemoteServers.RemoteServer
	(*System_Logging_RemoteServers_RemoteServerKey)(nil),                             // 128: openconfig.System.Logging.RemoteServers.RemoteServerKey
	(*System_Logging_RemoteServers_RemoteServer_Config)(nil),                         // 129: openconfig.System.Logging.RemoteServers.RemoteServer.Config
	(*System_Logging_RemoteServers_RemoteServer_Selectors)(nil),                      // 130: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors
	(*System_Logging_RemoteServers_RemoteServer_State)(nil),                          // 131: openconfig.System.Logging.RemoteServers.RemoteServer.State
	(*System_Logging_RemoteServers_RemoteServer_Selectors_Selector)(nil),             // 132: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.Selector
	(*System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey)(nil),          // 133: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.SelectorKey
	(*System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config)(nil),      // 134: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.Config
	(*System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State)(nil),       // 135: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.State
	(*System_Memory_Config)(nil),                                                     // 136: openconfig.System.Memory.Config
	(*System_Memory_State)(nil),                                                      // 137: openconfig.System.Memory.State
	(*System_Messages_Config)(nil),                                                   // 138: openconfig.System.Messages.Config
	(*System_Messages_DebugEntries)(nil),                                             // 139: openconfig.System.Messages.DebugEntries
	(*System_Messages_State)(nil),                                                    // 140: openconfig.System.Messages.State
	(*System_Messages_DebugEntries_DebugService)(nil),                                // 141: openconfig.System.Messages.DebugEntries.DebugService
	(*System_Messages_DebugEntries_DebugServiceKey)(nil),                             // 142: openconfig.System.Messages.DebugEntries.DebugServiceKey
	(*System_Messages_DebugEntries_DebugService_Config)(nil),                         // 143: openconfig.System.Messages.DebugEntries.DebugService.Config
	(*System_Messages_DebugEntries_DebugService_State)(nil),                          // 144: openconfig.System.Messages.DebugEntries.DebugService.State
	(*System_Messages_State_Message)(nil),                                            // 145: openconfig.System.Messages.State.Message
	(*System_Ntp_Config)(nil),                                                        // 146: openconfig.System.Ntp.Config
	(*System_Ntp_NtpKeys)(nil),                                                       // 147: openconfig.System.Ntp.NtpKeys
	(*System_Ntp_Servers)(nil),                                                       // 148: openconfig.System.Ntp.Servers
	(*System_Ntp_State)(nil),                                                         // 149: openconfig.System.Ntp.State
	(*System_Ntp_NtpKeys_NtpKey)(nil),                                                // 150: openconfig.System.Ntp.NtpKeys.NtpKey
	(*System_Ntp_NtpKeys_NtpKeyKey)(nil),                                             // 151: openconfig.System.Ntp.NtpKeys.NtpKeyKey
	(*System_Ntp_NtpKeys_NtpKey_Config)(nil),                                         // 152: openconfig.System.Ntp.NtpKeys.NtpKey.Config
	(*System_Ntp_NtpKeys_NtpKey_State)(nil),                                          // 153: openconfig.System.Ntp.NtpKeys.NtpKey.State
	(*System_Ntp_Servers_Server)(nil),                                                // 154: openconfig.System.Ntp.Servers.Server
	(*System_Ntp_Servers_ServerKey)(nil),                                             // 155: openconfig.System.Ntp.Servers.ServerKey
	(*System_Ntp_Servers_Server_Config)(nil),                                         // 156: openconfig.System.Ntp.Servers.Server.Config
	(*System_Ntp_Servers_Server_State)(nil),                                          // 157: openconfig.System.Ntp.Servers.Server.State
	(*System_Openflow_Agent)(nil),                                                    // 158: openconfig.System.Openflow.Agent
	(*System_Openflow_Controllers)(nil),                                              // 159: openconfig.System.Openflow.Controllers
	(*System_Openflow_Agent_Config)(nil),                                             // 160: openconfig.System.Openflow.Agent.Config
	(*System_Openflow_Agent_State)(nil),                                              // 161: openconfig.System.Openflow.Agent.State
	(*System_Openflow_Controllers_Controller)(nil),                                   // 162: openconfig.System.Openflow.Controllers.Controller
	(*System_Openflow_Controllers_ControllerKey)(nil),                                // 163: openconfig.System.Openflow.Controllers.ControllerKey
	(*System_Openflow_Controllers_Controller_Config)(nil),                            // 164: openconfig.System.Openflow.Controllers.Controller.Config
	(*System_Openflow_Controllers_Controller_Connections)(nil),                       // 165: openconfig.System.Openflow.Controllers.Controller.Connections
	(*System_Openflow_Controllers_Controller_State)(nil),                             // 166: openconfig.System.Openflow.Controllers.Controller.State
	(*System_Openflow_Controllers_Controller_Connections_Connection)(nil),            // 167: openconfig.System.Openflow.Controllers.Controller.Connections.Connection
	(*System_Openflow_Controllers_Controller_Connections_ConnectionKey)(nil),         // 168: openconfig.System.Openflow.Controllers.Controller.Connections.ConnectionKey
	(*System_Openflow_Controllers_Controller_Connections_Connection_Config)(nil),     // 169: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.Config
	(*System_Openflow_Controllers_Controller_Connections_Connection_State)(nil),      // 170: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.State
	(*System_Processes_Process)(nil),                                                 // 171: openconfig.System.Processes.Process
	(*System_Processes_ProcessKey)(nil),                                              // 172: openconfig.System.Processes.ProcessKey
	(*System_Processes_Process_State)(nil),                                           // 173: openconfig.System.Processes.Process.State
	(*System_SshServer_Config)(nil),                                                  // 174: openconfig.System.SshServer.Config
	(*System_SshServer_State)(nil),                                                   // 175: openconfig.System.SshServer.State
	(*System_TelnetServer_Config)(nil),                                               // 176: openconfig.System.TelnetServer.Config
	(*System_TelnetServer_State)(nil),                                                // 177: openconfig.System.TelnetServer.State
	(*ywrapper.StringValue)(nil),                                                     // 178: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                                                       // 179: ywrapper.UintValue
	(OpenconfigAaaTypesAAAMETHODTYPE)(0),                                             // 180: openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	(OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE)(0),                                    // 181: openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE
	(OpenconfigAaaTypesSYSTEMDEFINEDROLES)(0),                                        // 182: openconfig.OpenconfigAaaTypesSYSTEMDEFINEDROLES
	(OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE)(0),                                 // 183: openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE
	(OpenconfigAaaTypesAAASERVERTYPE)(0),                                             // 184: openconfig.OpenconfigAaaTypesAAASERVERTYPE
	(OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY)(0),                                 // 185: openconfig.OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY
	(OpenconfigAlarmTypesOPENCONFIGALARMTYPEID)(0),                                   // 186: openconfig.OpenconfigAlarmTypesOPENCONFIGALARMTYPEID
	(*ywrapper.BoolValue)(nil),                                                       // 187: ywrapper.BoolValue
	(OpenconfigSystemLoggingSYSLOGFACILITY)(0),                                       // 188: openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	(OpenconfigSystemLoggingSyslogSeverity)(0),                                       // 189: openconfig.OpenconfigSystemLoggingSyslogSeverity
	(OpenconfigMessagesSyslogSeverity)(0),                                            // 190: openconfig.OpenconfigMessagesSyslogSeverity
	(OpenconfigMessagesDEBUGSERVICE)(0),                                              // 191: openconfig.OpenconfigMessagesDEBUGSERVICE
	(OpenconfigSystemNTPAUTHTYPE)(0),                                                 // 192: openconfig.OpenconfigSystemNTPAUTHTYPE
	(OpenconfigOpenflowFailureMode)(0),                                               // 193: openconfig.OpenconfigOpenflowFailureMode
	(OpenconfigOpenflowTransport)(0),                                                 // 194: openconfig.OpenconfigOpenflowTransport
}
var file_openconfig_system_proto_depIdxs = []int32{
	11,  // 0: openconfig.System.aaa:type_name -> openconfig.System.Aaa
	12,  // 1: openconfig.System.alarms:type_name -> openconfig.System.Alarms
	13,  // 2: openconfig.System.clock:type_name -> openconfig.System.Clock
	14,  // 3: openconfig.System.config:type_name -> openconfig.System.Config
	15,  // 4: openconfig.System.cpus:type_name -> openconfig.System.Cpus
	16,  // 5: openconfig.System.dns:type_name -> openconfig.System.Dns
	17,  // 6: openconfig.System.grpc_server:type_name -> openconfig.System.GrpcServer
	18,  // 7: openconfig.System.license:type_name -> openconfig.System.License
	19,  // 8: openconfig.System.logging:type_name -> openconfig.System.Logging
	20,  // 9: openconfig.System.memory:type_name -> openconfig.System.Memory
	21,  // 10: openconfig.System.messages:type_name -> openconfig.System.Messages
	22,  // 11: openconfig.System.ntp:type_name -> openconfig.System.Ntp
	23,  // 12: openconfig.System.openflow:type_name -> openconfig.System.Openflow
	24,  // 13: openconfig.System.processes:type_name -> openconfig.System.Processes
	25,  // 14: openconfig.System.ssh_server:type_name -> openconfig.System.SshServer
	26,  // 15: openconfig.System.state:type_name -> openconfig.System.State
	27,  // 16: openconfig.System.telnet_server:type_name -> openconfig.System.TelnetServer
	28,  // 17: openconfig.System.Aaa.accounting:type_name -> openconfig.System.Aaa.Accounting
	29,  // 18: openconfig.System.Aaa.authentication:type_name -> openconfig.System.Aaa.Authentication
	30,  // 19: openconfig.System.Aaa.authorization:type_name -> openconfig.System.Aaa.Authorization
	31,  // 20: openconfig.System.Aaa.config:type_name -> openconfig.System.Aaa.Config
	32,  // 21: openconfig.System.Aaa.server_groups:type_name -> openconfig.System.Aaa.ServerGroups
	33,  // 22: openconfig.System.Aaa.state:type_name -> openconfig.System.Aaa.State
	81,  // 23: openconfig.System.Alarms.alarm:type_name -> openconfig.System.Alarms.AlarmKey
	84,  // 24: openconfig.System.Clock.config:type_name -> openconfig.System.Clock.Config
	85,  // 25: openconfig.System.Clock.state:type_name -> openconfig.System.Clock.State
	178, // 26: openconfig.System.Config.domain_name:type_name -> ywrapper.StringValue
	178, // 27: openconfig.System.Config.login_banner:type_name -> ywrapper.StringValue
	178, // 28: openconfig.System.Config.motd_banner:type_name -> ywrapper.StringValue
	87,  // 29: openconfig.System.Cpus.cpu:type_name -> openconfig.System.Cpus.CpuKey
	97,  // 30: openconfig.System.Dns.config:type_name -> openconfig.System.Dns.Config
	98,  // 31: openconfig.System.Dns.host_entries:type_name -> openconfig.System.Dns.HostEntries
	99,  // 32: openconfig.System.Dns.servers:type_name -> openconfig.System.Dns.Servers
	100, // 33: openconfig.System.Dns.state:type_name -> openconfig.System.Dns.State
	109, // 34: openconfig.System.GrpcServer.config:type_name -> openconfig.System.GrpcServer.Config
	110, // 35: openconfig.System.GrpcServer.state:type_name -> openconfig.System.GrpcServer.State
	113, // 36: openconfig.System.License.licenses:type_name -> openconfig.System.License.Licenses
	118, // 37: openconfig.System.Logging.console:type_name -> openconfig.System.Logging.Console
	119, // 38: openconfig.System.Logging.remote_servers:type_name -> openconfig.System.Logging.RemoteServers
	136, // 39: openconfig.System.Memory.config:type_name -> openconfig.System.Memory.Config
	137, // 40: openconfig.System.Memory.state:type_name -> openconfig.System.Memory.State
	138, // 41: openconfig.System.Messages.config:type_name -> openconfig.System.Messages.Config
	139, // 42: openconfig.System.Messages.debug_entries:type_name -> openconfig.System.Messages.DebugEntries
	140, // 43: openconfig.System.Messages.state:type_name -> openconfig.System.Messages.State
	146, // 44: openconfig.System.Ntp.config:type_name -> openconfig.System.Ntp.Config
	147, // 45: openconfig.System.Ntp.ntp_keys:type_name -> openconfig.System.Ntp.NtpKeys
	148, // 46: openconfig.System.Ntp.servers:type_name -> openconfig.System.Ntp.Servers
	149, // 47: openconfig.System.Ntp.state:type_name -> openconfig.System.Ntp.State
	158, // 48: openconfig.System.Openflow.agent:type_name -> openconfig.System.Openflow.Agent
	159, // 49: openconfig.System.Openflow.controllers:type_name -> openconfig.System.Openflow.Controllers
	172, // 50: openconfig.System.Processes.process:type_name -> openconfig.System.Processes.ProcessKey
	174, // 51: openconfig.System.SshServer.config:type_name -> openconfig.System.SshServer.Config
	175, // 52: openconfig.System.SshServer.state:type_name -> openconfig.System.SshServer.State
	179, // 53: openconfig.System.State.boot_time:type_name -> ywrapper.UintValue
	178, // 54: openconfig.System.State.current_datetime:type_name -> ywrapper.StringValue
	178, // 55: openconfig.System.State.domain_name:type_name -> ywrapper.StringValue
	178, // 56: openconfig.System.State.login_banner:type_name -> ywrapper.StringValue
	178, // 57: openconfig.System.State.motd_banner:type_name -> ywrapper.StringValue
	176, // 58: openconfig.System.TelnetServer.config:type_name -> openconfig.System.TelnetServer.Config
	177, // 59: openconfig.System.TelnetServer.state:type_name -> openconfig.System.TelnetServer.State
	34,  // 60: openconfig.System.Aaa.Accounting.config:type_name -> openconfig.System.Aaa.Accounting.Config
	35,  // 61: openconfig.System.Aaa.Accounting.events:type_name -> openconfig.System.Aaa.Accounting.Events
	36,  // 62: openconfig.System.Aaa.Accounting.state:type_name -> openconfig.System.Aaa.Accounting.State
	43,  // 63: openconfig.System.Aaa.Authentication.admin_user:type_name -> openconfig.System.Aaa.Authentication.AdminUser
	44,  // 64: openconfig.System.Aaa.Authentication.config:type_name -> openconfig.System.Aaa.Authentication.Config
	45,  // 65: openconfig.System.Aaa.Authentication.state:type_name -> openconfig.System.Aaa.Authentication.State
	46,  // 66: openconfig.System.Aaa.Authentication.users:type_name -> openconfig.System.Aaa.Authentication.Users
	55,  // 67: openconfig.System.Aaa.Authorization.config:type_name -> openconfig.System.Aaa.Authorization.Config
	56,  // 68: openconfig.System.Aaa.Authorization.events:type_name -> openconfig.System.Aaa.Authorization.Events
	57,  // 69: openconfig.System.Aaa.Authorization.state:type_name -> openconfig.System.Aaa.Authorization.State
	65,  // 70: openconfig.System.Aaa.ServerGroups.server_group:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroupKey
	37,  // 71: openconfig.System.Aaa.Accounting.Config.accounting_method:type_name -> openconfig.System.Aaa.Accounting.Config.AccountingMethodUnion
	39,  // 72: openconfig.System.Aaa.Accounting.Events.event:type_name -> openconfig.System.Aaa.Accounting.Events.EventKey
	42,  // 73: openconfig.System.Aaa.Accounting.State.accounting_method:type_name -> openconfig.System.Aaa.Accounting.State.AccountingMethodUnion
	180, // 74: openconfig.System.Aaa.Accounting.Config.AccountingMethodUnion.accounting_method_openconfigaaatypesaaamethodtype:type_name -> openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	40,  // 75: openconfig.System.Aaa.Accounting.Events.Event.config:type_name -> openconfig.System.Aaa.Accounting.Events.Event.Config
	41,  // 76: openconfig.System.Aaa.Accounting.Events.Event.state:type_name -> openconfig.System.Aaa.Accounting.Events.Event.State
	181, // 77: openconfig.System.Aaa.Accounting.Events.EventKey.event_type:type_name -> openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE
	38,  // 78: openconfig.System.Aaa.Accounting.Events.EventKey.event:type_name -> openconfig.System.Aaa.Accounting.Events.Event
	181, // 79: openconfig.System.Aaa.Accounting.Events.Event.Config.event_type:type_name -> openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE
	0,   // 80: openconfig.System.Aaa.Accounting.Events.Event.Config.record:type_name -> openconfig.System.Aaa.Accounting.Events.Event.Config.Record
	181, // 81: openconfig.System.Aaa.Accounting.Events.Event.State.event_type:type_name -> openconfig.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE
	1,   // 82: openconfig.System.Aaa.Accounting.Events.Event.State.record:type_name -> openconfig.System.Aaa.Accounting.Events.Event.State.Record
	180, // 83: openconfig.System.Aaa.Accounting.State.AccountingMethodUnion.accounting_method_openconfigaaatypesaaamethodtype:type_name -> openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	47,  // 84: openconfig.System.Aaa.Authentication.AdminUser.config:type_name -> openconfig.System.Aaa.Authentication.AdminUser.Config
	48,  // 85: openconfig.System.Aaa.Authentication.AdminUser.state:type_name -> openconfig.System.Aaa.Authentication.AdminUser.State
	49,  // 86: openconfig.System.Aaa.Authentication.Config.authentication_method:type_name -> openconfig.System.Aaa.Authentication.Config.AuthenticationMethodUnion
	50,  // 87: openconfig.System.Aaa.Authentication.State.authentication_method:type_name -> openconfig.System.Aaa.Authentication.State.AuthenticationMethodUnion
	52,  // 88: openconfig.System.Aaa.Authentication.Users.user:type_name -> openconfig.System.Aaa.Authentication.Users.UserKey
	178, // 89: openconfig.System.Aaa.Authentication.AdminUser.Config.admin_password:type_name -> ywrapper.StringValue
	178, // 90: openconfig.System.Aaa.Authentication.AdminUser.Config.admin_password_hashed:type_name -> ywrapper.StringValue
	178, // 91: openconfig.System.Aaa.Authentication.AdminUser.State.admin_password:type_name -> ywrapper.StringValue
	178, // 92: openconfig.System.Aaa.Authentication.AdminUser.State.admin_password_hashed:type_name -> ywrapper.StringValue
	178, // 93: openconfig.System.Aaa.Authentication.AdminUser.State.admin_username:type_name -> ywrapper.StringValue
	180, // 94: openconfig.System.Aaa.Authentication.Config.AuthenticationMethodUnion.authentication_method_openconfigaaatypesaaamethodtype:type_name -> openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	180, // 95: openconfig.System.Aaa.Authentication.State.AuthenticationMethodUnion.authentication_method_openconfigaaatypesaaamethodtype:type_name -> openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	53,  // 96: openconfig.System.Aaa.Authentication.Users.User.config:type_name -> openconfig.System.Aaa.Authentication.Users.User.Config
	54,  // 97: openconfig.System.Aaa.Authentication.Users.User.state:type_name -> openconfig.System.Aaa.Authentication.Users.User.State
	51,  // 98: openconfig.System.Aaa.Authentication.Users.UserKey.user:type_name -> openconfig.System.Aaa.Authentication.Users.User
	178, // 99: openconfig.System.Aaa.Authentication.Users.User.Config.password:type_name -> ywrapper.StringValue
	178, // 100: openconfig.System.Aaa.Authentication.Users.User.Config.password_hashed:type_name -> ywrapper.StringValue
	182, // 101: openconfig.System.Aaa.Authentication.Users.User.Config.role_openconfigaaatypessystemdefinedroles:type_name -> openconfig.OpenconfigAaaTypesSYSTEMDEFINEDROLES
	178, // 102: openconfig.System.Aaa.Authentication.Users.User.Config.ssh_key:type_name -> ywrapper.StringValue
	178, // 103: openconfig.System.Aaa.Authentication.Users.User.Config.username:type_name -> ywrapper.StringValue
	178, // 104: openconfig.System.Aaa.Authentication.Users.User.State.password:type_name -> ywrapper.StringValue
	178, // 105: openconfig.System.Aaa.Authentication.Users.User.State.password_hashed:type_name -> ywrapper.StringValue
	182, // 106: openconfig.System.Aaa.Authentication.Users.User.State.role_openconfigaaatypessystemdefinedroles:type_name -> openconfig.OpenconfigAaaTypesSYSTEMDEFINEDROLES
	178, // 107: openconfig.System.Aaa.Authentication.Users.User.State.ssh_key:type_name -> ywrapper.StringValue
	178, // 108: openconfig.System.Aaa.Authentication.Users.User.State.username:type_name -> ywrapper.StringValue
	58,  // 109: openconfig.System.Aaa.Authorization.Config.authorization_method:type_name -> openconfig.System.Aaa.Authorization.Config.AuthorizationMethodUnion
	60,  // 110: openconfig.System.Aaa.Authorization.Events.event:type_name -> openconfig.System.Aaa.Authorization.Events.EventKey
	63,  // 111: openconfig.System.Aaa.Authorization.State.authorization_method:type_name -> openconfig.System.Aaa.Authorization.State.AuthorizationMethodUnion
	180, // 112: openconfig.System.Aaa.Authorization.Config.AuthorizationMethodUnion.authorization_method_openconfigaaatypesaaamethodtype:type_name -> openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	61,  // 113: openconfig.System.Aaa.Authorization.Events.Event.config:type_name -> openconfig.System.Aaa.Authorization.Events.Event.Config
	62,  // 114: openconfig.System.Aaa.Authorization.Events.Event.state:type_name -> openconfig.System.Aaa.Authorization.Events.Event.State
	183, // 115: openconfig.System.Aaa.Authorization.Events.EventKey.event_type:type_name -> openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE
	59,  // 116: openconfig.System.Aaa.Authorization.Events.EventKey.event:type_name -> openconfig.System.Aaa.Authorization.Events.Event
	183, // 117: openconfig.System.Aaa.Authorization.Events.Event.Config.event_type:type_name -> openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE
	183, // 118: openconfig.System.Aaa.Authorization.Events.Event.State.event_type:type_name -> openconfig.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE
	180, // 119: openconfig.System.Aaa.Authorization.State.AuthorizationMethodUnion.authorization_method_openconfigaaatypesaaamethodtype:type_name -> openconfig.OpenconfigAaaTypesAAAMETHODTYPE
	66,  // 120: openconfig.System.Aaa.ServerGroups.ServerGroup.config:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup.Config
	67,  // 121: openconfig.System.Aaa.ServerGroups.ServerGroup.servers:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup.Servers
	68,  // 122: openconfig.System.Aaa.ServerGroups.ServerGroup.state:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup.State
	64,  // 123: openconfig.System.Aaa.ServerGroups.ServerGroupKey.server_group:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup
	178, // 124: openconfig.System.Aaa.ServerGroups.ServerGroup.Config.name:type_name -> ywrapper.StringValue
	184, // 125: openconfig.System.Aaa.ServerGroups.ServerGroup.Config.type:type_name -> openconfig.OpenconfigAaaTypesAAASERVERTYPE
	70,  // 126: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.server:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.ServerKey
	178, // 127: openconfig.System.Aaa.ServerGroups.ServerGroup.State.name:type_name -> ywrapper.StringValue
	184, // 128: openconfig.System.Aaa.ServerGroups.ServerGroup.State.type:type_name -> openconfig.OpenconfigAaaTypesAAASERVERTYPE
	71,  // 129: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.config:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Config
	72,  // 130: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.radius:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius
	73,  // 131: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.state:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State
	74,  // 132: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.tacacs:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs
	69,  // 133: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.ServerKey.server:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server
	178, // 134: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Config.address:type_name -> ywrapper.StringValue
	178, // 135: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Config.name:type_name -> ywrapper.StringValue
	179, // 136: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Config.timeout:type_name -> ywrapper.UintValue
	75,  // 137: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.config:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.Config
	76,  // 138: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.state:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State
	178, // 139: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.address:type_name -> ywrapper.StringValue
	179, // 140: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.connection_aborts:type_name -> ywrapper.UintValue
	179, // 141: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.connection_closes:type_name -> ywrapper.UintValue
	179, // 142: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.connection_failures:type_name -> ywrapper.UintValue
	179, // 143: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.connection_opens:type_name -> ywrapper.UintValue
	179, // 144: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.connection_timeouts:type_name -> ywrapper.UintValue
	179, // 145: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.errors_received:type_name -> ywrapper.UintValue
	179, // 146: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.messages_received:type_name -> ywrapper.UintValue
	179, // 147: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.messages_sent:type_name -> ywrapper.UintValue
	178, // 148: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.name:type_name -> ywrapper.StringValue
	179, // 149: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.State.timeout:type_name -> ywrapper.UintValue
	78,  // 150: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.config:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.Config
	79,  // 151: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.state:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.State
	179, // 152: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.Config.acct_port:type_name -> ywrapper.UintValue
	179, // 153: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.Config.auth_port:type_name -> ywrapper.UintValue
	179, // 154: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.Config.retransmit_attempts:type_name -> ywrapper.UintValue
	178, // 155: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.Config.secret_key:type_name -> ywrapper.StringValue
	178, // 156: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.Config.source_address:type_name -> ywrapper.StringValue
	179, // 157: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.acct_port:type_name -> ywrapper.UintValue
	179, // 158: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.auth_port:type_name -> ywrapper.UintValue
	77,  // 159: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.counters:type_name -> openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.Counters
	179, // 160: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.retransmit_attempts:type_name -> ywrapper.UintValue
	178, // 161: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.secret_key:type_name -> ywrapper.StringValue
	178, // 162: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.source_address:type_name -> ywrapper.StringValue
	179, // 163: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.Counters.access_accepts:type_name -> ywrapper.UintValue
	179, // 164: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.Counters.access_rejects:type_name -> ywrapper.UintValue
	179, // 165: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.Counters.retried_access_requests:type_name -> ywrapper.UintValue
	179, // 166: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Radius.State.Counters.timeout_access_requests:type_name -> ywrapper.UintValue
	179, // 167: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.Config.port:type_name -> ywrapper.UintValue
	178, // 168: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.Config.secret_key:type_name -> ywrapper.StringValue
	178, // 169: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.Config.source_address:type_name -> ywrapper.StringValue
	179, // 170: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.State.port:type_name -> ywrapper.UintValue
	178, // 171: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.State.secret_key:type_name -> ywrapper.StringValue
	178, // 172: openconfig.System.Aaa.ServerGroups.ServerGroup.Servers.Server.Tacacs.State.source_address:type_name -> ywrapper.StringValue
	82,  // 173: openconfig.System.Alarms.Alarm.config:type_name -> openconfig.System.Alarms.Alarm.Config
	83,  // 174: openconfig.System.Alarms.Alarm.state:type_name -> openconfig.System.Alarms.Alarm.State
	80,  // 175: openconfig.System.Alarms.AlarmKey.alarm:type_name -> openconfig.System.Alarms.Alarm
	178, // 176: openconfig.System.Alarms.Alarm.State.id:type_name -> ywrapper.StringValue
	178, // 177: openconfig.System.Alarms.Alarm.State.resource:type_name -> ywrapper.StringValue
	185, // 178: openconfig.System.Alarms.Alarm.State.severity:type_name -> openconfig.OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY
	178, // 179: openconfig.System.Alarms.Alarm.State.text:type_name -> ywrapper.StringValue
	179, // 180: openconfig.System.Alarms.Alarm.State.time_created:type_name -> ywrapper.UintValue
	186, // 181: openconfig.System.Alarms.Alarm.State.type_id_openconfigalarmtypesopenconfigalarmtypeid:type_name -> openconfig.OpenconfigAlarmTypesOPENCONFIGALARMTYPEID
	178, // 182: openconfig.System.Clock.Config.timezone_name:type_name -> ywrapper.StringValue
	178, // 183: openconfig.System.Clock.State.timezone_name:type_name -> ywrapper.StringValue
	88,  // 184: openconfig.System.Cpus.Cpu.state:type_name -> openconfig.System.Cpus.Cpu.State
	3,   // 185: openconfig.System.Cpus.CpuKey.index_index:type_name -> openconfig.System.Cpus.CpuKey.Index
	86,  // 186: openconfig.System.Cpus.CpuKey.cpu:type_name -> openconfig.System.Cpus.Cpu
	89,  // 187: openconfig.System.Cpus.Cpu.State.hardware_interrupt:type_name -> openconfig.System.Cpus.Cpu.State.HardwareInterrupt
	90,  // 188: openconfig.System.Cpus.Cpu.State.idle:type_name -> openconfig.System.Cpus.Cpu.State.Idle
	2,   // 189: openconfig.System.Cpus.Cpu.State.index_index:type_name -> openconfig.System.Cpus.Cpu.State.Index
	91,  // 190: openconfig.System.Cpus.Cpu.State.kernel:type_name -> openconfig.System.Cpus.Cpu.State.Kernel
	92,  // 191: openconfig.System.Cpus.Cpu.State.nice:type_name -> openconfig.System.Cpus.Cpu.State.Nice
	93,  // 192: openconfig.System.Cpus.Cpu.State.software_interrupt:type_name -> openconfig.System.Cpus.Cpu.State.SoftwareInterrupt
	94,  // 193: openconfig.System.Cpus.Cpu.State.total:type_name -> openconfig.System.Cpus.Cpu.State.Total
	95,  // 194: openconfig.System.Cpus.Cpu.State.user:type_name -> openconfig.System.Cpus.Cpu.State.User
	96,  // 195: openconfig.System.Cpus.Cpu.State.wait:type_name -> openconfig.System.Cpus.Cpu.State.Wait
	179, // 196: openconfig.System.Cpus.Cpu.State.HardwareInterrupt.avg:type_name -> ywrapper.UintValue
	179, // 197: openconfig.System.Cpus.Cpu.State.HardwareInterrupt.instant:type_name -> ywrapper.UintValue
	179, // 198: openconfig.System.Cpus.Cpu.State.HardwareInterrupt.interval:type_name -> ywrapper.UintValue
	179, // 199: openconfig.System.Cpus.Cpu.State.HardwareInterrupt.max:type_name -> ywrapper.UintValue
	179, // 200: openconfig.System.Cpus.Cpu.State.HardwareInterrupt.max_time:type_name -> ywrapper.UintValue
	179, // 201: openconfig.System.Cpus.Cpu.State.HardwareInterrupt.min:type_name -> ywrapper.UintValue
	179, // 202: openconfig.System.Cpus.Cpu.State.HardwareInterrupt.min_time:type_name -> ywrapper.UintValue
	179, // 203: openconfig.System.Cpus.Cpu.State.Idle.avg:type_name -> ywrapper.UintValue
	179, // 204: openconfig.System.Cpus.Cpu.State.Idle.instant:type_name -> ywrapper.UintValue
	179, // 205: openconfig.System.Cpus.Cpu.State.Idle.interval:type_name -> ywrapper.UintValue
	179, // 206: openconfig.System.Cpus.Cpu.State.Idle.max:type_name -> ywrapper.UintValue
	179, // 207: openconfig.System.Cpus.Cpu.State.Idle.max_time:type_name -> ywrapper.UintValue
	179, // 208: openconfig.System.Cpus.Cpu.State.Idle.min:type_name -> ywrapper.UintValue
	179, // 209: openconfig.System.Cpus.Cpu.State.Idle.min_time:type_name -> ywrapper.UintValue
	179, // 210: openconfig.System.Cpus.Cpu.State.Kernel.avg:type_name -> ywrapper.UintValue
	179, // 211: openconfig.System.Cpus.Cpu.State.Kernel.instant:type_name -> ywrapper.UintValue
	179, // 212: openconfig.System.Cpus.Cpu.State.Kernel.interval:type_name -> ywrapper.UintValue
	179, // 213: openconfig.System.Cpus.Cpu.State.Kernel.max:type_name -> ywrapper.UintValue
	179, // 214: openconfig.System.Cpus.Cpu.State.Kernel.max_time:type_name -> ywrapper.UintValue
	179, // 215: openconfig.System.Cpus.Cpu.State.Kernel.min:type_name -> ywrapper.UintValue
	179, // 216: openconfig.System.Cpus.Cpu.State.Kernel.min_time:type_name -> ywrapper.UintValue
	179, // 217: openconfig.System.Cpus.Cpu.State.Nice.avg:type_name -> ywrapper.UintValue
	179, // 218: openconfig.System.Cpus.Cpu.State.Nice.instant:type_name -> ywrapper.UintValue
	179, // 219: openconfig.System.Cpus.Cpu.State.Nice.interval:type_name -> ywrapper.UintValue
	179, // 220: openconfig.System.Cpus.Cpu.State.Nice.max:type_name -> ywrapper.UintValue
	179, // 221: openconfig.System.Cpus.Cpu.State.Nice.max_time:type_name -> ywrapper.UintValue
	179, // 222: openconfig.System.Cpus.Cpu.State.Nice.min:type_name -> ywrapper.UintValue
	179, // 223: openconfig.System.Cpus.Cpu.State.Nice.min_time:type_name -> ywrapper.UintValue
	179, // 224: openconfig.System.Cpus.Cpu.State.SoftwareInterrupt.avg:type_name -> ywrapper.UintValue
	179, // 225: openconfig.System.Cpus.Cpu.State.SoftwareInterrupt.instant:type_name -> ywrapper.UintValue
	179, // 226: openconfig.System.Cpus.Cpu.State.SoftwareInterrupt.interval:type_name -> ywrapper.UintValue
	179, // 227: openconfig.System.Cpus.Cpu.State.SoftwareInterrupt.max:type_name -> ywrapper.UintValue
	179, // 228: openconfig.System.Cpus.Cpu.State.SoftwareInterrupt.max_time:type_name -> ywrapper.UintValue
	179, // 229: openconfig.System.Cpus.Cpu.State.SoftwareInterrupt.min:type_name -> ywrapper.UintValue
	179, // 230: openconfig.System.Cpus.Cpu.State.SoftwareInterrupt.min_time:type_name -> ywrapper.UintValue
	179, // 231: openconfig.System.Cpus.Cpu.State.Total.avg:type_name -> ywrapper.UintValue
	179, // 232: openconfig.System.Cpus.Cpu.State.Total.instant:type_name -> ywrapper.UintValue
	179, // 233: openconfig.System.Cpus.Cpu.State.Total.interval:type_name -> ywrapper.UintValue
	179, // 234: openconfig.System.Cpus.Cpu.State.Total.max:type_name -> ywrapper.UintValue
	179, // 235: openconfig.System.Cpus.Cpu.State.Total.max_time:type_name -> ywrapper.UintValue
	179, // 236: openconfig.System.Cpus.Cpu.State.Total.min:type_name -> ywrapper.UintValue
	179, // 237: openconfig.System.Cpus.Cpu.State.Total.min_time:type_name -> ywrapper.UintValue
	179, // 238: openconfig.System.Cpus.Cpu.State.User.avg:type_name -> ywrapper.UintValue
	179, // 239: openconfig.System.Cpus.Cpu.State.User.instant:type_name -> ywrapper.UintValue
	179, // 240: openconfig.System.Cpus.Cpu.State.User.interval:type_name -> ywrapper.UintValue
	179, // 241: openconfig.System.Cpus.Cpu.State.User.max:type_name -> ywrapper.UintValue
	179, // 242: openconfig.System.Cpus.Cpu.State.User.max_time:type_name -> ywrapper.UintValue
	179, // 243: openconfig.System.Cpus.Cpu.State.User.min:type_name -> ywrapper.UintValue
	179, // 244: openconfig.System.Cpus.Cpu.State.User.min_time:type_name -> ywrapper.UintValue
	179, // 245: openconfig.System.Cpus.Cpu.State.Wait.avg:type_name -> ywrapper.UintValue
	179, // 246: openconfig.System.Cpus.Cpu.State.Wait.instant:type_name -> ywrapper.UintValue
	179, // 247: openconfig.System.Cpus.Cpu.State.Wait.interval:type_name -> ywrapper.UintValue
	179, // 248: openconfig.System.Cpus.Cpu.State.Wait.max:type_name -> ywrapper.UintValue
	179, // 249: openconfig.System.Cpus.Cpu.State.Wait.max_time:type_name -> ywrapper.UintValue
	179, // 250: openconfig.System.Cpus.Cpu.State.Wait.min:type_name -> ywrapper.UintValue
	179, // 251: openconfig.System.Cpus.Cpu.State.Wait.min_time:type_name -> ywrapper.UintValue
	178, // 252: openconfig.System.Dns.Config.search:type_name -> ywrapper.StringValue
	102, // 253: openconfig.System.Dns.HostEntries.host_entry:type_name -> openconfig.System.Dns.HostEntries.HostEntryKey
	106, // 254: openconfig.System.Dns.Servers.server:type_name -> openconfig.System.Dns.Servers.ServerKey
	178, // 255: openconfig.System.Dns.State.search:type_name -> ywrapper.StringValue
	103, // 256: openconfig.System.Dns.HostEntries.HostEntry.config:type_name -> openconfig.System.Dns.HostEntries.HostEntry.Config
	104, // 257: openconfig.System.Dns.HostEntries.HostEntry.state:type_name -> openconfig.System.Dns.HostEntries.HostEntry.State
	101, // 258: openconfig.System.Dns.HostEntries.HostEntryKey.host_entry:type_name -> openconfig.System.Dns.HostEntries.HostEntry
	178, // 259: openconfig.System.Dns.HostEntries.HostEntry.Config.alias:type_name -> ywrapper.StringValue
	178, // 260: openconfig.System.Dns.HostEntries.HostEntry.Config.hostname:type_name -> ywrapper.StringValue
	178, // 261: openconfig.System.Dns.HostEntries.HostEntry.Config.ipv4_address:type_name -> ywrapper.StringValue
	178, // 262: openconfig.System.Dns.HostEntries.HostEntry.Config.ipv6_address:type_name -> ywrapper.StringValue
	178, // 263: openconfig.System.Dns.HostEntries.HostEntry.State.alias:type_name -> ywrapper.StringValue
	178, // 264: openconfig.System.Dns.HostEntries.HostEntry.State.hostname:type_name -> ywrapper.StringValue
	178, // 265: openconfig.System.Dns.HostEntries.HostEntry.State.ipv4_address:type_name -> ywrapper.StringValue
	178, // 266: openconfig.System.Dns.HostEntries.HostEntry.State.ipv6_address:type_name -> ywrapper.StringValue
	107, // 267: openconfig.System.Dns.Servers.Server.config:type_name -> openconfig.System.Dns.Servers.Server.Config
	108, // 268: openconfig.System.Dns.Servers.Server.state:type_name -> openconfig.System.Dns.Servers.Server.State
	105, // 269: openconfig.System.Dns.Servers.ServerKey.server:type_name -> openconfig.System.Dns.Servers.Server
	178, // 270: openconfig.System.Dns.Servers.Server.Config.address:type_name -> ywrapper.StringValue
	179, // 271: openconfig.System.Dns.Servers.Server.Config.port:type_name -> ywrapper.UintValue
	178, // 272: openconfig.System.Dns.Servers.Server.State.address:type_name -> ywrapper.StringValue
	179, // 273: openconfig.System.Dns.Servers.Server.State.port:type_name -> ywrapper.UintValue
	178, // 274: openconfig.System.GrpcServer.Config.certificate_id:type_name -> ywrapper.StringValue
	187, // 275: openconfig.System.GrpcServer.Config.enable:type_name -> ywrapper.BoolValue
	111, // 276: openconfig.System.GrpcServer.Config.listen_addresses:type_name -> openconfig.System.GrpcServer.Config.ListenAddressesUnion
	187, // 277: openconfig.System.GrpcServer.Config.metadata_authentication:type_name -> ywrapper.BoolValue
	179, // 278: openconfig.System.GrpcServer.Config.port:type_name -> ywrapper.UintValue
	187, // 279: openconfig.System.GrpcServer.Config.transport_security:type_name -> ywrapper.BoolValue
	178, // 280: openconfig.System.GrpcServer.State.certificate_id:type_name -> ywrapper.StringValue
	187, // 281: openconfig.System.GrpcServer.State.enable:type_name -> ywrapper.BoolValue
	112, // 282: openconfig.System.GrpcServer.State.listen_addresses:type_name -> openconfig.System.GrpcServer.State.ListenAddressesUnion
	187, // 283: openconfig.System.GrpcServer.State.metadata_authentication:type_name -> ywrapper.BoolValue
	179, // 284: openconfig.System.GrpcServer.State.port:type_name -> ywrapper.UintValue
	187, // 285: openconfig.System.GrpcServer.State.transport_security:type_name -> ywrapper.BoolValue
	4,   // 286: openconfig.System.GrpcServer.Config.ListenAddressesUnion.listen_addresses_listenaddresses:type_name -> openconfig.System.GrpcServer.Config.ListenAddresses
	5,   // 287: openconfig.System.GrpcServer.State.ListenAddressesUnion.listen_addresses_listenaddresses:type_name -> openconfig.System.GrpcServer.State.ListenAddresses
	115, // 288: openconfig.System.License.Licenses.license:type_name -> openconfig.System.License.Licenses.LicenseKey
	116, // 289: openconfig.System.License.Licenses.License.config:type_name -> openconfig.System.License.Licenses.License.Config
	117, // 290: openconfig.System.License.Licenses.License.state:type_name -> openconfig.System.License.Licenses.License.State
	114, // 291: openconfig.System.License.Licenses.LicenseKey.license:type_name -> openconfig.System.License.Licenses.License
	187, // 292: openconfig.System.License.Licenses.License.Config.active:type_name -> ywrapper.BoolValue
	178, // 293: openconfig.System.License.Licenses.License.Config.license_id:type_name -> ywrapper.StringValue
	187, // 294: openconfig.System.License.Licenses.License.State.active:type_name -> ywrapper.BoolValue
	178, // 295: openconfig.System.License.Licenses.License.State.description:type_name -> ywrapper.StringValue
	179, // 296: openconfig.System.License.Licenses.License.State.expiration_date:type_name -> ywrapper.UintValue
	187, // 297: openconfig.System.License.Licenses.License.State.expired:type_name -> ywrapper.BoolValue
	187, // 298: openconfig.System.License.Licenses.License.State.in_use:type_name -> ywrapper.BoolValue
	179, // 299: openconfig.System.License.Licenses.License.State.issue_date:type_name -> ywrapper.UintValue
	178, // 300: openconfig.System.License.Licenses.License.State.license_id:type_name -> ywrapper.StringValue
	187, // 301: openconfig.System.License.Licenses.License.State.valid:type_name -> ywrapper.BoolValue
	120, // 302: openconfig.System.Logging.Console.config:type_name -> openconfig.System.Logging.Console.Config
	121, // 303: openconfig.System.Logging.Console.selectors:type_name -> openconfig.System.Logging.Console.Selectors
	122, // 304: openconfig.System.Logging.Console.state:type_name -> openconfig.System.Logging.Console.State
	128, // 305: openconfig.System.Logging.RemoteServers.remote_server:type_name -> openconfig.System.Logging.RemoteServers.RemoteServerKey
	124, // 306: openconfig.System.Logging.Console.Selectors.selector:type_name -> openconfig.System.Logging.Console.Selectors.SelectorKey
	125, // 307: openconfig.System.Logging.Console.Selectors.Selector.config:type_name -> openconfig.System.Logging.Console.Selectors.Selector.Config
	126, // 308: openconfig.System.Logging.Console.Selectors.Selector.state:type_name -> openconfig.System.Logging.Console.Selectors.Selector.State
	188, // 309: openconfig.System.Logging.Console.Selectors.SelectorKey.facility:type_name -> openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	189, // 310: openconfig.System.Logging.Console.Selectors.SelectorKey.severity:type_name -> openconfig.OpenconfigSystemLoggingSyslogSeverity
	123, // 311: openconfig.System.Logging.Console.Selectors.SelectorKey.selector:type_name -> openconfig.System.Logging.Console.Selectors.Selector
	188, // 312: openconfig.System.Logging.Console.Selectors.Selector.Config.facility:type_name -> openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	189, // 313: openconfig.System.Logging.Console.Selectors.Selector.Config.severity:type_name -> openconfig.OpenconfigSystemLoggingSyslogSeverity
	188, // 314: openconfig.System.Logging.Console.Selectors.Selector.State.facility:type_name -> openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	189, // 315: openconfig.System.Logging.Console.Selectors.Selector.State.severity:type_name -> openconfig.OpenconfigSystemLoggingSyslogSeverity
	129, // 316: openconfig.System.Logging.RemoteServers.RemoteServer.config:type_name -> openconfig.System.Logging.RemoteServers.RemoteServer.Config
	130, // 317: openconfig.System.Logging.RemoteServers.RemoteServer.selectors:type_name -> openconfig.System.Logging.RemoteServers.RemoteServer.Selectors
	131, // 318: openconfig.System.Logging.RemoteServers.RemoteServer.state:type_name -> openconfig.System.Logging.RemoteServers.RemoteServer.State
	127, // 319: openconfig.System.Logging.RemoteServers.RemoteServerKey.remote_server:type_name -> openconfig.System.Logging.RemoteServers.RemoteServer
	178, // 320: openconfig.System.Logging.RemoteServers.RemoteServer.Config.host:type_name -> ywrapper.StringValue
	179, // 321: openconfig.System.Logging.RemoteServers.RemoteServer.Config.remote_port:type_name -> ywrapper.UintValue
	178, // 322: openconfig.System.Logging.RemoteServers.RemoteServer.Config.source_address:type_name -> ywrapper.StringValue
	133, // 323: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.selector:type_name -> openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.SelectorKey
	178, // 324: openconfig.System.Logging.RemoteServers.RemoteServer.State.host:type_name -> ywrapper.StringValue
	179, // 325: openconfig.System.Logging.RemoteServers.RemoteServer.State.remote_port:type_name -> ywrapper.UintValue
	178, // 326: openconfig.System.Logging.RemoteServers.RemoteServer.State.source_address:type_name -> ywrapper.StringValue
	134, // 327: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.config:type_name -> openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.Config
	135, // 328: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.state:type_name -> openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.State
	188, // 329: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.SelectorKey.facility:type_name -> openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	189, // 330: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.SelectorKey.severity:type_name -> openconfig.OpenconfigSystemLoggingSyslogSeverity
	132, // 331: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.SelectorKey.selector:type_name -> openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.Selector
	188, // 332: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.Config.facility:type_name -> openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	189, // 333: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.Config.severity:type_name -> openconfig.OpenconfigSystemLoggingSyslogSeverity
	188, // 334: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.State.facility:type_name -> openconfig.OpenconfigSystemLoggingSYSLOGFACILITY
	189, // 335: openconfig.System.Logging.RemoteServers.RemoteServer.Selectors.Selector.State.severity:type_name -> openconfig.OpenconfigSystemLoggingSyslogSeverity
	179, // 336: openconfig.System.Memory.State.physical:type_name -> ywrapper.UintValue
	179, // 337: openconfig.System.Memory.State.reserved:type_name -> ywrapper.UintValue
	190, // 338: openconfig.System.Messages.Config.severity:type_name -> openconfig.OpenconfigMessagesSyslogSeverity
	142, // 339: openconfig.System.Messages.DebugEntries.debug_service:type_name -> openconfig.System.Messages.DebugEntries.DebugServiceKey
	145, // 340: openconfig.System.Messages.State.message:type_name -> openconfig.System.Messages.State.Message
	190, // 341: openconfig.System.Messages.State.severity:type_name -> openconfig.OpenconfigMessagesSyslogSeverity
	143, // 342: openconfig.System.Messages.DebugEntries.DebugService.config:type_name -> openconfig.System.Messages.DebugEntries.DebugService.Config
	144, // 343: openconfig.System.Messages.DebugEntries.DebugService.state:type_name -> openconfig.System.Messages.DebugEntries.DebugService.State
	191, // 344: openconfig.System.Messages.DebugEntries.DebugServiceKey.service:type_name -> openconfig.OpenconfigMessagesDEBUGSERVICE
	141, // 345: openconfig.System.Messages.DebugEntries.DebugServiceKey.debug_service:type_name -> openconfig.System.Messages.DebugEntries.DebugService
	187, // 346: openconfig.System.Messages.DebugEntries.DebugService.Config.enabled:type_name -> ywrapper.BoolValue
	191, // 347: openconfig.System.Messages.DebugEntries.DebugService.Config.service:type_name -> openconfig.OpenconfigMessagesDEBUGSERVICE
	187, // 348: openconfig.System.Messages.DebugEntries.DebugService.State.enabled:type_name -> ywrapper.BoolValue
	191, // 349: openconfig.System.Messages.DebugEntries.DebugService.State.service:type_name -> openconfig.OpenconfigMessagesDEBUGSERVICE
	178, // 350: openconfig.System.Messages.State.Message.app_name:type_name -> ywrapper.StringValue
	178, // 351: openconfig.System.Messages.State.Message.msg:type_name -> ywrapper.StringValue
	178, // 352: openconfig.System.Messages.State.Message.msgid:type_name -> ywrapper.StringValue
	179, // 353: openconfig.System.Messages.State.Message.priority:type_name -> ywrapper.UintValue
	178, // 354: openconfig.System.Messages.State.Message.procid:type_name -> ywrapper.StringValue
	187, // 355: openconfig.System.Ntp.Config.enable_ntp_auth:type_name -> ywrapper.BoolValue
	187, // 356: openconfig.System.Ntp.Config.enabled:type_name -> ywrapper.BoolValue
	178, // 357: openconfig.System.Ntp.Config.ntp_source_address:type_name -> ywrapper.StringValue
	151, // 358: openconfig.System.Ntp.NtpKeys.ntp_key:type_name -> openconfig.System.Ntp.NtpKeys.NtpKeyKey
	155, // 359: openconfig.System.Ntp.Servers.server:type_name -> openconfig.System.Ntp.Servers.ServerKey
	179, // 360: openconfig.System.Ntp.State.auth_mismatch:type_name -> ywrapper.UintValue
	187, // 361: openconfig.System.Ntp.State.enable_ntp_auth:type_name -> ywrapper.BoolValue
	187, // 362: openconfig.System.Ntp.State.enabled:type_name -> ywrapper.BoolValue
	178, // 363: openconfig.System.Ntp.State.ntp_source_address:type_name -> ywrapper.StringValue
	152, // 364: openconfig.System.Ntp.NtpKeys.NtpKey.config:type_name -> openconfig.System.Ntp.NtpKeys.NtpKey.Config
	153, // 365: openconfig.System.Ntp.NtpKeys.NtpKey.state:type_name -> openconfig.System.Ntp.NtpKeys.NtpKey.State
	150, // 366: openconfig.System.Ntp.NtpKeys.NtpKeyKey.ntp_key:type_name -> openconfig.System.Ntp.NtpKeys.NtpKey
	179, // 367: openconfig.System.Ntp.NtpKeys.NtpKey.Config.key_id:type_name -> ywrapper.UintValue
	192, // 368: openconfig.System.Ntp.NtpKeys.NtpKey.Config.key_type:type_name -> openconfig.OpenconfigSystemNTPAUTHTYPE
	178, // 369: openconfig.System.Ntp.NtpKeys.NtpKey.Config.key_value:type_name -> ywrapper.StringValue
	179, // 370: openconfig.System.Ntp.NtpKeys.NtpKey.State.key_id:type_name -> ywrapper.UintValue
	192, // 371: openconfig.System.Ntp.NtpKeys.NtpKey.State.key_type:type_name -> openconfig.OpenconfigSystemNTPAUTHTYPE
	178, // 372: openconfig.System.Ntp.NtpKeys.NtpKey.State.key_value:type_name -> ywrapper.StringValue
	156, // 373: openconfig.System.Ntp.Servers.Server.config:type_name -> openconfig.System.Ntp.Servers.Server.Config
	157, // 374: openconfig.System.Ntp.Servers.Server.state:type_name -> openconfig.System.Ntp.Servers.Server.State
	154, // 375: openconfig.System.Ntp.Servers.ServerKey.server:type_name -> openconfig.System.Ntp.Servers.Server
	178, // 376: openconfig.System.Ntp.Servers.Server.Config.address:type_name -> ywrapper.StringValue
	6,   // 377: openconfig.System.Ntp.Servers.Server.Config.association_type:type_name -> openconfig.System.Ntp.Servers.Server.Config.AssociationType
	187, // 378: openconfig.System.Ntp.Servers.Server.Config.iburst:type_name -> ywrapper.BoolValue
	179, // 379: openconfig.System.Ntp.Servers.Server.Config.port:type_name -> ywrapper.UintValue
	187, // 380: openconfig.System.Ntp.Servers.Server.Config.prefer:type_name -> ywrapper.BoolValue
	179, // 381: openconfig.System.Ntp.Servers.Server.Config.version:type_name -> ywrapper.UintValue
	178, // 382: openconfig.System.Ntp.Servers.Server.State.address:type_name -> ywrapper.StringValue
	7,   // 383: openconfig.System.Ntp.Servers.Server.State.association_type:type_name -> openconfig.System.Ntp.Servers.Server.State.AssociationType
	187, // 384: openconfig.System.Ntp.Servers.Server.State.iburst:type_name -> ywrapper.BoolValue
	179, // 385: openconfig.System.Ntp.Servers.Server.State.offset:type_name -> ywrapper.UintValue
	179, // 386: openconfig.System.Ntp.Servers.Server.State.poll_interval:type_name -> ywrapper.UintValue
	179, // 387: openconfig.System.Ntp.Servers.Server.State.port:type_name -> ywrapper.UintValue
	187, // 388: openconfig.System.Ntp.Servers.Server.State.prefer:type_name -> ywrapper.BoolValue
	179, // 389: openconfig.System.Ntp.Servers.Server.State.root_delay:type_name -> ywrapper.UintValue
	179, // 390: openconfig.System.Ntp.Servers.Server.State.root_dispersion:type_name -> ywrapper.UintValue
	179, // 391: openconfig.System.Ntp.Servers.Server.State.stratum:type_name -> ywrapper.UintValue
	179, // 392: openconfig.System.Ntp.Servers.Server.State.version:type_name -> ywrapper.UintValue
	160, // 393: openconfig.System.Openflow.Agent.config:type_name -> openconfig.System.Openflow.Agent.Config
	161, // 394: openconfig.System.Openflow.Agent.state:type_name -> openconfig.System.Openflow.Agent.State
	163, // 395: openconfig.System.Openflow.Controllers.controller:type_name -> openconfig.System.Openflow.Controllers.ControllerKey
	179, // 396: openconfig.System.Openflow.Agent.Config.backoff_interval:type_name -> ywrapper.UintValue
	178, // 397: openconfig.System.Openflow.Agent.Config.datapath_id:type_name -> ywrapper.StringValue
	193, // 398: openconfig.System.Openflow.Agent.Config.failure_mode:type_name -> openconfig.OpenconfigOpenflowFailureMode
	179, // 399: openconfig.System.Openflow.Agent.Config.inactivity_probe:type_name -> ywrapper.UintValue
	179, // 400: openconfig.System.Openflow.Agent.Config.max_backoff:type_name -> ywrapper.UintValue
	179, // 401: openconfig.System.Openflow.Agent.State.backoff_interval:type_name -> ywrapper.UintValue
	178, // 402: openconfig.System.Openflow.Agent.State.datapath_id:type_name -> ywrapper.StringValue
	193, // 403: openconfig.System.Openflow.Agent.State.failure_mode:type_name -> openconfig.OpenconfigOpenflowFailureMode
	179, // 404: openconfig.System.Openflow.Agent.State.inactivity_probe:type_name -> ywrapper.UintValue
	179, // 405: openconfig.System.Openflow.Agent.State.max_backoff:type_name -> ywrapper.UintValue
	164, // 406: openconfig.System.Openflow.Controllers.Controller.config:type_name -> openconfig.System.Openflow.Controllers.Controller.Config
	165, // 407: openconfig.System.Openflow.Controllers.Controller.connections:type_name -> openconfig.System.Openflow.Controllers.Controller.Connections
	166, // 408: openconfig.System.Openflow.Controllers.Controller.state:type_name -> openconfig.System.Openflow.Controllers.Controller.State
	162, // 409: openconfig.System.Openflow.Controllers.ControllerKey.controller:type_name -> openconfig.System.Openflow.Controllers.Controller
	178, // 410: openconfig.System.Openflow.Controllers.Controller.Config.name:type_name -> ywrapper.StringValue
	168, // 411: openconfig.System.Openflow.Controllers.Controller.Connections.connection:type_name -> openconfig.System.Openflow.Controllers.Controller.Connections.ConnectionKey
	178, // 412: openconfig.System.Openflow.Controllers.Controller.State.name:type_name -> ywrapper.StringValue
	169, // 413: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.config:type_name -> openconfig.System.Openflow.Controllers.Controller.Connections.Connection.Config
	170, // 414: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.state:type_name -> openconfig.System.Openflow.Controllers.Controller.Connections.Connection.State
	167, // 415: openconfig.System.Openflow.Controllers.Controller.Connections.ConnectionKey.connection:type_name -> openconfig.System.Openflow.Controllers.Controller.Connections.Connection
	178, // 416: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.Config.address:type_name -> ywrapper.StringValue
	179, // 417: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.Config.aux_id:type_name -> ywrapper.UintValue
	178, // 418: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.Config.certificate_id:type_name -> ywrapper.StringValue
	179, // 419: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.Config.port:type_name -> ywrapper.UintValue
	179, // 420: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.Config.priority:type_name -> ywrapper.UintValue
	178, // 421: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.Config.source_interface:type_name -> ywrapper.StringValue
	194, // 422: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.Config.transport:type_name -> openconfig.OpenconfigOpenflowTransport
	178, // 423: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.State.address:type_name -> ywrapper.StringValue
	179, // 424: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.State.aux_id:type_name -> ywrapper.UintValue
	178, // 425: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.State.certificate_id:type_name -> ywrapper.StringValue
	187, // 426: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.State.connected:type_name -> ywrapper.BoolValue
	179, // 427: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.State.port:type_name -> ywrapper.UintValue
	179, // 428: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.State.priority:type_name -> ywrapper.UintValue
	178, // 429: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.State.source_interface:type_name -> ywrapper.StringValue
	194, // 430: openconfig.System.Openflow.Controllers.Controller.Connections.Connection.State.transport:type_name -> openconfig.OpenconfigOpenflowTransport
	173, // 431: openconfig.System.Processes.Process.state:type_name -> openconfig.System.Processes.Process.State
	171, // 432: openconfig.System.Processes.ProcessKey.process:type_name -> openconfig.System.Processes.Process
	178, // 433: openconfig.System.Processes.Process.State.args:type_name -> ywrapper.StringValue
	179, // 434: openconfig.System.Processes.Process.State.cpu_usage_system:type_name -> ywrapper.UintValue
	179, // 435: openconfig.System.Processes.Process.State.cpu_usage_user:type_name -> ywrapper.UintValue
	179, // 436: openconfig.System.Processes.Process.State.cpu_utilization:type_name -> ywrapper.UintValue
	179, // 437: openconfig.System.Processes.Process.State.memory_usage:type_name -> ywrapper.UintValue
	179, // 438: openconfig.System.Processes.Process.State.memory_utilization:type_name -> ywrapper.UintValue
	178, // 439: openconfig.System.Processes.Process.State.name:type_name -> ywrapper.StringValue
	179, // 440: openconfig.System.Processes.Process.State.pid:type_name -> ywrapper.UintValue
	179, // 441: openconfig.System.Processes.Process.State.start_time:type_name -> ywrapper.UintValue
	187, // 442: openconfig.System.SshServer.Config.enable:type_name -> ywrapper.BoolValue
	8,   // 443: openconfig.System.SshServer.Config.protocol_version:type_name -> openconfig.System.SshServer.Config.ProtocolVersion
	179, // 444: openconfig.System.SshServer.Config.rate_limit:type_name -> ywrapper.UintValue
	179, // 445: openconfig.System.SshServer.Config.session_limit:type_name -> ywrapper.UintValue
	179, // 446: openconfig.System.SshServer.Config.timeout:type_name -> ywrapper.UintValue
	187, // 447: openconfig.System.SshServer.State.enable:type_name -> ywrapper.BoolValue
	9,   // 448: openconfig.System.SshServer.State.protocol_version:type_name -> openconfig.System.SshServer.State.ProtocolVersion
	179, // 449: openconfig.System.SshServer.State.rate_limit:type_name -> ywrapper.UintValue
	179, // 450: openconfig.System.SshServer.State.session_limit:type_name -> ywrapper.UintValue
	179, // 451: openconfig.System.SshServer.State.timeout:type_name -> ywrapper.UintValue
	187, // 452: openconfig.System.TelnetServer.Config.enable:type_name -> ywrapper.BoolValue
	179, // 453: openconfig.System.TelnetServer.Config.rate_limit:type_name -> ywrapper.UintValue
	179, // 454: openconfig.System.TelnetServer.Config.session_limit:type_name -> ywrapper.UintValue
	179, // 455: openconfig.System.TelnetServer.Config.timeout:type_name -> ywrapper.UintValue
	187, // 456: openconfig.System.TelnetServer.State.enable:type_name -> ywrapper.BoolValue
	179, // 457: openconfig.System.TelnetServer.State.rate_limit:type_name -> ywrapper.UintValue
	179, // 458: openconfig.System.TelnetServer.State.session_limit:type_name -> ywrapper.UintValue
	179, // 459: openconfig.System.TelnetServer.State.timeout:type_name -> ywrapper.UintValue
	460, // [460:460] is the sub-list for method output_type
	460, // [460:460] is the sub-list for method input_type
	460, // [460:460] is the sub-list for extension type_name
	460, // [460:460] is the sub-list for extension extendee
	0,   // [0:460] is the sub-list for field type_name
}

func init() { file_openconfig_system_proto_init() }
func file_openconfig_system_proto_init() {
	if File_openconfig_system_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_system_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Alarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Clock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Cpus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Dns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_GrpcServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Messages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Ntp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Openflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Processes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_SshServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_TelnetServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Accounting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Accounting_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Accounting_Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Accounting_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Accounting_Config_AccountingMethodUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Accounting_Events_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Accounting_Events_EventKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Accounting_Events_Event_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Accounting_Events_Event_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Accounting_State_AccountingMethodUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authentication_AdminUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authentication_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authentication_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authentication_Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authentication_AdminUser_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authentication_AdminUser_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authentication_Config_AuthenticationMethodUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authentication_State_AuthenticationMethodUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authentication_Users_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authentication_Users_UserKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authentication_Users_User_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authentication_Users_User_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authorization_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authorization_Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authorization_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authorization_Config_AuthorizationMethodUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authorization_Events_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authorization_Events_EventKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authorization_Events_Event_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authorization_Events_Event_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_Authorization_State_AuthorizationMethodUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup_Servers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup_Servers_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup_Servers_ServerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Alarms_Alarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Alarms_AlarmKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Alarms_Alarm_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Alarms_Alarm_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Clock_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Clock_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Cpus_Cpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Cpus_CpuKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Cpus_Cpu_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Cpus_Cpu_State_HardwareInterrupt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Cpus_Cpu_State_Idle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Cpus_Cpu_State_Kernel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Cpus_Cpu_State_Nice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Cpus_Cpu_State_SoftwareInterrupt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Cpus_Cpu_State_Total); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Cpus_Cpu_State_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Cpus_Cpu_State_Wait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Dns_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Dns_HostEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Dns_Servers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Dns_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Dns_HostEntries_HostEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Dns_HostEntries_HostEntryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Dns_HostEntries_HostEntry_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Dns_HostEntries_HostEntry_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Dns_Servers_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Dns_Servers_ServerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Dns_Servers_Server_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Dns_Servers_Server_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_GrpcServer_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_GrpcServer_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_GrpcServer_Config_ListenAddressesUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_GrpcServer_State_ListenAddressesUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_License_Licenses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_License_Licenses_License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_License_Licenses_LicenseKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_License_Licenses_License_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_License_Licenses_License_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_Console); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_RemoteServers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_Console_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_Console_Selectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_Console_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_Console_Selectors_Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_Console_Selectors_SelectorKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_Console_Selectors_Selector_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_Console_Selectors_Selector_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_RemoteServers_RemoteServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_RemoteServers_RemoteServerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_RemoteServers_RemoteServer_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_RemoteServers_RemoteServer_Selectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_RemoteServers_RemoteServer_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_RemoteServers_RemoteServer_Selectors_Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_RemoteServers_RemoteServer_Selectors_SelectorKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Memory_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Memory_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Messages_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Messages_DebugEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Messages_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Messages_DebugEntries_DebugService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Messages_DebugEntries_DebugServiceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Messages_DebugEntries_DebugService_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Messages_DebugEntries_DebugService_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Messages_State_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Ntp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Ntp_NtpKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Ntp_Servers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Ntp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Ntp_NtpKeys_NtpKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Ntp_NtpKeys_NtpKeyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Ntp_NtpKeys_NtpKey_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Ntp_NtpKeys_NtpKey_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Ntp_Servers_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Ntp_Servers_ServerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Ntp_Servers_Server_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Ntp_Servers_Server_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Openflow_Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Openflow_Controllers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Openflow_Agent_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Openflow_Agent_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Openflow_Controllers_Controller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Openflow_Controllers_ControllerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Openflow_Controllers_Controller_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Openflow_Controllers_Controller_Connections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Openflow_Controllers_Controller_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Openflow_Controllers_Controller_Connections_Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Openflow_Controllers_Controller_Connections_ConnectionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Openflow_Controllers_Controller_Connections_Connection_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Openflow_Controllers_Controller_Connections_Connection_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Processes_Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Processes_ProcessKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Processes_Process_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_SshServer_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_SshServer_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_TelnetServer_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_system_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_TelnetServer_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openconfig_system_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*System_Aaa_Authentication_Users_User_Config_RoleOpenconfigaaatypessystemdefinedroles)(nil),
		(*System_Aaa_Authentication_Users_User_Config_RoleString)(nil),
	}
	file_openconfig_system_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*System_Aaa_Authentication_Users_User_State_RoleOpenconfigaaatypessystemdefinedroles)(nil),
		(*System_Aaa_Authentication_Users_User_State_RoleString)(nil),
	}
	file_openconfig_system_proto_msgTypes[73].OneofWrappers = []interface{}{
		(*System_Alarms_Alarm_State_TypeIdOpenconfigalarmtypesopenconfigalarmtypeid)(nil),
		(*System_Alarms_Alarm_State_TypeIdString)(nil),
	}
	file_openconfig_system_proto_msgTypes[77].OneofWrappers = []interface{}{
		(*System_Cpus_CpuKey_IndexIndex)(nil),
		(*System_Cpus_CpuKey_IndexUint64)(nil),
	}
	file_openconfig_system_proto_msgTypes[78].OneofWrappers = []interface{}{
		(*System_Cpus_Cpu_State_IndexIndex)(nil),
		(*System_Cpus_Cpu_State_IndexUint64)(nil),
	}
	file_openconfig_system_proto_msgTypes[106].OneofWrappers = []interface{}{
		(*System_License_Licenses_License_Config_LicenseDataBytes)(nil),
		(*System_License_Licenses_License_Config_LicenseDataString)(nil),
	}
	file_openconfig_system_proto_msgTypes[107].OneofWrappers = []interface{}{
		(*System_License_Licenses_License_State_LicenseDataBytes)(nil),
		(*System_License_Licenses_License_State_LicenseDataString)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_system_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   168,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_system_proto_goTypes,
		DependencyIndexes: file_openconfig_system_proto_depIdxs,
		EnumInfos:         file_openconfig_system_proto_enumTypes,
		MessageInfos:      file_openconfig_system_proto_msgTypes,
	}.Build()
	File_openconfig_system_proto = out.File
	file_openconfig_system_proto_rawDesc = nil
	file_openconfig_system_proto_goTypes = nil
	file_openconfig_system_proto_depIdxs = nil
}
