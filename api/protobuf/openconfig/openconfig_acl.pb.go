// openconfig.openconfig_acl is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_acl.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort int32

const (
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DESTINATIONPORT_UNSET Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort = 0
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DESTINATIONPORT_ANY   Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort = 1
)

// Enum value maps for Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort.
var (
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_name = map[int32]string{
		0: "DESTINATIONPORT_UNSET",
		1: "DESTINATIONPORT_ANY",
	}
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_value = map[string]int32{
		"DESTINATIONPORT_UNSET": 0,
		"DESTINATIONPORT_ANY":   1,
	}
)

func (x Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort) Enum() *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort {
	p := new(Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort)
	*p = x
	return p
}

func (x Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_acl_proto_enumTypes[0].Descriptor()
}

func (Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort) Type() protoreflect.EnumType {
	return &file_openconfig_acl_proto_enumTypes[0]
}

func (x Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort.Descriptor instead.
func (Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 7, 0, 0}
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort int32

const (
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SOURCEPORT_UNSET Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort = 0
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SOURCEPORT_ANY   Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort = 1
)

// Enum value maps for Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort.
var (
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_name = map[int32]string{
		0: "SOURCEPORT_UNSET",
		1: "SOURCEPORT_ANY",
	}
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_value = map[string]int32{
		"SOURCEPORT_UNSET": 0,
		"SOURCEPORT_ANY":   1,
	}
)

func (x Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort) Enum() *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort {
	p := new(Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort)
	*p = x
	return p
}

func (x Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_acl_proto_enumTypes[1].Descriptor()
}

func (Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort) Type() protoreflect.EnumType {
	return &file_openconfig_acl_proto_enumTypes[1]
}

func (x Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort.Descriptor instead.
func (Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 7, 0, 1}
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort int32

const (
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DESTINATIONPORT_UNSET Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort = 0
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DESTINATIONPORT_ANY   Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort = 1
)

// Enum value maps for Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort.
var (
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_name = map[int32]string{
		0: "DESTINATIONPORT_UNSET",
		1: "DESTINATIONPORT_ANY",
	}
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_value = map[string]int32{
		"DESTINATIONPORT_UNSET": 0,
		"DESTINATIONPORT_ANY":   1,
	}
)

func (x Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort) Enum() *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort {
	p := new(Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort)
	*p = x
	return p
}

func (x Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_acl_proto_enumTypes[2].Descriptor()
}

func (Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort) Type() protoreflect.EnumType {
	return &file_openconfig_acl_proto_enumTypes[2]
}

func (x Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort.Descriptor instead.
func (Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 7, 1, 0}
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort int32

const (
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SOURCEPORT_UNSET Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort = 0
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SOURCEPORT_ANY   Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort = 1
)

// Enum value maps for Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort.
var (
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_name = map[int32]string{
		0: "SOURCEPORT_UNSET",
		1: "SOURCEPORT_ANY",
	}
	Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_value = map[string]int32{
		"SOURCEPORT_UNSET": 0,
		"SOURCEPORT_ANY":   1,
	}
)

func (x Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort) Enum() *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort {
	p := new(Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort)
	*p = x
	return p
}

func (x Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_acl_proto_enumTypes[3].Descriptor()
}

func (Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort) Type() protoreflect.EnumType {
	return &file_openconfig_acl_proto_enumTypes[3]
}

func (x Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort.Descriptor instead.
func (Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 7, 1, 1}
}

type Acl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclSets    *Acl_AclSets    `protobuf:"bytes,417518509,opt,name=acl_sets,json=aclSets,proto3" json:"acl_sets,omitempty"`
	Config     *Acl_Config     `protobuf:"bytes,267083569,opt,name=config,proto3" json:"config,omitempty"`
	Interfaces *Acl_Interfaces `protobuf:"bytes,154699711,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	State      *Acl_State      `protobuf:"bytes,331320230,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl) Reset() {
	*x = Acl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl) ProtoMessage() {}

func (x *Acl) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl.ProtoReflect.Descriptor instead.
func (*Acl) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0}
}

func (x *Acl) GetAclSets() *Acl_AclSets {
	if x != nil {
		return x.AclSets
	}
	return nil
}

func (x *Acl) GetConfig() *Acl_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Acl) GetInterfaces() *Acl_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Acl) GetState() *Acl_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_AclSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclSet []*Acl_AclSets_AclSetKey `protobuf:"bytes,4912443,rep,name=acl_set,json=aclSet,proto3" json:"acl_set,omitempty"`
}

func (x *Acl_AclSets) Reset() {
	*x = Acl_AclSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets) ProtoMessage() {}

func (x *Acl_AclSets) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets.ProtoReflect.Descriptor instead.
func (*Acl_AclSets) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Acl_AclSets) GetAclSet() []*Acl_AclSets_AclSetKey {
	if x != nil {
		return x.AclSet
	}
	return nil
}

type Acl_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Acl_Config) Reset() {
	*x = Acl_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Config) ProtoMessage() {}

func (x *Acl_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Config.ProtoReflect.Descriptor instead.
func (*Acl_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 1}
}

type Acl_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*Acl_Interfaces_InterfaceKey `protobuf:"bytes,460928223,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Acl_Interfaces) Reset() {
	*x = Acl_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces) ProtoMessage() {}

func (x *Acl_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Acl_Interfaces) GetInterface() []*Acl_Interfaces_InterfaceKey {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Acl_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CounterCapability OpenconfigAclACLCOUNTERCAPABILITY `protobuf:"varint,39929886,opt,name=counter_capability,json=counterCapability,proto3,enum=openconfig.OpenconfigAclACLCOUNTERCAPABILITY" json:"counter_capability,omitempty"`
}

func (x *Acl_State) Reset() {
	*x = Acl_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_State) ProtoMessage() {}

func (x *Acl_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_State.ProtoReflect.Descriptor instead.
func (*Acl_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Acl_State) GetCounterCapability() OpenconfigAclACLCOUNTERCAPABILITY {
	if x != nil {
		return x.CounterCapability
	}
	return OpenconfigAclACLCOUNTERCAPABILITY_OPENCONFIGACLACLCOUNTERCAPABILITY_UNSET
}

type Acl_AclSets_AclSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclEntries *Acl_AclSets_AclSet_AclEntries `protobuf:"bytes,111776053,opt,name=acl_entries,json=aclEntries,proto3" json:"acl_entries,omitempty"`
	Config     *Acl_AclSets_AclSet_Config     `protobuf:"bytes,90241004,opt,name=config,proto3" json:"config,omitempty"`
	State      *Acl_AclSets_AclSet_State      `protobuf:"bytes,443839461,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl_AclSets_AclSet) Reset() {
	*x = Acl_AclSets_AclSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet) ProtoMessage() {}

func (x *Acl_AclSets_AclSet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Acl_AclSets_AclSet) GetAclEntries() *Acl_AclSets_AclSet_AclEntries {
	if x != nil {
		return x.AclEntries
	}
	return nil
}

func (x *Acl_AclSets_AclSet) GetConfig() *Acl_AclSets_AclSet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Acl_AclSets_AclSet) GetState() *Acl_AclSets_AclSet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_AclSets_AclSetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type   OpenconfigAclACLTYPE `protobuf:"varint,2,opt,name=type,proto3,enum=openconfig.OpenconfigAclACLTYPE" json:"type,omitempty"`
	AclSet *Acl_AclSets_AclSet  `protobuf:"bytes,3,opt,name=acl_set,json=aclSet,proto3" json:"acl_set,omitempty"`
}

func (x *Acl_AclSets_AclSetKey) Reset() {
	*x = Acl_AclSets_AclSetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSetKey) ProtoMessage() {}

func (x *Acl_AclSets_AclSetKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSetKey.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSetKey) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Acl_AclSets_AclSetKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Acl_AclSets_AclSetKey) GetType() OpenconfigAclACLTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_UNSET
}

func (x *Acl_AclSets_AclSetKey) GetAclSet() *Acl_AclSets_AclSet {
	if x != nil {
		return x.AclSet
	}
	return nil
}

type Acl_AclSets_AclSet_AclEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclEntry []*Acl_AclSets_AclSet_AclEntries_AclEntryKey `protobuf:"bytes,532341735,rep,name=acl_entry,json=aclEntry,proto3" json:"acl_entry,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Acl_AclSets_AclSet_AclEntries) GetAclEntry() []*Acl_AclSets_AclSet_AclEntries_AclEntryKey {
	if x != nil {
		return x.AclEntry
	}
	return nil
}

type Acl_AclSets_AclSet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *ywrapper.StringValue `protobuf:"bytes,417646551,opt,name=description,proto3" json:"description,omitempty"`
	Name        *ywrapper.StringValue `protobuf:"bytes,78719918,opt,name=name,proto3" json:"name,omitempty"`
	Type        OpenconfigAclACLTYPE  `protobuf:"varint,470244131,opt,name=type,proto3,enum=openconfig.OpenconfigAclACLTYPE" json:"type,omitempty"`
}

func (x *Acl_AclSets_AclSet_Config) Reset() {
	*x = Acl_AclSets_AclSet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_Config) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_Config.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *Acl_AclSets_AclSet_Config) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Acl_AclSets_AclSet_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Acl_AclSets_AclSet_Config) GetType() OpenconfigAclACLTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_UNSET
}

type Acl_AclSets_AclSet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *ywrapper.StringValue `protobuf:"bytes,35889822,opt,name=description,proto3" json:"description,omitempty"`
	Name        *ywrapper.StringValue `protobuf:"bytes,512257697,opt,name=name,proto3" json:"name,omitempty"`
	Type        OpenconfigAclACLTYPE  `protobuf:"varint,261035304,opt,name=type,proto3,enum=openconfig.OpenconfigAclACLTYPE" json:"type,omitempty"`
}

func (x *Acl_AclSets_AclSet_State) Reset() {
	*x = Acl_AclSets_AclSet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_State) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_State.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *Acl_AclSets_AclSet_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Acl_AclSets_AclSet_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Acl_AclSets_AclSet_State) GetType() OpenconfigAclACLTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_UNSET
}

type Acl_AclSets_AclSet_AclEntries_AclEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions        *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions        `protobuf:"bytes,266093031,opt,name=actions,proto3" json:"actions,omitempty"`
	Config         *Acl_AclSets_AclSet_AclEntries_AclEntry_Config         `protobuf:"bytes,201866872,opt,name=config,proto3" json:"config,omitempty"`
	InputInterface *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface `protobuf:"bytes,479636424,opt,name=input_interface,json=inputInterface,proto3" json:"input_interface,omitempty"`
	Ipv4           *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4           `protobuf:"bytes,252224191,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6           *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6           `protobuf:"bytes,252224189,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	L2             *Acl_AclSets_AclSet_AclEntries_AclEntry_L2             `protobuf:"bytes,509771812,opt,name=l2,proto3" json:"l2,omitempty"`
	State          *Acl_AclSets_AclSet_AclEntries_AclEntry_State          `protobuf:"bytes,489791377,opt,name=state,proto3" json:"state,omitempty"`
	Transport      *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport      `protobuf:"bytes,13698857,opt,name=transport,proto3" json:"transport,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry) GetActions() *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry) GetConfig() *Acl_AclSets_AclSet_AclEntries_AclEntry_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry) GetInputInterface() *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface {
	if x != nil {
		return x.InputInterface
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry) GetIpv4() *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry) GetIpv6() *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry) GetL2() *Acl_AclSets_AclSet_AclEntries_AclEntry_L2 {
	if x != nil {
		return x.L2
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry) GetState() *Acl_AclSets_AclSet_AclEntries_AclEntry_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry) GetTransport() *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport {
	if x != nil {
		return x.Transport
	}
	return nil
}

type Acl_AclSets_AclSet_AclEntries_AclEntryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceId uint64                                  `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	AclEntry   *Acl_AclSets_AclSet_AclEntries_AclEntry `protobuf:"bytes,2,opt,name=acl_entry,json=aclEntry,proto3" json:"acl_entry,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntryKey) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntryKey) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntryKey.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntryKey) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntryKey) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntryKey) GetAclEntry() *Acl_AclSets_AclSet_AclEntries_AclEntry {
	if x != nil {
		return x.AclEntry
	}
	return nil
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Actions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config `protobuf:"bytes,277309560,opt,name=config,proto3" json:"config,omitempty"`
	State  *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State  `protobuf:"bytes,358092177,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_Actions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Actions.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) GetConfig() *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) GetState() *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *ywrapper.StringValue `protobuf:"bytes,428508691,opt,name=description,proto3" json:"description,omitempty"`
	SequenceId  *ywrapper.UintValue   `protobuf:"bytes,148649894,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Config) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Config) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Config.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Config) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Config) GetSequenceId() *ywrapper.UintValue {
	if x != nil {
		return x.SequenceId
	}
	return nil
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config       `protobuf:"bytes,535555373,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceRef *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef `protobuf:"bytes,322206760,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	State        *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State        `protobuf:"bytes,400651234,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) GetConfig() *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) GetInterfaceRef() *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) GetState() *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config `protobuf:"bytes,15381632,opt,name=config,proto3" json:"config,omitempty"`
	State  *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State  `protobuf:"bytes,518549113,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) GetConfig() *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) GetState() *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config `protobuf:"bytes,355608050,opt,name=config,proto3" json:"config,omitempty"`
	State  *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State  `protobuf:"bytes,9069295,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 4}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) GetConfig() *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) GetState() *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_L2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config `protobuf:"bytes,229943497,opt,name=config,proto3" json:"config,omitempty"`
	State  *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State  `protobuf:"bytes,122962974,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_L2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_L2) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_L2.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_L2) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 5}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2) GetConfig() *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2) GetState() *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description    *ywrapper.StringValue `protobuf:"bytes,434948986,opt,name=description,proto3" json:"description,omitempty"`
	MatchedOctets  *ywrapper.UintValue   `protobuf:"bytes,378451401,opt,name=matched_octets,json=matchedOctets,proto3" json:"matched_octets,omitempty"`
	MatchedPackets *ywrapper.UintValue   `protobuf:"bytes,123694420,opt,name=matched_packets,json=matchedPackets,proto3" json:"matched_packets,omitempty"`
	SequenceId     *ywrapper.UintValue   `protobuf:"bytes,212274571,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_State) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_State) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_State.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 6}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_State) GetMatchedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.MatchedOctets
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_State) GetMatchedPackets() *ywrapper.UintValue {
	if x != nil {
		return x.MatchedPackets
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_State) GetSequenceId() *ywrapper.UintValue {
	if x != nil {
		return x.SequenceId
	}
	return nil
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config `protobuf:"bytes,244837662,opt,name=config,proto3" json:"config,omitempty"`
	State  *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State  `protobuf:"bytes,56546699,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_Transport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Transport.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 7}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) GetConfig() *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) GetState() *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardingAction OpenconfigAclFORWARDINGACTION `protobuf:"varint,326700017,opt,name=forwarding_action,json=forwardingAction,proto3,enum=openconfig.OpenconfigAclFORWARDINGACTION" json:"forwarding_action,omitempty"`
	LogAction        OpenconfigAclLOGACTION        `protobuf:"varint,155895186,opt,name=log_action,json=logAction,proto3,enum=openconfig.OpenconfigAclLOGACTION" json:"log_action,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) GetForwardingAction() OpenconfigAclFORWARDINGACTION {
	if x != nil {
		return x.ForwardingAction
	}
	return OpenconfigAclFORWARDINGACTION_OPENCONFIGACLFORWARDINGACTION_UNSET
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) GetLogAction() OpenconfigAclLOGACTION {
	if x != nil {
		return x.LogAction
	}
	return OpenconfigAclLOGACTION_OPENCONFIGACLLOGACTION_UNSET
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardingAction OpenconfigAclFORWARDINGACTION `protobuf:"varint,13025068,opt,name=forwarding_action,json=forwardingAction,proto3,enum=openconfig.OpenconfigAclFORWARDINGACTION" json:"forwarding_action,omitempty"`
	LogAction        OpenconfigAclLOGACTION        `protobuf:"varint,462700673,opt,name=log_action,json=logAction,proto3,enum=openconfig.OpenconfigAclLOGACTION" json:"log_action,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 1}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) GetForwardingAction() OpenconfigAclFORWARDINGACTION {
	if x != nil {
		return x.ForwardingAction
	}
	return OpenconfigAclFORWARDINGACTION_OPENCONFIGACLFORWARDINGACTION_UNSET
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) GetLogAction() OpenconfigAclLOGACTION {
	if x != nil {
		return x.LogAction
	}
	return OpenconfigAclLOGACTION_OPENCONFIGACLLOGACTION_UNSET
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 0}
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config `protobuf:"bytes,288923405,opt,name=config,proto3" json:"config,omitempty"`
	State  *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State  `protobuf:"bytes,471874114,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 1}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) GetConfig() *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) GetState() *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 2}
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,341759993,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,290015419,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 1, 0}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,347496558,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,521816458,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 2, 1, 1}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress *ywrapper.StringValue `protobuf:"bytes,82903810,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	Dscp               *ywrapper.UintValue   `protobuf:"bytes,14259057,opt,name=dscp,proto3" json:"dscp,omitempty"`
	HopLimit           *ywrapper.UintValue   `protobuf:"bytes,493826230,opt,name=hop_limit,json=hopLimit,proto3" json:"hop_limit,omitempty"`
	// Types that are assignable to Protocol:
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_ProtocolOpenconfigpacketmatchtypesipprotocol
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_ProtocolUint64
	Protocol      isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol `protobuf_oneof:"protocol"`
	SourceAddress *ywrapper.StringValue                                         `protobuf:"bytes,460084551,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 0}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) GetDestinationAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) GetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) GetHopLimit() *ywrapper.UintValue {
	if x != nil {
		return x.HopLimit
	}
	return nil
}

func (m *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) GetProtocol() isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) GetProtocolOpenconfigpacketmatchtypesipprotocol() OpenconfigPacketMatchTypesIPPROTOCOL {
	if x, ok := x.GetProtocol().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_ProtocolOpenconfigpacketmatchtypesipprotocol); ok {
		return x.ProtocolOpenconfigpacketmatchtypesipprotocol
	}
	return OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) GetProtocolUint64() uint64 {
	if x, ok := x.GetProtocol().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_ProtocolUint64); ok {
		return x.ProtocolUint64
	}
	return 0
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol interface {
	isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol()
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_ProtocolOpenconfigpacketmatchtypesipprotocol struct {
	ProtocolOpenconfigpacketmatchtypesipprotocol OpenconfigPacketMatchTypesIPPROTOCOL `protobuf:"varint,13672225,opt,name=protocol_openconfigpacketmatchtypesipprotocol,json=protocolOpenconfigpacketmatchtypesipprotocol,proto3,enum=openconfig.OpenconfigPacketMatchTypesIPPROTOCOL,oneof"`
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_ProtocolUint64 struct {
	ProtocolUint64 uint64 `protobuf:"varint,231259264,opt,name=protocol_uint64,json=protocolUint64,proto3,oneof"`
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_ProtocolOpenconfigpacketmatchtypesipprotocol) isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol() {
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_ProtocolUint64) isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol() {
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress *ywrapper.StringValue `protobuf:"bytes,220481211,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	Dscp               *ywrapper.UintValue   `protobuf:"bytes,121235094,opt,name=dscp,proto3" json:"dscp,omitempty"`
	HopLimit           *ywrapper.UintValue   `protobuf:"bytes,501288443,opt,name=hop_limit,json=hopLimit,proto3" json:"hop_limit,omitempty"`
	// Types that are assignable to Protocol:
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_ProtocolOpenconfigpacketmatchtypesipprotocol
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_ProtocolUint64
	Protocol      isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol `protobuf_oneof:"protocol"`
	SourceAddress *ywrapper.StringValue                                        `protobuf:"bytes,459793172,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 3, 1}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) GetDestinationAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) GetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) GetHopLimit() *ywrapper.UintValue {
	if x != nil {
		return x.HopLimit
	}
	return nil
}

func (m *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) GetProtocol() isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) GetProtocolOpenconfigpacketmatchtypesipprotocol() OpenconfigPacketMatchTypesIPPROTOCOL {
	if x, ok := x.GetProtocol().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_ProtocolOpenconfigpacketmatchtypesipprotocol); ok {
		return x.ProtocolOpenconfigpacketmatchtypesipprotocol
	}
	return OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) GetProtocolUint64() uint64 {
	if x, ok := x.GetProtocol().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_ProtocolUint64); ok {
		return x.ProtocolUint64
	}
	return 0
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol interface {
	isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol()
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_ProtocolOpenconfigpacketmatchtypesipprotocol struct {
	ProtocolOpenconfigpacketmatchtypesipprotocol OpenconfigPacketMatchTypesIPPROTOCOL `protobuf:"varint,335169316,opt,name=protocol_openconfigpacketmatchtypesipprotocol,json=protocolOpenconfigpacketmatchtypesipprotocol,proto3,enum=openconfig.OpenconfigPacketMatchTypesIPPROTOCOL,oneof"`
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_ProtocolUint64 struct {
	ProtocolUint64 uint64 `protobuf:"varint,494380497,opt,name=protocol_uint64,json=protocolUint64,proto3,oneof"`
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_ProtocolOpenconfigpacketmatchtypesipprotocol) isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol() {
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_ProtocolUint64) isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol() {
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress   *ywrapper.StringValue `protobuf:"bytes,194564924,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	DestinationFlowLabel *ywrapper.UintValue   `protobuf:"bytes,245840793,opt,name=destination_flow_label,json=destinationFlowLabel,proto3" json:"destination_flow_label,omitempty"`
	Dscp                 *ywrapper.UintValue   `protobuf:"bytes,468604011,opt,name=dscp,proto3" json:"dscp,omitempty"`
	HopLimit             *ywrapper.UintValue   `protobuf:"bytes,103791760,opt,name=hop_limit,json=hopLimit,proto3" json:"hop_limit,omitempty"`
	// Types that are assignable to Protocol:
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_ProtocolOpenconfigpacketmatchtypesipprotocol
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_ProtocolUint64
	Protocol        isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol `protobuf_oneof:"protocol"`
	SourceAddress   *ywrapper.StringValue                                         `protobuf:"bytes,178850349,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	SourceFlowLabel *ywrapper.UintValue                                           `protobuf:"bytes,469237694,opt,name=source_flow_label,json=sourceFlowLabel,proto3" json:"source_flow_label,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 4, 0}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) GetDestinationAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) GetDestinationFlowLabel() *ywrapper.UintValue {
	if x != nil {
		return x.DestinationFlowLabel
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) GetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) GetHopLimit() *ywrapper.UintValue {
	if x != nil {
		return x.HopLimit
	}
	return nil
}

func (m *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) GetProtocol() isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) GetProtocolOpenconfigpacketmatchtypesipprotocol() OpenconfigPacketMatchTypesIPPROTOCOL {
	if x, ok := x.GetProtocol().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_ProtocolOpenconfigpacketmatchtypesipprotocol); ok {
		return x.ProtocolOpenconfigpacketmatchtypesipprotocol
	}
	return OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) GetProtocolUint64() uint64 {
	if x, ok := x.GetProtocol().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_ProtocolUint64); ok {
		return x.ProtocolUint64
	}
	return 0
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) GetSourceFlowLabel() *ywrapper.UintValue {
	if x != nil {
		return x.SourceFlowLabel
	}
	return nil
}

type isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol interface {
	isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol()
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_ProtocolOpenconfigpacketmatchtypesipprotocol struct {
	ProtocolOpenconfigpacketmatchtypesipprotocol OpenconfigPacketMatchTypesIPPROTOCOL `protobuf:"varint,439824055,opt,name=protocol_openconfigpacketmatchtypesipprotocol,json=protocolOpenconfigpacketmatchtypesipprotocol,proto3,enum=openconfig.OpenconfigPacketMatchTypesIPPROTOCOL,oneof"`
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_ProtocolUint64 struct {
	ProtocolUint64 uint64 `protobuf:"varint,468204694,opt,name=protocol_uint64,json=protocolUint64,proto3,oneof"`
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_ProtocolOpenconfigpacketmatchtypesipprotocol) isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol() {
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_ProtocolUint64) isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol() {
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress   *ywrapper.StringValue `protobuf:"bytes,226569937,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	DestinationFlowLabel *ywrapper.UintValue   `protobuf:"bytes,443337090,opt,name=destination_flow_label,json=destinationFlowLabel,proto3" json:"destination_flow_label,omitempty"`
	Dscp                 *ywrapper.UintValue   `protobuf:"bytes,369661252,opt,name=dscp,proto3" json:"dscp,omitempty"`
	HopLimit             *ywrapper.UintValue   `protobuf:"bytes,523904369,opt,name=hop_limit,json=hopLimit,proto3" json:"hop_limit,omitempty"`
	// Types that are assignable to Protocol:
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_ProtocolOpenconfigpacketmatchtypesipprotocol
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_ProtocolUint64
	Protocol        isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol `protobuf_oneof:"protocol"`
	SourceAddress   *ywrapper.StringValue                                        `protobuf:"bytes,299459214,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	SourceFlowLabel *ywrapper.UintValue                                          `protobuf:"bytes,46925499,opt,name=source_flow_label,json=sourceFlowLabel,proto3" json:"source_flow_label,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 4, 1}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) GetDestinationAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) GetDestinationFlowLabel() *ywrapper.UintValue {
	if x != nil {
		return x.DestinationFlowLabel
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) GetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) GetHopLimit() *ywrapper.UintValue {
	if x != nil {
		return x.HopLimit
	}
	return nil
}

func (m *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) GetProtocol() isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) GetProtocolOpenconfigpacketmatchtypesipprotocol() OpenconfigPacketMatchTypesIPPROTOCOL {
	if x, ok := x.GetProtocol().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_ProtocolOpenconfigpacketmatchtypesipprotocol); ok {
		return x.ProtocolOpenconfigpacketmatchtypesipprotocol
	}
	return OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) GetProtocolUint64() uint64 {
	if x, ok := x.GetProtocol().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_ProtocolUint64); ok {
		return x.ProtocolUint64
	}
	return 0
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) GetSourceFlowLabel() *ywrapper.UintValue {
	if x != nil {
		return x.SourceFlowLabel
	}
	return nil
}

type isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol interface {
	isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol()
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_ProtocolOpenconfigpacketmatchtypesipprotocol struct {
	ProtocolOpenconfigpacketmatchtypesipprotocol OpenconfigPacketMatchTypesIPPROTOCOL `protobuf:"varint,60937310,opt,name=protocol_openconfigpacketmatchtypesipprotocol,json=protocolOpenconfigpacketmatchtypesipprotocol,proto3,enum=openconfig.OpenconfigPacketMatchTypesIPPROTOCOL,oneof"`
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_ProtocolUint64 struct {
	ProtocolUint64 uint64 `protobuf:"varint,132228515,opt,name=protocol_uint64,json=protocolUint64,proto3,oneof"`
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_ProtocolOpenconfigpacketmatchtypesipprotocol) isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol() {
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_ProtocolUint64) isAcl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol() {
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationMac     *ywrapper.StringValue `protobuf:"bytes,256403538,opt,name=destination_mac,json=destinationMac,proto3" json:"destination_mac,omitempty"`
	DestinationMacMask *ywrapper.StringValue `protobuf:"bytes,410258607,opt,name=destination_mac_mask,json=destinationMacMask,proto3" json:"destination_mac_mask,omitempty"`
	// Types that are assignable to Ethertype:
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_EthertypeOpenconfigpacketmatchtypesethertype
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_EthertypeUint64
	Ethertype     isAcl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype `protobuf_oneof:"ethertype"`
	SourceMac     *ywrapper.StringValue                                        `protobuf:"bytes,399757125,opt,name=source_mac,json=sourceMac,proto3" json:"source_mac,omitempty"`
	SourceMacMask *ywrapper.StringValue                                        `protobuf:"bytes,270818178,opt,name=source_mac_mask,json=sourceMacMask,proto3" json:"source_mac_mask,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 5, 0}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) GetDestinationMac() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationMac
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) GetDestinationMacMask() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationMacMask
	}
	return nil
}

func (m *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) GetEthertype() isAcl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype {
	if m != nil {
		return m.Ethertype
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) GetEthertypeOpenconfigpacketmatchtypesethertype() OpenconfigPacketMatchTypesETHERTYPE {
	if x, ok := x.GetEthertype().(*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_EthertypeOpenconfigpacketmatchtypesethertype); ok {
		return x.EthertypeOpenconfigpacketmatchtypesethertype
	}
	return OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_UNSET
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) GetEthertypeUint64() uint64 {
	if x, ok := x.GetEthertype().(*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_EthertypeUint64); ok {
		return x.EthertypeUint64
	}
	return 0
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) GetSourceMac() *ywrapper.StringValue {
	if x != nil {
		return x.SourceMac
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) GetSourceMacMask() *ywrapper.StringValue {
	if x != nil {
		return x.SourceMacMask
	}
	return nil
}

type isAcl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype interface {
	isAcl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype()
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_EthertypeOpenconfigpacketmatchtypesethertype struct {
	EthertypeOpenconfigpacketmatchtypesethertype OpenconfigPacketMatchTypesETHERTYPE `protobuf:"varint,502170089,opt,name=ethertype_openconfigpacketmatchtypesethertype,json=ethertypeOpenconfigpacketmatchtypesethertype,proto3,enum=openconfig.OpenconfigPacketMatchTypesETHERTYPE,oneof"`
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_EthertypeUint64 struct {
	EthertypeUint64 uint64 `protobuf:"varint,138649893,opt,name=ethertype_uint64,json=ethertypeUint64,proto3,oneof"`
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_EthertypeOpenconfigpacketmatchtypesethertype) isAcl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype() {
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_EthertypeUint64) isAcl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype() {
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationMac     *ywrapper.StringValue `protobuf:"bytes,403952649,opt,name=destination_mac,json=destinationMac,proto3" json:"destination_mac,omitempty"`
	DestinationMacMask *ywrapper.StringValue `protobuf:"bytes,272951166,opt,name=destination_mac_mask,json=destinationMacMask,proto3" json:"destination_mac_mask,omitempty"`
	// Types that are assignable to Ethertype:
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_EthertypeOpenconfigpacketmatchtypesethertype
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_EthertypeUint64
	Ethertype     isAcl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype `protobuf_oneof:"ethertype"`
	SourceMac     *ywrapper.StringValue                                       `protobuf:"bytes,9821144,opt,name=source_mac,json=sourceMac,proto3" json:"source_mac,omitempty"`
	SourceMacMask *ywrapper.StringValue                                       `protobuf:"bytes,337242297,opt,name=source_mac_mask,json=sourceMacMask,proto3" json:"source_mac_mask,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 5, 1}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) GetDestinationMac() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationMac
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) GetDestinationMacMask() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationMacMask
	}
	return nil
}

func (m *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) GetEthertype() isAcl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype {
	if m != nil {
		return m.Ethertype
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) GetEthertypeOpenconfigpacketmatchtypesethertype() OpenconfigPacketMatchTypesETHERTYPE {
	if x, ok := x.GetEthertype().(*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_EthertypeOpenconfigpacketmatchtypesethertype); ok {
		return x.EthertypeOpenconfigpacketmatchtypesethertype
	}
	return OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_UNSET
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) GetEthertypeUint64() uint64 {
	if x, ok := x.GetEthertype().(*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_EthertypeUint64); ok {
		return x.EthertypeUint64
	}
	return 0
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) GetSourceMac() *ywrapper.StringValue {
	if x != nil {
		return x.SourceMac
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) GetSourceMacMask() *ywrapper.StringValue {
	if x != nil {
		return x.SourceMacMask
	}
	return nil
}

type isAcl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype interface {
	isAcl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype()
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_EthertypeOpenconfigpacketmatchtypesethertype struct {
	EthertypeOpenconfigpacketmatchtypesethertype OpenconfigPacketMatchTypesETHERTYPE `protobuf:"varint,50199482,opt,name=ethertype_openconfigpacketmatchtypesethertype,json=ethertypeOpenconfigpacketmatchtypesethertype,proto3,enum=openconfig.OpenconfigPacketMatchTypesETHERTYPE,oneof"`
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_EthertypeUint64 struct {
	EthertypeUint64 uint64 `protobuf:"varint,67964624,opt,name=ethertype_uint64,json=ethertypeUint64,proto3,oneof"`
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_EthertypeOpenconfigpacketmatchtypesethertype) isAcl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype() {
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_EthertypeUint64) isAcl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype() {
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DestinationPort:
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortDestinationport
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortString
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortUint64
	DestinationPort isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort `protobuf_oneof:"destination_port"`
	// Types that are assignable to SourcePort:
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortSourceport
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortString
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortUint64
	SourcePort isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort `protobuf_oneof:"source_port"`
	TcpFlags   []OpenconfigPacketMatchTypesTCPFLAGS                                 `protobuf:"varint,77057068,rep,packed,name=tcp_flags,json=tcpFlags,proto3,enum=openconfig.OpenconfigPacketMatchTypesTCPFLAGS" json:"tcp_flags,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 7, 0}
}

func (m *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) GetDestinationPort() isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort {
	if m != nil {
		return m.DestinationPort
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) GetDestinationPortDestinationport() Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort {
	if x, ok := x.GetDestinationPort().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortDestinationport); ok {
		return x.DestinationPortDestinationport
	}
	return Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DESTINATIONPORT_UNSET
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) GetDestinationPortString() string {
	if x, ok := x.GetDestinationPort().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortString); ok {
		return x.DestinationPortString
	}
	return ""
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) GetDestinationPortUint64() uint64 {
	if x, ok := x.GetDestinationPort().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortUint64); ok {
		return x.DestinationPortUint64
	}
	return 0
}

func (m *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) GetSourcePort() isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort {
	if m != nil {
		return m.SourcePort
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) GetSourcePortSourceport() Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort {
	if x, ok := x.GetSourcePort().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortSourceport); ok {
		return x.SourcePortSourceport
	}
	return Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SOURCEPORT_UNSET
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) GetSourcePortString() string {
	if x, ok := x.GetSourcePort().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortString); ok {
		return x.SourcePortString
	}
	return ""
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) GetSourcePortUint64() uint64 {
	if x, ok := x.GetSourcePort().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortUint64); ok {
		return x.SourcePortUint64
	}
	return 0
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) GetTcpFlags() []OpenconfigPacketMatchTypesTCPFLAGS {
	if x != nil {
		return x.TcpFlags
	}
	return nil
}

type isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort interface {
	isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort()
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortDestinationport struct {
	DestinationPortDestinationport Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort `protobuf:"varint,184575989,opt,name=destination_port_destinationport,json=destinationPortDestinationport,proto3,enum=openconfig.Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort,oneof"`
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortString struct {
	DestinationPortString string `protobuf:"bytes,353749975,opt,name=destination_port_string,json=destinationPortString,proto3,oneof"`
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortUint64 struct {
	DestinationPortUint64 uint64 `protobuf:"varint,203687850,opt,name=destination_port_uint64,json=destinationPortUint64,proto3,oneof"`
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortDestinationport) isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort() {
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortString) isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort() {
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortUint64) isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort() {
}

type isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort interface {
	isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort()
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortSourceport struct {
	SourcePortSourceport Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort `protobuf:"varint,480331171,opt,name=source_port_sourceport,json=sourcePortSourceport,proto3,enum=openconfig.Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort,oneof"`
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortString struct {
	SourcePortString string `protobuf:"bytes,147714378,opt,name=source_port_string,json=sourcePortString,proto3,oneof"`
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortUint64 struct {
	SourcePortUint64 uint64 `protobuf:"varint,455918283,opt,name=source_port_uint64,json=sourcePortUint64,proto3,oneof"`
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortSourceport) isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort() {
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortString) isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort() {
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortUint64) isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort() {
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DestinationPort:
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortDestinationport
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortString
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortUint64
	DestinationPort isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort `protobuf_oneof:"destination_port"`
	// Types that are assignable to SourcePort:
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortSourceport
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortString
	//	*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortUint64
	SourcePort isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort `protobuf_oneof:"source_port"`
	TcpFlags   []OpenconfigPacketMatchTypesTCPFLAGS                                `protobuf:"varint,241870285,rep,packed,name=tcp_flags,json=tcpFlags,proto3,enum=openconfig.OpenconfigPacketMatchTypesTCPFLAGS" json:"tcp_flags,omitempty"`
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) Reset() {
	*x = Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) ProtoMessage() {}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State.ProtoReflect.Descriptor instead.
func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 7, 1}
}

func (m *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) GetDestinationPort() isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort {
	if m != nil {
		return m.DestinationPort
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) GetDestinationPortDestinationport() Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort {
	if x, ok := x.GetDestinationPort().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortDestinationport); ok {
		return x.DestinationPortDestinationport
	}
	return Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DESTINATIONPORT_UNSET
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) GetDestinationPortString() string {
	if x, ok := x.GetDestinationPort().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortString); ok {
		return x.DestinationPortString
	}
	return ""
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) GetDestinationPortUint64() uint64 {
	if x, ok := x.GetDestinationPort().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortUint64); ok {
		return x.DestinationPortUint64
	}
	return 0
}

func (m *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) GetSourcePort() isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort {
	if m != nil {
		return m.SourcePort
	}
	return nil
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) GetSourcePortSourceport() Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort {
	if x, ok := x.GetSourcePort().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortSourceport); ok {
		return x.SourcePortSourceport
	}
	return Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SOURCEPORT_UNSET
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) GetSourcePortString() string {
	if x, ok := x.GetSourcePort().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortString); ok {
		return x.SourcePortString
	}
	return ""
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) GetSourcePortUint64() uint64 {
	if x, ok := x.GetSourcePort().(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortUint64); ok {
		return x.SourcePortUint64
	}
	return 0
}

func (x *Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) GetTcpFlags() []OpenconfigPacketMatchTypesTCPFLAGS {
	if x != nil {
		return x.TcpFlags
	}
	return nil
}

type isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort interface {
	isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort()
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortDestinationport struct {
	DestinationPortDestinationport Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort `protobuf:"varint,219003282,opt,name=destination_port_destinationport,json=destinationPortDestinationport,proto3,enum=openconfig.Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort,oneof"`
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortString struct {
	DestinationPortString string `protobuf:"bytes,467205198,opt,name=destination_port_string,json=destinationPortString,proto3,oneof"`
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortUint64 struct {
	DestinationPortUint64 uint64 `protobuf:"varint,402564303,opt,name=destination_port_uint64,json=destinationPortUint64,proto3,oneof"`
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortDestinationport) isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort() {
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortString) isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort() {
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortUint64) isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort() {
}

type isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort interface {
	isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort()
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortSourceport struct {
	SourcePortSourceport Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort `protobuf:"varint,88930920,opt,name=source_port_sourceport,json=sourcePortSourceport,proto3,enum=openconfig.Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort,oneof"`
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortString struct {
	SourcePortString string `protobuf:"bytes,115058633,opt,name=source_port_string,json=sourcePortString,proto3,oneof"`
}

type Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortUint64 struct {
	SourcePortUint64 uint64 `protobuf:"varint,147662636,opt,name=source_port_uint64,json=sourcePortUint64,proto3,oneof"`
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortSourceport) isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort() {
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortString) isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort() {
}

func (*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortUint64) isAcl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort() {
}

type Acl_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config         *Acl_Interfaces_Interface_Config         `protobuf:"bytes,39814432,opt,name=config,proto3" json:"config,omitempty"`
	EgressAclSets  *Acl_Interfaces_Interface_EgressAclSets  `protobuf:"bytes,461903946,opt,name=egress_acl_sets,json=egressAclSets,proto3" json:"egress_acl_sets,omitempty"`
	IngressAclSets *Acl_Interfaces_Interface_IngressAclSets `protobuf:"bytes,149051962,opt,name=ingress_acl_sets,json=ingressAclSets,proto3" json:"ingress_acl_sets,omitempty"`
	InterfaceRef   *Acl_Interfaces_Interface_InterfaceRef   `protobuf:"bytes,216230351,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	State          *Acl_Interfaces_Interface_State          `protobuf:"bytes,154100377,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl_Interfaces_Interface) Reset() {
	*x = Acl_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface) ProtoMessage() {}

func (x *Acl_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Acl_Interfaces_Interface) GetConfig() *Acl_Interfaces_Interface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Acl_Interfaces_Interface) GetEgressAclSets() *Acl_Interfaces_Interface_EgressAclSets {
	if x != nil {
		return x.EgressAclSets
	}
	return nil
}

func (x *Acl_Interfaces_Interface) GetIngressAclSets() *Acl_Interfaces_Interface_IngressAclSets {
	if x != nil {
		return x.IngressAclSets
	}
	return nil
}

func (x *Acl_Interfaces_Interface) GetInterfaceRef() *Acl_Interfaces_Interface_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *Acl_Interfaces_Interface) GetState() *Acl_Interfaces_Interface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_Interfaces_InterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Interface *Acl_Interfaces_Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Acl_Interfaces_InterfaceKey) Reset() {
	*x = Acl_Interfaces_InterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_InterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_InterfaceKey) ProtoMessage() {}

func (x *Acl_Interfaces_InterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_InterfaceKey.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_InterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *Acl_Interfaces_InterfaceKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Acl_Interfaces_InterfaceKey) GetInterface() *Acl_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Acl_Interfaces_Interface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ywrapper.StringValue `protobuf:"bytes,128384696,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Acl_Interfaces_Interface_Config) Reset() {
	*x = Acl_Interfaces_Interface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_Config) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_Config.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (x *Acl_Interfaces_Interface_Config) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type Acl_Interfaces_Interface_EgressAclSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EgressAclSet []*Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey `protobuf:"bytes,98207108,rep,name=egress_acl_set,json=egressAclSet,proto3" json:"egress_acl_set,omitempty"`
}

func (x *Acl_Interfaces_Interface_EgressAclSets) Reset() {
	*x = Acl_Interfaces_Interface_EgressAclSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_EgressAclSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_EgressAclSets) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_EgressAclSets) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_EgressAclSets.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_EgressAclSets) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 1}
}

func (x *Acl_Interfaces_Interface_EgressAclSets) GetEgressAclSet() []*Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey {
	if x != nil {
		return x.EgressAclSet
	}
	return nil
}

type Acl_Interfaces_Interface_IngressAclSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngressAclSet []*Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey `protobuf:"bytes,162661714,rep,name=ingress_acl_set,json=ingressAclSet,proto3" json:"ingress_acl_set,omitempty"`
}

func (x *Acl_Interfaces_Interface_IngressAclSets) Reset() {
	*x = Acl_Interfaces_Interface_IngressAclSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_IngressAclSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_IngressAclSets) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_IngressAclSets) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_IngressAclSets.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_IngressAclSets) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 2}
}

func (x *Acl_Interfaces_Interface_IngressAclSets) GetIngressAclSet() []*Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey {
	if x != nil {
		return x.IngressAclSet
	}
	return nil
}

type Acl_Interfaces_Interface_InterfaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Acl_Interfaces_Interface_InterfaceRef_Config `protobuf:"bytes,412022704,opt,name=config,proto3" json:"config,omitempty"`
	State  *Acl_Interfaces_Interface_InterfaceRef_State  `protobuf:"bytes,161770793,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl_Interfaces_Interface_InterfaceRef) Reset() {
	*x = Acl_Interfaces_Interface_InterfaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_InterfaceRef) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_InterfaceRef.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 3}
}

func (x *Acl_Interfaces_Interface_InterfaceRef) GetConfig() *Acl_Interfaces_Interface_InterfaceRef_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Acl_Interfaces_Interface_InterfaceRef) GetState() *Acl_Interfaces_Interface_InterfaceRef_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_Interfaces_Interface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ywrapper.StringValue `protobuf:"bytes,92757579,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Acl_Interfaces_Interface_State) Reset() {
	*x = Acl_Interfaces_Interface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_State) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_State.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 4}
}

func (x *Acl_Interfaces_Interface_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type Acl_Interfaces_Interface_EgressAclSets_EgressAclSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclEntries *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries `protobuf:"bytes,441678586,opt,name=acl_entries,json=aclEntries,proto3" json:"acl_entries,omitempty"`
	Config     *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config     `protobuf:"bytes,293659945,opt,name=config,proto3" json:"config,omitempty"`
	State      *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State      `protobuf:"bytes,206226686,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) Reset() {
	*x = Acl_Interfaces_Interface_EgressAclSets_EgressAclSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_EgressAclSets_EgressAclSet.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 1, 0}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) GetAclEntries() *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries {
	if x != nil {
		return x.AclEntries
	}
	return nil
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) GetConfig() *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) GetState() *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetName      string                                               `protobuf:"bytes,1,opt,name=set_name,json=setName,proto3" json:"set_name,omitempty"`
	Type         OpenconfigAclACLTYPE                                 `protobuf:"varint,2,opt,name=type,proto3,enum=openconfig.OpenconfigAclACLTYPE" json:"type,omitempty"`
	EgressAclSet *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet `protobuf:"bytes,3,opt,name=egress_acl_set,json=egressAclSet,proto3" json:"egress_acl_set,omitempty"`
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey) Reset() {
	*x = Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 1, 1}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey) GetSetName() string {
	if x != nil {
		return x.SetName
	}
	return ""
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey) GetType() OpenconfigAclACLTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_UNSET
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey) GetEgressAclSet() *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet {
	if x != nil {
		return x.EgressAclSet
	}
	return nil
}

type Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclEntry []*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntryKey `protobuf:"bytes,78393968,rep,name=acl_entry,json=aclEntry,proto3" json:"acl_entry,omitempty"`
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) Reset() {
	*x = Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 1, 0, 0}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) GetAclEntry() []*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntryKey {
	if x != nil {
		return x.AclEntry
	}
	return nil
}

type Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetName *ywrapper.StringValue `protobuf:"bytes,261331952,opt,name=set_name,json=setName,proto3" json:"set_name,omitempty"`
	Type    OpenconfigAclACLTYPE  `protobuf:"varint,326671756,opt,name=type,proto3,enum=openconfig.OpenconfigAclACLTYPE" json:"type,omitempty"`
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) Reset() {
	*x = Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 1, 0, 1}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) GetSetName() *ywrapper.StringValue {
	if x != nil {
		return x.SetName
	}
	return nil
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) GetType() OpenconfigAclACLTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_UNSET
}

type Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetName *ywrapper.StringValue `protobuf:"bytes,273361801,opt,name=set_name,json=setName,proto3" json:"set_name,omitempty"`
	Type    OpenconfigAclACLTYPE  `protobuf:"varint,226751853,opt,name=type,proto3,enum=openconfig.OpenconfigAclACLTYPE" json:"type,omitempty"`
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) Reset() {
	*x = Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 1, 0, 2}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) GetSetName() *ywrapper.StringValue {
	if x != nil {
		return x.SetName
	}
	return nil
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) GetType() OpenconfigAclACLTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_UNSET
}

type Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State `protobuf:"bytes,236921978,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) Reset() {
	*x = Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 1, 0, 0, 0}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) GetState() *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceId uint64                                                                   `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	AclEntry   *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry `protobuf:"bytes,2,opt,name=acl_entry,json=aclEntry,proto3" json:"acl_entry,omitempty"`
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntryKey) Reset() {
	*x = Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntryKey) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntryKey.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntryKey) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 1, 0, 0, 1}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntryKey) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntryKey) GetAclEntry() *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry {
	if x != nil {
		return x.AclEntry
	}
	return nil
}

type Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchedOctets  *ywrapper.UintValue `protobuf:"bytes,270373376,opt,name=matched_octets,json=matchedOctets,proto3" json:"matched_octets,omitempty"`
	MatchedPackets *ywrapper.UintValue `protobuf:"bytes,425026435,opt,name=matched_packets,json=matchedPackets,proto3" json:"matched_packets,omitempty"`
	SequenceId     *ywrapper.UintValue `protobuf:"bytes,475465976,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) Reset() {
	*x = Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) ProtoMessage() {
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 1, 0, 0, 0, 0}
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) GetMatchedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.MatchedOctets
	}
	return nil
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) GetMatchedPackets() *ywrapper.UintValue {
	if x != nil {
		return x.MatchedPackets
	}
	return nil
}

func (x *Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) GetSequenceId() *ywrapper.UintValue {
	if x != nil {
		return x.SequenceId
	}
	return nil
}

type Acl_Interfaces_Interface_IngressAclSets_IngressAclSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclEntries *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries `protobuf:"bytes,211050772,opt,name=acl_entries,json=aclEntries,proto3" json:"acl_entries,omitempty"`
	Config     *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config     `protobuf:"bytes,185162259,opt,name=config,proto3" json:"config,omitempty"`
	State      *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State      `protobuf:"bytes,179158516,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) Reset() {
	*x = Acl_Interfaces_Interface_IngressAclSets_IngressAclSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_IngressAclSets_IngressAclSet.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 2, 0}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) GetAclEntries() *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries {
	if x != nil {
		return x.AclEntries
	}
	return nil
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) GetConfig() *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) GetState() *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetName       string                                                 `protobuf:"bytes,1,opt,name=set_name,json=setName,proto3" json:"set_name,omitempty"`
	Type          OpenconfigAclACLTYPE                                   `protobuf:"varint,2,opt,name=type,proto3,enum=openconfig.OpenconfigAclACLTYPE" json:"type,omitempty"`
	IngressAclSet *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet `protobuf:"bytes,3,opt,name=ingress_acl_set,json=ingressAclSet,proto3" json:"ingress_acl_set,omitempty"`
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey) Reset() {
	*x = Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 2, 1}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey) GetSetName() string {
	if x != nil {
		return x.SetName
	}
	return ""
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey) GetType() OpenconfigAclACLTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_UNSET
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey) GetIngressAclSet() *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet {
	if x != nil {
		return x.IngressAclSet
	}
	return nil
}

type Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclEntry []*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntryKey `protobuf:"bytes,497293554,rep,name=acl_entry,json=aclEntry,proto3" json:"acl_entry,omitempty"`
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) Reset() {
	*x = Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 2, 0, 0}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) GetAclEntry() []*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntryKey {
	if x != nil {
		return x.AclEntry
	}
	return nil
}

type Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetName *ywrapper.StringValue `protobuf:"bytes,393066506,opt,name=set_name,json=setName,proto3" json:"set_name,omitempty"`
	Type    OpenconfigAclACLTYPE  `protobuf:"varint,246920790,opt,name=type,proto3,enum=openconfig.OpenconfigAclACLTYPE" json:"type,omitempty"`
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) Reset() {
	*x = Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 2, 0, 1}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) GetSetName() *ywrapper.StringValue {
	if x != nil {
		return x.SetName
	}
	return nil
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) GetType() OpenconfigAclACLTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_UNSET
}

type Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetName *ywrapper.StringValue `protobuf:"bytes,435077559,opt,name=set_name,json=setName,proto3" json:"set_name,omitempty"`
	Type    OpenconfigAclACLTYPE  `protobuf:"varint,276970363,opt,name=type,proto3,enum=openconfig.OpenconfigAclACLTYPE" json:"type,omitempty"`
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) Reset() {
	*x = Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 2, 0, 2}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) GetSetName() *ywrapper.StringValue {
	if x != nil {
		return x.SetName
	}
	return nil
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) GetType() OpenconfigAclACLTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_UNSET
}

type Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State `protobuf:"bytes,29088020,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) Reset() {
	*x = Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 2, 0, 0, 0}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) GetState() *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceId uint64                                                                     `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	AclEntry   *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry `protobuf:"bytes,2,opt,name=acl_entry,json=aclEntry,proto3" json:"acl_entry,omitempty"`
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntryKey) Reset() {
	*x = Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntryKey) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntryKey.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntryKey) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 2, 0, 0, 1}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntryKey) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntryKey) GetAclEntry() *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry {
	if x != nil {
		return x.AclEntry
	}
	return nil
}

type Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchedOctets  *ywrapper.UintValue `protobuf:"bytes,253417282,opt,name=matched_octets,json=matchedOctets,proto3" json:"matched_octets,omitempty"`
	MatchedPackets *ywrapper.UintValue `protobuf:"bytes,115163105,opt,name=matched_packets,json=matchedPackets,proto3" json:"matched_packets,omitempty"`
	SequenceId     *ywrapper.UintValue `protobuf:"bytes,198617442,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) Reset() {
	*x = Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) ProtoMessage() {
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 2, 0, 0, 0, 0}
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) GetMatchedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.MatchedOctets
	}
	return nil
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) GetMatchedPackets() *ywrapper.UintValue {
	if x != nil {
		return x.MatchedPackets
	}
	return nil
}

func (x *Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) GetSequenceId() *ywrapper.UintValue {
	if x != nil {
		return x.SequenceId
	}
	return nil
}

type Acl_Interfaces_Interface_InterfaceRef_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,510701464,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,223813592,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Acl_Interfaces_Interface_InterfaceRef_Config) Reset() {
	*x = Acl_Interfaces_Interface_InterfaceRef_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_InterfaceRef_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_InterfaceRef_Config) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_InterfaceRef_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_InterfaceRef_Config.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_InterfaceRef_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 3, 0}
}

func (x *Acl_Interfaces_Interface_InterfaceRef_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Acl_Interfaces_Interface_InterfaceRef_Config) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Acl_Interfaces_Interface_InterfaceRef_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,433284309,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,117660727,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Acl_Interfaces_Interface_InterfaceRef_State) Reset() {
	*x = Acl_Interfaces_Interface_InterfaceRef_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_acl_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acl_Interfaces_Interface_InterfaceRef_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl_Interfaces_Interface_InterfaceRef_State) ProtoMessage() {}

func (x *Acl_Interfaces_Interface_InterfaceRef_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_acl_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl_Interfaces_Interface_InterfaceRef_State.ProtoReflect.Descriptor instead.
func (*Acl_Interfaces_Interface_InterfaceRef_State) Descriptor() ([]byte, []int) {
	return file_openconfig_acl_proto_rawDescGZIP(), []int{0, 2, 0, 3, 1}
}

func (x *Acl_Interfaces_Interface_InterfaceRef_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Acl_Interfaces_Interface_InterfaceRef_State) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

var File_openconfig_acl_proto protoreflect.FileDescriptor

var file_openconfig_acl_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x63, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0xae, 0x01, 0x0a, 0x03, 0x41, 0x63, 0x6c, 0x12,
	0x48, 0x0a, 0x08, 0x61, 0x63, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0xad, 0xa7, 0x8b, 0xc7,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x42, 0x10,
	0x82, 0x41, 0x0d, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x07, 0x61, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xb1, 0xbe, 0xad, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x0e, 0x82, 0x41, 0x0b, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xbf, 0x8f, 0xe2, 0x49, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42,
	0x12, 0x82, 0x41, 0x0f, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa6, 0x97, 0xfe, 0x9d, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x82, 0x41, 0x0a, 0x2f, 0x61,
	0x63, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0xa4, 0x70, 0x0a, 0x07, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x07, 0x61,
	0x63, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xbb, 0xea, 0xab, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c,
	0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x42, 0x18, 0x82, 0x41, 0x15, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x63,
	0x6c, 0x53, 0x65, 0x74, 0x1a, 0xf0, 0x6d, 0x0a, 0x06, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x12,
	0x73, 0x0a, 0x0b, 0x61, 0x63, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0xb5,
	0xa2, 0xa6, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x63, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xec,
	0xef, 0x83, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1f,
	0x82, 0x41, 0x1c, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xe5, 0xe7, 0xd1, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe0, 0x66, 0x0a, 0x0a, 0x41, 0x63, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x61, 0x63, 0x6c, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0xe7, 0xc7, 0xeb, 0xfd, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e,
	0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41,
	0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a,
	0x8a, 0x64, 0x0a, 0x08, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x8f, 0x01, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe7, 0x83, 0xf1, 0x7e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65,
	0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x36, 0x82,
	0x41, 0x33, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8b,
	0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf8, 0xfc, 0xa0, 0x60, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53,
	0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x35, 0x82,
	0x41, 0x32, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xae, 0x01, 0x0a,
	0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0xc8, 0xd7, 0xda, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x3e, 0x82,
	0x41, 0x3b, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x83, 0x01,
	0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0xbf, 0xc5, 0xa2, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c,
	0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e,
	0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x61, 0x63,
	0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x52, 0x04, 0x69,
	0x70, 0x76, 0x34, 0x12, 0x83, 0x01, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0xbd, 0xc5, 0xa2,
	0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x42, 0x33,
	0x82, 0x41, 0x30, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x7c, 0x0a, 0x02, 0x6c, 0x32, 0x18,
	0xa4, 0x80, 0x8a, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x32,
	0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x2f, 0x6c, 0x32, 0x52, 0x02, 0x6c, 0x32, 0x12, 0x88, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x91, 0xbf, 0xc6, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c,
	0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0xa9, 0x8e, 0xc4, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x61, 0x63, 0x6c,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xd4, 0x07, 0x0a,
	0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xf8, 0xd0, 0x9d, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41,
	0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x98, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x91, 0x9b, 0xe0, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c,
	0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3c, 0x82,
	0x41, 0x39, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xc7, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xab, 0x01,
	0x0a, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xf1, 0x97, 0xe4, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x63,
	0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8e, 0x01, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x92, 0x8b, 0xab, 0x4a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c, 0x4c, 0x4f,
	0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x63, 0x6c,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x67, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc4, 0x02, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xac, 0xfe, 0x9a,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c,
	0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x8e, 0x01, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x81, 0x81, 0xd1, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x41, 0x63, 0x6c, 0x4c, 0x4f, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x42,
	0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f,
	0x67, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x84, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x93, 0x8c,
	0xaa, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41,
	0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a,
	0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xa6, 0xef,
	0xf0, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e,
	0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0a,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0xe7, 0x0c, 0x0a, 0x0e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0xab, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xad, 0xda, 0xaf, 0xff, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53,
	0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x45, 0x82, 0x41,
	0x42, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc5, 0x01, 0x0a, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0xa8, 0xf8,
	0xd1, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x6c,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x72, 0x65, 0x66, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x66, 0x12, 0xa7, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe2, 0xe7,
	0x85, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xa1, 0x08, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0xc6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x8d, 0xbe, 0xe2, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41,
	0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72,
	0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xc2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc2, 0xf4, 0x80, 0xe1,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f,
	0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc1, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x96, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0xf9, 0xaf, 0xfb, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xbb, 0x91, 0xa5, 0x8a,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f,
	0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xbe, 0x02, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0xee, 0xc0, 0xd9, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65,
	0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x9c, 0x01, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x8a, 0x93,
	0xe9, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41,
	0x5c, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x07, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x9a, 0x0e, 0x0a, 0x04, 0x49, 0x70, 0x76, 0x34, 0x12, 0x95, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x80, 0xe9, 0xaa, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65,
	0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x92, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xf9, 0xdc, 0xa1, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63,
	0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf2, 0x05, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x82, 0x86,
	0xc4, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82,
	0x41, 0x4b, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x6b, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0xf1, 0xa6, 0xe6, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x6c,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x64, 0x73, 0x63, 0x70, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x7a,
	0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xb6, 0xe1, 0xbc, 0xeb,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f,
	0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x6f, 0x70, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x08, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0xa1, 0xbe, 0xc2,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x50, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x48, 0x00, 0x52, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x70, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x80, 0xf9, 0xa2, 0x6e, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xc7, 0xaa, 0xb1, 0xdb, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61,
	0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a,
	0xef, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x13, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0xbb, 0x8d, 0x91, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x6a, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0x96, 0xcd, 0xe7,
	0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f,
	0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73, 0x63, 0x70, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70,
	0x12, 0x79, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xfb, 0x9b,
	0x84, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41,
	0x40, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f, 0x70, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0xa4, 0x8e,
	0xe9, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49,
	0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x48, 0x00, 0x52, 0x2c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69,
	0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2d, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xd1, 0xcb, 0xde,
	0xeb, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x8a, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x94, 0xc6, 0x9f, 0xdb,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41,
	0x45, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x1a, 0x84, 0x13, 0x0a, 0x04, 0x49, 0x70, 0x76, 0x36, 0x12, 0x96, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf2, 0xcb, 0xc8, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c,
	0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e,
	0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x3a, 0x82, 0x41, 0x37, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x91, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xef, 0xc5,
	0xa9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa9, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xbc, 0xa6, 0xe3, 0x5c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f,
	0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x9f,
	0x01, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x99, 0xf7, 0x9c, 0x75, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x6c,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x6c, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0xeb, 0xa8, 0xb9, 0xdf, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x6c,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x64, 0x73, 0x63, 0x70, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x79,
	0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x90, 0xf9, 0xbe, 0x31,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61,
	0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x6f, 0x70, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x08, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0xb7, 0xdd, 0xdc, 0xd1,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x50, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x48, 0x00, 0x52, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x70, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2d, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x96, 0xf9, 0xa0, 0xdf, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x8a, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xad, 0x94, 0xa4, 0x55, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61,
	0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0xbe, 0xff, 0xdf, 0xdf, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63,
	0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x66, 0x6c, 0x6f, 0x77,
	0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x1a, 0xa2, 0x08, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x98, 0x01,
	0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xd1, 0xdd, 0x84, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x16, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x82, 0x93, 0xb3, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x6b, 0x0a, 0x04, 0x64, 0x73,
	0x63, 0x70, 0x18, 0xc4, 0xaa, 0xa2, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73, 0x63,
	0x70, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x79, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0xf1, 0xca, 0xe8, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68,
	0x6f, 0x70, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0xde, 0xa8, 0x87, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x48,
	0x00, 0x52, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0xa3, 0xcb, 0x86, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x8a, 0x01,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x8e, 0xc5, 0xe5, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x11, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0xbb, 0x8d, 0xb0, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b,
	0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0xdc, 0x0e, 0x0a, 0x02, 0x4c, 0x32, 0x12,
	0x91, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc9, 0xd1, 0xd2, 0x6d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c,
	0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41,
	0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x2f, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x8d, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9e, 0x88,
	0xd1, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x32, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x6c, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x9a, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8b,
	0x01, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x63, 0x18, 0xd2, 0xd0, 0xa1, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2f, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x63, 0x52, 0x0e, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x63, 0x12, 0x9a, 0x01, 0x0a,
	0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x63,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0xaf, 0x99, 0xd0, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x63, 0x6c, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x63,
	0x2d, 0x6d, 0x61, 0x73, 0x6b, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x63, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x9a, 0x01, 0x0a, 0x2d, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0xe9, 0x83, 0xba, 0xef,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x48, 0x00, 0x52, 0x2c, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x79, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xa5, 0xc2, 0x8e, 0x42, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x7d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x63, 0x18, 0xc5, 0x9e, 0xcf, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6d, 0x61, 0x63, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x61, 0x63, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x82, 0xb7, 0x91, 0x81, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f,
	0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x6c, 0x32, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6d, 0x61, 0x63, 0x2d,
	0x6d, 0x61, 0x73, 0x6b, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0x94, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x89,
	0xa8, 0xcf, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f,
	0x6c, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x63, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x63, 0x12, 0x99, 0x01, 0x0a, 0x14, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0xfe, 0xce, 0x93, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2f, 0x6c, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x61, 0x73, 0x6b,
	0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x63,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x99, 0x01, 0x0a, 0x2d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0xba, 0xf7, 0xf7, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x48, 0x00, 0x52, 0x2c, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0xd0, 0x9d, 0xb4, 0x20, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x7b, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0xd8,
	0xb7, 0xd7, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42,
	0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x6c,
	0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6d,
	0x61, 0x63, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x12, 0x8a, 0x01,
	0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0xb9, 0xd1, 0xe7, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2f, 0x6c, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x61, 0x73, 0x6b, 0x52, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x8f, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x7d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xfa, 0x96, 0xb3, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x83, 0x01, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0xc9, 0xeb, 0xba, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xd4, 0xda, 0xfd, 0x3a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63,
	0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x0e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x79,
	0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x8b, 0x9b,
	0x9c, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d,
	0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0a, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0xa0, 0x10, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x9e, 0xda, 0xdf, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c,
	0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x8b, 0xab, 0xfb, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63,
	0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xea, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xa2, 0x01, 0x0a, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xf5, 0xcf, 0x81, 0x58, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74,
	0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0xd7, 0x97, 0xd7, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0xaa, 0x8f, 0x90, 0x61, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x8a, 0x01, 0x0a, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xa3, 0x8b,
	0x85, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x01, 0x52, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x31, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xca, 0xe2, 0xb7, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x32, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xcb, 0x85, 0xb3, 0xd9, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x01, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x99, 0x01, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0xac, 0x98, 0xdf, 0x24, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x42, 0x49, 0x82,
	0x41, 0x46, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74,
	0x63, 0x70, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x08, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x22, 0x4d, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x13, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4e,
	0x59, 0x22, 0x3e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x0e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4e,
	0x59, 0x42, 0x12, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x1a, 0xe5, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa1,
	0x01, 0x0a, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x92, 0xf3, 0xb6, 0x68, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63,
	0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x1e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x3c, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xce, 0xf8,
	0xe3, 0xde, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x3c, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xcf, 0xc9, 0xfa, 0xbf,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x88,
	0x01, 0x0a, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xe8, 0xf4, 0xb3, 0x2a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53,
	0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x48, 0x01, 0x52, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0xc9, 0xcf, 0xee, 0x36, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x12,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0xac, 0xce, 0xb4, 0x46, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x10, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x98, 0x01, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0xcd, 0xcb,
	0xaa, 0x73, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x43,
	0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x63, 0x6c, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x63, 0x70, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x52, 0x08, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x4d, 0x0a, 0x0f, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a,
	0x15, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x13, 0x44, 0x45, 0x53, 0x54,
	0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4e, 0x59, 0x10,
	0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4e, 0x59, 0x22, 0x3e, 0x0a, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x0e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4e, 0x59, 0x10,
	0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4e, 0x59, 0x42, 0x12, 0x0a, 0x10, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xbb, 0x01, 0x0a,
	0x0b, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x5b, 0x0a, 0x0b,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0a, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x61, 0x63, 0x6c,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63,
	0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x61, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xa6, 0x02, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x68, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd7, 0x8f, 0x93, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x52, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xae, 0xd7, 0xc4, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x61, 0x63, 0x6c,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xa3, 0xb6, 0x9d, 0xe0,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c,
	0x41, 0x43, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x61, 0x63, 0x6c,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0xa1, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x66, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9e, 0xc5, 0x8e,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41,
	0x27, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa1, 0xdd,
	0xa1, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23,
	0x82, 0x41, 0x20, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0xa8, 0xaa, 0xbc, 0x7c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x41, 0x63, 0x6c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x42, 0x23, 0x82, 0x41,
	0x20, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xcc, 0x01, 0x0a, 0x09, 0x41, 0x63, 0x6c, 0x53,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63,
	0x6c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x61, 0x63,
	0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a,
	0x07, 0x61, 0x63, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e,
	0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x06,
	0x61, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x8d, 0x3b, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x67, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xdf, 0xe9, 0xe4,
	0xdb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x42,
	0x1c, 0x82, 0x41, 0x19, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x8f, 0x39, 0x0a, 0x09, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xa0, 0x8a, 0xfe, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x61, 0x63, 0x6c, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x63, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0xca, 0xb0, 0xa0, 0xdc, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x6c, 0x53, 0x65, 0x74, 0x73, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x52, 0x0d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65,
	0x74, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x63, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0xba, 0xb4, 0x89, 0x47, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x6c, 0x53, 0x65, 0x74, 0x73, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c,
	0x53, 0x65, 0x74, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0xcf, 0xd3, 0x8d, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x67, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x99, 0xc5, 0xbd, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f,
	0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x5a, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x50, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xb8, 0xfd, 0x9b, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x1a, 0xfe, 0x15, 0x0a, 0x0d, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53,
	0x65, 0x74, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x0e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x63, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x84, 0x8b, 0xea, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74,
	0x52, 0x0c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x1a, 0xed,
	0x11, 0x0a, 0x0c, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x12,
	0xb8, 0x01, 0x0a, 0x0b, 0x61, 0x63, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0xfa, 0xf5, 0xcd, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a,
	0x61, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa9, 0xca, 0x83, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x6c,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xa1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfe, 0x89,
	0xab, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x41, 0x82,
	0x41, 0x3e, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb4, 0x09, 0x0a, 0x0a, 0x41, 0x63, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x09, 0x61, 0x63, 0x6c, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0xf0, 0xe4, 0xb0, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74,
	0x73, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41,
	0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x63, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x1a, 0xd7, 0x05, 0x0a, 0x08, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0xcb, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfa, 0xc8, 0xfc, 0x70, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c,
	0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41,
	0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x57, 0x82,
	0x41, 0x54, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xfc, 0x03,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x80, 0xa4, 0xf6, 0x80, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x61,
	0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x12, 0xa9, 0x01, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x83, 0xc7, 0xd5, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x0e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x9d, 0x01, 0x0a,
	0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xf8, 0x91, 0xdc,
	0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60,
	0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x64,
	0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0xff, 0x01, 0x0a,
	0x0b, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x7e, 0x0a, 0x0b,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x64,
	0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x09,
	0x61, 0x63, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53,
	0x65, 0x74, 0x73, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74,
	0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x8f,
	0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xf0, 0xb7, 0xce, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61, 0x63, 0x6c, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x81, 0x01, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x8c, 0xbb, 0xe2, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50,
	0x45, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0x8b, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x89, 0xd7, 0xac, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61, 0x63,
	0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63,
	0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63,
	0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xed, 0xea, 0x8f, 0x6c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50, 0x45,
	0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xd1,
	0x02, 0x0a, 0x0f, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x5f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x76, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c, 0x41, 0x43, 0x4c, 0x54,
	0x59, 0x50, 0x45, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x6c, 0x53, 0x65, 0x74, 0x52, 0x0c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53,
	0x65, 0x74, 0x1a, 0xb4, 0x16, 0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x6c, 0x53, 0x65, 0x74, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x0f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xd2, 0x8a, 0xc8, 0x4d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x63, 0x6c, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63,
	0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d,
	0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x0d, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x1a, 0x93, 0x12, 0x0a, 0x0d, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x12, 0xbb, 0x01, 0x0a, 0x0b, 0x61, 0x63, 0x6c,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x94, 0xc2, 0xd1, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42,
	0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x63, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x93, 0xb4, 0xa5, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xa5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf4, 0xfb, 0xb6,
	0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x43,
	0x82, 0x41, 0x40, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc5, 0x09, 0x0a, 0x0a, 0x41,
	0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0xce, 0x01, 0x0a, 0x09, 0x61, 0x63,
	0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xf2, 0xb1, 0x90, 0xed, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x53, 0x82, 0x41, 0x50,
	0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x61, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xde, 0x05, 0x0a, 0x08, 0x41,
	0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0xcf, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x94, 0xb2, 0xef, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x61, 0x63, 0x6c,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63,
	0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xff, 0x03, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xc2, 0xae, 0xeb, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x0d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0xaa, 0x01,
	0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0xe1, 0xff, 0xf4, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x69, 0x82, 0x41, 0x66, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x0b, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe2, 0xd2, 0xda, 0x5e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x61, 0x63,
	0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d,
	0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x52,
	0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x84, 0x02, 0x0a, 0x0b,
	0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x0b,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2d,
	0x69, 0x64, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x72,
	0x0a, 0x09, 0x61, 0x63, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x6c, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x63, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x1a, 0x93, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x83, 0x01,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8a, 0xf0, 0xb6, 0xbb, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a,
	0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xd6, 0xec, 0xde,
	0x75, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c,
	0x41, 0x43, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x63, 0x6c,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63,
	0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61,
	0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x91, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0xb7, 0x83, 0xbb, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07,
	0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0xfb, 0xf6, 0x88, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x41, 0x63, 0x6c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x42, 0x48, 0x82, 0x41,
	0x45, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xda, 0x02, 0x0a,
	0x10, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x61, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x78, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c, 0x41, 0x43, 0x4c,
	0x54, 0x59, 0x50, 0x45, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x6c, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x69,
	0x0a, 0x0f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x0d, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x1a, 0x94, 0x06, 0x0a, 0x0c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x87, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb0, 0xef, 0xbb, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61,
	0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa9,
	0xda, 0x91, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xfa, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x74, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x98, 0xdf, 0xc2, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xd8, 0xbf, 0xdc, 0x6a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x63,
	0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xf7, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x73, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xd5, 0xc9,
	0xcd, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a,
	0x82, 0x41, 0x37, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xb7, 0xb8, 0x8d, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x1a, 0x58, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0xcb, 0xbc, 0x9d, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x25, 0x82, 0x41, 0x22, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x83, 0x01, 0x0a, 0x0c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x61, 0x63, 0x6c,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x1a, 0x8b, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x9e, 0x90, 0x85, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x41, 0x63, 0x6c, 0x41, 0x43, 0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x61,
	0x63, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x17,
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_acl_proto_rawDescOnce sync.Once
	file_openconfig_acl_proto_rawDescData = file_openconfig_acl_proto_rawDesc
)

func file_openconfig_acl_proto_rawDescGZIP() []byte {
	file_openconfig_acl_proto_rawDescOnce.Do(func() {
		file_openconfig_acl_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_acl_proto_rawDescData)
	})
	return file_openconfig_acl_proto_rawDescData
}

var file_openconfig_acl_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_openconfig_acl_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_openconfig_acl_proto_goTypes = []interface{}{
	(Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort)(0), // 0: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.Config.DestinationPort
	(Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort)(0),      // 1: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.Config.SourcePort
	(Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort)(0),  // 2: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.State.DestinationPort
	(Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort)(0),       // 3: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.State.SourcePort
	(*Acl)(nil),                                                                             // 4: openconfig.Acl
	(*Acl_AclSets)(nil),                                                                     // 5: openconfig.Acl.AclSets
	(*Acl_Config)(nil),                                                                      // 6: openconfig.Acl.Config
	(*Acl_Interfaces)(nil),                                                                  // 7: openconfig.Acl.Interfaces
	(*Acl_State)(nil),                                                                       // 8: openconfig.Acl.State
	(*Acl_AclSets_AclSet)(nil),                                                              // 9: openconfig.Acl.AclSets.AclSet
	(*Acl_AclSets_AclSetKey)(nil),                                                           // 10: openconfig.Acl.AclSets.AclSetKey
	(*Acl_AclSets_AclSet_AclEntries)(nil),                                                   // 11: openconfig.Acl.AclSets.AclSet.AclEntries
	(*Acl_AclSets_AclSet_Config)(nil),                                                       // 12: openconfig.Acl.AclSets.AclSet.Config
	(*Acl_AclSets_AclSet_State)(nil),                                                        // 13: openconfig.Acl.AclSets.AclSet.State
	(*Acl_AclSets_AclSet_AclEntries_AclEntry)(nil),                                          // 14: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry
	(*Acl_AclSets_AclSet_AclEntries_AclEntryKey)(nil),                                       // 15: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntryKey
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_Actions)(nil),                                  // 16: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Actions
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_Config)(nil),                                   // 17: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Config
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface)(nil),                           // 18: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4)(nil),                                     // 19: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6)(nil),                                     // 20: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_L2)(nil),                                       // 21: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_State)(nil),                                    // 22: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.State
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport)(nil),                                // 23: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config)(nil),                           // 24: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Actions.Config
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State)(nil),                            // 25: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Actions.State
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config)(nil),                    // 26: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.Config
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef)(nil),              // 27: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.InterfaceRef
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State)(nil),                     // 28: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.State
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config)(nil),       // 29: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.InterfaceRef.Config
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State)(nil),        // 30: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.InterfaceRef.State
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config)(nil),                              // 31: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.Config
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State)(nil),                               // 32: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.State
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config)(nil),                              // 33: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.Config
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State)(nil),                               // 34: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.State
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config)(nil),                                // 35: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.Config
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State)(nil),                                 // 36: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.State
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config)(nil),                         // 37: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.Config
	(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State)(nil),                          // 38: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.State
	(*Acl_Interfaces_Interface)(nil),                                                        // 39: openconfig.Acl.Interfaces.Interface
	(*Acl_Interfaces_InterfaceKey)(nil),                                                     // 40: openconfig.Acl.Interfaces.InterfaceKey
	(*Acl_Interfaces_Interface_Config)(nil),                                                 // 41: openconfig.Acl.Interfaces.Interface.Config
	(*Acl_Interfaces_Interface_EgressAclSets)(nil),                                          // 42: openconfig.Acl.Interfaces.Interface.EgressAclSets
	(*Acl_Interfaces_Interface_IngressAclSets)(nil),                                         // 43: openconfig.Acl.Interfaces.Interface.IngressAclSets
	(*Acl_Interfaces_Interface_InterfaceRef)(nil),                                           // 44: openconfig.Acl.Interfaces.Interface.InterfaceRef
	(*Acl_Interfaces_Interface_State)(nil),                                                  // 45: openconfig.Acl.Interfaces.Interface.State
	(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet)(nil),                             // 46: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet
	(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey)(nil),                          // 47: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSetKey
	(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries)(nil),                  // 48: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.AclEntries
	(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config)(nil),                      // 49: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.Config
	(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State)(nil),                       // 50: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.State
	(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry)(nil),         // 51: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.AclEntries.AclEntry
	(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntryKey)(nil),      // 52: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.AclEntries.AclEntryKey
	(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State)(nil),   // 53: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.AclEntries.AclEntry.State
	(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet)(nil),                           // 54: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet
	(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey)(nil),                        // 55: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSetKey
	(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries)(nil),                // 56: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.AclEntries
	(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config)(nil),                    // 57: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.Config
	(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State)(nil),                     // 58: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.State
	(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry)(nil),       // 59: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.AclEntries.AclEntry
	(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntryKey)(nil),    // 60: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.AclEntries.AclEntryKey
	(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State)(nil), // 61: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.AclEntries.AclEntry.State
	(*Acl_Interfaces_Interface_InterfaceRef_Config)(nil),                                    // 62: openconfig.Acl.Interfaces.Interface.InterfaceRef.Config
	(*Acl_Interfaces_Interface_InterfaceRef_State)(nil),                                     // 63: openconfig.Acl.Interfaces.Interface.InterfaceRef.State
	(OpenconfigAclACLCOUNTERCAPABILITY)(0),                                                  // 64: openconfig.OpenconfigAclACLCOUNTERCAPABILITY
	(OpenconfigAclACLTYPE)(0),                                                               // 65: openconfig.OpenconfigAclACLTYPE
	(*ywrapper.StringValue)(nil),                                                            // 66: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                                                              // 67: ywrapper.UintValue
	(OpenconfigAclFORWARDINGACTION)(0),                                                      // 68: openconfig.OpenconfigAclFORWARDINGACTION
	(OpenconfigAclLOGACTION)(0),                                                             // 69: openconfig.OpenconfigAclLOGACTION
	(OpenconfigPacketMatchTypesIPPROTOCOL)(0),                                               // 70: openconfig.OpenconfigPacketMatchTypesIPPROTOCOL
	(OpenconfigPacketMatchTypesETHERTYPE)(0),                                                // 71: openconfig.OpenconfigPacketMatchTypesETHERTYPE
	(OpenconfigPacketMatchTypesTCPFLAGS)(0),                                                 // 72: openconfig.OpenconfigPacketMatchTypesTCPFLAGS
}
var file_openconfig_acl_proto_depIdxs = []int32{
	5,   // 0: openconfig.Acl.acl_sets:type_name -> openconfig.Acl.AclSets
	6,   // 1: openconfig.Acl.config:type_name -> openconfig.Acl.Config
	7,   // 2: openconfig.Acl.interfaces:type_name -> openconfig.Acl.Interfaces
	8,   // 3: openconfig.Acl.state:type_name -> openconfig.Acl.State
	10,  // 4: openconfig.Acl.AclSets.acl_set:type_name -> openconfig.Acl.AclSets.AclSetKey
	40,  // 5: openconfig.Acl.Interfaces.interface:type_name -> openconfig.Acl.Interfaces.InterfaceKey
	64,  // 6: openconfig.Acl.State.counter_capability:type_name -> openconfig.OpenconfigAclACLCOUNTERCAPABILITY
	11,  // 7: openconfig.Acl.AclSets.AclSet.acl_entries:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries
	12,  // 8: openconfig.Acl.AclSets.AclSet.config:type_name -> openconfig.Acl.AclSets.AclSet.Config
	13,  // 9: openconfig.Acl.AclSets.AclSet.state:type_name -> openconfig.Acl.AclSets.AclSet.State
	65,  // 10: openconfig.Acl.AclSets.AclSetKey.type:type_name -> openconfig.OpenconfigAclACLTYPE
	9,   // 11: openconfig.Acl.AclSets.AclSetKey.acl_set:type_name -> openconfig.Acl.AclSets.AclSet
	15,  // 12: openconfig.Acl.AclSets.AclSet.AclEntries.acl_entry:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntryKey
	66,  // 13: openconfig.Acl.AclSets.AclSet.Config.description:type_name -> ywrapper.StringValue
	66,  // 14: openconfig.Acl.AclSets.AclSet.Config.name:type_name -> ywrapper.StringValue
	65,  // 15: openconfig.Acl.AclSets.AclSet.Config.type:type_name -> openconfig.OpenconfigAclACLTYPE
	66,  // 16: openconfig.Acl.AclSets.AclSet.State.description:type_name -> ywrapper.StringValue
	66,  // 17: openconfig.Acl.AclSets.AclSet.State.name:type_name -> ywrapper.StringValue
	65,  // 18: openconfig.Acl.AclSets.AclSet.State.type:type_name -> openconfig.OpenconfigAclACLTYPE
	16,  // 19: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.actions:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Actions
	17,  // 20: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.config:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Config
	18,  // 21: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.input_interface:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface
	19,  // 22: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.ipv4:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4
	20,  // 23: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.ipv6:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6
	21,  // 24: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.l2:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2
	22,  // 25: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.state:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.State
	23,  // 26: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.transport:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport
	14,  // 27: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntryKey.acl_entry:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry
	24,  // 28: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Actions.config:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Actions.Config
	25,  // 29: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Actions.state:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Actions.State
	66,  // 30: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Config.description:type_name -> ywrapper.StringValue
	67,  // 31: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Config.sequence_id:type_name -> ywrapper.UintValue
	26,  // 32: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.config:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.Config
	27,  // 33: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.interface_ref:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.InterfaceRef
	28,  // 34: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.state:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.State
	31,  // 35: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.config:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.Config
	32,  // 36: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.state:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.State
	33,  // 37: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.config:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.Config
	34,  // 38: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.state:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.State
	35,  // 39: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.config:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.Config
	36,  // 40: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.state:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.State
	66,  // 41: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.State.description:type_name -> ywrapper.StringValue
	67,  // 42: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.State.matched_octets:type_name -> ywrapper.UintValue
	67,  // 43: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.State.matched_packets:type_name -> ywrapper.UintValue
	67,  // 44: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.State.sequence_id:type_name -> ywrapper.UintValue
	37,  // 45: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.config:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.Config
	38,  // 46: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.state:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.State
	68,  // 47: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Actions.Config.forwarding_action:type_name -> openconfig.OpenconfigAclFORWARDINGACTION
	69,  // 48: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Actions.Config.log_action:type_name -> openconfig.OpenconfigAclLOGACTION
	68,  // 49: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Actions.State.forwarding_action:type_name -> openconfig.OpenconfigAclFORWARDINGACTION
	69,  // 50: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Actions.State.log_action:type_name -> openconfig.OpenconfigAclLOGACTION
	29,  // 51: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.InterfaceRef.config:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.InterfaceRef.Config
	30,  // 52: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.InterfaceRef.state:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.InterfaceRef.State
	66,  // 53: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.InterfaceRef.Config.interface:type_name -> ywrapper.StringValue
	67,  // 54: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.InterfaceRef.Config.subinterface:type_name -> ywrapper.UintValue
	66,  // 55: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.InterfaceRef.State.interface:type_name -> ywrapper.StringValue
	67,  // 56: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.InputInterface.InterfaceRef.State.subinterface:type_name -> ywrapper.UintValue
	66,  // 57: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.Config.destination_address:type_name -> ywrapper.StringValue
	67,  // 58: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.Config.dscp:type_name -> ywrapper.UintValue
	67,  // 59: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.Config.hop_limit:type_name -> ywrapper.UintValue
	70,  // 60: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.Config.protocol_openconfigpacketmatchtypesipprotocol:type_name -> openconfig.OpenconfigPacketMatchTypesIPPROTOCOL
	66,  // 61: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.Config.source_address:type_name -> ywrapper.StringValue
	66,  // 62: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.State.destination_address:type_name -> ywrapper.StringValue
	67,  // 63: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.State.dscp:type_name -> ywrapper.UintValue
	67,  // 64: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.State.hop_limit:type_name -> ywrapper.UintValue
	70,  // 65: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.State.protocol_openconfigpacketmatchtypesipprotocol:type_name -> openconfig.OpenconfigPacketMatchTypesIPPROTOCOL
	66,  // 66: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv4.State.source_address:type_name -> ywrapper.StringValue
	66,  // 67: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.Config.destination_address:type_name -> ywrapper.StringValue
	67,  // 68: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.Config.destination_flow_label:type_name -> ywrapper.UintValue
	67,  // 69: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.Config.dscp:type_name -> ywrapper.UintValue
	67,  // 70: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.Config.hop_limit:type_name -> ywrapper.UintValue
	70,  // 71: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.Config.protocol_openconfigpacketmatchtypesipprotocol:type_name -> openconfig.OpenconfigPacketMatchTypesIPPROTOCOL
	66,  // 72: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.Config.source_address:type_name -> ywrapper.StringValue
	67,  // 73: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.Config.source_flow_label:type_name -> ywrapper.UintValue
	66,  // 74: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.State.destination_address:type_name -> ywrapper.StringValue
	67,  // 75: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.State.destination_flow_label:type_name -> ywrapper.UintValue
	67,  // 76: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.State.dscp:type_name -> ywrapper.UintValue
	67,  // 77: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.State.hop_limit:type_name -> ywrapper.UintValue
	70,  // 78: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.State.protocol_openconfigpacketmatchtypesipprotocol:type_name -> openconfig.OpenconfigPacketMatchTypesIPPROTOCOL
	66,  // 79: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.State.source_address:type_name -> ywrapper.StringValue
	67,  // 80: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Ipv6.State.source_flow_label:type_name -> ywrapper.UintValue
	66,  // 81: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.Config.destination_mac:type_name -> ywrapper.StringValue
	66,  // 82: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.Config.destination_mac_mask:type_name -> ywrapper.StringValue
	71,  // 83: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.Config.ethertype_openconfigpacketmatchtypesethertype:type_name -> openconfig.OpenconfigPacketMatchTypesETHERTYPE
	66,  // 84: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.Config.source_mac:type_name -> ywrapper.StringValue
	66,  // 85: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.Config.source_mac_mask:type_name -> ywrapper.StringValue
	66,  // 86: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.State.destination_mac:type_name -> ywrapper.StringValue
	66,  // 87: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.State.destination_mac_mask:type_name -> ywrapper.StringValue
	71,  // 88: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.State.ethertype_openconfigpacketmatchtypesethertype:type_name -> openconfig.OpenconfigPacketMatchTypesETHERTYPE
	66,  // 89: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.State.source_mac:type_name -> ywrapper.StringValue
	66,  // 90: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.L2.State.source_mac_mask:type_name -> ywrapper.StringValue
	0,   // 91: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.Config.destination_port_destinationport:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.Config.DestinationPort
	1,   // 92: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.Config.source_port_sourceport:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.Config.SourcePort
	72,  // 93: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.Config.tcp_flags:type_name -> openconfig.OpenconfigPacketMatchTypesTCPFLAGS
	2,   // 94: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.State.destination_port_destinationport:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.State.DestinationPort
	3,   // 95: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.State.source_port_sourceport:type_name -> openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.State.SourcePort
	72,  // 96: openconfig.Acl.AclSets.AclSet.AclEntries.AclEntry.Transport.State.tcp_flags:type_name -> openconfig.OpenconfigPacketMatchTypesTCPFLAGS
	41,  // 97: openconfig.Acl.Interfaces.Interface.config:type_name -> openconfig.Acl.Interfaces.Interface.Config
	42,  // 98: openconfig.Acl.Interfaces.Interface.egress_acl_sets:type_name -> openconfig.Acl.Interfaces.Interface.EgressAclSets
	43,  // 99: openconfig.Acl.Interfaces.Interface.ingress_acl_sets:type_name -> openconfig.Acl.Interfaces.Interface.IngressAclSets
	44,  // 100: openconfig.Acl.Interfaces.Interface.interface_ref:type_name -> openconfig.Acl.Interfaces.Interface.InterfaceRef
	45,  // 101: openconfig.Acl.Interfaces.Interface.state:type_name -> openconfig.Acl.Interfaces.Interface.State
	39,  // 102: openconfig.Acl.Interfaces.InterfaceKey.interface:type_name -> openconfig.Acl.Interfaces.Interface
	66,  // 103: openconfig.Acl.Interfaces.Interface.Config.id:type_name -> ywrapper.StringValue
	47,  // 104: openconfig.Acl.Interfaces.Interface.EgressAclSets.egress_acl_set:type_name -> openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSetKey
	55,  // 105: openconfig.Acl.Interfaces.Interface.IngressAclSets.ingress_acl_set:type_name -> openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSetKey
	62,  // 106: openconfig.Acl.Interfaces.Interface.InterfaceRef.config:type_name -> openconfig.Acl.Interfaces.Interface.InterfaceRef.Config
	63,  // 107: openconfig.Acl.Interfaces.Interface.InterfaceRef.state:type_name -> openconfig.Acl.Interfaces.Interface.InterfaceRef.State
	66,  // 108: openconfig.Acl.Interfaces.Interface.State.id:type_name -> ywrapper.StringValue
	48,  // 109: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.acl_entries:type_name -> openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.AclEntries
	49,  // 110: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.config:type_name -> openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.Config
	50,  // 111: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.state:type_name -> openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.State
	65,  // 112: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSetKey.type:type_name -> openconfig.OpenconfigAclACLTYPE
	46,  // 113: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSetKey.egress_acl_set:type_name -> openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet
	52,  // 114: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.AclEntries.acl_entry:type_name -> openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.AclEntries.AclEntryKey
	66,  // 115: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.Config.set_name:type_name -> ywrapper.StringValue
	65,  // 116: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.Config.type:type_name -> openconfig.OpenconfigAclACLTYPE
	66,  // 117: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.State.set_name:type_name -> ywrapper.StringValue
	65,  // 118: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.State.type:type_name -> openconfig.OpenconfigAclACLTYPE
	53,  // 119: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.AclEntries.AclEntry.state:type_name -> openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.AclEntries.AclEntry.State
	51,  // 120: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.AclEntries.AclEntryKey.acl_entry:type_name -> openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.AclEntries.AclEntry
	67,  // 121: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.AclEntries.AclEntry.State.matched_octets:type_name -> ywrapper.UintValue
	67,  // 122: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.AclEntries.AclEntry.State.matched_packets:type_name -> ywrapper.UintValue
	67,  // 123: openconfig.Acl.Interfaces.Interface.EgressAclSets.EgressAclSet.AclEntries.AclEntry.State.sequence_id:type_name -> ywrapper.UintValue
	56,  // 124: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.acl_entries:type_name -> openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.AclEntries
	57,  // 125: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.config:type_name -> openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.Config
	58,  // 126: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.state:type_name -> openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.State
	65,  // 127: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSetKey.type:type_name -> openconfig.OpenconfigAclACLTYPE
	54,  // 128: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSetKey.ingress_acl_set:type_name -> openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet
	60,  // 129: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.AclEntries.acl_entry:type_name -> openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.AclEntries.AclEntryKey
	66,  // 130: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.Config.set_name:type_name -> ywrapper.StringValue
	65,  // 131: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.Config.type:type_name -> openconfig.OpenconfigAclACLTYPE
	66,  // 132: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.State.set_name:type_name -> ywrapper.StringValue
	65,  // 133: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.State.type:type_name -> openconfig.OpenconfigAclACLTYPE
	61,  // 134: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.AclEntries.AclEntry.state:type_name -> openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.AclEntries.AclEntry.State
	59,  // 135: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.AclEntries.AclEntryKey.acl_entry:type_name -> openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.AclEntries.AclEntry
	67,  // 136: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.AclEntries.AclEntry.State.matched_octets:type_name -> ywrapper.UintValue
	67,  // 137: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.AclEntries.AclEntry.State.matched_packets:type_name -> ywrapper.UintValue
	67,  // 138: openconfig.Acl.Interfaces.Interface.IngressAclSets.IngressAclSet.AclEntries.AclEntry.State.sequence_id:type_name -> ywrapper.UintValue
	66,  // 139: openconfig.Acl.Interfaces.Interface.InterfaceRef.Config.interface:type_name -> ywrapper.StringValue
	67,  // 140: openconfig.Acl.Interfaces.Interface.InterfaceRef.Config.subinterface:type_name -> ywrapper.UintValue
	66,  // 141: openconfig.Acl.Interfaces.Interface.InterfaceRef.State.interface:type_name -> ywrapper.StringValue
	67,  // 142: openconfig.Acl.Interfaces.Interface.InterfaceRef.State.subinterface:type_name -> ywrapper.UintValue
	143, // [143:143] is the sub-list for method output_type
	143, // [143:143] is the sub-list for method input_type
	143, // [143:143] is the sub-list for extension type_name
	143, // [143:143] is the sub-list for extension extendee
	0,   // [0:143] is the sub-list for field type_name
}

func init() { file_openconfig_acl_proto_init() }
func file_openconfig_acl_proto_init() {
	if File_openconfig_acl_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_acl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_Actions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_L2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_InterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_EgressAclSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_IngressAclSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_InterfaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_InterfaceRef_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_acl_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acl_Interfaces_Interface_InterfaceRef_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openconfig_acl_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_ProtocolOpenconfigpacketmatchtypesipprotocol)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_ProtocolUint64)(nil),
	}
	file_openconfig_acl_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_ProtocolOpenconfigpacketmatchtypesipprotocol)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_ProtocolUint64)(nil),
	}
	file_openconfig_acl_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_ProtocolOpenconfigpacketmatchtypesipprotocol)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_ProtocolUint64)(nil),
	}
	file_openconfig_acl_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_ProtocolOpenconfigpacketmatchtypesipprotocol)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_ProtocolUint64)(nil),
	}
	file_openconfig_acl_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_EthertypeOpenconfigpacketmatchtypesethertype)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_EthertypeUint64)(nil),
	}
	file_openconfig_acl_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_EthertypeOpenconfigpacketmatchtypesethertype)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_EthertypeUint64)(nil),
	}
	file_openconfig_acl_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortDestinationport)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortString)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPortUint64)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortSourceport)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortString)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePortUint64)(nil),
	}
	file_openconfig_acl_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortDestinationport)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortString)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPortUint64)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortSourceport)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortString)(nil),
		(*Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePortUint64)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_acl_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_acl_proto_goTypes,
		DependencyIndexes: file_openconfig_acl_proto_depIdxs,
		EnumInfos:         file_openconfig_acl_proto_enumTypes,
		MessageInfos:      file_openconfig_acl_proto_msgTypes,
	}.Build()
	File_openconfig_acl_proto = out.File
	file_openconfig_acl_proto_rawDesc = nil
	file_openconfig_acl_proto_goTypes = nil
	file_openconfig_acl_proto_depIdxs = nil
}
