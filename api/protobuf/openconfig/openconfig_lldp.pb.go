// openconfig.openconfig_lldp is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_lldp.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Lldp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config     *Lldp_Config     `protobuf:"bytes,445759159,opt,name=config,proto3" json:"config,omitempty"`
	Interfaces *Lldp_Interfaces `protobuf:"bytes,1547797,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	State      *Lldp_State      `protobuf:"bytes,172892392,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Lldp) Reset() {
	*x = Lldp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp) ProtoMessage() {}

func (x *Lldp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp.ProtoReflect.Descriptor instead.
func (*Lldp) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0}
}

func (x *Lldp) GetConfig() *Lldp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Lldp) GetInterfaces() *Lldp_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Lldp) GetState() *Lldp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Lldp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChassisId                *ywrapper.StringValue        `protobuf:"bytes,508074652,opt,name=chassis_id,json=chassisId,proto3" json:"chassis_id,omitempty"`
	ChassisIdType            OpenconfigLldpChassisIdType  `protobuf:"varint,298922545,opt,name=chassis_id_type,json=chassisIdType,proto3,enum=openconfig.OpenconfigLldpChassisIdType" json:"chassis_id_type,omitempty"`
	Enabled                  *ywrapper.BoolValue          `protobuf:"bytes,106066121,opt,name=enabled,proto3" json:"enabled,omitempty"`
	HelloTimer               *ywrapper.UintValue          `protobuf:"bytes,499388674,opt,name=hello_timer,json=helloTimer,proto3" json:"hello_timer,omitempty"`
	SuppressTlvAdvertisement []OpenconfigLldpTypesLLDPTLV `protobuf:"varint,105840670,rep,packed,name=suppress_tlv_advertisement,json=suppressTlvAdvertisement,proto3,enum=openconfig.OpenconfigLldpTypesLLDPTLV" json:"suppress_tlv_advertisement,omitempty"`
	SystemDescription        *ywrapper.StringValue        `protobuf:"bytes,410395368,opt,name=system_description,json=systemDescription,proto3" json:"system_description,omitempty"`
	SystemName               *ywrapper.StringValue        `protobuf:"bytes,20955911,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
}

func (x *Lldp_Config) Reset() {
	*x = Lldp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Config) ProtoMessage() {}

func (x *Lldp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Config.ProtoReflect.Descriptor instead.
func (*Lldp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Lldp_Config) GetChassisId() *ywrapper.StringValue {
	if x != nil {
		return x.ChassisId
	}
	return nil
}

func (x *Lldp_Config) GetChassisIdType() OpenconfigLldpChassisIdType {
	if x != nil {
		return x.ChassisIdType
	}
	return OpenconfigLldpChassisIdType_OPENCONFIGLLDPCHASSISIDTYPE_UNSET
}

func (x *Lldp_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Lldp_Config) GetHelloTimer() *ywrapper.UintValue {
	if x != nil {
		return x.HelloTimer
	}
	return nil
}

func (x *Lldp_Config) GetSuppressTlvAdvertisement() []OpenconfigLldpTypesLLDPTLV {
	if x != nil {
		return x.SuppressTlvAdvertisement
	}
	return nil
}

func (x *Lldp_Config) GetSystemDescription() *ywrapper.StringValue {
	if x != nil {
		return x.SystemDescription
	}
	return nil
}

func (x *Lldp_Config) GetSystemName() *ywrapper.StringValue {
	if x != nil {
		return x.SystemName
	}
	return nil
}

type Lldp_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*Lldp_Interfaces_InterfaceKey `protobuf:"bytes,393279601,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Lldp_Interfaces) Reset() {
	*x = Lldp_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces) ProtoMessage() {}

func (x *Lldp_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Lldp_Interfaces) GetInterface() []*Lldp_Interfaces_InterfaceKey {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Lldp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChassisId                *ywrapper.StringValue        `protobuf:"bytes,222899705,opt,name=chassis_id,json=chassisId,proto3" json:"chassis_id,omitempty"`
	ChassisIdType            OpenconfigLldpChassisIdType  `protobuf:"varint,26731590,opt,name=chassis_id_type,json=chassisIdType,proto3,enum=openconfig.OpenconfigLldpChassisIdType" json:"chassis_id_type,omitempty"`
	Counters                 *Lldp_State_Counters         `protobuf:"bytes,510522208,opt,name=counters,proto3" json:"counters,omitempty"`
	Enabled                  *ywrapper.BoolValue          `protobuf:"bytes,154847898,opt,name=enabled,proto3" json:"enabled,omitempty"`
	HelloTimer               *ywrapper.UintValue          `protobuf:"bytes,504444337,opt,name=hello_timer,json=helloTimer,proto3" json:"hello_timer,omitempty"`
	SuppressTlvAdvertisement []OpenconfigLldpTypesLLDPTLV `protobuf:"varint,4804491,rep,packed,name=suppress_tlv_advertisement,json=suppressTlvAdvertisement,proto3,enum=openconfig.OpenconfigLldpTypesLLDPTLV" json:"suppress_tlv_advertisement,omitempty"`
	SystemDescription        *ywrapper.StringValue        `protobuf:"bytes,194456445,opt,name=system_description,json=systemDescription,proto3" json:"system_description,omitempty"`
	SystemName               *ywrapper.StringValue        `protobuf:"bytes,444378600,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
}

func (x *Lldp_State) Reset() {
	*x = Lldp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_State) ProtoMessage() {}

func (x *Lldp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_State.ProtoReflect.Descriptor instead.
func (*Lldp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Lldp_State) GetChassisId() *ywrapper.StringValue {
	if x != nil {
		return x.ChassisId
	}
	return nil
}

func (x *Lldp_State) GetChassisIdType() OpenconfigLldpChassisIdType {
	if x != nil {
		return x.ChassisIdType
	}
	return OpenconfigLldpChassisIdType_OPENCONFIGLLDPCHASSISIDTYPE_UNSET
}

func (x *Lldp_State) GetCounters() *Lldp_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Lldp_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Lldp_State) GetHelloTimer() *ywrapper.UintValue {
	if x != nil {
		return x.HelloTimer
	}
	return nil
}

func (x *Lldp_State) GetSuppressTlvAdvertisement() []OpenconfigLldpTypesLLDPTLV {
	if x != nil {
		return x.SuppressTlvAdvertisement
	}
	return nil
}

func (x *Lldp_State) GetSystemDescription() *ywrapper.StringValue {
	if x != nil {
		return x.SystemDescription
	}
	return nil
}

func (x *Lldp_State) GetSystemName() *ywrapper.StringValue {
	if x != nil {
		return x.SystemName
	}
	return nil
}

type Lldp_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config    *Lldp_Interfaces_Interface_Config    `protobuf:"bytes,28424342,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors *Lldp_Interfaces_Interface_Neighbors `protobuf:"bytes,513860845,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	State     *Lldp_Interfaces_Interface_State     `protobuf:"bytes,205931331,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Lldp_Interfaces_Interface) Reset() {
	*x = Lldp_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Lldp_Interfaces_Interface) GetConfig() *Lldp_Interfaces_Interface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Lldp_Interfaces_Interface) GetNeighbors() *Lldp_Interfaces_Interface_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *Lldp_Interfaces_Interface) GetState() *Lldp_Interfaces_Interface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Lldp_Interfaces_InterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Interface *Lldp_Interfaces_Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Lldp_Interfaces_InterfaceKey) Reset() {
	*x = Lldp_Interfaces_InterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_InterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_InterfaceKey) ProtoMessage() {}

func (x *Lldp_Interfaces_InterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_InterfaceKey.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_InterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *Lldp_Interfaces_InterfaceKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Lldp_Interfaces_InterfaceKey) GetInterface() *Lldp_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Lldp_Interfaces_Interface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue   `protobuf:"bytes,509689348,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Name    *ywrapper.StringValue `protobuf:"bytes,79832956,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Lldp_Interfaces_Interface_Config) Reset() {
	*x = Lldp_Interfaces_Interface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Config) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Config.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *Lldp_Interfaces_Interface_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Lldp_Interfaces_Interface_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Lldp_Interfaces_Interface_Neighbors_NeighborKey `protobuf:"bytes,518660342,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Lldp_Interfaces_Interface_Neighbors) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *Lldp_Interfaces_Interface_Neighbors) GetNeighbor() []*Lldp_Interfaces_Interface_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Lldp_Interfaces_Interface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters *Lldp_Interfaces_Interface_State_Counters `protobuf:"bytes,244414513,opt,name=counters,proto3" json:"counters,omitempty"`
	Enabled  *ywrapper.BoolValue                       `protobuf:"bytes,397120021,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Name     *ywrapper.StringValue                     `protobuf:"bytes,157893331,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Lldp_Interfaces_Interface_State) Reset() {
	*x = Lldp_Interfaces_Interface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_State) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_State.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

func (x *Lldp_Interfaces_Interface_State) GetCounters() *Lldp_Interfaces_Interface_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Lldp_Interfaces_Interface_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities `protobuf:"bytes,457626607,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	Config       *Lldp_Interfaces_Interface_Neighbors_Neighbor_Config       `protobuf:"bytes,223570263,opt,name=config,proto3" json:"config,omitempty"`
	CustomTlvs   *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs   `protobuf:"bytes,256243628,opt,name=custom_tlvs,json=customTlvs,proto3" json:"custom_tlvs,omitempty"`
	State        *Lldp_Interfaces_Interface_Neighbors_Neighbor_State        `protobuf:"bytes,43941384,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors_Neighbor) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor) GetCapabilities() *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor) GetConfig() *Lldp_Interfaces_Interface_Neighbors_Neighbor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor) GetCustomTlvs() *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs {
	if x != nil {
		return x.CustomTlvs
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor) GetState() *Lldp_Interfaces_Interface_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Lldp_Interfaces_Interface_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Neighbor *Lldp_Interfaces_Interface_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Lldp_Interfaces_Interface_Neighbors_NeighborKey) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors_NeighborKey) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1}
}

func (x *Lldp_Interfaces_Interface_Neighbors_NeighborKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Lldp_Interfaces_Interface_Neighbors_NeighborKey) GetNeighbor() *Lldp_Interfaces_Interface_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capability []*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_CapabilityKey `protobuf:"bytes,233684052,rep,name=capability,proto3" json:"capability,omitempty"`
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 0}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities) GetCapability() []*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_CapabilityKey {
	if x != nil {
		return x.Capability
	}
	return nil
}

type Lldp_Interfaces_Interface_Neighbors_Neighbor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Config) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors_Neighbor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_Config) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors_Neighbor_Config.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 1}
}

type Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tlv []*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey `protobuf:"bytes,222440767,rep,name=tlv,proto3" json:"tlv,omitempty"`
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 2}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs) GetTlv() []*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey {
	if x != nil {
		return x.Tlv
	}
	return nil
}

type Lldp_Interfaces_Interface_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Age                   *ywrapper.UintValue         `protobuf:"bytes,247861060,opt,name=age,proto3" json:"age,omitempty"`
	ChassisId             *ywrapper.StringValue       `protobuf:"bytes,484827801,opt,name=chassis_id,json=chassisId,proto3" json:"chassis_id,omitempty"`
	ChassisIdType         OpenconfigLldpChassisIdType `protobuf:"varint,365523046,opt,name=chassis_id_type,json=chassisIdType,proto3,enum=openconfig.OpenconfigLldpChassisIdType" json:"chassis_id_type,omitempty"`
	Id                    *ywrapper.StringValue       `protobuf:"bytes,51116368,opt,name=id,proto3" json:"id,omitempty"`
	LastUpdate            *ywrapper.IntValue          `protobuf:"bytes,49325695,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	ManagementAddress     *ywrapper.StringValue       `protobuf:"bytes,403768661,opt,name=management_address,json=managementAddress,proto3" json:"management_address,omitempty"`
	ManagementAddressType *ywrapper.StringValue       `protobuf:"bytes,358938546,opt,name=management_address_type,json=managementAddressType,proto3" json:"management_address_type,omitempty"`
	PortDescription       *ywrapper.StringValue       `protobuf:"bytes,173204743,opt,name=port_description,json=portDescription,proto3" json:"port_description,omitempty"`
	PortId                *ywrapper.StringValue       `protobuf:"bytes,61629116,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	PortIdType            OpenconfigLldpPortIdType    `protobuf:"varint,359632977,opt,name=port_id_type,json=portIdType,proto3,enum=openconfig.OpenconfigLldpPortIdType" json:"port_id_type,omitempty"`
	SystemDescription     *ywrapper.StringValue       `protobuf:"bytes,533250205,opt,name=system_description,json=systemDescription,proto3" json:"system_description,omitempty"`
	SystemName            *ywrapper.StringValue       `protobuf:"bytes,324316296,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
	Ttl                   *ywrapper.UintValue         `protobuf:"bytes,295076649,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_State) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 3}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetAge() *ywrapper.UintValue {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetChassisId() *ywrapper.StringValue {
	if x != nil {
		return x.ChassisId
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetChassisIdType() OpenconfigLldpChassisIdType {
	if x != nil {
		return x.ChassisIdType
	}
	return OpenconfigLldpChassisIdType_OPENCONFIGLLDPCHASSISIDTYPE_UNSET
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetLastUpdate() *ywrapper.IntValue {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetManagementAddress() *ywrapper.StringValue {
	if x != nil {
		return x.ManagementAddress
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetManagementAddressType() *ywrapper.StringValue {
	if x != nil {
		return x.ManagementAddressType
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetPortDescription() *ywrapper.StringValue {
	if x != nil {
		return x.PortDescription
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetPortId() *ywrapper.StringValue {
	if x != nil {
		return x.PortId
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetPortIdType() OpenconfigLldpPortIdType {
	if x != nil {
		return x.PortIdType
	}
	return OpenconfigLldpPortIdType_OPENCONFIGLLDPPORTIDTYPE_UNSET
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetSystemDescription() *ywrapper.StringValue {
	if x != nil {
		return x.SystemDescription
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetSystemName() *ywrapper.StringValue {
	if x != nil {
		return x.SystemName
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetTtl() *ywrapper.UintValue {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config `protobuf:"bytes,276751961,opt,name=config,proto3" json:"config,omitempty"`
	State  *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State  `protobuf:"bytes,63273774,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 0, 0}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) GetConfig() *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) GetState() *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_CapabilityKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       OpenconfigLldpTypesLLDPSYSTEMCAPABILITY                               `protobuf:"varint,1,opt,name=name,proto3,enum=openconfig.OpenconfigLldpTypesLLDPSYSTEMCAPABILITY" json:"name,omitempty"`
	Capability *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability `protobuf:"bytes,2,opt,name=capability,proto3" json:"capability,omitempty"`
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_CapabilityKey) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_CapabilityKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_CapabilityKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_CapabilityKey) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_CapabilityKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_CapabilityKey.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_CapabilityKey) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 0, 1}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_CapabilityKey) GetName() OpenconfigLldpTypesLLDPSYSTEMCAPABILITY {
	if x != nil {
		return x.Name
	}
	return OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_UNSET
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_CapabilityKey) GetCapability() *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability {
	if x != nil {
		return x.Capability
	}
	return nil
}

type Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 0, 0, 0}
}

type Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue                     `protobuf:"bytes,165922252,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Name    OpenconfigLldpTypesLLDPSYSTEMCAPABILITY `protobuf:"varint,19447668,opt,name=name,proto3,enum=openconfig.OpenconfigLldpTypesLLDPSYSTEMCAPABILITY" json:"name,omitempty"`
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 0, 0, 1}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State) GetName() OpenconfigLldpTypesLLDPSYSTEMCAPABILITY {
	if x != nil {
		return x.Name
	}
	return OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_UNSET
}

type Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config `protobuf:"bytes,228294656,opt,name=config,proto3" json:"config,omitempty"`
	State  *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State  `protobuf:"bytes,100771065,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 2, 0}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) GetConfig() *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) GetState() *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       int64                                                        `protobuf:"zigzag64,1,opt,name=type,proto3" json:"type,omitempty"`
	Oui        string                                                       `protobuf:"bytes,2,opt,name=oui,proto3" json:"oui,omitempty"`
	OuiSubtype string                                                       `protobuf:"bytes,3,opt,name=oui_subtype,json=ouiSubtype,proto3" json:"oui_subtype,omitempty"`
	Tlv        *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv `protobuf:"bytes,4,opt,name=tlv,proto3" json:"tlv,omitempty"`
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 2, 1}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey) GetOui() string {
	if x != nil {
		return x.Oui
	}
	return ""
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey) GetOuiSubtype() string {
	if x != nil {
		return x.OuiSubtype
	}
	return ""
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey) GetTlv() *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv {
	if x != nil {
		return x.Tlv
	}
	return nil
}

type Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 2, 0, 0}
}

type Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui        *ywrapper.StringValue `protobuf:"bytes,9779901,opt,name=oui,proto3" json:"oui,omitempty"`
	OuiSubtype *ywrapper.StringValue `protobuf:"bytes,145039116,opt,name=oui_subtype,json=ouiSubtype,proto3" json:"oui_subtype,omitempty"`
	Type       *ywrapper.IntValue    `protobuf:"bytes,502958044,opt,name=type,proto3" json:"type,omitempty"`
	Value      *ywrapper.BytesValue  `protobuf:"bytes,39320215,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) Reset() {
	*x = Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 2, 0, 1}
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) GetOui() *ywrapper.StringValue {
	if x != nil {
		return x.Oui
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) GetOuiSubtype() *ywrapper.StringValue {
	if x != nil {
		return x.OuiSubtype
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) GetType() *ywrapper.IntValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) GetValue() *ywrapper.BytesValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type Lldp_Interfaces_Interface_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameDiscard  *ywrapper.UintValue   `protobuf:"bytes,259584578,opt,name=frame_discard,json=frameDiscard,proto3" json:"frame_discard,omitempty"`
	FrameErrorIn  *ywrapper.UintValue   `protobuf:"bytes,212424674,opt,name=frame_error_in,json=frameErrorIn,proto3" json:"frame_error_in,omitempty"`
	FrameErrorOut *ywrapper.UintValue   `protobuf:"bytes,462379421,opt,name=frame_error_out,json=frameErrorOut,proto3" json:"frame_error_out,omitempty"`
	FrameIn       *ywrapper.UintValue   `protobuf:"bytes,521280761,opt,name=frame_in,json=frameIn,proto3" json:"frame_in,omitempty"`
	FrameOut      *ywrapper.UintValue   `protobuf:"bytes,125657400,opt,name=frame_out,json=frameOut,proto3" json:"frame_out,omitempty"`
	LastClear     *ywrapper.StringValue `protobuf:"bytes,456126716,opt,name=last_clear,json=lastClear,proto3" json:"last_clear,omitempty"`
	TlvDiscard    *ywrapper.UintValue   `protobuf:"bytes,93038727,opt,name=tlv_discard,json=tlvDiscard,proto3" json:"tlv_discard,omitempty"`
	TlvUnknown    *ywrapper.UintValue   `protobuf:"bytes,437428095,opt,name=tlv_unknown,json=tlvUnknown,proto3" json:"tlv_unknown,omitempty"`
}

func (x *Lldp_Interfaces_Interface_State_Counters) Reset() {
	*x = Lldp_Interfaces_Interface_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_Interfaces_Interface_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_Interfaces_Interface_State_Counters) ProtoMessage() {}

func (x *Lldp_Interfaces_Interface_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_Interfaces_Interface_State_Counters.ProtoReflect.Descriptor instead.
func (*Lldp_Interfaces_Interface_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0}
}

func (x *Lldp_Interfaces_Interface_State_Counters) GetFrameDiscard() *ywrapper.UintValue {
	if x != nil {
		return x.FrameDiscard
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_State_Counters) GetFrameErrorIn() *ywrapper.UintValue {
	if x != nil {
		return x.FrameErrorIn
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_State_Counters) GetFrameErrorOut() *ywrapper.UintValue {
	if x != nil {
		return x.FrameErrorOut
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_State_Counters) GetFrameIn() *ywrapper.UintValue {
	if x != nil {
		return x.FrameIn
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_State_Counters) GetFrameOut() *ywrapper.UintValue {
	if x != nil {
		return x.FrameOut
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_State_Counters) GetLastClear() *ywrapper.StringValue {
	if x != nil {
		return x.LastClear
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_State_Counters) GetTlvDiscard() *ywrapper.UintValue {
	if x != nil {
		return x.TlvDiscard
	}
	return nil
}

func (x *Lldp_Interfaces_Interface_State_Counters) GetTlvUnknown() *ywrapper.UintValue {
	if x != nil {
		return x.TlvUnknown
	}
	return nil
}

type Lldp_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntriesAgedOut *ywrapper.UintValue   `protobuf:"bytes,502981410,opt,name=entries_aged_out,json=entriesAgedOut,proto3" json:"entries_aged_out,omitempty"`
	FrameDiscard   *ywrapper.UintValue   `protobuf:"bytes,519798735,opt,name=frame_discard,json=frameDiscard,proto3" json:"frame_discard,omitempty"`
	FrameErrorIn   *ywrapper.UintValue   `protobuf:"bytes,122178213,opt,name=frame_error_in,json=frameErrorIn,proto3" json:"frame_error_in,omitempty"`
	FrameIn        *ywrapper.UintValue   `protobuf:"bytes,341206510,opt,name=frame_in,json=frameIn,proto3" json:"frame_in,omitempty"`
	FrameOut       *ywrapper.UintValue   `protobuf:"bytes,487587569,opt,name=frame_out,json=frameOut,proto3" json:"frame_out,omitempty"`
	LastClear      *ywrapper.StringValue `protobuf:"bytes,310897635,opt,name=last_clear,json=lastClear,proto3" json:"last_clear,omitempty"`
	TlvAccepted    *ywrapper.UintValue   `protobuf:"bytes,497028407,opt,name=tlv_accepted,json=tlvAccepted,proto3" json:"tlv_accepted,omitempty"`
	TlvDiscard     *ywrapper.UintValue   `protobuf:"bytes,409814106,opt,name=tlv_discard,json=tlvDiscard,proto3" json:"tlv_discard,omitempty"`
	TlvUnknown     *ywrapper.UintValue   `protobuf:"bytes,356843514,opt,name=tlv_unknown,json=tlvUnknown,proto3" json:"tlv_unknown,omitempty"`
}

func (x *Lldp_State_Counters) Reset() {
	*x = Lldp_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_lldp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp_State_Counters) ProtoMessage() {}

func (x *Lldp_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_lldp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp_State_Counters.ProtoReflect.Descriptor instead.
func (*Lldp_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_lldp_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Lldp_State_Counters) GetEntriesAgedOut() *ywrapper.UintValue {
	if x != nil {
		return x.EntriesAgedOut
	}
	return nil
}

func (x *Lldp_State_Counters) GetFrameDiscard() *ywrapper.UintValue {
	if x != nil {
		return x.FrameDiscard
	}
	return nil
}

func (x *Lldp_State_Counters) GetFrameErrorIn() *ywrapper.UintValue {
	if x != nil {
		return x.FrameErrorIn
	}
	return nil
}

func (x *Lldp_State_Counters) GetFrameIn() *ywrapper.UintValue {
	if x != nil {
		return x.FrameIn
	}
	return nil
}

func (x *Lldp_State_Counters) GetFrameOut() *ywrapper.UintValue {
	if x != nil {
		return x.FrameOut
	}
	return nil
}

func (x *Lldp_State_Counters) GetLastClear() *ywrapper.StringValue {
	if x != nil {
		return x.LastClear
	}
	return nil
}

func (x *Lldp_State_Counters) GetTlvAccepted() *ywrapper.UintValue {
	if x != nil {
		return x.TlvAccepted
	}
	return nil
}

func (x *Lldp_State_Counters) GetTlvDiscard() *ywrapper.UintValue {
	if x != nil {
		return x.TlvDiscard
	}
	return nil
}

func (x *Lldp_State_Counters) GetTlvUnknown() *ywrapper.UintValue {
	if x != nil {
		return x.TlvUnknown
	}
	return nil
}

var File_openconfig_lldp_proto protoreflect.FileDescriptor

var file_openconfig_lldp_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x6c, 0x64,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x4f, 0x0a, 0x04, 0x4c, 0x6c, 0x64, 0x70,
	0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb7, 0xfd, 0xc6, 0xd4, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0f, 0x82,
	0x41, 0x0c, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x95, 0xbc, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42, 0x13, 0x82, 0x41, 0x10, 0x2f, 0x6c,
	0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xe8, 0xc1, 0xb8, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x82, 0x41, 0x0b, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd2, 0x05, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x9c, 0xb5, 0xa2, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2d, 0x69,
	0x64, 0x52, 0x09, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12, 0x74, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0xb1, 0xe4, 0xc4, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x6c, 0x64, 0x70, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2d, 0x69, 0x64, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc9, 0xe1,
	0xc9, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0x82, 0x41, 0x14,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x55, 0x0a,
	0x0b, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x82, 0xa2, 0x90,
	0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b, 0x82, 0x41, 0x18,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0a, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x9e, 0x80, 0xbc, 0x32, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6c, 0x64, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x4c, 0x44,
	0x50, 0x54, 0x4c, 0x56, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x74,
	0x6c, 0x76, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x18, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6c, 0x76, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x12, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xe8, 0xc5, 0xd8, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x87, 0x86, 0xff, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x6c, 0x6c, 0x64,
	0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0xc1, 0x3a, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x69, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xf1, 0xf0, 0xc3,
	0xbb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xb9, 0x38, 0x0a, 0x09, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x96, 0xf1, 0xc6, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x6c,
	0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7a, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x18, 0xed, 0xc9, 0x83, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42,
	0x27, 0x82, 0x41, 0x24, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc3, 0x86, 0x99,
	0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc2,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5f, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x84, 0xfc, 0x84, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0xfc, 0xce, 0x88, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x98, 0x2a, 0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x12, 0x8d, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0xf6,
	0xc1, 0xa8, 0xf7, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x1a, 0xcf, 0x27, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xac,
	0x01, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0xef, 0xa7, 0x9b, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x93, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd7, 0xd2, 0xcd, 0x6a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c,
	0x6c, 0x64, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xa5, 0x01, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74,
	0x6c, 0x76, 0x73, 0x18, 0xac, 0xef, 0x97, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6c, 0x76,
	0x73, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6c, 0x76, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x88, 0xfc, 0xf9, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x36,
	0x82, 0x41, 0x33, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc7, 0x09,
	0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0xc0,
	0x01, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xd4, 0xf8,
	0xb6, 0x6f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x48, 0x82, 0x41, 0x45,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x1a, 0xd6, 0x05, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0xc4, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd9, 0xcc, 0xfb, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4f,
	0x82, 0x41, 0x4c, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbf, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xae, 0xf6, 0x95, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0xb4, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x88, 0x01,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xcc, 0x8b, 0x8f, 0x4f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x6c, 0x6c, 0x64,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x9f, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xf4, 0xfe, 0xa2, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4c, 0x6c, 0x64, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x4c, 0x44, 0x50, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x42,
	0x53, 0x82, 0x41, 0x50, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x9a, 0x02, 0x0a, 0x0d, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x96, 0x01, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4c, 0x6c, 0x64, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x4c, 0x44, 0x50,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x70, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0xb8, 0x0b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6c, 0x76, 0x73,
	0x12, 0xa1, 0x01, 0x0a, 0x03, 0x74, 0x6c, 0x76, 0x18, 0xbf, 0xda, 0x88, 0x6a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c,
	0x6c, 0x64, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x6c, 0x76, 0x73, 0x2e, 0x54, 0x6c, 0x76, 0x4b, 0x65, 0x79, 0x42, 0x40, 0x82,
	0x41, 0x3d, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x52,
	0x03, 0x74, 0x6c, 0x76, 0x1a, 0xfd, 0x06, 0x0a, 0x03, 0x54, 0x6c, 0x76, 0x12, 0xb2, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x80, 0x80, 0xee, 0x6c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c,
	0x64, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x54, 0x6c, 0x76, 0x73, 0x2e, 0x54, 0x6c, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74,
	0x6c, 0x76, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xae, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf9, 0xc9, 0x86, 0x30,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6c, 0x76, 0x73, 0x2e, 0x54, 0x6c, 0x76, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76,
	0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x85, 0x04, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x76, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0xbd, 0xf5,
	0xd4, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82,
	0x41, 0x47, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x69, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x8d,
	0x01, 0x0a, 0x0b, 0x6f, 0x75, 0x69, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x8c,
	0xbe, 0x94, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52,
	0x82, 0x41, 0x4f, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74, 0x6c, 0x76,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x69, 0x2d, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6f, 0x75, 0x69, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x77,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xdc, 0x8f, 0xea, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c,
	0x76, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x97, 0xf5, 0xdf, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4c, 0x82, 0x41, 0x49, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74, 0x6c,
	0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x85, 0x03, 0x0a, 0x06, 0x54, 0x6c, 0x76, 0x4b, 0x65, 0x79, 0x12,
	0x59, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x42, 0x45, 0x82,
	0x41, 0x42, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x03, 0x6f, 0x75,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x6c, 0x6c, 0x64,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2f, 0x6f, 0x75, 0x69, 0x52, 0x03, 0x6f,
	0x75, 0x69, 0x12, 0x6d, 0x0a, 0x0b, 0x6f, 0x75, 0x69, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x6c, 0x6c, 0x64,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2f, 0x6f, 0x75, 0x69, 0x2d, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x75, 0x69, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x59, 0x0a, 0x03, 0x74, 0x6c, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x6c, 0x76, 0x73, 0x2e, 0x54, 0x6c, 0x76, 0x52, 0x03, 0x74, 0x6c, 0x76, 0x1a, 0xb4, 0x0d, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0xc4, 0x9e,
	0x98, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x7b, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x99, 0xc5, 0x97, 0xe7, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2d, 0x69, 0x64, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x63, 0x68,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xe6, 0xe0,
	0xa5, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c,
	0x6c, 0x64, 0x70, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x2d, 0x69, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xd0, 0xf2,
	0xaf, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82,
	0x41, 0x36, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x7a, 0x0a, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0xff, 0xcc, 0xc2, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x6c, 0x6c,
	0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x12, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xd5, 0x8a, 0xc4, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa1,
	0x01, 0x0a, 0x17, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xb2, 0xef, 0x93, 0xab, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x15, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x87, 0xca, 0xcb, 0x52, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x6c, 0x6c, 0x64,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x71, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xbc, 0xc5, 0xb1,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41,
	0x3b, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xd1, 0xa0, 0xbe, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6c, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x69, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9d, 0x81,
	0xa3, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49,
	0x82, 0x41, 0x46, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x0b,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x88, 0xd9, 0xd2, 0x9a,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41,
	0x3f, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x03,
	0x74, 0x74, 0x6c, 0x18, 0xa9, 0x86, 0xda, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x74, 0x6c, 0x52, 0x03,
	0x74, 0x74, 0x6c, 0x1a, 0xa8, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x33, 0x82, 0x41, 0x30, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xf5,
	0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xb1, 0xf0, 0xc5, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x95, 0xa4, 0xae, 0xbd, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x6c, 0x6c, 0x64, 0x70,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd3, 0x85, 0xa5, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xaf, 0x07, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x77, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x18, 0xc2, 0xe4, 0xe3, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x79, 0x0a, 0x0e, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x18, 0xe2, 0xaf, 0xa5,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f,
	0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x12, 0x7d, 0x0a, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x9d, 0xb3, 0xbd, 0xdc, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x6c, 0x6c, 0x64,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x2d, 0x6f, 0x75, 0x74, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4f, 0x75, 0x74, 0x12, 0x69, 0x0a, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x18, 0xf9, 0xb9, 0xc8, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x35, 0x82, 0x41, 0x32, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x2d, 0x69, 0x6e, 0x52, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x12,
	0x6b, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0xb8, 0xc2, 0xf5,
	0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f,
	0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x6f,
	0x75, 0x74, 0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x71, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0xfc, 0xe1, 0xbf, 0xd9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12,
	0x71, 0x0a, 0x0b, 0x74, 0x6c, 0x76, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x87,
	0xd1, 0xae, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41,
	0x35, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2d, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x74, 0x6c, 0x76, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x12, 0x72, 0x0a, 0x0b, 0x74, 0x6c, 0x76, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x18, 0xff, 0xbe, 0xca, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74,
	0x6c, 0x76, 0x2d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0a, 0x74, 0x6c, 0x76, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x1a, 0x8b, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x1a, 0x94, 0x0d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x52,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0xf9, 0xdb, 0xa4,
	0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x19, 0x82, 0x41,
	0x16, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x2d, 0x69, 0x64, 0x52, 0x09, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x49, 0x64, 0x12, 0x72, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xc6, 0xc8, 0xdf, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6c, 0x64, 0x70, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x6c, 0x6c, 0x64,
	0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2d,
	0x69, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0xe0, 0xe6, 0xb7, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x17, 0x82,
	0x41, 0x14, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x48, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x9a, 0x95, 0xeb, 0x49,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16, 0x82, 0x41, 0x13, 0x2f, 0x6c,
	0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xb1, 0xeb, 0xc4, 0xf0, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x6c, 0x6c,
	0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x52, 0x0a, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x12, 0x92, 0x01, 0x0a, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6c,
	0x76, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x8b, 0x9f, 0xa5, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x6c, 0x64, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x4c, 0x56,
	0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x6c, 0x76, 0x2d, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x18, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6c, 0x76, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfd, 0xd6, 0xdc, 0x5c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21, 0x82, 0x41, 0x1e,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x56, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0xe8, 0xdb, 0xf2, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xef, 0x06, 0x0a, 0x08, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6b, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0xa2, 0xc6, 0xeb, 0xef, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x6c,
	0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2d, 0x61, 0x67, 0x65, 0x64, 0x2d,
	0x6f, 0x75, 0x74, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x67, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x12, 0x63, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x18, 0xcf, 0xff, 0xed, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x64, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x18, 0xa5, 0x95, 0xa1, 0x3a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x6c, 0x6c,
	0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e,
	0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x12, 0x54,
	0x0a, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x18, 0xee, 0xcb, 0xd9, 0xa2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x6c,
	0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x69, 0x6e, 0x52, 0x07, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x12, 0x57, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0xf1, 0xfd, 0xbf, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d,
	0x6f, 0x75, 0x74, 0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x5c, 0x0a,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0xe3, 0xd7, 0x9f, 0x94,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82, 0x41,
	0x1f, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x60, 0x0a, 0x0c, 0x74,
	0x6c, 0x76, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0xb7, 0x9a, 0x80, 0xed,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f,
	0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x52, 0x0b, 0x74, 0x6c, 0x76, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x5d, 0x0a,
	0x0b, 0x74, 0x6c, 0x76, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0xda, 0x88, 0xb5,
	0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x52, 0x0a, 0x74, 0x6c, 0x76, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x5d, 0x0a, 0x0b,
	0x74, 0x6c, 0x76, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0xfa, 0xff, 0x93, 0xaa,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f,
	0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52,
	0x0a, 0x74, 0x6c, 0x76, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_lldp_proto_rawDescOnce sync.Once
	file_openconfig_lldp_proto_rawDescData = file_openconfig_lldp_proto_rawDesc
)

func file_openconfig_lldp_proto_rawDescGZIP() []byte {
	file_openconfig_lldp_proto_rawDescOnce.Do(func() {
		file_openconfig_lldp_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_lldp_proto_rawDescData)
	})
	return file_openconfig_lldp_proto_rawDescData
}

var file_openconfig_lldp_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_openconfig_lldp_proto_goTypes = []interface{}{
	(*Lldp)(nil),                                                                        // 0: openconfig.Lldp
	(*Lldp_Config)(nil),                                                                 // 1: openconfig.Lldp.Config
	(*Lldp_Interfaces)(nil),                                                             // 2: openconfig.Lldp.Interfaces
	(*Lldp_State)(nil),                                                                  // 3: openconfig.Lldp.State
	(*Lldp_Interfaces_Interface)(nil),                                                   // 4: openconfig.Lldp.Interfaces.Interface
	(*Lldp_Interfaces_InterfaceKey)(nil),                                                // 5: openconfig.Lldp.Interfaces.InterfaceKey
	(*Lldp_Interfaces_Interface_Config)(nil),                                            // 6: openconfig.Lldp.Interfaces.Interface.Config
	(*Lldp_Interfaces_Interface_Neighbors)(nil),                                         // 7: openconfig.Lldp.Interfaces.Interface.Neighbors
	(*Lldp_Interfaces_Interface_State)(nil),                                             // 8: openconfig.Lldp.Interfaces.Interface.State
	(*Lldp_Interfaces_Interface_Neighbors_Neighbor)(nil),                                // 9: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor
	(*Lldp_Interfaces_Interface_Neighbors_NeighborKey)(nil),                             // 10: openconfig.Lldp.Interfaces.Interface.Neighbors.NeighborKey
	(*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities)(nil),                   // 11: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities
	(*Lldp_Interfaces_Interface_Neighbors_Neighbor_Config)(nil),                         // 12: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Config
	(*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs)(nil),                     // 13: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs
	(*Lldp_Interfaces_Interface_Neighbors_Neighbor_State)(nil),                          // 14: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State
	(*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability)(nil),        // 15: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.Capability
	(*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_CapabilityKey)(nil),     // 16: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.CapabilityKey
	(*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config)(nil), // 17: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.Capability.Config
	(*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State)(nil),  // 18: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.Capability.State
	(*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv)(nil),                 // 19: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.Tlv
	(*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey)(nil),              // 20: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.TlvKey
	(*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config)(nil),          // 21: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.Tlv.Config
	(*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State)(nil),           // 22: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.Tlv.State
	(*Lldp_Interfaces_Interface_State_Counters)(nil),                                    // 23: openconfig.Lldp.Interfaces.Interface.State.Counters
	(*Lldp_State_Counters)(nil),                                                         // 24: openconfig.Lldp.State.Counters
	(*ywrapper.StringValue)(nil),                                                        // 25: ywrapper.StringValue
	(OpenconfigLldpChassisIdType)(0),                                                    // 26: openconfig.OpenconfigLldpChassisIdType
	(*ywrapper.BoolValue)(nil),                                                          // 27: ywrapper.BoolValue
	(*ywrapper.UintValue)(nil),                                                          // 28: ywrapper.UintValue
	(OpenconfigLldpTypesLLDPTLV)(0),                                                     // 29: openconfig.OpenconfigLldpTypesLLDPTLV
	(*ywrapper.IntValue)(nil),                                                           // 30: ywrapper.IntValue
	(OpenconfigLldpPortIdType)(0),                                                       // 31: openconfig.OpenconfigLldpPortIdType
	(OpenconfigLldpTypesLLDPSYSTEMCAPABILITY)(0),                                        // 32: openconfig.OpenconfigLldpTypesLLDPSYSTEMCAPABILITY
	(*ywrapper.BytesValue)(nil),                                                         // 33: ywrapper.BytesValue
}
var file_openconfig_lldp_proto_depIdxs = []int32{
	1,  // 0: openconfig.Lldp.config:type_name -> openconfig.Lldp.Config
	2,  // 1: openconfig.Lldp.interfaces:type_name -> openconfig.Lldp.Interfaces
	3,  // 2: openconfig.Lldp.state:type_name -> openconfig.Lldp.State
	25, // 3: openconfig.Lldp.Config.chassis_id:type_name -> ywrapper.StringValue
	26, // 4: openconfig.Lldp.Config.chassis_id_type:type_name -> openconfig.OpenconfigLldpChassisIdType
	27, // 5: openconfig.Lldp.Config.enabled:type_name -> ywrapper.BoolValue
	28, // 6: openconfig.Lldp.Config.hello_timer:type_name -> ywrapper.UintValue
	29, // 7: openconfig.Lldp.Config.suppress_tlv_advertisement:type_name -> openconfig.OpenconfigLldpTypesLLDPTLV
	25, // 8: openconfig.Lldp.Config.system_description:type_name -> ywrapper.StringValue
	25, // 9: openconfig.Lldp.Config.system_name:type_name -> ywrapper.StringValue
	5,  // 10: openconfig.Lldp.Interfaces.interface:type_name -> openconfig.Lldp.Interfaces.InterfaceKey
	25, // 11: openconfig.Lldp.State.chassis_id:type_name -> ywrapper.StringValue
	26, // 12: openconfig.Lldp.State.chassis_id_type:type_name -> openconfig.OpenconfigLldpChassisIdType
	24, // 13: openconfig.Lldp.State.counters:type_name -> openconfig.Lldp.State.Counters
	27, // 14: openconfig.Lldp.State.enabled:type_name -> ywrapper.BoolValue
	28, // 15: openconfig.Lldp.State.hello_timer:type_name -> ywrapper.UintValue
	29, // 16: openconfig.Lldp.State.suppress_tlv_advertisement:type_name -> openconfig.OpenconfigLldpTypesLLDPTLV
	25, // 17: openconfig.Lldp.State.system_description:type_name -> ywrapper.StringValue
	25, // 18: openconfig.Lldp.State.system_name:type_name -> ywrapper.StringValue
	6,  // 19: openconfig.Lldp.Interfaces.Interface.config:type_name -> openconfig.Lldp.Interfaces.Interface.Config
	7,  // 20: openconfig.Lldp.Interfaces.Interface.neighbors:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors
	8,  // 21: openconfig.Lldp.Interfaces.Interface.state:type_name -> openconfig.Lldp.Interfaces.Interface.State
	4,  // 22: openconfig.Lldp.Interfaces.InterfaceKey.interface:type_name -> openconfig.Lldp.Interfaces.Interface
	27, // 23: openconfig.Lldp.Interfaces.Interface.Config.enabled:type_name -> ywrapper.BoolValue
	25, // 24: openconfig.Lldp.Interfaces.Interface.Config.name:type_name -> ywrapper.StringValue
	10, // 25: openconfig.Lldp.Interfaces.Interface.Neighbors.neighbor:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors.NeighborKey
	23, // 26: openconfig.Lldp.Interfaces.Interface.State.counters:type_name -> openconfig.Lldp.Interfaces.Interface.State.Counters
	27, // 27: openconfig.Lldp.Interfaces.Interface.State.enabled:type_name -> ywrapper.BoolValue
	25, // 28: openconfig.Lldp.Interfaces.Interface.State.name:type_name -> ywrapper.StringValue
	11, // 29: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.capabilities:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities
	12, // 30: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.config:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Config
	13, // 31: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.custom_tlvs:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs
	14, // 32: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.state:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State
	9,  // 33: openconfig.Lldp.Interfaces.Interface.Neighbors.NeighborKey.neighbor:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor
	16, // 34: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.capability:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.CapabilityKey
	20, // 35: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.tlv:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.TlvKey
	28, // 36: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State.age:type_name -> ywrapper.UintValue
	25, // 37: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State.chassis_id:type_name -> ywrapper.StringValue
	26, // 38: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State.chassis_id_type:type_name -> openconfig.OpenconfigLldpChassisIdType
	25, // 39: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State.id:type_name -> ywrapper.StringValue
	30, // 40: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State.last_update:type_name -> ywrapper.IntValue
	25, // 41: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State.management_address:type_name -> ywrapper.StringValue
	25, // 42: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State.management_address_type:type_name -> ywrapper.StringValue
	25, // 43: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State.port_description:type_name -> ywrapper.StringValue
	25, // 44: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State.port_id:type_name -> ywrapper.StringValue
	31, // 45: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State.port_id_type:type_name -> openconfig.OpenconfigLldpPortIdType
	25, // 46: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State.system_description:type_name -> ywrapper.StringValue
	25, // 47: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State.system_name:type_name -> ywrapper.StringValue
	28, // 48: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.State.ttl:type_name -> ywrapper.UintValue
	17, // 49: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.Capability.config:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.Capability.Config
	18, // 50: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.Capability.state:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.Capability.State
	32, // 51: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.CapabilityKey.name:type_name -> openconfig.OpenconfigLldpTypesLLDPSYSTEMCAPABILITY
	15, // 52: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.CapabilityKey.capability:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.Capability
	27, // 53: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.Capability.State.enabled:type_name -> ywrapper.BoolValue
	32, // 54: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.Capabilities.Capability.State.name:type_name -> openconfig.OpenconfigLldpTypesLLDPSYSTEMCAPABILITY
	21, // 55: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.Tlv.config:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.Tlv.Config
	22, // 56: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.Tlv.state:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.Tlv.State
	19, // 57: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.TlvKey.tlv:type_name -> openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.Tlv
	25, // 58: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.Tlv.State.oui:type_name -> ywrapper.StringValue
	25, // 59: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.Tlv.State.oui_subtype:type_name -> ywrapper.StringValue
	30, // 60: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.Tlv.State.type:type_name -> ywrapper.IntValue
	33, // 61: openconfig.Lldp.Interfaces.Interface.Neighbors.Neighbor.CustomTlvs.Tlv.State.value:type_name -> ywrapper.BytesValue
	28, // 62: openconfig.Lldp.Interfaces.Interface.State.Counters.frame_discard:type_name -> ywrapper.UintValue
	28, // 63: openconfig.Lldp.Interfaces.Interface.State.Counters.frame_error_in:type_name -> ywrapper.UintValue
	28, // 64: openconfig.Lldp.Interfaces.Interface.State.Counters.frame_error_out:type_name -> ywrapper.UintValue
	28, // 65: openconfig.Lldp.Interfaces.Interface.State.Counters.frame_in:type_name -> ywrapper.UintValue
	28, // 66: openconfig.Lldp.Interfaces.Interface.State.Counters.frame_out:type_name -> ywrapper.UintValue
	25, // 67: openconfig.Lldp.Interfaces.Interface.State.Counters.last_clear:type_name -> ywrapper.StringValue
	28, // 68: openconfig.Lldp.Interfaces.Interface.State.Counters.tlv_discard:type_name -> ywrapper.UintValue
	28, // 69: openconfig.Lldp.Interfaces.Interface.State.Counters.tlv_unknown:type_name -> ywrapper.UintValue
	28, // 70: openconfig.Lldp.State.Counters.entries_aged_out:type_name -> ywrapper.UintValue
	28, // 71: openconfig.Lldp.State.Counters.frame_discard:type_name -> ywrapper.UintValue
	28, // 72: openconfig.Lldp.State.Counters.frame_error_in:type_name -> ywrapper.UintValue
	28, // 73: openconfig.Lldp.State.Counters.frame_in:type_name -> ywrapper.UintValue
	28, // 74: openconfig.Lldp.State.Counters.frame_out:type_name -> ywrapper.UintValue
	25, // 75: openconfig.Lldp.State.Counters.last_clear:type_name -> ywrapper.StringValue
	28, // 76: openconfig.Lldp.State.Counters.tlv_accepted:type_name -> ywrapper.UintValue
	28, // 77: openconfig.Lldp.State.Counters.tlv_discard:type_name -> ywrapper.UintValue
	28, // 78: openconfig.Lldp.State.Counters.tlv_unknown:type_name -> ywrapper.UintValue
	79, // [79:79] is the sub-list for method output_type
	79, // [79:79] is the sub-list for method input_type
	79, // [79:79] is the sub-list for extension type_name
	79, // [79:79] is the sub-list for extension extendee
	0,  // [0:79] is the sub-list for field type_name
}

func init() { file_openconfig_lldp_proto_init() }
func file_openconfig_lldp_proto_init() {
	if File_openconfig_lldp_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_lldp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_InterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors_Neighbor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_CapabilityKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_TlvKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_Interfaces_Interface_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_lldp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_lldp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_lldp_proto_goTypes,
		DependencyIndexes: file_openconfig_lldp_proto_depIdxs,
		MessageInfos:      file_openconfig_lldp_proto_msgTypes,
	}.Build()
	File_openconfig_lldp_proto = out.File
	file_openconfig_lldp_proto_rawDesc = nil
	file_openconfig_lldp_proto_goTypes = nil
	file_openconfig_lldp_proto_depIdxs = nil
}
