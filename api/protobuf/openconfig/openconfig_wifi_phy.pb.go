// openconfig.openconfig_wifi_phy is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_wifi_phy.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Radios_Radio_Neighbors_Neighbor_State_Opmode int32

const (
	Radios_Radio_Neighbors_Neighbor_State_OPMODE_UNSET           Radios_Radio_Neighbors_Neighbor_State_Opmode = 0
	Radios_Radio_Neighbors_Neighbor_State_OPMODE_OPEN            Radios_Radio_Neighbors_Neighbor_State_Opmode = 1
	Radios_Radio_Neighbors_Neighbor_State_OPMODE_WPA2_PERSONAL   Radios_Radio_Neighbors_Neighbor_State_Opmode = 2
	Radios_Radio_Neighbors_Neighbor_State_OPMODE_WPA2_ENTERPRISE Radios_Radio_Neighbors_Neighbor_State_Opmode = 3
	Radios_Radio_Neighbors_Neighbor_State_OPMODE_WPA_PERSONAL    Radios_Radio_Neighbors_Neighbor_State_Opmode = 4
	Radios_Radio_Neighbors_Neighbor_State_OPMODE_WPA_ENTERPRISE  Radios_Radio_Neighbors_Neighbor_State_Opmode = 5
	Radios_Radio_Neighbors_Neighbor_State_OPMODE_WEP             Radios_Radio_Neighbors_Neighbor_State_Opmode = 6
)

// Enum value maps for Radios_Radio_Neighbors_Neighbor_State_Opmode.
var (
	Radios_Radio_Neighbors_Neighbor_State_Opmode_name = map[int32]string{
		0: "OPMODE_UNSET",
		1: "OPMODE_OPEN",
		2: "OPMODE_WPA2_PERSONAL",
		3: "OPMODE_WPA2_ENTERPRISE",
		4: "OPMODE_WPA_PERSONAL",
		5: "OPMODE_WPA_ENTERPRISE",
		6: "OPMODE_WEP",
	}
	Radios_Radio_Neighbors_Neighbor_State_Opmode_value = map[string]int32{
		"OPMODE_UNSET":           0,
		"OPMODE_OPEN":            1,
		"OPMODE_WPA2_PERSONAL":   2,
		"OPMODE_WPA2_ENTERPRISE": 3,
		"OPMODE_WPA_PERSONAL":    4,
		"OPMODE_WPA_ENTERPRISE":  5,
		"OPMODE_WEP":             6,
	}
)

func (x Radios_Radio_Neighbors_Neighbor_State_Opmode) Enum() *Radios_Radio_Neighbors_Neighbor_State_Opmode {
	p := new(Radios_Radio_Neighbors_Neighbor_State_Opmode)
	*p = x
	return p
}

func (x Radios_Radio_Neighbors_Neighbor_State_Opmode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Radios_Radio_Neighbors_Neighbor_State_Opmode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_wifi_phy_proto_enumTypes[0].Descriptor()
}

func (Radios_Radio_Neighbors_Neighbor_State_Opmode) Type() protoreflect.EnumType {
	return &file_openconfig_wifi_phy_proto_enumTypes[0]
}

func (x Radios_Radio_Neighbors_Neighbor_State_Opmode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Radios_Radio_Neighbors_Neighbor_State_Opmode.Descriptor instead.
func (Radios_Radio_Neighbors_Neighbor_State_Opmode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_wifi_phy_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0}
}

type Radios struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Radio []*Radios_RadioKey `protobuf:"bytes,508208457,rep,name=radio,proto3" json:"radio,omitempty"`
}

func (x *Radios) Reset() {
	*x = Radios{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_phy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Radios) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radios) ProtoMessage() {}

func (x *Radios) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_phy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radios.ProtoReflect.Descriptor instead.
func (*Radios) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_phy_proto_rawDescGZIP(), []int{0}
}

func (x *Radios) GetRadio() []*Radios_RadioKey {
	if x != nil {
		return x.Radio
	}
	return nil
}

type Radios_Radio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config    *Radios_Radio_Config    `protobuf:"bytes,25073214,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors *Radios_Radio_Neighbors `protobuf:"bytes,225641045,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	State     *Radios_Radio_State     `protobuf:"bytes,464575787,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Radios_Radio) Reset() {
	*x = Radios_Radio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_phy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Radios_Radio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radios_Radio) ProtoMessage() {}

func (x *Radios_Radio) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_phy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radios_Radio.ProtoReflect.Descriptor instead.
func (*Radios_Radio) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_phy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Radios_Radio) GetConfig() *Radios_Radio_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Radios_Radio) GetNeighbors() *Radios_Radio_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *Radios_Radio) GetState() *Radios_Radio_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Radios_RadioKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64                                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OperatingFrequency OpenconfigWifiTypesOPERATINGFREQUENCY `protobuf:"varint,2,opt,name=operating_frequency,json=operatingFrequency,proto3,enum=openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY" json:"operating_frequency,omitempty"`
	Radio              *Radios_Radio                         `protobuf:"bytes,3,opt,name=radio,proto3" json:"radio,omitempty"`
}

func (x *Radios_RadioKey) Reset() {
	*x = Radios_RadioKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_phy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Radios_RadioKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radios_RadioKey) ProtoMessage() {}

func (x *Radios_RadioKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_phy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radios_RadioKey.ProtoReflect.Descriptor instead.
func (*Radios_RadioKey) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_phy_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Radios_RadioKey) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Radios_RadioKey) GetOperatingFrequency() OpenconfigWifiTypesOPERATINGFREQUENCY {
	if x != nil {
		return x.OperatingFrequency
	}
	return OpenconfigWifiTypesOPERATINGFREQUENCY_OPENCONFIGWIFITYPESOPERATINGFREQUENCY_UNSET
}

func (x *Radios_RadioKey) GetRadio() *Radios_Radio {
	if x != nil {
		return x.Radio
	}
	return nil
}

type Radios_Radio_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedChannels      []*ywrapper.UintValue                 `protobuf:"bytes,287461692,rep,name=allowed_channels,json=allowedChannels,proto3" json:"allowed_channels,omitempty"`
	AntennaGain          *ywrapper.IntValue                    `protobuf:"bytes,136773194,opt,name=antenna_gain,json=antennaGain,proto3" json:"antenna_gain,omitempty"`
	Channel              *ywrapper.UintValue                   `protobuf:"bytes,240795514,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelWidth         *ywrapper.UintValue                   `protobuf:"bytes,110498113,opt,name=channel_width,json=channelWidth,proto3" json:"channel_width,omitempty"`
	Dca                  *ywrapper.BoolValue                   `protobuf:"bytes,493232983,opt,name=dca,proto3" json:"dca,omitempty"`
	Dtp                  *ywrapper.BoolValue                   `protobuf:"bytes,275123919,opt,name=dtp,proto3" json:"dtp,omitempty"`
	DtpMax               *ywrapper.IntValue                    `protobuf:"bytes,133217130,opt,name=dtp_max,json=dtpMax,proto3" json:"dtp_max,omitempty"`
	DtpMin               *ywrapper.IntValue                    `protobuf:"bytes,267438020,opt,name=dtp_min,json=dtpMin,proto3" json:"dtp_min,omitempty"`
	Enabled              *ywrapper.BoolValue                   `protobuf:"bytes,344574108,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Id                   *ywrapper.UintValue                   `protobuf:"bytes,203006358,opt,name=id,proto3" json:"id,omitempty"`
	OperatingFrequency   OpenconfigWifiTypesOPERATINGFREQUENCY `protobuf:"varint,163366295,opt,name=operating_frequency,json=operatingFrequency,proto3,enum=openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY" json:"operating_frequency,omitempty"`
	Scanning             *ywrapper.BoolValue                   `protobuf:"bytes,181136512,opt,name=scanning,proto3" json:"scanning,omitempty"`
	ScanningDeferClients *ywrapper.UintValue                   `protobuf:"bytes,94483184,opt,name=scanning_defer_clients,json=scanningDeferClients,proto3" json:"scanning_defer_clients,omitempty"`
	ScanningDeferTraffic *ywrapper.BoolValue                   `protobuf:"bytes,319636767,opt,name=scanning_defer_traffic,json=scanningDeferTraffic,proto3" json:"scanning_defer_traffic,omitempty"`
	ScanningDwellTime    *ywrapper.UintValue                   `protobuf:"bytes,72370243,opt,name=scanning_dwell_time,json=scanningDwellTime,proto3" json:"scanning_dwell_time,omitempty"`
	ScanningInterval     *ywrapper.UintValue                   `protobuf:"bytes,522281730,opt,name=scanning_interval,json=scanningInterval,proto3" json:"scanning_interval,omitempty"`
	TransmitEirp         *ywrapper.UintValue                   `protobuf:"bytes,173940190,opt,name=transmit_eirp,json=transmitEirp,proto3" json:"transmit_eirp,omitempty"`
	TransmitPower        *ywrapper.IntValue                    `protobuf:"bytes,144254149,opt,name=transmit_power,json=transmitPower,proto3" json:"transmit_power,omitempty"`
}

func (x *Radios_Radio_Config) Reset() {
	*x = Radios_Radio_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_phy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Radios_Radio_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radios_Radio_Config) ProtoMessage() {}

func (x *Radios_Radio_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_phy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radios_Radio_Config.ProtoReflect.Descriptor instead.
func (*Radios_Radio_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_phy_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Radios_Radio_Config) GetAllowedChannels() []*ywrapper.UintValue {
	if x != nil {
		return x.AllowedChannels
	}
	return nil
}

func (x *Radios_Radio_Config) GetAntennaGain() *ywrapper.IntValue {
	if x != nil {
		return x.AntennaGain
	}
	return nil
}

func (x *Radios_Radio_Config) GetChannel() *ywrapper.UintValue {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *Radios_Radio_Config) GetChannelWidth() *ywrapper.UintValue {
	if x != nil {
		return x.ChannelWidth
	}
	return nil
}

func (x *Radios_Radio_Config) GetDca() *ywrapper.BoolValue {
	if x != nil {
		return x.Dca
	}
	return nil
}

func (x *Radios_Radio_Config) GetDtp() *ywrapper.BoolValue {
	if x != nil {
		return x.Dtp
	}
	return nil
}

func (x *Radios_Radio_Config) GetDtpMax() *ywrapper.IntValue {
	if x != nil {
		return x.DtpMax
	}
	return nil
}

func (x *Radios_Radio_Config) GetDtpMin() *ywrapper.IntValue {
	if x != nil {
		return x.DtpMin
	}
	return nil
}

func (x *Radios_Radio_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Radios_Radio_Config) GetId() *ywrapper.UintValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Radios_Radio_Config) GetOperatingFrequency() OpenconfigWifiTypesOPERATINGFREQUENCY {
	if x != nil {
		return x.OperatingFrequency
	}
	return OpenconfigWifiTypesOPERATINGFREQUENCY_OPENCONFIGWIFITYPESOPERATINGFREQUENCY_UNSET
}

func (x *Radios_Radio_Config) GetScanning() *ywrapper.BoolValue {
	if x != nil {
		return x.Scanning
	}
	return nil
}

func (x *Radios_Radio_Config) GetScanningDeferClients() *ywrapper.UintValue {
	if x != nil {
		return x.ScanningDeferClients
	}
	return nil
}

func (x *Radios_Radio_Config) GetScanningDeferTraffic() *ywrapper.BoolValue {
	if x != nil {
		return x.ScanningDeferTraffic
	}
	return nil
}

func (x *Radios_Radio_Config) GetScanningDwellTime() *ywrapper.UintValue {
	if x != nil {
		return x.ScanningDwellTime
	}
	return nil
}

func (x *Radios_Radio_Config) GetScanningInterval() *ywrapper.UintValue {
	if x != nil {
		return x.ScanningInterval
	}
	return nil
}

func (x *Radios_Radio_Config) GetTransmitEirp() *ywrapper.UintValue {
	if x != nil {
		return x.TransmitEirp
	}
	return nil
}

func (x *Radios_Radio_Config) GetTransmitPower() *ywrapper.IntValue {
	if x != nil {
		return x.TransmitPower
	}
	return nil
}

type Radios_Radio_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Radios_Radio_Neighbors_NeighborKey `protobuf:"bytes,529834398,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Radios_Radio_Neighbors) Reset() {
	*x = Radios_Radio_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_phy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Radios_Radio_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radios_Radio_Neighbors) ProtoMessage() {}

func (x *Radios_Radio_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_phy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radios_Radio_Neighbors.ProtoReflect.Descriptor instead.
func (*Radios_Radio_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_phy_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Radios_Radio_Neighbors) GetNeighbor() []*Radios_Radio_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Radios_Radio_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedChannels           []*ywrapper.UintValue                 `protobuf:"bytes,373743371,rep,name=allowed_channels,json=allowedChannels,proto3" json:"allowed_channels,omitempty"`
	AllowedRegulatoryChannels []*ywrapper.UintValue                 `protobuf:"bytes,327191202,rep,name=allowed_regulatory_channels,json=allowedRegulatoryChannels,proto3" json:"allowed_regulatory_channels,omitempty"`
	AntennaGain               *ywrapper.IntValue                    `protobuf:"bytes,294116409,opt,name=antenna_gain,json=antennaGain,proto3" json:"antenna_gain,omitempty"`
	BaseRadioMac              *ywrapper.StringValue                 `protobuf:"bytes,62813897,opt,name=base_radio_mac,json=baseRadioMac,proto3" json:"base_radio_mac,omitempty"`
	Channel                   *ywrapper.UintValue                   `protobuf:"bytes,224195199,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelChangeReason       OpenconfigWifiTypesCHANGEREASONTYPE   `protobuf:"varint,119452921,opt,name=channel_change_reason,json=channelChangeReason,proto3,enum=openconfig.OpenconfigWifiTypesCHANGEREASONTYPE" json:"channel_change_reason,omitempty"`
	ChannelWidth              *ywrapper.UintValue                   `protobuf:"bytes,61632036,opt,name=channel_width,json=channelWidth,proto3" json:"channel_width,omitempty"`
	Counters                  *Radios_Radio_State_Counters          `protobuf:"bytes,23007449,opt,name=counters,proto3" json:"counters,omitempty"`
	Dca                       *ywrapper.BoolValue                   `protobuf:"bytes,482972730,opt,name=dca,proto3" json:"dca,omitempty"`
	DfsHitTime                *ywrapper.UintValue                   `protobuf:"bytes,451589139,opt,name=dfs_hit_time,json=dfsHitTime,proto3" json:"dfs_hit_time,omitempty"`
	Dtp                       *ywrapper.BoolValue                   `protobuf:"bytes,298419066,opt,name=dtp,proto3" json:"dtp,omitempty"`
	DtpMax                    *ywrapper.IntValue                    `protobuf:"bytes,193172031,opt,name=dtp_max,json=dtpMax,proto3" json:"dtp_max,omitempty"`
	DtpMin                    *ywrapper.IntValue                    `protobuf:"bytes,58951105,opt,name=dtp_min,json=dtpMin,proto3" json:"dtp_min,omitempty"`
	Enabled                   *ywrapper.BoolValue                   `protobuf:"bytes,190273197,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Id                        *ywrapper.UintValue                   `protobuf:"bytes,216591949,opt,name=id,proto3" json:"id,omitempty"`
	OperatingFrequency        OpenconfigWifiTypesOPERATINGFREQUENCY `protobuf:"varint,131574810,opt,name=operating_frequency,json=operatingFrequency,proto3,enum=openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY" json:"operating_frequency,omitempty"`
	RxDot11ChannelUtilization *ywrapper.UintValue                   `protobuf:"bytes,175802841,opt,name=rx_dot11_channel_utilization,json=rxDot11ChannelUtilization,proto3" json:"rx_dot11_channel_utilization,omitempty"`
	RxNoiseChannelUtilization *ywrapper.UintValue                   `protobuf:"bytes,207038796,opt,name=rx_noise_channel_utilization,json=rxNoiseChannelUtilization,proto3" json:"rx_noise_channel_utilization,omitempty"`
	Scanning                  *ywrapper.BoolValue                   `protobuf:"bytes,292089383,opt,name=scanning,proto3" json:"scanning,omitempty"`
	ScanningDeferClients      *ywrapper.UintValue                   `protobuf:"bytes,235604303,opt,name=scanning_defer_clients,json=scanningDeferClients,proto3" json:"scanning_defer_clients,omitempty"`
	ScanningDeferTraffic      *ywrapper.BoolValue                   `protobuf:"bytes,251179576,opt,name=scanning_defer_traffic,json=scanningDeferTraffic,proto3" json:"scanning_defer_traffic,omitempty"`
	ScanningDwellTime         *ywrapper.UintValue                   `protobuf:"bytes,229045678,opt,name=scanning_dwell_time,json=scanningDwellTime,proto3" json:"scanning_dwell_time,omitempty"`
	ScanningInterval          *ywrapper.UintValue                   `protobuf:"bytes,397774491,opt,name=scanning_interval,json=scanningInterval,proto3" json:"scanning_interval,omitempty"`
	SoftwareSelectable        *ywrapper.BoolValue                   `protobuf:"bytes,53473170,opt,name=software_selectable,json=softwareSelectable,proto3" json:"software_selectable,omitempty"`
	SupportedChannels         []*ywrapper.UintValue                 `protobuf:"bytes,364155269,rep,name=supported_channels,json=supportedChannels,proto3" json:"supported_channels,omitempty"`
	TotalChannelUtilization   *ywrapper.UintValue                   `protobuf:"bytes,345472189,opt,name=total_channel_utilization,json=totalChannelUtilization,proto3" json:"total_channel_utilization,omitempty"`
	TransmitEirp              *ywrapper.UintValue                   `protobuf:"bytes,77280935,opt,name=transmit_eirp,json=transmitEirp,proto3" json:"transmit_eirp,omitempty"`
	TransmitPower             *ywrapper.IntValue                    `protobuf:"bytes,11818902,opt,name=transmit_power,json=transmitPower,proto3" json:"transmit_power,omitempty"`
	TxDot11ChannelUtilization *ywrapper.UintValue                   `protobuf:"bytes,107177407,opt,name=tx_dot11_channel_utilization,json=txDot11ChannelUtilization,proto3" json:"tx_dot11_channel_utilization,omitempty"`
}

func (x *Radios_Radio_State) Reset() {
	*x = Radios_Radio_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_phy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Radios_Radio_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radios_Radio_State) ProtoMessage() {}

func (x *Radios_Radio_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_phy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radios_Radio_State.ProtoReflect.Descriptor instead.
func (*Radios_Radio_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_phy_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Radios_Radio_State) GetAllowedChannels() []*ywrapper.UintValue {
	if x != nil {
		return x.AllowedChannels
	}
	return nil
}

func (x *Radios_Radio_State) GetAllowedRegulatoryChannels() []*ywrapper.UintValue {
	if x != nil {
		return x.AllowedRegulatoryChannels
	}
	return nil
}

func (x *Radios_Radio_State) GetAntennaGain() *ywrapper.IntValue {
	if x != nil {
		return x.AntennaGain
	}
	return nil
}

func (x *Radios_Radio_State) GetBaseRadioMac() *ywrapper.StringValue {
	if x != nil {
		return x.BaseRadioMac
	}
	return nil
}

func (x *Radios_Radio_State) GetChannel() *ywrapper.UintValue {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *Radios_Radio_State) GetChannelChangeReason() OpenconfigWifiTypesCHANGEREASONTYPE {
	if x != nil {
		return x.ChannelChangeReason
	}
	return OpenconfigWifiTypesCHANGEREASONTYPE_OPENCONFIGWIFITYPESCHANGEREASONTYPE_UNSET
}

func (x *Radios_Radio_State) GetChannelWidth() *ywrapper.UintValue {
	if x != nil {
		return x.ChannelWidth
	}
	return nil
}

func (x *Radios_Radio_State) GetCounters() *Radios_Radio_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Radios_Radio_State) GetDca() *ywrapper.BoolValue {
	if x != nil {
		return x.Dca
	}
	return nil
}

func (x *Radios_Radio_State) GetDfsHitTime() *ywrapper.UintValue {
	if x != nil {
		return x.DfsHitTime
	}
	return nil
}

func (x *Radios_Radio_State) GetDtp() *ywrapper.BoolValue {
	if x != nil {
		return x.Dtp
	}
	return nil
}

func (x *Radios_Radio_State) GetDtpMax() *ywrapper.IntValue {
	if x != nil {
		return x.DtpMax
	}
	return nil
}

func (x *Radios_Radio_State) GetDtpMin() *ywrapper.IntValue {
	if x != nil {
		return x.DtpMin
	}
	return nil
}

func (x *Radios_Radio_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Radios_Radio_State) GetId() *ywrapper.UintValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Radios_Radio_State) GetOperatingFrequency() OpenconfigWifiTypesOPERATINGFREQUENCY {
	if x != nil {
		return x.OperatingFrequency
	}
	return OpenconfigWifiTypesOPERATINGFREQUENCY_OPENCONFIGWIFITYPESOPERATINGFREQUENCY_UNSET
}

func (x *Radios_Radio_State) GetRxDot11ChannelUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.RxDot11ChannelUtilization
	}
	return nil
}

func (x *Radios_Radio_State) GetRxNoiseChannelUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.RxNoiseChannelUtilization
	}
	return nil
}

func (x *Radios_Radio_State) GetScanning() *ywrapper.BoolValue {
	if x != nil {
		return x.Scanning
	}
	return nil
}

func (x *Radios_Radio_State) GetScanningDeferClients() *ywrapper.UintValue {
	if x != nil {
		return x.ScanningDeferClients
	}
	return nil
}

func (x *Radios_Radio_State) GetScanningDeferTraffic() *ywrapper.BoolValue {
	if x != nil {
		return x.ScanningDeferTraffic
	}
	return nil
}

func (x *Radios_Radio_State) GetScanningDwellTime() *ywrapper.UintValue {
	if x != nil {
		return x.ScanningDwellTime
	}
	return nil
}

func (x *Radios_Radio_State) GetScanningInterval() *ywrapper.UintValue {
	if x != nil {
		return x.ScanningInterval
	}
	return nil
}

func (x *Radios_Radio_State) GetSoftwareSelectable() *ywrapper.BoolValue {
	if x != nil {
		return x.SoftwareSelectable
	}
	return nil
}

func (x *Radios_Radio_State) GetSupportedChannels() []*ywrapper.UintValue {
	if x != nil {
		return x.SupportedChannels
	}
	return nil
}

func (x *Radios_Radio_State) GetTotalChannelUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.TotalChannelUtilization
	}
	return nil
}

func (x *Radios_Radio_State) GetTransmitEirp() *ywrapper.UintValue {
	if x != nil {
		return x.TransmitEirp
	}
	return nil
}

func (x *Radios_Radio_State) GetTransmitPower() *ywrapper.IntValue {
	if x != nil {
		return x.TransmitPower
	}
	return nil
}

func (x *Radios_Radio_State) GetTxDot11ChannelUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.TxDot11ChannelUtilization
	}
	return nil
}

type Radios_Radio_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Radios_Radio_Neighbors_Neighbor_State `protobuf:"bytes,170068704,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Radios_Radio_Neighbors_Neighbor) Reset() {
	*x = Radios_Radio_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_phy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Radios_Radio_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radios_Radio_Neighbors_Neighbor) ProtoMessage() {}

func (x *Radios_Radio_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_phy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radios_Radio_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Radios_Radio_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_phy_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *Radios_Radio_Neighbors_Neighbor) GetState() *Radios_Radio_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Radios_Radio_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bssid    string                           `protobuf:"bytes,1,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Neighbor *Radios_Radio_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Radios_Radio_Neighbors_NeighborKey) Reset() {
	*x = Radios_Radio_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_phy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Radios_Radio_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radios_Radio_Neighbors_NeighborKey) ProtoMessage() {}

func (x *Radios_Radio_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_phy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radios_Radio_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*Radios_Radio_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_phy_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

func (x *Radios_Radio_Neighbors_NeighborKey) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *Radios_Radio_Neighbors_NeighborKey) GetNeighbor() *Radios_Radio_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Radios_Radio_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bssid          *ywrapper.StringValue                        `protobuf:"bytes,263931714,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Channel        *ywrapper.UintValue                          `protobuf:"bytes,266073572,opt,name=channel,proto3" json:"channel,omitempty"`
	LastSeen       *ywrapper.UintValue                          `protobuf:"bytes,231383841,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	Opmode         Radios_Radio_Neighbors_Neighbor_State_Opmode `protobuf:"varint,434621987,opt,name=opmode,proto3,enum=openconfig.Radios_Radio_Neighbors_Neighbor_State_Opmode" json:"opmode,omitempty"`
	PrimaryChannel *ywrapper.UintValue                          `protobuf:"bytes,269323997,opt,name=primary_channel,json=primaryChannel,proto3" json:"primary_channel,omitempty"`
	Rssi           *ywrapper.IntValue                           `protobuf:"bytes,284470482,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Ssid           *ywrapper.StringValue                        `protobuf:"bytes,240710930,opt,name=ssid,proto3" json:"ssid,omitempty"`
}

func (x *Radios_Radio_Neighbors_Neighbor_State) Reset() {
	*x = Radios_Radio_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_phy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Radios_Radio_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radios_Radio_Neighbors_Neighbor_State) ProtoMessage() {}

func (x *Radios_Radio_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_phy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radios_Radio_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*Radios_Radio_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_phy_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (x *Radios_Radio_Neighbors_Neighbor_State) GetBssid() *ywrapper.StringValue {
	if x != nil {
		return x.Bssid
	}
	return nil
}

func (x *Radios_Radio_Neighbors_Neighbor_State) GetChannel() *ywrapper.UintValue {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *Radios_Radio_Neighbors_Neighbor_State) GetLastSeen() *ywrapper.UintValue {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *Radios_Radio_Neighbors_Neighbor_State) GetOpmode() Radios_Radio_Neighbors_Neighbor_State_Opmode {
	if x != nil {
		return x.Opmode
	}
	return Radios_Radio_Neighbors_Neighbor_State_OPMODE_UNSET
}

func (x *Radios_Radio_Neighbors_Neighbor_State) GetPrimaryChannel() *ywrapper.UintValue {
	if x != nil {
		return x.PrimaryChannel
	}
	return nil
}

func (x *Radios_Radio_Neighbors_Neighbor_State) GetRssi() *ywrapper.IntValue {
	if x != nil {
		return x.Rssi
	}
	return nil
}

func (x *Radios_Radio_Neighbors_Neighbor_State) GetSsid() *ywrapper.StringValue {
	if x != nil {
		return x.Ssid
	}
	return nil
}

type Radios_Radio_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedFcsFrames *ywrapper.UintValue `protobuf:"bytes,362574451,opt,name=failed_fcs_frames,json=failedFcsFrames,proto3" json:"failed_fcs_frames,omitempty"`
	NoiseFloor      *ywrapper.IntValue  `protobuf:"bytes,305481331,opt,name=noise_floor,json=noiseFloor,proto3" json:"noise_floor,omitempty"`
}

func (x *Radios_Radio_State_Counters) Reset() {
	*x = Radios_Radio_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_phy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Radios_Radio_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radios_Radio_State_Counters) ProtoMessage() {}

func (x *Radios_Radio_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_phy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radios_Radio_State_Counters.ProtoReflect.Descriptor instead.
func (*Radios_Radio_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_phy_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *Radios_Radio_State_Counters) GetFailedFcsFrames() *ywrapper.UintValue {
	if x != nil {
		return x.FailedFcsFrames
	}
	return nil
}

func (x *Radios_Radio_State_Counters) GetNoiseFloor() *ywrapper.IntValue {
	if x != nil {
		return x.NoiseFloor
	}
	return nil
}

var File_openconfig_wifi_phy_proto protoreflect.FileDescriptor

var file_openconfig_wifi_phy_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x77, 0x69, 0x66,
	0x69, 0x5f, 0x70, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x38, 0x0a, 0x06,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x18,
	0xc9, 0xca, 0xaa, 0xf2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2e, 0x52, 0x61,
	0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x42, 0x10, 0x82, 0x41, 0x0d, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x05, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x1a,
	0xdb, 0x35, 0x0a, 0x05, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x12, 0x53, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xbe, 0xac, 0xfa, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x17, 0x82,
	0x41, 0x14, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5f,
	0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0xd5, 0x84, 0xcc, 0x6b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12,
	0x50, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xab, 0xba, 0xc3, 0xdd, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x16, 0x82, 0x41, 0x13, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xef, 0x0d, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6c, 0x0a, 0x10,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0xbc, 0xa2, 0x89, 0x89, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x28, 0x82, 0x41, 0x25, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x0c, 0x61, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0xca, 0xfc, 0x9b, 0x41, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x52, 0x0b, 0x61,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xfa, 0xfe, 0xe8, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x62, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xc1,
	0xa2, 0xd8, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41,
	0x22, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x46, 0x0a, 0x03, 0x64, 0x63, 0x61, 0x18, 0xd7, 0xc6, 0x98, 0xeb, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x64, 0x63, 0x61, 0x52, 0x03, 0x64, 0x63, 0x61, 0x12, 0x46, 0x0a, 0x03, 0x64, 0x74, 0x70,
	0x18, 0xcf, 0x9d, 0x98, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1b, 0x82, 0x41, 0x18, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x74, 0x70, 0x52, 0x03, 0x64, 0x74,
	0x70, 0x12, 0x4f, 0x0a, 0x07, 0x64, 0x74, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xea, 0xf6, 0xc2,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x64, 0x74, 0x70, 0x2d, 0x6d, 0x61, 0x78, 0x52, 0x06, 0x64, 0x74, 0x70, 0x4d,
	0x61, 0x78, 0x12, 0x4f, 0x0a, 0x07, 0x64, 0x74, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0xc4, 0x8f,
	0xc3, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x64, 0x74, 0x70, 0x2d, 0x6d, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x74, 0x70,
	0x4d, 0x69, 0x6e, 0x12, 0x52, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x9c,
	0x91, 0xa7, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1f, 0x82,
	0x41, 0x1c, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x96, 0xc3,
	0xe6, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x82, 0x41, 0x17,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x13,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x97, 0x8b, 0xf3, 0x4d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x42,
	0x2b, 0x82, 0x41, 0x28, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x54, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x80, 0xd9, 0xaf,
	0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x7c, 0x0a, 0x16, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0xf0, 0xe5, 0x86, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e,
	0x82, 0x41, 0x2b, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x2d, 0x64, 0x65, 0x66, 0x65, 0x72, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x14,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x7d, 0x0a, 0x16, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x9f,
	0x8a, 0xb5, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82,
	0x41, 0x2b, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2d,
	0x64, 0x65, 0x66, 0x65, 0x72, 0x2d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x14, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x12, 0x73, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc3, 0x90, 0xc1, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x64, 0x77, 0x65, 0x6c, 0x6c,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44,
	0x77, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x82, 0xc6,
	0x85, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41,
	0x26, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x69, 0x72, 0x70, 0x18, 0xde, 0xbb, 0xf8, 0x52, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x65, 0x69, 0x72, 0x70, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x45, 0x69, 0x72, 0x70, 0x12, 0x64, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0xc5, 0xc9, 0xe4, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41,
	0x23, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x1a, 0x9b, 0x0b, 0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x12, 0x73, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x9e, 0xc3,
	0xd2, 0xfc, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69,
	0x6f, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xfe, 0x08, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x12, 0x75, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe0, 0x95, 0x8c,
	0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xfa, 0x07, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0xc2, 0x8e,
	0xed, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82,
	0x41, 0x2c, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x52, 0x05,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x63, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0xe4, 0xeb, 0xef, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31,
	0x82, 0x41, 0x2e, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x68, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0xa1, 0xc6, 0xaa, 0x6e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x73, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x06, 0x6f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0xa3, 0x9c, 0x9f, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2e, 0x52, 0x61,
	0x64, 0x69, 0x6f, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x70, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x7b, 0x0a,
	0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0xdd, 0x9d, 0xb6, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x39, 0x82, 0x41, 0x36, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x5a, 0x0a, 0x04, 0x72, 0x73,
	0x73, 0x69, 0x18, 0xd2, 0xd9, 0xd2, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x73, 0x73, 0x69,
	0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x5c, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x92,
	0xea, 0xe3, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e,
	0x82, 0x41, 0x2b, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x52, 0x04,
	0x73, 0x73, 0x69, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x06, 0x4f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x0b, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x12, 0x2a, 0x0a, 0x14, 0x4f,
	0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x50,
	0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x12, 0x2e, 0x0a, 0x16, 0x4f, 0x50, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53,
	0x45, 0x10, 0x03, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x12, 0x28, 0x0a, 0x13, 0x4f, 0x50, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x57, 0x50, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04,
	0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x57, 0x50, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41,
	0x4c, 0x12, 0x2c, 0x0a, 0x15, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x50, 0x41, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x05, 0x1a, 0x11, 0x82, 0x41,
	0x0e, 0x57, 0x50, 0x41, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x12,
	0x16, 0x0a, 0x0a, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x45, 0x50, 0x10, 0x06, 0x1a,
	0x06, 0x82, 0x41, 0x03, 0x57, 0x45, 0x50, 0x1a, 0x97, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x52, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2e, 0x52,
	0x61, 0x64, 0x69, 0x6f, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x1a, 0xb9, 0x1a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x8b, 0xbe, 0x9b, 0xb2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27,
	0x82, 0x41, 0x24, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x1b, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0xa2, 0x95, 0x82, 0x9c, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x2d, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x19, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x0c, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0xb9, 0xb8, 0x9f, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x65, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0xc9, 0xed, 0xf9, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2d, 0x6d, 0x61, 0x63, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x63, 0x12, 0x50, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xff, 0xe4, 0xf3, 0x6a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x94, 0x01, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xf9, 0xe9, 0xfa, 0x38, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xa4, 0xdc, 0xb1, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x67, 0x0a, 0x08, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xd9, 0xa1, 0xfc, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x45, 0x0a, 0x03, 0x64, 0x63, 0x61, 0x18, 0xba, 0xa8, 0xa6, 0xe6, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x63, 0x61, 0x52, 0x03, 0x64, 0x63, 0x61, 0x12, 0x5e, 0x0a, 0x0c, 0x64, 0x66, 0x73,
	0x5f, 0x68, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x93, 0xe8, 0xaa, 0xd7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x66, 0x73, 0x2d, 0x68, 0x69, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x64,
	0x66, 0x73, 0x48, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x03, 0x64, 0x74, 0x70,
	0x18, 0xfa, 0x86, 0xa6, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1a, 0x82, 0x41, 0x17, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x74, 0x70, 0x52, 0x03, 0x64, 0x74, 0x70,
	0x12, 0x4e, 0x0a, 0x07, 0x64, 0x74, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xbf, 0xa4, 0x8e, 0x5c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x74, 0x70, 0x2d, 0x6d, 0x61, 0x78, 0x52, 0x06, 0x64, 0x74, 0x70, 0x4d, 0x61, 0x78,
	0x12, 0x4e, 0x0a, 0x07, 0x64, 0x74, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0xc1, 0x8b, 0x8e, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x74, 0x70, 0x2d, 0x6d, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x74, 0x70, 0x4d, 0x69, 0x6e,
	0x12, 0x50, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xad, 0xad, 0xdd, 0x5a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x41, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xcd, 0xdc, 0xa3, 0x67, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x19, 0x82, 0x41, 0x16, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x91, 0x01, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x9a, 0xd8,
	0xde, 0x3e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69,
	0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x72, 0x78,
	0x5f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd9, 0x93, 0xea, 0x53, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x72, 0x78, 0x2d, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x72,
	0x78, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x72, 0x78, 0x5f,
	0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xcc, 0xd2, 0xdc, 0x62, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x72, 0x78, 0x2d, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x72, 0x78,
	0x4e, 0x6f, 0x69, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0xa7, 0xdc, 0xa3, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x7b, 0x0a,
	0x16, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xcf, 0x92, 0xac, 0x70, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x64, 0x65, 0x66, 0x65, 0x72, 0x2d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x14, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x66, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x7b, 0x0a, 0x16, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x18, 0xb8, 0xe4, 0xe2, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x2d, 0x64, 0x65, 0x66, 0x65, 0x72, 0x2d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x52, 0x14, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x72, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xae,
	0xeb, 0x9b, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41,
	0x27, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x64, 0x77,
	0x65, 0x6c, 0x6c, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x77, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x9b, 0x9d, 0xd6, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x28, 0x82, 0x41, 0x25, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x73, 0x0a, 0x13, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x92, 0xdf, 0xbf, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x12, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x71, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x85, 0xa3, 0xd2, 0xad, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xbd, 0xf9, 0xdd, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x69, 0x72, 0x70, 0x18, 0xa7, 0xed, 0xec,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x65, 0x69, 0x72, 0x70,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x45, 0x69, 0x72, 0x70, 0x12, 0x63,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x96, 0xaf, 0xd1, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82,
	0x41, 0x22, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x74, 0x78, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x31,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xbf, 0xcb, 0x8d, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x6f,
	0x74, 0x31, 0x31, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x74, 0x78, 0x44, 0x6f, 0x74, 0x31, 0x31,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xe8, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x76, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x63, 0x73, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0xf3, 0xe4, 0xf1, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2d, 0x66, 0x63, 0x73, 0x2d,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x46, 0x63,
	0x73, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x0b, 0x6e, 0x6f, 0x69, 0x73, 0x65,
	0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0xf3, 0x8c, 0xd5, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x2d, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x52, 0x0a, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x1a, 0xea, 0x01,
	0x0a, 0x08, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x13, 0x82, 0x41, 0x10, 0x2f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x88, 0x01, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59,
	0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x2e, 0x52, 0x61,
	0x64, 0x69, 0x6f, 0x52, 0x05, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_wifi_phy_proto_rawDescOnce sync.Once
	file_openconfig_wifi_phy_proto_rawDescData = file_openconfig_wifi_phy_proto_rawDesc
)

func file_openconfig_wifi_phy_proto_rawDescGZIP() []byte {
	file_openconfig_wifi_phy_proto_rawDescOnce.Do(func() {
		file_openconfig_wifi_phy_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_wifi_phy_proto_rawDescData)
	})
	return file_openconfig_wifi_phy_proto_rawDescData
}

var file_openconfig_wifi_phy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_openconfig_wifi_phy_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_openconfig_wifi_phy_proto_goTypes = []interface{}{
	(Radios_Radio_Neighbors_Neighbor_State_Opmode)(0), // 0: openconfig.Radios.Radio.Neighbors.Neighbor.State.Opmode
	(*Radios)(nil),                                // 1: openconfig.Radios
	(*Radios_Radio)(nil),                          // 2: openconfig.Radios.Radio
	(*Radios_RadioKey)(nil),                       // 3: openconfig.Radios.RadioKey
	(*Radios_Radio_Config)(nil),                   // 4: openconfig.Radios.Radio.Config
	(*Radios_Radio_Neighbors)(nil),                // 5: openconfig.Radios.Radio.Neighbors
	(*Radios_Radio_State)(nil),                    // 6: openconfig.Radios.Radio.State
	(*Radios_Radio_Neighbors_Neighbor)(nil),       // 7: openconfig.Radios.Radio.Neighbors.Neighbor
	(*Radios_Radio_Neighbors_NeighborKey)(nil),    // 8: openconfig.Radios.Radio.Neighbors.NeighborKey
	(*Radios_Radio_Neighbors_Neighbor_State)(nil), // 9: openconfig.Radios.Radio.Neighbors.Neighbor.State
	(*Radios_Radio_State_Counters)(nil),           // 10: openconfig.Radios.Radio.State.Counters
	(OpenconfigWifiTypesOPERATINGFREQUENCY)(0),    // 11: openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY
	(*ywrapper.UintValue)(nil),                    // 12: ywrapper.UintValue
	(*ywrapper.IntValue)(nil),                     // 13: ywrapper.IntValue
	(*ywrapper.BoolValue)(nil),                    // 14: ywrapper.BoolValue
	(*ywrapper.StringValue)(nil),                  // 15: ywrapper.StringValue
	(OpenconfigWifiTypesCHANGEREASONTYPE)(0),      // 16: openconfig.OpenconfigWifiTypesCHANGEREASONTYPE
}
var file_openconfig_wifi_phy_proto_depIdxs = []int32{
	3,  // 0: openconfig.Radios.radio:type_name -> openconfig.Radios.RadioKey
	4,  // 1: openconfig.Radios.Radio.config:type_name -> openconfig.Radios.Radio.Config
	5,  // 2: openconfig.Radios.Radio.neighbors:type_name -> openconfig.Radios.Radio.Neighbors
	6,  // 3: openconfig.Radios.Radio.state:type_name -> openconfig.Radios.Radio.State
	11, // 4: openconfig.Radios.RadioKey.operating_frequency:type_name -> openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY
	2,  // 5: openconfig.Radios.RadioKey.radio:type_name -> openconfig.Radios.Radio
	12, // 6: openconfig.Radios.Radio.Config.allowed_channels:type_name -> ywrapper.UintValue
	13, // 7: openconfig.Radios.Radio.Config.antenna_gain:type_name -> ywrapper.IntValue
	12, // 8: openconfig.Radios.Radio.Config.channel:type_name -> ywrapper.UintValue
	12, // 9: openconfig.Radios.Radio.Config.channel_width:type_name -> ywrapper.UintValue
	14, // 10: openconfig.Radios.Radio.Config.dca:type_name -> ywrapper.BoolValue
	14, // 11: openconfig.Radios.Radio.Config.dtp:type_name -> ywrapper.BoolValue
	13, // 12: openconfig.Radios.Radio.Config.dtp_max:type_name -> ywrapper.IntValue
	13, // 13: openconfig.Radios.Radio.Config.dtp_min:type_name -> ywrapper.IntValue
	14, // 14: openconfig.Radios.Radio.Config.enabled:type_name -> ywrapper.BoolValue
	12, // 15: openconfig.Radios.Radio.Config.id:type_name -> ywrapper.UintValue
	11, // 16: openconfig.Radios.Radio.Config.operating_frequency:type_name -> openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY
	14, // 17: openconfig.Radios.Radio.Config.scanning:type_name -> ywrapper.BoolValue
	12, // 18: openconfig.Radios.Radio.Config.scanning_defer_clients:type_name -> ywrapper.UintValue
	14, // 19: openconfig.Radios.Radio.Config.scanning_defer_traffic:type_name -> ywrapper.BoolValue
	12, // 20: openconfig.Radios.Radio.Config.scanning_dwell_time:type_name -> ywrapper.UintValue
	12, // 21: openconfig.Radios.Radio.Config.scanning_interval:type_name -> ywrapper.UintValue
	12, // 22: openconfig.Radios.Radio.Config.transmit_eirp:type_name -> ywrapper.UintValue
	13, // 23: openconfig.Radios.Radio.Config.transmit_power:type_name -> ywrapper.IntValue
	8,  // 24: openconfig.Radios.Radio.Neighbors.neighbor:type_name -> openconfig.Radios.Radio.Neighbors.NeighborKey
	12, // 25: openconfig.Radios.Radio.State.allowed_channels:type_name -> ywrapper.UintValue
	12, // 26: openconfig.Radios.Radio.State.allowed_regulatory_channels:type_name -> ywrapper.UintValue
	13, // 27: openconfig.Radios.Radio.State.antenna_gain:type_name -> ywrapper.IntValue
	15, // 28: openconfig.Radios.Radio.State.base_radio_mac:type_name -> ywrapper.StringValue
	12, // 29: openconfig.Radios.Radio.State.channel:type_name -> ywrapper.UintValue
	16, // 30: openconfig.Radios.Radio.State.channel_change_reason:type_name -> openconfig.OpenconfigWifiTypesCHANGEREASONTYPE
	12, // 31: openconfig.Radios.Radio.State.channel_width:type_name -> ywrapper.UintValue
	10, // 32: openconfig.Radios.Radio.State.counters:type_name -> openconfig.Radios.Radio.State.Counters
	14, // 33: openconfig.Radios.Radio.State.dca:type_name -> ywrapper.BoolValue
	12, // 34: openconfig.Radios.Radio.State.dfs_hit_time:type_name -> ywrapper.UintValue
	14, // 35: openconfig.Radios.Radio.State.dtp:type_name -> ywrapper.BoolValue
	13, // 36: openconfig.Radios.Radio.State.dtp_max:type_name -> ywrapper.IntValue
	13, // 37: openconfig.Radios.Radio.State.dtp_min:type_name -> ywrapper.IntValue
	14, // 38: openconfig.Radios.Radio.State.enabled:type_name -> ywrapper.BoolValue
	12, // 39: openconfig.Radios.Radio.State.id:type_name -> ywrapper.UintValue
	11, // 40: openconfig.Radios.Radio.State.operating_frequency:type_name -> openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY
	12, // 41: openconfig.Radios.Radio.State.rx_dot11_channel_utilization:type_name -> ywrapper.UintValue
	12, // 42: openconfig.Radios.Radio.State.rx_noise_channel_utilization:type_name -> ywrapper.UintValue
	14, // 43: openconfig.Radios.Radio.State.scanning:type_name -> ywrapper.BoolValue
	12, // 44: openconfig.Radios.Radio.State.scanning_defer_clients:type_name -> ywrapper.UintValue
	14, // 45: openconfig.Radios.Radio.State.scanning_defer_traffic:type_name -> ywrapper.BoolValue
	12, // 46: openconfig.Radios.Radio.State.scanning_dwell_time:type_name -> ywrapper.UintValue
	12, // 47: openconfig.Radios.Radio.State.scanning_interval:type_name -> ywrapper.UintValue
	14, // 48: openconfig.Radios.Radio.State.software_selectable:type_name -> ywrapper.BoolValue
	12, // 49: openconfig.Radios.Radio.State.supported_channels:type_name -> ywrapper.UintValue
	12, // 50: openconfig.Radios.Radio.State.total_channel_utilization:type_name -> ywrapper.UintValue
	12, // 51: openconfig.Radios.Radio.State.transmit_eirp:type_name -> ywrapper.UintValue
	13, // 52: openconfig.Radios.Radio.State.transmit_power:type_name -> ywrapper.IntValue
	12, // 53: openconfig.Radios.Radio.State.tx_dot11_channel_utilization:type_name -> ywrapper.UintValue
	9,  // 54: openconfig.Radios.Radio.Neighbors.Neighbor.state:type_name -> openconfig.Radios.Radio.Neighbors.Neighbor.State
	7,  // 55: openconfig.Radios.Radio.Neighbors.NeighborKey.neighbor:type_name -> openconfig.Radios.Radio.Neighbors.Neighbor
	15, // 56: openconfig.Radios.Radio.Neighbors.Neighbor.State.bssid:type_name -> ywrapper.StringValue
	12, // 57: openconfig.Radios.Radio.Neighbors.Neighbor.State.channel:type_name -> ywrapper.UintValue
	12, // 58: openconfig.Radios.Radio.Neighbors.Neighbor.State.last_seen:type_name -> ywrapper.UintValue
	0,  // 59: openconfig.Radios.Radio.Neighbors.Neighbor.State.opmode:type_name -> openconfig.Radios.Radio.Neighbors.Neighbor.State.Opmode
	12, // 60: openconfig.Radios.Radio.Neighbors.Neighbor.State.primary_channel:type_name -> ywrapper.UintValue
	13, // 61: openconfig.Radios.Radio.Neighbors.Neighbor.State.rssi:type_name -> ywrapper.IntValue
	15, // 62: openconfig.Radios.Radio.Neighbors.Neighbor.State.ssid:type_name -> ywrapper.StringValue
	12, // 63: openconfig.Radios.Radio.State.Counters.failed_fcs_frames:type_name -> ywrapper.UintValue
	13, // 64: openconfig.Radios.Radio.State.Counters.noise_floor:type_name -> ywrapper.IntValue
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_openconfig_wifi_phy_proto_init() }
func file_openconfig_wifi_phy_proto_init() {
	if File_openconfig_wifi_phy_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_wifi_phy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Radios); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_phy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Radios_Radio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_phy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Radios_RadioKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_phy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Radios_Radio_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_phy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Radios_Radio_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_phy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Radios_Radio_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_phy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Radios_Radio_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_phy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Radios_Radio_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_phy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Radios_Radio_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_phy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Radios_Radio_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_wifi_phy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_wifi_phy_proto_goTypes,
		DependencyIndexes: file_openconfig_wifi_phy_proto_depIdxs,
		EnumInfos:         file_openconfig_wifi_phy_proto_enumTypes,
		MessageInfos:      file_openconfig_wifi_phy_proto_msgTypes,
	}.Build()
	File_openconfig_wifi_phy_proto = out.File
	file_openconfig_wifi_phy_proto_rawDesc = nil
	file_openconfig_wifi_phy_proto_goTypes = nil
	file_openconfig_wifi_phy_proto_depIdxs = nil
}
