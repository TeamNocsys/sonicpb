// openconfig.sonic_bgp is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/sonic-platform.yang
//  - ../api/yang/sonic/sonic-interface.yang
//  - ../api/yang/sonic/sonic-port.yang
//  - ../api/yang/sonic/sonic-vrf.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/sonic/third_party/ietf/iana-if-type.yang
//  - ../api/yang/sonic/sonic-loopback-interface.yang
//  - ../api/yang/sonic/sonic-platform-types.yang
//  - ../api/yang/sonic/sonic-lldp-types.yang
//  - ../api/yang/sonic/sonic-lldp.yang
//  - ../api/yang/sonic/sonic-vlan.yang
//  - ../api/yang/sonic/sonic-portchannel.yang
//  - ../api/yang/sonic/sonic-portchannel-interface.yang
//  - ../api/yang/sonic/sonic-extension.yang
//  - ../api/yang/sonic/sonic-bgp.yang
//  - ../api/yang/sonic/sonic-vxlan.yang
//  - ../api/yang/sonic/sonic-acl.yang
//  - ../api/yang/sonic/sonic-types.yang
//  - ../api/yang/sonic/sonic-vlan-interface.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: sonic_bgp.proto

package sonic

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SonicBgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgpMonitors  *SonicBgp_BgpMonitors  `protobuf:"bytes,1,opt,name=bgp_monitors,json=bgpMonitors,proto3" json:"bgp_monitors,omitempty"`
	BgpNeighbor  *SonicBgp_BgpNeighbor  `protobuf:"bytes,2,opt,name=bgp_neighbor,json=bgpNeighbor,proto3" json:"bgp_neighbor,omitempty"`
	BgpPeerRange *SonicBgp_BgpPeerRange `protobuf:"bytes,3,opt,name=bgp_peer_range,json=bgpPeerRange,proto3" json:"bgp_peer_range,omitempty"`
}

func (x *SonicBgp) Reset() {
	*x = SonicBgp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_bgp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicBgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicBgp) ProtoMessage() {}

func (x *SonicBgp) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_bgp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicBgp.ProtoReflect.Descriptor instead.
func (*SonicBgp) Descriptor() ([]byte, []int) {
	return file_sonic_bgp_proto_rawDescGZIP(), []int{0}
}

func (x *SonicBgp) GetBgpMonitors() *SonicBgp_BgpMonitors {
	if x != nil {
		return x.BgpMonitors
	}
	return nil
}

func (x *SonicBgp) GetBgpNeighbor() *SonicBgp_BgpNeighbor {
	if x != nil {
		return x.BgpNeighbor
	}
	return nil
}

func (x *SonicBgp) GetBgpPeerRange() *SonicBgp_BgpPeerRange {
	if x != nil {
		return x.BgpPeerRange
	}
	return nil
}

type SonicBgp_BgpMonitors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgpMonitorsList []*SonicBgp_BgpMonitors_BgpMonitorsListKey `protobuf:"bytes,1,rep,name=bgp_monitors_list,json=bgpMonitorsList,proto3" json:"bgp_monitors_list,omitempty"`
}

func (x *SonicBgp_BgpMonitors) Reset() {
	*x = SonicBgp_BgpMonitors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_bgp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicBgp_BgpMonitors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicBgp_BgpMonitors) ProtoMessage() {}

func (x *SonicBgp_BgpMonitors) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_bgp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicBgp_BgpMonitors.ProtoReflect.Descriptor instead.
func (*SonicBgp_BgpMonitors) Descriptor() ([]byte, []int) {
	return file_sonic_bgp_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SonicBgp_BgpMonitors) GetBgpMonitorsList() []*SonicBgp_BgpMonitors_BgpMonitorsListKey {
	if x != nil {
		return x.BgpMonitorsList
	}
	return nil
}

type SonicBgp_BgpNeighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgpNeighborList []*SonicBgp_BgpNeighbor_BgpNeighborListKey `protobuf:"bytes,1,rep,name=bgp_neighbor_list,json=bgpNeighborList,proto3" json:"bgp_neighbor_list,omitempty"`
}

func (x *SonicBgp_BgpNeighbor) Reset() {
	*x = SonicBgp_BgpNeighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_bgp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicBgp_BgpNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicBgp_BgpNeighbor) ProtoMessage() {}

func (x *SonicBgp_BgpNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_bgp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicBgp_BgpNeighbor.ProtoReflect.Descriptor instead.
func (*SonicBgp_BgpNeighbor) Descriptor() ([]byte, []int) {
	return file_sonic_bgp_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SonicBgp_BgpNeighbor) GetBgpNeighborList() []*SonicBgp_BgpNeighbor_BgpNeighborListKey {
	if x != nil {
		return x.BgpNeighborList
	}
	return nil
}

type SonicBgp_BgpPeerRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgpPeerRangeList []*SonicBgp_BgpPeerRange_BgpPeerRangeListKey `protobuf:"bytes,1,rep,name=bgp_peer_range_list,json=bgpPeerRangeList,proto3" json:"bgp_peer_range_list,omitempty"`
}

func (x *SonicBgp_BgpPeerRange) Reset() {
	*x = SonicBgp_BgpPeerRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_bgp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicBgp_BgpPeerRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicBgp_BgpPeerRange) ProtoMessage() {}

func (x *SonicBgp_BgpPeerRange) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_bgp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicBgp_BgpPeerRange.ProtoReflect.Descriptor instead.
func (*SonicBgp_BgpPeerRange) Descriptor() ([]byte, []int) {
	return file_sonic_bgp_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SonicBgp_BgpPeerRange) GetBgpPeerRangeList() []*SonicBgp_BgpPeerRange_BgpPeerRangeListKey {
	if x != nil {
		return x.BgpPeerRangeList
	}
	return nil
}

type SonicBgp_BgpMonitors_BgpMonitorsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SonicBgp_BgpMonitors_BgpMonitorsList) Reset() {
	*x = SonicBgp_BgpMonitors_BgpMonitorsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_bgp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicBgp_BgpMonitors_BgpMonitorsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicBgp_BgpMonitors_BgpMonitorsList) ProtoMessage() {}

func (x *SonicBgp_BgpMonitors_BgpMonitorsList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_bgp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicBgp_BgpMonitors_BgpMonitorsList.ProtoReflect.Descriptor instead.
func (*SonicBgp_BgpMonitors_BgpMonitorsList) Descriptor() ([]byte, []int) {
	return file_sonic_bgp_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *SonicBgp_BgpMonitors_BgpMonitorsList) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type SonicBgp_BgpMonitors_BgpMonitorsListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip              string                                `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	BgpMonitorsList *SonicBgp_BgpMonitors_BgpMonitorsList `protobuf:"bytes,2,opt,name=bgp_monitors_list,json=bgpMonitorsList,proto3" json:"bgp_monitors_list,omitempty"`
}

func (x *SonicBgp_BgpMonitors_BgpMonitorsListKey) Reset() {
	*x = SonicBgp_BgpMonitors_BgpMonitorsListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_bgp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicBgp_BgpMonitors_BgpMonitorsListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicBgp_BgpMonitors_BgpMonitorsListKey) ProtoMessage() {}

func (x *SonicBgp_BgpMonitors_BgpMonitorsListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_bgp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicBgp_BgpMonitors_BgpMonitorsListKey.ProtoReflect.Descriptor instead.
func (*SonicBgp_BgpMonitors_BgpMonitorsListKey) Descriptor() ([]byte, []int) {
	return file_sonic_bgp_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *SonicBgp_BgpMonitors_BgpMonitorsListKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SonicBgp_BgpMonitors_BgpMonitorsListKey) GetBgpMonitorsList() *SonicBgp_BgpMonitors_BgpMonitorsList {
	if x != nil {
		return x.BgpMonitorsList
	}
	return nil
}

type SonicBgp_BgpNeighbor_BgpNeighborList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminStatus SonicTypesAdminStatus `protobuf:"varint,1,opt,name=admin_status,json=adminStatus,proto3,enum=sonic.SonicTypesAdminStatus" json:"admin_status,omitempty"`
	Asn         *ywrapper.UintValue   `protobuf:"bytes,2,opt,name=asn,proto3" json:"asn,omitempty"`
	Holdtime    *ywrapper.UintValue   `protobuf:"bytes,3,opt,name=holdtime,proto3" json:"holdtime,omitempty"`
	Keepalive   *ywrapper.UintValue   `protobuf:"bytes,4,opt,name=keepalive,proto3" json:"keepalive,omitempty"`
	LocalAddr   *ywrapper.StringValue `protobuf:"bytes,5,opt,name=local_addr,json=localAddr,proto3" json:"local_addr,omitempty"`
	Name        *ywrapper.StringValue `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Nhopself    *ywrapper.BoolValue   `protobuf:"bytes,7,opt,name=nhopself,proto3" json:"nhopself,omitempty"`
	Rrclient    *ywrapper.BoolValue   `protobuf:"bytes,8,opt,name=rrclient,proto3" json:"rrclient,omitempty"`
}

func (x *SonicBgp_BgpNeighbor_BgpNeighborList) Reset() {
	*x = SonicBgp_BgpNeighbor_BgpNeighborList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_bgp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicBgp_BgpNeighbor_BgpNeighborList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicBgp_BgpNeighbor_BgpNeighborList) ProtoMessage() {}

func (x *SonicBgp_BgpNeighbor_BgpNeighborList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_bgp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicBgp_BgpNeighbor_BgpNeighborList.ProtoReflect.Descriptor instead.
func (*SonicBgp_BgpNeighbor_BgpNeighborList) Descriptor() ([]byte, []int) {
	return file_sonic_bgp_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *SonicBgp_BgpNeighbor_BgpNeighborList) GetAdminStatus() SonicTypesAdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return SonicTypesAdminStatus_SONICTYPESADMINSTATUS_UNSET
}

func (x *SonicBgp_BgpNeighbor_BgpNeighborList) GetAsn() *ywrapper.UintValue {
	if x != nil {
		return x.Asn
	}
	return nil
}

func (x *SonicBgp_BgpNeighbor_BgpNeighborList) GetHoldtime() *ywrapper.UintValue {
	if x != nil {
		return x.Holdtime
	}
	return nil
}

func (x *SonicBgp_BgpNeighbor_BgpNeighborList) GetKeepalive() *ywrapper.UintValue {
	if x != nil {
		return x.Keepalive
	}
	return nil
}

func (x *SonicBgp_BgpNeighbor_BgpNeighborList) GetLocalAddr() *ywrapper.StringValue {
	if x != nil {
		return x.LocalAddr
	}
	return nil
}

func (x *SonicBgp_BgpNeighbor_BgpNeighborList) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SonicBgp_BgpNeighbor_BgpNeighborList) GetNhopself() *ywrapper.BoolValue {
	if x != nil {
		return x.Nhopself
	}
	return nil
}

func (x *SonicBgp_BgpNeighbor_BgpNeighborList) GetRrclient() *ywrapper.BoolValue {
	if x != nil {
		return x.Rrclient
	}
	return nil
}

type SonicBgp_BgpNeighbor_BgpNeighborListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip              string                                `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	BgpNeighborList *SonicBgp_BgpNeighbor_BgpNeighborList `protobuf:"bytes,2,opt,name=bgp_neighbor_list,json=bgpNeighborList,proto3" json:"bgp_neighbor_list,omitempty"`
}

func (x *SonicBgp_BgpNeighbor_BgpNeighborListKey) Reset() {
	*x = SonicBgp_BgpNeighbor_BgpNeighborListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_bgp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicBgp_BgpNeighbor_BgpNeighborListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicBgp_BgpNeighbor_BgpNeighborListKey) ProtoMessage() {}

func (x *SonicBgp_BgpNeighbor_BgpNeighborListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_bgp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicBgp_BgpNeighbor_BgpNeighborListKey.ProtoReflect.Descriptor instead.
func (*SonicBgp_BgpNeighbor_BgpNeighborListKey) Descriptor() ([]byte, []int) {
	return file_sonic_bgp_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *SonicBgp_BgpNeighbor_BgpNeighborListKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SonicBgp_BgpNeighbor_BgpNeighborListKey) GetBgpNeighborList() *SonicBgp_BgpNeighbor_BgpNeighborList {
	if x != nil {
		return x.BgpNeighborList
	}
	return nil
}

type SonicBgp_BgpPeerRange_BgpPeerRangeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpRange []*ywrapper.StringValue `protobuf:"bytes,1,rep,name=ip_range,json=ipRange,proto3" json:"ip_range,omitempty"`
	PeerAsn *ywrapper.UintValue     `protobuf:"bytes,2,opt,name=peer_asn,json=peerAsn,proto3" json:"peer_asn,omitempty"`
	SrcAddr *ywrapper.StringValue   `protobuf:"bytes,3,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
}

func (x *SonicBgp_BgpPeerRange_BgpPeerRangeList) Reset() {
	*x = SonicBgp_BgpPeerRange_BgpPeerRangeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_bgp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicBgp_BgpPeerRange_BgpPeerRangeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicBgp_BgpPeerRange_BgpPeerRangeList) ProtoMessage() {}

func (x *SonicBgp_BgpPeerRange_BgpPeerRangeList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_bgp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicBgp_BgpPeerRange_BgpPeerRangeList.ProtoReflect.Descriptor instead.
func (*SonicBgp_BgpPeerRange_BgpPeerRangeList) Descriptor() ([]byte, []int) {
	return file_sonic_bgp_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *SonicBgp_BgpPeerRange_BgpPeerRangeList) GetIpRange() []*ywrapper.StringValue {
	if x != nil {
		return x.IpRange
	}
	return nil
}

func (x *SonicBgp_BgpPeerRange_BgpPeerRangeList) GetPeerAsn() *ywrapper.UintValue {
	if x != nil {
		return x.PeerAsn
	}
	return nil
}

func (x *SonicBgp_BgpPeerRange_BgpPeerRangeList) GetSrcAddr() *ywrapper.StringValue {
	if x != nil {
		return x.SrcAddr
	}
	return nil
}

type SonicBgp_BgpPeerRange_BgpPeerRangeListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerGroupName    string                                  `protobuf:"bytes,1,opt,name=peer_group_name,json=peerGroupName,proto3" json:"peer_group_name,omitempty"`
	BgpPeerRangeList *SonicBgp_BgpPeerRange_BgpPeerRangeList `protobuf:"bytes,2,opt,name=bgp_peer_range_list,json=bgpPeerRangeList,proto3" json:"bgp_peer_range_list,omitempty"`
}

func (x *SonicBgp_BgpPeerRange_BgpPeerRangeListKey) Reset() {
	*x = SonicBgp_BgpPeerRange_BgpPeerRangeListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_bgp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicBgp_BgpPeerRange_BgpPeerRangeListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicBgp_BgpPeerRange_BgpPeerRangeListKey) ProtoMessage() {}

func (x *SonicBgp_BgpPeerRange_BgpPeerRangeListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_bgp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicBgp_BgpPeerRange_BgpPeerRangeListKey.ProtoReflect.Descriptor instead.
func (*SonicBgp_BgpPeerRange_BgpPeerRangeListKey) Descriptor() ([]byte, []int) {
	return file_sonic_bgp_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *SonicBgp_BgpPeerRange_BgpPeerRangeListKey) GetPeerGroupName() string {
	if x != nil {
		return x.PeerGroupName
	}
	return ""
}

func (x *SonicBgp_BgpPeerRange_BgpPeerRangeListKey) GetBgpPeerRangeList() *SonicBgp_BgpPeerRange_BgpPeerRangeList {
	if x != nil {
		return x.BgpPeerRangeList
	}
	return nil
}

var File_sonic_bgp_proto protoreflect.FileDescriptor

var file_sonic_bgp_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe5, 0x14, 0x0a, 0x08, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x67, 0x70, 0x12, 0x5a,
	0x0a, 0x0c, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e,
	0x69, 0x63, 0x42, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0b, 0x62,
	0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x0c, 0x62, 0x67,
	0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x67,
	0x70, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x42, 0x1a, 0x82,
	0x41, 0x17, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x0b, 0x62, 0x67, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x0e, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x67, 0x70, 0x2e,
	0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x1c, 0x82, 0x41,
	0x19, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x62, 0x67, 0x70, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xba, 0x03, 0x0a, 0x0b, 0x42, 0x67, 0x70,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x62, 0x67, 0x70,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e,
	0x69, 0x63, 0x42, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x0f, 0x62, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x6f, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xae, 0x01, 0x0a, 0x12, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x57, 0x0a, 0x11,
	0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e,
	0x53, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x62, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xa2, 0x09, 0x0a, 0x0b, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x42,
	0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x42,
	0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x0f, 0x62, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x1a, 0xd6, 0x06, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x57, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67,
	0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x61, 0x73, 0x6e, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x66, 0x0a, 0x08, 0x68, 0x6f, 0x6c,
	0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x68,
	0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x69, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x6d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x5c, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x08, 0x6e, 0x68, 0x6f,
	0x70, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6e,
	0x68, 0x6f, 0x70, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x08, 0x6e, 0x68, 0x6f, 0x70, 0x73, 0x65, 0x6c,
	0x66, 0x12, 0x66, 0x0a, 0x08, 0x72, 0x72, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x72, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x72, 0x72, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0xae, 0x01, 0x0a, 0x12, 0x42, 0x67,
	0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x3f, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x82, 0x41,
	0x2c, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x57, 0x0a, 0x11, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x67, 0x70, 0x2e, 0x42, 0x67,
	0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x62, 0x67, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xdc, 0x05, 0x0a, 0x0c, 0x42,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x13,
	0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x30, 0x82, 0x41, 0x2d,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x62,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0xd7, 0x02, 0x0a, 0x10, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82,
	0x41, 0x36, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x69, 0x70, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x69, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x61, 0x73, 0x6e, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x41, 0x73, 0x6e, 0x12, 0x6b, 0x0a, 0x08,
	0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x72, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x52, 0x07, 0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x1a, 0xdd, 0x01, 0x0a, 0x13, 0x42, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x68, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x70, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x13, 0x62,
	0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x1b, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x5a, 0x07, 0x2e,
	0x3b, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sonic_bgp_proto_rawDescOnce sync.Once
	file_sonic_bgp_proto_rawDescData = file_sonic_bgp_proto_rawDesc
)

func file_sonic_bgp_proto_rawDescGZIP() []byte {
	file_sonic_bgp_proto_rawDescOnce.Do(func() {
		file_sonic_bgp_proto_rawDescData = protoimpl.X.CompressGZIP(file_sonic_bgp_proto_rawDescData)
	})
	return file_sonic_bgp_proto_rawDescData
}

var file_sonic_bgp_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_sonic_bgp_proto_goTypes = []interface{}{
	(*SonicBgp)(nil),                                  // 0: sonic.SonicBgp
	(*SonicBgp_BgpMonitors)(nil),                      // 1: sonic.SonicBgp.BgpMonitors
	(*SonicBgp_BgpNeighbor)(nil),                      // 2: sonic.SonicBgp.BgpNeighbor
	(*SonicBgp_BgpPeerRange)(nil),                     // 3: sonic.SonicBgp.BgpPeerRange
	(*SonicBgp_BgpMonitors_BgpMonitorsList)(nil),      // 4: sonic.SonicBgp.BgpMonitors.BgpMonitorsList
	(*SonicBgp_BgpMonitors_BgpMonitorsListKey)(nil),   // 5: sonic.SonicBgp.BgpMonitors.BgpMonitorsListKey
	(*SonicBgp_BgpNeighbor_BgpNeighborList)(nil),      // 6: sonic.SonicBgp.BgpNeighbor.BgpNeighborList
	(*SonicBgp_BgpNeighbor_BgpNeighborListKey)(nil),   // 7: sonic.SonicBgp.BgpNeighbor.BgpNeighborListKey
	(*SonicBgp_BgpPeerRange_BgpPeerRangeList)(nil),    // 8: sonic.SonicBgp.BgpPeerRange.BgpPeerRangeList
	(*SonicBgp_BgpPeerRange_BgpPeerRangeListKey)(nil), // 9: sonic.SonicBgp.BgpPeerRange.BgpPeerRangeListKey
	(*ywrapper.StringValue)(nil),                      // 10: ywrapper.StringValue
	(SonicTypesAdminStatus)(0),                        // 11: sonic.SonicTypesAdminStatus
	(*ywrapper.UintValue)(nil),                        // 12: ywrapper.UintValue
	(*ywrapper.BoolValue)(nil),                        // 13: ywrapper.BoolValue
}
var file_sonic_bgp_proto_depIdxs = []int32{
	1,  // 0: sonic.SonicBgp.bgp_monitors:type_name -> sonic.SonicBgp.BgpMonitors
	2,  // 1: sonic.SonicBgp.bgp_neighbor:type_name -> sonic.SonicBgp.BgpNeighbor
	3,  // 2: sonic.SonicBgp.bgp_peer_range:type_name -> sonic.SonicBgp.BgpPeerRange
	5,  // 3: sonic.SonicBgp.BgpMonitors.bgp_monitors_list:type_name -> sonic.SonicBgp.BgpMonitors.BgpMonitorsListKey
	7,  // 4: sonic.SonicBgp.BgpNeighbor.bgp_neighbor_list:type_name -> sonic.SonicBgp.BgpNeighbor.BgpNeighborListKey
	9,  // 5: sonic.SonicBgp.BgpPeerRange.bgp_peer_range_list:type_name -> sonic.SonicBgp.BgpPeerRange.BgpPeerRangeListKey
	10, // 6: sonic.SonicBgp.BgpMonitors.BgpMonitorsList.name:type_name -> ywrapper.StringValue
	4,  // 7: sonic.SonicBgp.BgpMonitors.BgpMonitorsListKey.bgp_monitors_list:type_name -> sonic.SonicBgp.BgpMonitors.BgpMonitorsList
	11, // 8: sonic.SonicBgp.BgpNeighbor.BgpNeighborList.admin_status:type_name -> sonic.SonicTypesAdminStatus
	12, // 9: sonic.SonicBgp.BgpNeighbor.BgpNeighborList.asn:type_name -> ywrapper.UintValue
	12, // 10: sonic.SonicBgp.BgpNeighbor.BgpNeighborList.holdtime:type_name -> ywrapper.UintValue
	12, // 11: sonic.SonicBgp.BgpNeighbor.BgpNeighborList.keepalive:type_name -> ywrapper.UintValue
	10, // 12: sonic.SonicBgp.BgpNeighbor.BgpNeighborList.local_addr:type_name -> ywrapper.StringValue
	10, // 13: sonic.SonicBgp.BgpNeighbor.BgpNeighborList.name:type_name -> ywrapper.StringValue
	13, // 14: sonic.SonicBgp.BgpNeighbor.BgpNeighborList.nhopself:type_name -> ywrapper.BoolValue
	13, // 15: sonic.SonicBgp.BgpNeighbor.BgpNeighborList.rrclient:type_name -> ywrapper.BoolValue
	6,  // 16: sonic.SonicBgp.BgpNeighbor.BgpNeighborListKey.bgp_neighbor_list:type_name -> sonic.SonicBgp.BgpNeighbor.BgpNeighborList
	10, // 17: sonic.SonicBgp.BgpPeerRange.BgpPeerRangeList.ip_range:type_name -> ywrapper.StringValue
	12, // 18: sonic.SonicBgp.BgpPeerRange.BgpPeerRangeList.peer_asn:type_name -> ywrapper.UintValue
	10, // 19: sonic.SonicBgp.BgpPeerRange.BgpPeerRangeList.src_addr:type_name -> ywrapper.StringValue
	8,  // 20: sonic.SonicBgp.BgpPeerRange.BgpPeerRangeListKey.bgp_peer_range_list:type_name -> sonic.SonicBgp.BgpPeerRange.BgpPeerRangeList
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_sonic_bgp_proto_init() }
func file_sonic_bgp_proto_init() {
	if File_sonic_bgp_proto != nil {
		return
	}
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sonic_bgp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicBgp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_bgp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicBgp_BgpMonitors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_bgp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicBgp_BgpNeighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_bgp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicBgp_BgpPeerRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_bgp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicBgp_BgpMonitors_BgpMonitorsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_bgp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicBgp_BgpMonitors_BgpMonitorsListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_bgp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicBgp_BgpNeighbor_BgpNeighborList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_bgp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicBgp_BgpNeighbor_BgpNeighborListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_bgp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicBgp_BgpPeerRange_BgpPeerRangeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_bgp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicBgp_BgpPeerRange_BgpPeerRangeListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sonic_bgp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sonic_bgp_proto_goTypes,
		DependencyIndexes: file_sonic_bgp_proto_depIdxs,
		MessageInfos:      file_sonic_bgp_proto_msgTypes,
	}.Build()
	File_sonic_bgp_proto = out.File
	file_sonic_bgp_proto_rawDesc = nil
	file_sonic_bgp_proto_goTypes = nil
	file_sonic_bgp_proto_depIdxs = nil
}
