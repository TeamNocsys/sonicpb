// openconfig.accton_portchannel is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/nocsys-types.yang
//  - ../api/yang/sonic/nocsys-interface.yang
//  - ../api/yang/sonic/nocsys-vlan.yang
//  - ../api/yang/sonic/nocsys-mdns.yang
//  - ../api/yang/sonic/nocsys-extension.yang
//  - ../api/yang/sonic/nocsys-acl.yang
//  - ../api/yang/sonic/nocsys-loopback-interface.yang
//  - ../api/yang/sonic/nocsys-vrf.yang
//  - ../api/yang/sonic/nocsys-portchannel.yang
//  - ../api/yang/sonic/nocsys-system.yang
//  - ../api/yang/sonic/nocsys-neighbor.yang
//  - ../api/yang/sonic/nocsys-vxlan.yang
//  - ../api/yang/sonic/nocsys-port.yang
//  - ../api/yang/sonic/nocsys-route.yang
//  - ../api/yang/sonic/nocsys-ntp.yang
//  - ../api/yang/sonic/nocsys-fdb.yang
//  - ../api/yang/sonic/nocsys-platform-types.yang
//  - ../api/yang/sonic/nocsys-platform.yang
//  - ../api/yang/sonic/nocsys-lldp.yang
//  - ../api/yang/sonic/nocsys-mirror-session.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/sonic/third_party/ietf/iana-if-type.yang
//  - ../api/yang/sonic/third_party/openconfig/openconfig-types.yang
//  - ../api/yang/sonic/third_party/openconfig/openconfig-extensions.yang
//  - ../api/yang/sonic/nocsys-todo.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: accton_portchannel.proto

package sonic

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope int32

const (
	AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_SCOPE_UNSET  AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope = 0
	AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_SCOPE_global AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope = 1
	AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_SCOPE_local  AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope = 2
)

// Enum value maps for AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope.
var (
	AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope_name = map[int32]string{
		0: "SCOPE_UNSET",
		1: "SCOPE_global",
		2: "SCOPE_local",
	}
	AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope_value = map[string]int32{
		"SCOPE_UNSET":  0,
		"SCOPE_global": 1,
		"SCOPE_local":  2,
	}
)

func (x AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope) Enum() *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope {
	p := new(AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope)
	*p = x
	return p
}

func (x AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_accton_portchannel_proto_enumTypes[0].Descriptor()
}

func (AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope) Type() protoreflect.EnumType {
	return &file_accton_portchannel_proto_enumTypes[0]
}

func (x AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope.Descriptor instead.
func (AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope) EnumDescriptor() ([]byte, []int) {
	return file_accton_portchannel_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type AcctonPortchannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Portchannel          *AcctonPortchannel_Portchannel          `protobuf:"bytes,1,opt,name=portchannel,proto3" json:"portchannel,omitempty"`
	PortchannelInterface *AcctonPortchannel_PortchannelInterface `protobuf:"bytes,2,opt,name=portchannel_interface,json=portchannelInterface,proto3" json:"portchannel_interface,omitempty"`
	PortchannelMember    *AcctonPortchannel_PortchannelMember    `protobuf:"bytes,3,opt,name=portchannel_member,json=portchannelMember,proto3" json:"portchannel_member,omitempty"`
}

func (x *AcctonPortchannel) Reset() {
	*x = AcctonPortchannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_portchannel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonPortchannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonPortchannel) ProtoMessage() {}

func (x *AcctonPortchannel) ProtoReflect() protoreflect.Message {
	mi := &file_accton_portchannel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonPortchannel.ProtoReflect.Descriptor instead.
func (*AcctonPortchannel) Descriptor() ([]byte, []int) {
	return file_accton_portchannel_proto_rawDescGZIP(), []int{0}
}

func (x *AcctonPortchannel) GetPortchannel() *AcctonPortchannel_Portchannel {
	if x != nil {
		return x.Portchannel
	}
	return nil
}

func (x *AcctonPortchannel) GetPortchannelInterface() *AcctonPortchannel_PortchannelInterface {
	if x != nil {
		return x.PortchannelInterface
	}
	return nil
}

func (x *AcctonPortchannel) GetPortchannelMember() *AcctonPortchannel_PortchannelMember {
	if x != nil {
		return x.PortchannelMember
	}
	return nil
}

type AcctonPortchannel_Portchannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortchannelList []*AcctonPortchannel_Portchannel_PortchannelListKey `protobuf:"bytes,1,rep,name=portchannel_list,json=portchannelList,proto3" json:"portchannel_list,omitempty"`
}

func (x *AcctonPortchannel_Portchannel) Reset() {
	*x = AcctonPortchannel_Portchannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_portchannel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonPortchannel_Portchannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonPortchannel_Portchannel) ProtoMessage() {}

func (x *AcctonPortchannel_Portchannel) ProtoReflect() protoreflect.Message {
	mi := &file_accton_portchannel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonPortchannel_Portchannel.ProtoReflect.Descriptor instead.
func (*AcctonPortchannel_Portchannel) Descriptor() ([]byte, []int) {
	return file_accton_portchannel_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AcctonPortchannel_Portchannel) GetPortchannelList() []*AcctonPortchannel_Portchannel_PortchannelListKey {
	if x != nil {
		return x.PortchannelList
	}
	return nil
}

type AcctonPortchannel_PortchannelInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortchannelInterfaceIpprefixList []*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey `protobuf:"bytes,1,rep,name=portchannel_interface_ipprefix_list,json=portchannelInterfaceIpprefixList,proto3" json:"portchannel_interface_ipprefix_list,omitempty"`
	PortchannelInterfaceList         []*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceListKey         `protobuf:"bytes,2,rep,name=portchannel_interface_list,json=portchannelInterfaceList,proto3" json:"portchannel_interface_list,omitempty"`
}

func (x *AcctonPortchannel_PortchannelInterface) Reset() {
	*x = AcctonPortchannel_PortchannelInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_portchannel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonPortchannel_PortchannelInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonPortchannel_PortchannelInterface) ProtoMessage() {}

func (x *AcctonPortchannel_PortchannelInterface) ProtoReflect() protoreflect.Message {
	mi := &file_accton_portchannel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonPortchannel_PortchannelInterface.ProtoReflect.Descriptor instead.
func (*AcctonPortchannel_PortchannelInterface) Descriptor() ([]byte, []int) {
	return file_accton_portchannel_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AcctonPortchannel_PortchannelInterface) GetPortchannelInterfaceIpprefixList() []*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey {
	if x != nil {
		return x.PortchannelInterfaceIpprefixList
	}
	return nil
}

func (x *AcctonPortchannel_PortchannelInterface) GetPortchannelInterfaceList() []*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceListKey {
	if x != nil {
		return x.PortchannelInterfaceList
	}
	return nil
}

type AcctonPortchannel_PortchannelMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortchannelMemberList []*AcctonPortchannel_PortchannelMember_PortchannelMemberListKey `protobuf:"bytes,1,rep,name=portchannel_member_list,json=portchannelMemberList,proto3" json:"portchannel_member_list,omitempty"`
}

func (x *AcctonPortchannel_PortchannelMember) Reset() {
	*x = AcctonPortchannel_PortchannelMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_portchannel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonPortchannel_PortchannelMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonPortchannel_PortchannelMember) ProtoMessage() {}

func (x *AcctonPortchannel_PortchannelMember) ProtoReflect() protoreflect.Message {
	mi := &file_accton_portchannel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonPortchannel_PortchannelMember.ProtoReflect.Descriptor instead.
func (*AcctonPortchannel_PortchannelMember) Descriptor() ([]byte, []int) {
	return file_accton_portchannel_proto_rawDescGZIP(), []int{0, 2}
}

func (x *AcctonPortchannel_PortchannelMember) GetPortchannelMemberList() []*AcctonPortchannel_PortchannelMember_PortchannelMemberListKey {
	if x != nil {
		return x.PortchannelMemberList
	}
	return nil
}

type AcctonPortchannel_Portchannel_PortchannelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminStatus AcctonTypesAdminStatus `protobuf:"varint,1,opt,name=admin_status,json=adminStatus,proto3,enum=sonic.AcctonTypesAdminStatus" json:"admin_status,omitempty"`
	MinLinks    *ywrapper.UintValue    `protobuf:"bytes,2,opt,name=min_links,json=minLinks,proto3" json:"min_links,omitempty"`
	Mtu         *ywrapper.UintValue    `protobuf:"bytes,3,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *AcctonPortchannel_Portchannel_PortchannelList) Reset() {
	*x = AcctonPortchannel_Portchannel_PortchannelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_portchannel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonPortchannel_Portchannel_PortchannelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonPortchannel_Portchannel_PortchannelList) ProtoMessage() {}

func (x *AcctonPortchannel_Portchannel_PortchannelList) ProtoReflect() protoreflect.Message {
	mi := &file_accton_portchannel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonPortchannel_Portchannel_PortchannelList.ProtoReflect.Descriptor instead.
func (*AcctonPortchannel_Portchannel_PortchannelList) Descriptor() ([]byte, []int) {
	return file_accton_portchannel_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *AcctonPortchannel_Portchannel_PortchannelList) GetAdminStatus() AcctonTypesAdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return AcctonTypesAdminStatus_ACCTONTYPESADMINSTATUS_UNSET
}

func (x *AcctonPortchannel_Portchannel_PortchannelList) GetMinLinks() *ywrapper.UintValue {
	if x != nil {
		return x.MinLinks
	}
	return nil
}

func (x *AcctonPortchannel_Portchannel_PortchannelList) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type AcctonPortchannel_Portchannel_PortchannelListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortchannelName string                                         `protobuf:"bytes,1,opt,name=portchannel_name,json=portchannelName,proto3" json:"portchannel_name,omitempty"`
	PortchannelList *AcctonPortchannel_Portchannel_PortchannelList `protobuf:"bytes,2,opt,name=portchannel_list,json=portchannelList,proto3" json:"portchannel_list,omitempty"`
}

func (x *AcctonPortchannel_Portchannel_PortchannelListKey) Reset() {
	*x = AcctonPortchannel_Portchannel_PortchannelListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_portchannel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonPortchannel_Portchannel_PortchannelListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonPortchannel_Portchannel_PortchannelListKey) ProtoMessage() {}

func (x *AcctonPortchannel_Portchannel_PortchannelListKey) ProtoReflect() protoreflect.Message {
	mi := &file_accton_portchannel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonPortchannel_Portchannel_PortchannelListKey.ProtoReflect.Descriptor instead.
func (*AcctonPortchannel_Portchannel_PortchannelListKey) Descriptor() ([]byte, []int) {
	return file_accton_portchannel_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *AcctonPortchannel_Portchannel_PortchannelListKey) GetPortchannelName() string {
	if x != nil {
		return x.PortchannelName
	}
	return ""
}

func (x *AcctonPortchannel_Portchannel_PortchannelListKey) GetPortchannelList() *AcctonPortchannel_Portchannel_PortchannelList {
	if x != nil {
		return x.PortchannelList
	}
	return nil
}

type AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family AcctonTypesIpFamily                                                           `protobuf:"varint,1,opt,name=family,proto3,enum=sonic.AcctonTypesIpFamily" json:"family,omitempty"`
	Scope  AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope `protobuf:"varint,2,opt,name=scope,proto3,enum=sonic.AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope" json:"scope,omitempty"`
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList) Reset() {
	*x = AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_portchannel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList) ProtoMessage() {}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList) ProtoReflect() protoreflect.Message {
	mi := &file_accton_portchannel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList.ProtoReflect.Descriptor instead.
func (*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList) Descriptor() ([]byte, []int) {
	return file_accton_portchannel_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList) GetFamily() AcctonTypesIpFamily {
	if x != nil {
		return x.Family
	}
	return AcctonTypesIpFamily_ACCTONTYPESIPFAMILY_UNSET
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList) GetScope() AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope {
	if x != nil {
		return x.Scope
	}
	return AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_SCOPE_UNSET
}

type AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortchannelName                  string                                                                   `protobuf:"bytes,1,opt,name=portchannel_name,json=portchannelName,proto3" json:"portchannel_name,omitempty"`
	IpPrefix                         string                                                                   `protobuf:"bytes,2,opt,name=ip_prefix,json=ipPrefix,proto3" json:"ip_prefix,omitempty"`
	PortchannelInterfaceIpprefixList *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList `protobuf:"bytes,3,opt,name=portchannel_interface_ipprefix_list,json=portchannelInterfaceIpprefixList,proto3" json:"portchannel_interface_ipprefix_list,omitempty"`
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey) Reset() {
	*x = AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_portchannel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey) ProtoMessage() {}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey) ProtoReflect() protoreflect.Message {
	mi := &file_accton_portchannel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey.ProtoReflect.Descriptor instead.
func (*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey) Descriptor() ([]byte, []int) {
	return file_accton_portchannel_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey) GetPortchannelName() string {
	if x != nil {
		return x.PortchannelName
	}
	return ""
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey) GetIpPrefix() string {
	if x != nil {
		return x.IpPrefix
	}
	return ""
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey) GetPortchannelInterfaceIpprefixList() *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList {
	if x != nil {
		return x.PortchannelInterfaceIpprefixList
	}
	return nil
}

type AcctonPortchannel_PortchannelInterface_PortchannelInterfaceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrfName *ywrapper.StringValue `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceList) Reset() {
	*x = AcctonPortchannel_PortchannelInterface_PortchannelInterfaceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_portchannel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceList) ProtoMessage() {}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceList) ProtoReflect() protoreflect.Message {
	mi := &file_accton_portchannel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonPortchannel_PortchannelInterface_PortchannelInterfaceList.ProtoReflect.Descriptor instead.
func (*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceList) Descriptor() ([]byte, []int) {
	return file_accton_portchannel_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceList) GetVrfName() *ywrapper.StringValue {
	if x != nil {
		return x.VrfName
	}
	return nil
}

type AcctonPortchannel_PortchannelInterface_PortchannelInterfaceListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortchannelName          string                                                           `protobuf:"bytes,1,opt,name=portchannel_name,json=portchannelName,proto3" json:"portchannel_name,omitempty"`
	PortchannelInterfaceList *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceList `protobuf:"bytes,2,opt,name=portchannel_interface_list,json=portchannelInterfaceList,proto3" json:"portchannel_interface_list,omitempty"`
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceListKey) Reset() {
	*x = AcctonPortchannel_PortchannelInterface_PortchannelInterfaceListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_portchannel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceListKey) ProtoMessage() {}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceListKey) ProtoReflect() protoreflect.Message {
	mi := &file_accton_portchannel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonPortchannel_PortchannelInterface_PortchannelInterfaceListKey.ProtoReflect.Descriptor instead.
func (*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceListKey) Descriptor() ([]byte, []int) {
	return file_accton_portchannel_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceListKey) GetPortchannelName() string {
	if x != nil {
		return x.PortchannelName
	}
	return ""
}

func (x *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceListKey) GetPortchannelInterfaceList() *AcctonPortchannel_PortchannelInterface_PortchannelInterfaceList {
	if x != nil {
		return x.PortchannelInterfaceList
	}
	return nil
}

type AcctonPortchannel_PortchannelMember_PortchannelMemberList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AcctonPortchannel_PortchannelMember_PortchannelMemberList) Reset() {
	*x = AcctonPortchannel_PortchannelMember_PortchannelMemberList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_portchannel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonPortchannel_PortchannelMember_PortchannelMemberList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonPortchannel_PortchannelMember_PortchannelMemberList) ProtoMessage() {}

func (x *AcctonPortchannel_PortchannelMember_PortchannelMemberList) ProtoReflect() protoreflect.Message {
	mi := &file_accton_portchannel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonPortchannel_PortchannelMember_PortchannelMemberList.ProtoReflect.Descriptor instead.
func (*AcctonPortchannel_PortchannelMember_PortchannelMemberList) Descriptor() ([]byte, []int) {
	return file_accton_portchannel_proto_rawDescGZIP(), []int{0, 2, 0}
}

type AcctonPortchannel_PortchannelMember_PortchannelMemberListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortchannelName       string                                                     `protobuf:"bytes,1,opt,name=portchannel_name,json=portchannelName,proto3" json:"portchannel_name,omitempty"`
	Port                  string                                                     `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	PortchannelMemberList *AcctonPortchannel_PortchannelMember_PortchannelMemberList `protobuf:"bytes,3,opt,name=portchannel_member_list,json=portchannelMemberList,proto3" json:"portchannel_member_list,omitempty"`
}

func (x *AcctonPortchannel_PortchannelMember_PortchannelMemberListKey) Reset() {
	*x = AcctonPortchannel_PortchannelMember_PortchannelMemberListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_portchannel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonPortchannel_PortchannelMember_PortchannelMemberListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonPortchannel_PortchannelMember_PortchannelMemberListKey) ProtoMessage() {}

func (x *AcctonPortchannel_PortchannelMember_PortchannelMemberListKey) ProtoReflect() protoreflect.Message {
	mi := &file_accton_portchannel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonPortchannel_PortchannelMember_PortchannelMemberListKey.ProtoReflect.Descriptor instead.
func (*AcctonPortchannel_PortchannelMember_PortchannelMemberListKey) Descriptor() ([]byte, []int) {
	return file_accton_portchannel_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *AcctonPortchannel_PortchannelMember_PortchannelMemberListKey) GetPortchannelName() string {
	if x != nil {
		return x.PortchannelName
	}
	return ""
}

func (x *AcctonPortchannel_PortchannelMember_PortchannelMemberListKey) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *AcctonPortchannel_PortchannelMember_PortchannelMemberListKey) GetPortchannelMemberList() *AcctonPortchannel_PortchannelMember_PortchannelMemberList {
	if x != nil {
		return x.PortchannelMemberList
	}
	return nil
}

var File_accton_portchannel_proto protoreflect.FileDescriptor

var file_accton_portchannel_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x1c, 0x0a, 0x11, 0x41,
	0x63, 0x63, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x6a, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x22, 0x82, 0x41, 0x1f,
	0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x0b, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x90, 0x01, 0x0a,
	0x15, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29,
	0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x84, 0x01, 0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x61, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xfa, 0x05, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x97, 0x01, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f,
	0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x0f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x1a, 0xe7, 0x02, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f,
	0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6f, 0x0a, 0x09, 0x6d, 0x69, 0x6e,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f,
	0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x5e, 0x0a, 0x03, 0x6d, 0x74,
	0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41,
	0x34, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a, 0xe6, 0x01, 0x0a, 0x12, 0x50,
	0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x6f, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x82, 0x41, 0x41,
	0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0xc7, 0x0e, 0x0a, 0x14, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0xf2, 0x01, 0x0a,
	0x23, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x50, 0x82,
	0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x69, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x20, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0xd0, 0x01, 0x0a, 0x1a, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41,
	0x63, 0x63, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f,
	0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x18, 0x70, 0x6f, 0x72, 0x74,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0xc7, 0x03, 0x0a, 0x20, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x70,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x61, 0x63, 0x63, 0x74,
	0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x70, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0xc2, 0x01, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e,
	0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x56, 0x82,
	0x41, 0x53, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x69, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x50, 0x0a, 0x05,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x0c, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x0b, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x10, 0x02, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x1a, 0xcd,
	0x03, 0x0a, 0x23, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f,
	0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x77, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x61, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x70, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x2d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x08, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x9d,
	0x01, 0x0a, 0x23, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x20, 0x70, 0x6f,
	0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x9f,
	0x01, 0x0a, 0x18, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x08,
	0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f,
	0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76,
	0x72, 0x66, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0xaa, 0x02, 0x0a, 0x1b, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x83, 0x01, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0x82, 0x41, 0x55,
	0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x1a, 0x70, 0x6f, 0x72, 0x74, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xdf, 0x04,
	0x0a, 0x11, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0xbe, 0x01, 0x0a, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f,
	0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x15, 0x70,
	0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x17, 0x0a, 0x15, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xef, 0x02,
	0x0a, 0x18, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x7d, 0x0a, 0x10, 0x70, 0x6f,
	0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x63, 0x63,
	0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x78, 0x0a, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41,
	0x63, 0x63, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x1b, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x5a, 0x07, 0x2e, 0x3b, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_accton_portchannel_proto_rawDescOnce sync.Once
	file_accton_portchannel_proto_rawDescData = file_accton_portchannel_proto_rawDesc
)

func file_accton_portchannel_proto_rawDescGZIP() []byte {
	file_accton_portchannel_proto_rawDescOnce.Do(func() {
		file_accton_portchannel_proto_rawDescData = protoimpl.X.CompressGZIP(file_accton_portchannel_proto_rawDescData)
	})
	return file_accton_portchannel_proto_rawDescData
}

var file_accton_portchannel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_accton_portchannel_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_accton_portchannel_proto_goTypes = []interface{}{
	(AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList_Scope)(0), // 0: sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceIpprefixList.Scope
	(*AcctonPortchannel)(nil),                                                          // 1: sonic.AcctonPortchannel
	(*AcctonPortchannel_Portchannel)(nil),                                              // 2: sonic.AcctonPortchannel.Portchannel
	(*AcctonPortchannel_PortchannelInterface)(nil),                                     // 3: sonic.AcctonPortchannel.PortchannelInterface
	(*AcctonPortchannel_PortchannelMember)(nil),                                        // 4: sonic.AcctonPortchannel.PortchannelMember
	(*AcctonPortchannel_Portchannel_PortchannelList)(nil),                              // 5: sonic.AcctonPortchannel.Portchannel.PortchannelList
	(*AcctonPortchannel_Portchannel_PortchannelListKey)(nil),                           // 6: sonic.AcctonPortchannel.Portchannel.PortchannelListKey
	(*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList)(nil),    // 7: sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceIpprefixList
	(*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey)(nil), // 8: sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceIpprefixListKey
	(*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceList)(nil),            // 9: sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceList
	(*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceListKey)(nil),         // 10: sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceListKey
	(*AcctonPortchannel_PortchannelMember_PortchannelMemberList)(nil),                  // 11: sonic.AcctonPortchannel.PortchannelMember.PortchannelMemberList
	(*AcctonPortchannel_PortchannelMember_PortchannelMemberListKey)(nil),               // 12: sonic.AcctonPortchannel.PortchannelMember.PortchannelMemberListKey
	(AcctonTypesAdminStatus)(0),                                                        // 13: sonic.AcctonTypesAdminStatus
	(*ywrapper.UintValue)(nil),                                                         // 14: ywrapper.UintValue
	(AcctonTypesIpFamily)(0),                                                           // 15: sonic.AcctonTypesIpFamily
	(*ywrapper.StringValue)(nil),                                                       // 16: ywrapper.StringValue
}
var file_accton_portchannel_proto_depIdxs = []int32{
	2,  // 0: sonic.AcctonPortchannel.portchannel:type_name -> sonic.AcctonPortchannel.Portchannel
	3,  // 1: sonic.AcctonPortchannel.portchannel_interface:type_name -> sonic.AcctonPortchannel.PortchannelInterface
	4,  // 2: sonic.AcctonPortchannel.portchannel_member:type_name -> sonic.AcctonPortchannel.PortchannelMember
	6,  // 3: sonic.AcctonPortchannel.Portchannel.portchannel_list:type_name -> sonic.AcctonPortchannel.Portchannel.PortchannelListKey
	8,  // 4: sonic.AcctonPortchannel.PortchannelInterface.portchannel_interface_ipprefix_list:type_name -> sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceIpprefixListKey
	10, // 5: sonic.AcctonPortchannel.PortchannelInterface.portchannel_interface_list:type_name -> sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceListKey
	12, // 6: sonic.AcctonPortchannel.PortchannelMember.portchannel_member_list:type_name -> sonic.AcctonPortchannel.PortchannelMember.PortchannelMemberListKey
	13, // 7: sonic.AcctonPortchannel.Portchannel.PortchannelList.admin_status:type_name -> sonic.AcctonTypesAdminStatus
	14, // 8: sonic.AcctonPortchannel.Portchannel.PortchannelList.min_links:type_name -> ywrapper.UintValue
	14, // 9: sonic.AcctonPortchannel.Portchannel.PortchannelList.mtu:type_name -> ywrapper.UintValue
	5,  // 10: sonic.AcctonPortchannel.Portchannel.PortchannelListKey.portchannel_list:type_name -> sonic.AcctonPortchannel.Portchannel.PortchannelList
	15, // 11: sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceIpprefixList.family:type_name -> sonic.AcctonTypesIpFamily
	0,  // 12: sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceIpprefixList.scope:type_name -> sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceIpprefixList.Scope
	7,  // 13: sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceIpprefixListKey.portchannel_interface_ipprefix_list:type_name -> sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceIpprefixList
	16, // 14: sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceList.vrf_name:type_name -> ywrapper.StringValue
	9,  // 15: sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceListKey.portchannel_interface_list:type_name -> sonic.AcctonPortchannel.PortchannelInterface.PortchannelInterfaceList
	11, // 16: sonic.AcctonPortchannel.PortchannelMember.PortchannelMemberListKey.portchannel_member_list:type_name -> sonic.AcctonPortchannel.PortchannelMember.PortchannelMemberList
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_accton_portchannel_proto_init() }
func file_accton_portchannel_proto_init() {
	if File_accton_portchannel_proto != nil {
		return
	}
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_accton_portchannel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonPortchannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_portchannel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonPortchannel_Portchannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_portchannel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonPortchannel_PortchannelInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_portchannel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonPortchannel_PortchannelMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_portchannel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonPortchannel_Portchannel_PortchannelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_portchannel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonPortchannel_Portchannel_PortchannelListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_portchannel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_portchannel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceIpprefixListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_portchannel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_portchannel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonPortchannel_PortchannelInterface_PortchannelInterfaceListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_portchannel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonPortchannel_PortchannelMember_PortchannelMemberList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_portchannel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonPortchannel_PortchannelMember_PortchannelMemberListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accton_portchannel_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accton_portchannel_proto_goTypes,
		DependencyIndexes: file_accton_portchannel_proto_depIdxs,
		EnumInfos:         file_accton_portchannel_proto_enumTypes,
		MessageInfos:      file_accton_portchannel_proto_msgTypes,
	}.Build()
	File_accton_portchannel_proto = out.File
	file_accton_portchannel_proto_rawDesc = nil
	file_accton_portchannel_proto_goTypes = nil
	file_accton_portchannel_proto_depIdxs = nil
}
