// openconfig.sonic_vxlan is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/sonic-platform.yang
//  - ../api/yang/sonic/sonic-interface.yang
//  - ../api/yang/sonic/sonic-port.yang
//  - ../api/yang/sonic/sonic-ntp.yang
//  - ../api/yang/sonic/sonic-vrf.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/sonic/third_party/ietf/iana-if-type.yang
//  - ../api/yang/sonic/sonic-loopback-interface.yang
//  - ../api/yang/sonic/sonic-platform-types.yang
//  - ../api/yang/sonic/sonic-neighbor.yang
//  - ../api/yang/sonic/sonic-route.yang
//  - ../api/yang/sonic/sonic-lldp.yang
//  - ../api/yang/sonic/sonic-vlan.yang
//  - ../api/yang/sonic/sonic-todo.yang
//  - ../api/yang/sonic/sonic-portchannel.yang
//  - ../api/yang/sonic/sonic-extension.yang
//  - ../api/yang/sonic/sonic-mirror-session.yang
//  - ../api/yang/sonic/sonic-vxlan.yang
//  - ../api/yang/sonic/sonic-fdb.yang
//  - ../api/yang/sonic/sonic-acl.yang
//  - ../api/yang/sonic/sonic-types.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: sonic_vxlan.proto

package sonic

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SonicVxlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vxlan *SonicVxlan_Vxlan `protobuf:"bytes,1,opt,name=vxlan,proto3" json:"vxlan,omitempty"`
}

func (x *SonicVxlan) Reset() {
	*x = SonicVxlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vxlan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVxlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVxlan) ProtoMessage() {}

func (x *SonicVxlan) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vxlan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVxlan.ProtoReflect.Descriptor instead.
func (*SonicVxlan) Descriptor() ([]byte, []int) {
	return file_sonic_vxlan_proto_rawDescGZIP(), []int{0}
}

func (x *SonicVxlan) GetVxlan() *SonicVxlan_Vxlan {
	if x != nil {
		return x.Vxlan
	}
	return nil
}

type SonicVxlan_Vxlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VnetList           []*SonicVxlan_Vxlan_VnetListKey           `protobuf:"bytes,1,rep,name=vnet_list,json=vnetList,proto3" json:"vnet_list,omitempty"`
	VxlanTunnelList    []*SonicVxlan_Vxlan_VxlanTunnelListKey    `protobuf:"bytes,2,rep,name=vxlan_tunnel_list,json=vxlanTunnelList,proto3" json:"vxlan_tunnel_list,omitempty"`
	VxlanTunnelMapList []*SonicVxlan_Vxlan_VxlanTunnelMapListKey `protobuf:"bytes,3,rep,name=vxlan_tunnel_map_list,json=vxlanTunnelMapList,proto3" json:"vxlan_tunnel_map_list,omitempty"`
}

func (x *SonicVxlan_Vxlan) Reset() {
	*x = SonicVxlan_Vxlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vxlan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVxlan_Vxlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVxlan_Vxlan) ProtoMessage() {}

func (x *SonicVxlan_Vxlan) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vxlan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVxlan_Vxlan.ProtoReflect.Descriptor instead.
func (*SonicVxlan_Vxlan) Descriptor() ([]byte, []int) {
	return file_sonic_vxlan_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SonicVxlan_Vxlan) GetVnetList() []*SonicVxlan_Vxlan_VnetListKey {
	if x != nil {
		return x.VnetList
	}
	return nil
}

func (x *SonicVxlan_Vxlan) GetVxlanTunnelList() []*SonicVxlan_Vxlan_VxlanTunnelListKey {
	if x != nil {
		return x.VxlanTunnelList
	}
	return nil
}

func (x *SonicVxlan_Vxlan) GetVxlanTunnelMapList() []*SonicVxlan_Vxlan_VxlanTunnelMapListKey {
	if x != nil {
		return x.VxlanTunnelMapList
	}
	return nil
}

type SonicVxlan_Vxlan_VnetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerList    []*ywrapper.StringValue `protobuf:"bytes,1,rep,name=peer_list,json=peerList,proto3" json:"peer_list,omitempty"`
	Vni         *ywrapper.UintValue     `protobuf:"bytes,2,opt,name=vni,proto3" json:"vni,omitempty"`
	VxlanTunnel *ywrapper.StringValue   `protobuf:"bytes,3,opt,name=vxlan_tunnel,json=vxlanTunnel,proto3" json:"vxlan_tunnel,omitempty"`
}

func (x *SonicVxlan_Vxlan_VnetList) Reset() {
	*x = SonicVxlan_Vxlan_VnetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vxlan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVxlan_Vxlan_VnetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVxlan_Vxlan_VnetList) ProtoMessage() {}

func (x *SonicVxlan_Vxlan_VnetList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vxlan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVxlan_Vxlan_VnetList.ProtoReflect.Descriptor instead.
func (*SonicVxlan_Vxlan_VnetList) Descriptor() ([]byte, []int) {
	return file_sonic_vxlan_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *SonicVxlan_Vxlan_VnetList) GetPeerList() []*ywrapper.StringValue {
	if x != nil {
		return x.PeerList
	}
	return nil
}

func (x *SonicVxlan_Vxlan_VnetList) GetVni() *ywrapper.UintValue {
	if x != nil {
		return x.Vni
	}
	return nil
}

func (x *SonicVxlan_Vxlan_VnetList) GetVxlanTunnel() *ywrapper.StringValue {
	if x != nil {
		return x.VxlanTunnel
	}
	return nil
}

type SonicVxlan_Vxlan_VnetListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VnetName string                     `protobuf:"bytes,1,opt,name=vnet_name,json=vnetName,proto3" json:"vnet_name,omitempty"`
	VnetList *SonicVxlan_Vxlan_VnetList `protobuf:"bytes,2,opt,name=vnet_list,json=vnetList,proto3" json:"vnet_list,omitempty"`
}

func (x *SonicVxlan_Vxlan_VnetListKey) Reset() {
	*x = SonicVxlan_Vxlan_VnetListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vxlan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVxlan_Vxlan_VnetListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVxlan_Vxlan_VnetListKey) ProtoMessage() {}

func (x *SonicVxlan_Vxlan_VnetListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vxlan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVxlan_Vxlan_VnetListKey.ProtoReflect.Descriptor instead.
func (*SonicVxlan_Vxlan_VnetListKey) Descriptor() ([]byte, []int) {
	return file_sonic_vxlan_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *SonicVxlan_Vxlan_VnetListKey) GetVnetName() string {
	if x != nil {
		return x.VnetName
	}
	return ""
}

func (x *SonicVxlan_Vxlan_VnetListKey) GetVnetList() *SonicVxlan_Vxlan_VnetList {
	if x != nil {
		return x.VnetList
	}
	return nil
}

type SonicVxlan_Vxlan_VxlanTunnelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstIp *ywrapper.StringValue `protobuf:"bytes,1,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	SrcIp *ywrapper.StringValue `protobuf:"bytes,2,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
}

func (x *SonicVxlan_Vxlan_VxlanTunnelList) Reset() {
	*x = SonicVxlan_Vxlan_VxlanTunnelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vxlan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVxlan_Vxlan_VxlanTunnelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVxlan_Vxlan_VxlanTunnelList) ProtoMessage() {}

func (x *SonicVxlan_Vxlan_VxlanTunnelList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vxlan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVxlan_Vxlan_VxlanTunnelList.ProtoReflect.Descriptor instead.
func (*SonicVxlan_Vxlan_VxlanTunnelList) Descriptor() ([]byte, []int) {
	return file_sonic_vxlan_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *SonicVxlan_Vxlan_VxlanTunnelList) GetDstIp() *ywrapper.StringValue {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *SonicVxlan_Vxlan_VxlanTunnelList) GetSrcIp() *ywrapper.StringValue {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

type SonicVxlan_Vxlan_VxlanTunnelListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelName      string                            `protobuf:"bytes,1,opt,name=tunnel_name,json=tunnelName,proto3" json:"tunnel_name,omitempty"`
	VxlanTunnelList *SonicVxlan_Vxlan_VxlanTunnelList `protobuf:"bytes,2,opt,name=vxlan_tunnel_list,json=vxlanTunnelList,proto3" json:"vxlan_tunnel_list,omitempty"`
}

func (x *SonicVxlan_Vxlan_VxlanTunnelListKey) Reset() {
	*x = SonicVxlan_Vxlan_VxlanTunnelListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vxlan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVxlan_Vxlan_VxlanTunnelListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVxlan_Vxlan_VxlanTunnelListKey) ProtoMessage() {}

func (x *SonicVxlan_Vxlan_VxlanTunnelListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vxlan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVxlan_Vxlan_VxlanTunnelListKey.ProtoReflect.Descriptor instead.
func (*SonicVxlan_Vxlan_VxlanTunnelListKey) Descriptor() ([]byte, []int) {
	return file_sonic_vxlan_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *SonicVxlan_Vxlan_VxlanTunnelListKey) GetTunnelName() string {
	if x != nil {
		return x.TunnelName
	}
	return ""
}

func (x *SonicVxlan_Vxlan_VxlanTunnelListKey) GetVxlanTunnelList() *SonicVxlan_Vxlan_VxlanTunnelList {
	if x != nil {
		return x.VxlanTunnelList
	}
	return nil
}

type SonicVxlan_Vxlan_VxlanTunnelMapList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vlan *ywrapper.UintValue `protobuf:"bytes,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Vni  *ywrapper.UintValue `protobuf:"bytes,2,opt,name=vni,proto3" json:"vni,omitempty"`
}

func (x *SonicVxlan_Vxlan_VxlanTunnelMapList) Reset() {
	*x = SonicVxlan_Vxlan_VxlanTunnelMapList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vxlan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVxlan_Vxlan_VxlanTunnelMapList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVxlan_Vxlan_VxlanTunnelMapList) ProtoMessage() {}

func (x *SonicVxlan_Vxlan_VxlanTunnelMapList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vxlan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVxlan_Vxlan_VxlanTunnelMapList.ProtoReflect.Descriptor instead.
func (*SonicVxlan_Vxlan_VxlanTunnelMapList) Descriptor() ([]byte, []int) {
	return file_sonic_vxlan_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *SonicVxlan_Vxlan_VxlanTunnelMapList) GetVlan() *ywrapper.UintValue {
	if x != nil {
		return x.Vlan
	}
	return nil
}

func (x *SonicVxlan_Vxlan_VxlanTunnelMapList) GetVni() *ywrapper.UintValue {
	if x != nil {
		return x.Vni
	}
	return nil
}

type SonicVxlan_Vxlan_VxlanTunnelMapListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelName         string                               `protobuf:"bytes,1,opt,name=tunnel_name,json=tunnelName,proto3" json:"tunnel_name,omitempty"`
	TunnelMap          string                               `protobuf:"bytes,2,opt,name=tunnel_map,json=tunnelMap,proto3" json:"tunnel_map,omitempty"`
	VxlanTunnelMapList *SonicVxlan_Vxlan_VxlanTunnelMapList `protobuf:"bytes,3,opt,name=vxlan_tunnel_map_list,json=vxlanTunnelMapList,proto3" json:"vxlan_tunnel_map_list,omitempty"`
}

func (x *SonicVxlan_Vxlan_VxlanTunnelMapListKey) Reset() {
	*x = SonicVxlan_Vxlan_VxlanTunnelMapListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_vxlan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicVxlan_Vxlan_VxlanTunnelMapListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicVxlan_Vxlan_VxlanTunnelMapListKey) ProtoMessage() {}

func (x *SonicVxlan_Vxlan_VxlanTunnelMapListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_vxlan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicVxlan_Vxlan_VxlanTunnelMapListKey.ProtoReflect.Descriptor instead.
func (*SonicVxlan_Vxlan_VxlanTunnelMapListKey) Descriptor() ([]byte, []int) {
	return file_sonic_vxlan_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (x *SonicVxlan_Vxlan_VxlanTunnelMapListKey) GetTunnelName() string {
	if x != nil {
		return x.TunnelName
	}
	return ""
}

func (x *SonicVxlan_Vxlan_VxlanTunnelMapListKey) GetTunnelMap() string {
	if x != nil {
		return x.TunnelMap
	}
	return ""
}

func (x *SonicVxlan_Vxlan_VxlanTunnelMapListKey) GetVxlanTunnelMapList() *SonicVxlan_Vxlan_VxlanTunnelMapList {
	if x != nil {
		return x.VxlanTunnelMapList
	}
	return nil
}

var File_sonic_vxlan_proto protoreflect.FileDescriptor

var file_sonic_vxlan_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x0e, 0x0a, 0x0a, 0x53, 0x6f, 0x6e, 0x69, 0x63,
	0x56, 0x78, 0x6c, 0x61, 0x6e, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e,
	0x69, 0x63, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x42, 0x15, 0x82,
	0x41, 0x12, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76,
	0x78, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x1a, 0xb8, 0x0d, 0x0a, 0x05,
	0x56, 0x78, 0x6c, 0x61, 0x6e, 0x12, 0x61, 0x0a, 0x09, 0x76, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x78, 0x6c, 0x61,
	0x6e, 0x2e, 0x56, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x1f, 0x82,
	0x41, 0x1c, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76,
	0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6e, 0x65, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08,
	0x76, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x7f, 0x0a, 0x11, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69,
	0x63, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x78, 0x6c,
	0x61, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42,
	0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x2f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2d, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x8d, 0x01, 0x0a, 0x15, 0x76, 0x78,
	0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x78, 0x6c,
	0x61, 0x6e, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x2d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f,
	0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x61, 0x70,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x12, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x9d, 0x02, 0x0a, 0x08, 0x56, 0x6e,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x2f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6e, 0x65, 0x74, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76,
	0x6e, 0x65, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x6e, 0x69, 0x52, 0x03, 0x76, 0x6e,
	0x69, 0x12, 0x66, 0x0a, 0x0c, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c,
	0x82, 0x41, 0x29, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f,
	0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6e, 0x65, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0b, 0x76, 0x78,
	0x6c, 0x61, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x94, 0x01, 0x0a, 0x0b, 0x56, 0x6e,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x09, 0x76, 0x6e, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x82, 0x41,
	0x26, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78,
	0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6e, 0x65, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x6e,
	0x65, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x76, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x09, 0x76, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e,
	0x69, 0x63, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6e,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x76, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x1a, 0xcd, 0x01, 0x0a, 0x0f, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c,
	0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x52, 0x05, 0x64, 0x73, 0x74,
	0x49, 0x70, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x2f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70,
	0x1a, 0xbf, 0x01, 0x0a, 0x12, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x82, 0x41,
	0x30, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78,
	0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a,
	0x11, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x78, 0x6c, 0x61,
	0x6e, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x0f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0xc7, 0x01, 0x0a, 0x12, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x04, 0x76, 0x6c, 0x61,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41,
	0x2d, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78,
	0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x6d, 0x61, 0x70, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x04,
	0x76, 0x6c, 0x61, 0x6e, 0x12, 0x56, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78,
	0x6c, 0x61, 0x6e, 0x2d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x61, 0x70, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x2f, 0x76, 0x6e, 0x69, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x1a, 0xa7, 0x02, 0x0a,
	0x15, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x58, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x82, 0x41, 0x34,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c,
	0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x6d, 0x61, 0x70, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x55, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x2d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x61, 0x70, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x61, 0x70, 0x52, 0x09, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x5d, 0x0a, 0x15, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53,
	0x6f, 0x6e, 0x69, 0x63, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x2e,
	0x56, 0x78, 0x6c, 0x61, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x12, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x1b, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f,
	0x63, 0x73, 0x79, 0x73, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x5a, 0x07, 0x2e, 0x3b, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sonic_vxlan_proto_rawDescOnce sync.Once
	file_sonic_vxlan_proto_rawDescData = file_sonic_vxlan_proto_rawDesc
)

func file_sonic_vxlan_proto_rawDescGZIP() []byte {
	file_sonic_vxlan_proto_rawDescOnce.Do(func() {
		file_sonic_vxlan_proto_rawDescData = protoimpl.X.CompressGZIP(file_sonic_vxlan_proto_rawDescData)
	})
	return file_sonic_vxlan_proto_rawDescData
}

var file_sonic_vxlan_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_sonic_vxlan_proto_goTypes = []interface{}{
	(*SonicVxlan)(nil),                             // 0: sonic.SonicVxlan
	(*SonicVxlan_Vxlan)(nil),                       // 1: sonic.SonicVxlan.Vxlan
	(*SonicVxlan_Vxlan_VnetList)(nil),              // 2: sonic.SonicVxlan.Vxlan.VnetList
	(*SonicVxlan_Vxlan_VnetListKey)(nil),           // 3: sonic.SonicVxlan.Vxlan.VnetListKey
	(*SonicVxlan_Vxlan_VxlanTunnelList)(nil),       // 4: sonic.SonicVxlan.Vxlan.VxlanTunnelList
	(*SonicVxlan_Vxlan_VxlanTunnelListKey)(nil),    // 5: sonic.SonicVxlan.Vxlan.VxlanTunnelListKey
	(*SonicVxlan_Vxlan_VxlanTunnelMapList)(nil),    // 6: sonic.SonicVxlan.Vxlan.VxlanTunnelMapList
	(*SonicVxlan_Vxlan_VxlanTunnelMapListKey)(nil), // 7: sonic.SonicVxlan.Vxlan.VxlanTunnelMapListKey
	(*ywrapper.StringValue)(nil),                   // 8: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                     // 9: ywrapper.UintValue
}
var file_sonic_vxlan_proto_depIdxs = []int32{
	1,  // 0: sonic.SonicVxlan.vxlan:type_name -> sonic.SonicVxlan.Vxlan
	3,  // 1: sonic.SonicVxlan.Vxlan.vnet_list:type_name -> sonic.SonicVxlan.Vxlan.VnetListKey
	5,  // 2: sonic.SonicVxlan.Vxlan.vxlan_tunnel_list:type_name -> sonic.SonicVxlan.Vxlan.VxlanTunnelListKey
	7,  // 3: sonic.SonicVxlan.Vxlan.vxlan_tunnel_map_list:type_name -> sonic.SonicVxlan.Vxlan.VxlanTunnelMapListKey
	8,  // 4: sonic.SonicVxlan.Vxlan.VnetList.peer_list:type_name -> ywrapper.StringValue
	9,  // 5: sonic.SonicVxlan.Vxlan.VnetList.vni:type_name -> ywrapper.UintValue
	8,  // 6: sonic.SonicVxlan.Vxlan.VnetList.vxlan_tunnel:type_name -> ywrapper.StringValue
	2,  // 7: sonic.SonicVxlan.Vxlan.VnetListKey.vnet_list:type_name -> sonic.SonicVxlan.Vxlan.VnetList
	8,  // 8: sonic.SonicVxlan.Vxlan.VxlanTunnelList.dst_ip:type_name -> ywrapper.StringValue
	8,  // 9: sonic.SonicVxlan.Vxlan.VxlanTunnelList.src_ip:type_name -> ywrapper.StringValue
	4,  // 10: sonic.SonicVxlan.Vxlan.VxlanTunnelListKey.vxlan_tunnel_list:type_name -> sonic.SonicVxlan.Vxlan.VxlanTunnelList
	9,  // 11: sonic.SonicVxlan.Vxlan.VxlanTunnelMapList.vlan:type_name -> ywrapper.UintValue
	9,  // 12: sonic.SonicVxlan.Vxlan.VxlanTunnelMapList.vni:type_name -> ywrapper.UintValue
	6,  // 13: sonic.SonicVxlan.Vxlan.VxlanTunnelMapListKey.vxlan_tunnel_map_list:type_name -> sonic.SonicVxlan.Vxlan.VxlanTunnelMapList
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_sonic_vxlan_proto_init() }
func file_sonic_vxlan_proto_init() {
	if File_sonic_vxlan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sonic_vxlan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVxlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vxlan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVxlan_Vxlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vxlan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVxlan_Vxlan_VnetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vxlan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVxlan_Vxlan_VnetListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vxlan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVxlan_Vxlan_VxlanTunnelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vxlan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVxlan_Vxlan_VxlanTunnelListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vxlan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVxlan_Vxlan_VxlanTunnelMapList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_vxlan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicVxlan_Vxlan_VxlanTunnelMapListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sonic_vxlan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sonic_vxlan_proto_goTypes,
		DependencyIndexes: file_sonic_vxlan_proto_depIdxs,
		MessageInfos:      file_sonic_vxlan_proto_msgTypes,
	}.Build()
	File_sonic_vxlan_proto = out.File
	file_sonic_vxlan_proto_rawDesc = nil
	file_sonic_vxlan_proto_goTypes = nil
	file_sonic_vxlan_proto_depIdxs = nil
}
