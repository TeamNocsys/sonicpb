// openconfig.accton_lldp is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/nocsys-types.yang
//  - ../api/yang/sonic/nocsys-interface.yang
//  - ../api/yang/sonic/nocsys-vlan.yang
//  - ../api/yang/sonic/nocsys-mdns.yang
//  - ../api/yang/sonic/nocsys-extension.yang
//  - ../api/yang/sonic/nocsys-acl.yang
//  - ../api/yang/sonic/nocsys-loopback-interface.yang
//  - ../api/yang/sonic/nocsys-vrf.yang
//  - ../api/yang/sonic/nocsys-portchannel.yang
//  - ../api/yang/sonic/nocsys-system.yang
//  - ../api/yang/sonic/nocsys-neighbor.yang
//  - ../api/yang/sonic/nocsys-vxlan.yang
//  - ../api/yang/sonic/nocsys-port.yang
//  - ../api/yang/sonic/nocsys-route.yang
//  - ../api/yang/sonic/nocsys-ntp.yang
//  - ../api/yang/sonic/nocsys-fdb.yang
//  - ../api/yang/sonic/nocsys-platform-types.yang
//  - ../api/yang/sonic/nocsys-platform.yang
//  - ../api/yang/sonic/nocsys-lldp.yang
//  - ../api/yang/sonic/nocsys-mirror-session.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/sonic/third_party/ietf/iana-if-type.yang
//  - ../api/yang/sonic/third_party/openconfig/openconfig-types.yang
//  - ../api/yang/sonic/third_party/openconfig/openconfig-extensions.yang
//  - ../api/yang/sonic/nocsys-todo.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: accton_lldp.proto

package sonic

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype int32

const (
	AcctonLldp_Lldp_LldpList_State_LLDPREMCHASSISIDSUBTYPE_UNSET   AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype = 0
	AcctonLldp_Lldp_LldpList_State_LLDPREMCHASSISIDSUBTYPE_CHASSIS AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype = 1
	AcctonLldp_Lldp_LldpList_State_LLDPREMCHASSISIDSUBTYPE_IFALIAS AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype = 2
	AcctonLldp_Lldp_LldpList_State_LLDPREMCHASSISIDSUBTYPE_PORT    AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype = 3
	AcctonLldp_Lldp_LldpList_State_LLDPREMCHASSISIDSUBTYPE_LLADDR  AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype = 4
	AcctonLldp_Lldp_LldpList_State_LLDPREMCHASSISIDSUBTYPE_ADDR    AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype = 5
	AcctonLldp_Lldp_LldpList_State_LLDPREMCHASSISIDSUBTYPE_IFNAME  AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype = 6
	AcctonLldp_Lldp_LldpList_State_LLDPREMCHASSISIDSUBTYPE_LOCAL   AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype = 7
)

// Enum value maps for AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype.
var (
	AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype_name = map[int32]string{
		0: "LLDPREMCHASSISIDSUBTYPE_UNSET",
		1: "LLDPREMCHASSISIDSUBTYPE_CHASSIS",
		2: "LLDPREMCHASSISIDSUBTYPE_IFALIAS",
		3: "LLDPREMCHASSISIDSUBTYPE_PORT",
		4: "LLDPREMCHASSISIDSUBTYPE_LLADDR",
		5: "LLDPREMCHASSISIDSUBTYPE_ADDR",
		6: "LLDPREMCHASSISIDSUBTYPE_IFNAME",
		7: "LLDPREMCHASSISIDSUBTYPE_LOCAL",
	}
	AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype_value = map[string]int32{
		"LLDPREMCHASSISIDSUBTYPE_UNSET":   0,
		"LLDPREMCHASSISIDSUBTYPE_CHASSIS": 1,
		"LLDPREMCHASSISIDSUBTYPE_IFALIAS": 2,
		"LLDPREMCHASSISIDSUBTYPE_PORT":    3,
		"LLDPREMCHASSISIDSUBTYPE_LLADDR":  4,
		"LLDPREMCHASSISIDSUBTYPE_ADDR":    5,
		"LLDPREMCHASSISIDSUBTYPE_IFNAME":  6,
		"LLDPREMCHASSISIDSUBTYPE_LOCAL":   7,
	}
)

func (x AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype) Enum() *AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype {
	p := new(AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype)
	*p = x
	return p
}

func (x AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype) Descriptor() protoreflect.EnumDescriptor {
	return file_accton_lldp_proto_enumTypes[0].Descriptor()
}

func (AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype) Type() protoreflect.EnumType {
	return &file_accton_lldp_proto_enumTypes[0]
}

func (x AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype.Descriptor instead.
func (AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype) EnumDescriptor() ([]byte, []int) {
	return file_accton_lldp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

type AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype int32

const (
	AcctonLldp_Lldp_LldpList_State_LLDPREMPORTIDSUBTYPE_UNSET    AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype = 0
	AcctonLldp_Lldp_LldpList_State_LLDPREMPORTIDSUBTYPE_IFALIAS  AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype = 1
	AcctonLldp_Lldp_LldpList_State_LLDPREMPORTIDSUBTYPE_PORT     AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype = 2
	AcctonLldp_Lldp_LldpList_State_LLDPREMPORTIDSUBTYPE_LLADDR   AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype = 3
	AcctonLldp_Lldp_LldpList_State_LLDPREMPORTIDSUBTYPE_ADDR     AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype = 4
	AcctonLldp_Lldp_LldpList_State_LLDPREMPORTIDSUBTYPE_IFNAME   AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype = 5
	AcctonLldp_Lldp_LldpList_State_LLDPREMPORTIDSUBTYPE_AGENTCID AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype = 6
	AcctonLldp_Lldp_LldpList_State_LLDPREMPORTIDSUBTYPE_LOCAL    AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype = 7
)

// Enum value maps for AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype.
var (
	AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype_name = map[int32]string{
		0: "LLDPREMPORTIDSUBTYPE_UNSET",
		1: "LLDPREMPORTIDSUBTYPE_IFALIAS",
		2: "LLDPREMPORTIDSUBTYPE_PORT",
		3: "LLDPREMPORTIDSUBTYPE_LLADDR",
		4: "LLDPREMPORTIDSUBTYPE_ADDR",
		5: "LLDPREMPORTIDSUBTYPE_IFNAME",
		6: "LLDPREMPORTIDSUBTYPE_AGENTCID",
		7: "LLDPREMPORTIDSUBTYPE_LOCAL",
	}
	AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype_value = map[string]int32{
		"LLDPREMPORTIDSUBTYPE_UNSET":    0,
		"LLDPREMPORTIDSUBTYPE_IFALIAS":  1,
		"LLDPREMPORTIDSUBTYPE_PORT":     2,
		"LLDPREMPORTIDSUBTYPE_LLADDR":   3,
		"LLDPREMPORTIDSUBTYPE_ADDR":     4,
		"LLDPREMPORTIDSUBTYPE_IFNAME":   5,
		"LLDPREMPORTIDSUBTYPE_AGENTCID": 6,
		"LLDPREMPORTIDSUBTYPE_LOCAL":    7,
	}
)

func (x AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype) Enum() *AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype {
	p := new(AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype)
	*p = x
	return p
}

func (x AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype) Descriptor() protoreflect.EnumDescriptor {
	return file_accton_lldp_proto_enumTypes[1].Descriptor()
}

func (AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype) Type() protoreflect.EnumType {
	return &file_accton_lldp_proto_enumTypes[1]
}

func (x AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype.Descriptor instead.
func (AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype) EnumDescriptor() ([]byte, []int) {
	return file_accton_lldp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

type AcctonLldp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lldp *AcctonLldp_Lldp `protobuf:"bytes,1,opt,name=lldp,proto3" json:"lldp,omitempty"`
}

func (x *AcctonLldp) Reset() {
	*x = AcctonLldp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_lldp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonLldp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonLldp) ProtoMessage() {}

func (x *AcctonLldp) ProtoReflect() protoreflect.Message {
	mi := &file_accton_lldp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonLldp.ProtoReflect.Descriptor instead.
func (*AcctonLldp) Descriptor() ([]byte, []int) {
	return file_accton_lldp_proto_rawDescGZIP(), []int{0}
}

func (x *AcctonLldp) GetLldp() *AcctonLldp_Lldp {
	if x != nil {
		return x.Lldp
	}
	return nil
}

type AcctonLldp_Lldp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LldpList []*AcctonLldp_Lldp_LldpListKey `protobuf:"bytes,1,rep,name=lldp_list,json=lldpList,proto3" json:"lldp_list,omitempty"`
}

func (x *AcctonLldp_Lldp) Reset() {
	*x = AcctonLldp_Lldp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_lldp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonLldp_Lldp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonLldp_Lldp) ProtoMessage() {}

func (x *AcctonLldp_Lldp) ProtoReflect() protoreflect.Message {
	mi := &file_accton_lldp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonLldp_Lldp.ProtoReflect.Descriptor instead.
func (*AcctonLldp_Lldp) Descriptor() ([]byte, []int) {
	return file_accton_lldp_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AcctonLldp_Lldp) GetLldpList() []*AcctonLldp_Lldp_LldpListKey {
	if x != nil {
		return x.LldpList
	}
	return nil
}

type AcctonLldp_Lldp_LldpList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *AcctonLldp_Lldp_LldpList_State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AcctonLldp_Lldp_LldpList) Reset() {
	*x = AcctonLldp_Lldp_LldpList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_lldp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonLldp_Lldp_LldpList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonLldp_Lldp_LldpList) ProtoMessage() {}

func (x *AcctonLldp_Lldp_LldpList) ProtoReflect() protoreflect.Message {
	mi := &file_accton_lldp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonLldp_Lldp_LldpList.ProtoReflect.Descriptor instead.
func (*AcctonLldp_Lldp_LldpList) Descriptor() ([]byte, []int) {
	return file_accton_lldp_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *AcctonLldp_Lldp_LldpList) GetState() *AcctonLldp_Lldp_LldpList_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AcctonLldp_Lldp_LldpListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortName string                    `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	LldpList *AcctonLldp_Lldp_LldpList `protobuf:"bytes,2,opt,name=lldp_list,json=lldpList,proto3" json:"lldp_list,omitempty"`
}

func (x *AcctonLldp_Lldp_LldpListKey) Reset() {
	*x = AcctonLldp_Lldp_LldpListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_lldp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonLldp_Lldp_LldpListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonLldp_Lldp_LldpListKey) ProtoMessage() {}

func (x *AcctonLldp_Lldp_LldpListKey) ProtoReflect() protoreflect.Message {
	mi := &file_accton_lldp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonLldp_Lldp_LldpListKey.ProtoReflect.Descriptor instead.
func (*AcctonLldp_Lldp_LldpListKey) Descriptor() ([]byte, []int) {
	return file_accton_lldp_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *AcctonLldp_Lldp_LldpListKey) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *AcctonLldp_Lldp_LldpListKey) GetLldpList() *AcctonLldp_Lldp_LldpList {
	if x != nil {
		return x.LldpList
	}
	return nil
}

type AcctonLldp_Lldp_LldpList_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LldpRemChassisId        *ywrapper.StringValue                                  `protobuf:"bytes,1,opt,name=lldp_rem_chassis_id,json=lldpRemChassisId,proto3" json:"lldp_rem_chassis_id,omitempty"`
	LldpRemChassisIdSubtype AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype `protobuf:"varint,2,opt,name=lldp_rem_chassis_id_subtype,json=lldpRemChassisIdSubtype,proto3,enum=sonic.AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype" json:"lldp_rem_chassis_id_subtype,omitempty"`
	LldpRemIndex            *ywrapper.UintValue                                    `protobuf:"bytes,3,opt,name=lldp_rem_index,json=lldpRemIndex,proto3" json:"lldp_rem_index,omitempty"`
	LldpRemManAddr          *ywrapper.StringValue                                  `protobuf:"bytes,4,opt,name=lldp_rem_man_addr,json=lldpRemManAddr,proto3" json:"lldp_rem_man_addr,omitempty"`
	LldpRemPortDesc         *ywrapper.StringValue                                  `protobuf:"bytes,5,opt,name=lldp_rem_port_desc,json=lldpRemPortDesc,proto3" json:"lldp_rem_port_desc,omitempty"`
	LldpRemPortId           *ywrapper.StringValue                                  `protobuf:"bytes,6,opt,name=lldp_rem_port_id,json=lldpRemPortId,proto3" json:"lldp_rem_port_id,omitempty"`
	LldpRemPortIdSubtype    AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype    `protobuf:"varint,7,opt,name=lldp_rem_port_id_subtype,json=lldpRemPortIdSubtype,proto3,enum=sonic.AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype" json:"lldp_rem_port_id_subtype,omitempty"`
	LldpRemSysCapEnabled    *ywrapper.UintValue                                    `protobuf:"bytes,8,opt,name=lldp_rem_sys_cap_enabled,json=lldpRemSysCapEnabled,proto3" json:"lldp_rem_sys_cap_enabled,omitempty"`
	LldpRemSysCapSupported  *ywrapper.UintValue                                    `protobuf:"bytes,9,opt,name=lldp_rem_sys_cap_supported,json=lldpRemSysCapSupported,proto3" json:"lldp_rem_sys_cap_supported,omitempty"`
	LldpRemSysDesc          *ywrapper.StringValue                                  `protobuf:"bytes,10,opt,name=lldp_rem_sys_desc,json=lldpRemSysDesc,proto3" json:"lldp_rem_sys_desc,omitempty"`
	LldpRemSysName          *ywrapper.StringValue                                  `protobuf:"bytes,11,opt,name=lldp_rem_sys_name,json=lldpRemSysName,proto3" json:"lldp_rem_sys_name,omitempty"`
	LldpRemTimeMark         *ywrapper.UintValue                                    `protobuf:"bytes,12,opt,name=lldp_rem_time_mark,json=lldpRemTimeMark,proto3" json:"lldp_rem_time_mark,omitempty"`
}

func (x *AcctonLldp_Lldp_LldpList_State) Reset() {
	*x = AcctonLldp_Lldp_LldpList_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_lldp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonLldp_Lldp_LldpList_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonLldp_Lldp_LldpList_State) ProtoMessage() {}

func (x *AcctonLldp_Lldp_LldpList_State) ProtoReflect() protoreflect.Message {
	mi := &file_accton_lldp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonLldp_Lldp_LldpList_State.ProtoReflect.Descriptor instead.
func (*AcctonLldp_Lldp_LldpList_State) Descriptor() ([]byte, []int) {
	return file_accton_lldp_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *AcctonLldp_Lldp_LldpList_State) GetLldpRemChassisId() *ywrapper.StringValue {
	if x != nil {
		return x.LldpRemChassisId
	}
	return nil
}

func (x *AcctonLldp_Lldp_LldpList_State) GetLldpRemChassisIdSubtype() AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype {
	if x != nil {
		return x.LldpRemChassisIdSubtype
	}
	return AcctonLldp_Lldp_LldpList_State_LLDPREMCHASSISIDSUBTYPE_UNSET
}

func (x *AcctonLldp_Lldp_LldpList_State) GetLldpRemIndex() *ywrapper.UintValue {
	if x != nil {
		return x.LldpRemIndex
	}
	return nil
}

func (x *AcctonLldp_Lldp_LldpList_State) GetLldpRemManAddr() *ywrapper.StringValue {
	if x != nil {
		return x.LldpRemManAddr
	}
	return nil
}

func (x *AcctonLldp_Lldp_LldpList_State) GetLldpRemPortDesc() *ywrapper.StringValue {
	if x != nil {
		return x.LldpRemPortDesc
	}
	return nil
}

func (x *AcctonLldp_Lldp_LldpList_State) GetLldpRemPortId() *ywrapper.StringValue {
	if x != nil {
		return x.LldpRemPortId
	}
	return nil
}

func (x *AcctonLldp_Lldp_LldpList_State) GetLldpRemPortIdSubtype() AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype {
	if x != nil {
		return x.LldpRemPortIdSubtype
	}
	return AcctonLldp_Lldp_LldpList_State_LLDPREMPORTIDSUBTYPE_UNSET
}

func (x *AcctonLldp_Lldp_LldpList_State) GetLldpRemSysCapEnabled() *ywrapper.UintValue {
	if x != nil {
		return x.LldpRemSysCapEnabled
	}
	return nil
}

func (x *AcctonLldp_Lldp_LldpList_State) GetLldpRemSysCapSupported() *ywrapper.UintValue {
	if x != nil {
		return x.LldpRemSysCapSupported
	}
	return nil
}

func (x *AcctonLldp_Lldp_LldpList_State) GetLldpRemSysDesc() *ywrapper.StringValue {
	if x != nil {
		return x.LldpRemSysDesc
	}
	return nil
}

func (x *AcctonLldp_Lldp_LldpList_State) GetLldpRemSysName() *ywrapper.StringValue {
	if x != nil {
		return x.LldpRemSysName
	}
	return nil
}

func (x *AcctonLldp_Lldp_LldpList_State) GetLldpRemTimeMark() *ywrapper.UintValue {
	if x != nil {
		return x.LldpRemTimeMark
	}
	return nil
}

var File_accton_lldp_proto protoreflect.FileDescriptor

var file_accton_lldp_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x16, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x74, 0x6f,
	0x6e, 0x4c, 0x6c, 0x64, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x6c, 0x6c, 0x64, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74,
	0x6f, 0x6e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x42, 0x14, 0x82, 0x41, 0x11,
	0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64,
	0x70, 0x52, 0x04, 0x6c, 0x6c, 0x64, 0x70, 0x1a, 0xc2, 0x15, 0x0a, 0x04, 0x4c, 0x6c, 0x64, 0x70,
	0x12, 0x5f, 0x0a, 0x09, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74,
	0x6f, 0x6e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4c, 0x6c, 0x64, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x61, 0x63, 0x63,
	0x74, 0x6f, 0x6e, 0x2d, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c,
	0x64, 0x70, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x6c, 0x6c, 0x64, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0xc3, 0x13, 0x0a, 0x08, 0x4c, 0x6c, 0x64, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x61,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x4c, 0x6c, 0x64, 0x70,
	0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e,
	0x2d, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xd3, 0x12, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7e, 0x0a, 0x13, 0x6c,
	0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x38, 0x82, 0x41, 0x35, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x6c, 0x6c, 0x64, 0x70,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x63,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x52, 0x10, 0x6c, 0x6c, 0x64, 0x70, 0x52,
	0x65, 0x6d, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12, 0xbd, 0x01, 0x0a, 0x1b,
	0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x5f, 0x69, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3d, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e,
	0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x52, 0x65, 0x6d,
	0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x6c, 0x6c, 0x64,
	0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f,
	0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x17, 0x6c, 0x6c, 0x64, 0x70, 0x52, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6e, 0x0a, 0x0e, 0x6c,
	0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x61, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c,
	0x6c, 0x64, 0x70, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c,
	0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0c, 0x6c,
	0x6c, 0x64, 0x70, 0x52, 0x65, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x78, 0x0a, 0x11, 0x6c,
	0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82,
	0x41, 0x33, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c,
	0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x52, 0x0e, 0x6c, 0x6c, 0x64, 0x70, 0x52, 0x65, 0x6d, 0x4d, 0x61,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x7b, 0x0a, 0x12, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65,
	0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c,
	0x6c, 0x64, 0x70, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c,
	0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x52, 0x0f, 0x6c, 0x6c, 0x64, 0x70, 0x52, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x75, 0x0a, 0x10, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d,
	0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x72,
	0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x0d, 0x6c, 0x6c, 0x64, 0x70,
	0x52, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0xb1, 0x01, 0x0a, 0x18, 0x6c, 0x6c,
	0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x4c, 0x6c, 0x64, 0x70, 0x2e,
	0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x52, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c,
	0x6c, 0x64, 0x70, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c,
	0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x5f,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x14, 0x6c, 0x6c, 0x64, 0x70, 0x52, 0x65, 0x6d,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x8a, 0x01,
	0x0a, 0x18, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x63,
	0x61, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f,
	0x6e, 0x2d, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6c, 0x64, 0x70,
	0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x14, 0x6c, 0x6c, 0x64, 0x70, 0x52, 0x65, 0x6d, 0x53, 0x79, 0x73,
	0x43, 0x61, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x1a, 0x6c,
	0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e,
	0x2d, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x5f,
	0x72, 0x65, 0x6d, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x16, 0x6c, 0x6c, 0x64, 0x70, 0x52, 0x65, 0x6d, 0x53, 0x79,
	0x73, 0x43, 0x61, 0x70, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x78, 0x0a,
	0x11, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x36, 0x82, 0x41, 0x33, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x6c, 0x6c, 0x64, 0x70,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x73,
	0x79, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x52, 0x0e, 0x6c, 0x6c, 0x64, 0x70, 0x52, 0x65, 0x6d,
	0x53, 0x79, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x78, 0x0a, 0x11, 0x6c, 0x6c, 0x64, 0x70, 0x5f,
	0x72, 0x65, 0x6d, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x61,
	0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f,
	0x6c, 0x6c, 0x64, 0x70, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x0e, 0x6c, 0x6c, 0x64, 0x70, 0x52, 0x65, 0x6d, 0x53, 0x79, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x79, 0x0a, 0x12, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x6c,
	0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x72, 0x65,
	0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x0f, 0x6c, 0x6c, 0x64,
	0x70, 0x52, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x22, 0xff, 0x02, 0x0a,
	0x17, 0x4c, 0x6c, 0x64, 0x70, 0x52, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49,
	0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x4c, 0x44, 0x50,
	0x52, 0x45, 0x4d, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x53, 0x55, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x1f, 0x4c,
	0x4c, 0x44, 0x50, 0x52, 0x45, 0x4d, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x53,
	0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x10, 0x01,
	0x1a, 0x0a, 0x82, 0x41, 0x07, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x12, 0x2f, 0x0a, 0x1f,
	0x4c, 0x4c, 0x44, 0x50, 0x52, 0x45, 0x4d, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44,
	0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x46, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10,
	0x02, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x46, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x12, 0x29, 0x0a,
	0x1c, 0x4c, 0x4c, 0x44, 0x50, 0x52, 0x45, 0x4d, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49,
	0x44, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x1a,
	0x07, 0x82, 0x41, 0x04, 0x50, 0x4f, 0x52, 0x54, 0x12, 0x2d, 0x0a, 0x1e, 0x4c, 0x4c, 0x44, 0x50,
	0x52, 0x45, 0x4d, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x53, 0x55, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4c, 0x41, 0x44, 0x44, 0x52, 0x10, 0x04, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x4c, 0x4c, 0x41, 0x44, 0x44, 0x52, 0x12, 0x29, 0x0a, 0x1c, 0x4c, 0x4c, 0x44, 0x50, 0x52,
	0x45, 0x4d, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x53, 0x55, 0x42, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x05, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x41, 0x44,
	0x44, 0x52, 0x12, 0x2d, 0x0a, 0x1e, 0x4c, 0x4c, 0x44, 0x50, 0x52, 0x45, 0x4d, 0x43, 0x48, 0x41,
	0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x46,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x46, 0x4e, 0x41, 0x4d,
	0x45, 0x12, 0x2b, 0x0a, 0x1d, 0x4c, 0x4c, 0x44, 0x50, 0x52, 0x45, 0x4d, 0x43, 0x48, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x49, 0x44, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x10, 0x07, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x22, 0xe6,
	0x02, 0x0a, 0x14, 0x4c, 0x6c, 0x64, 0x70, 0x52, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x4c, 0x44, 0x50, 0x52,
	0x45, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x1c, 0x4c, 0x4c, 0x44, 0x50, 0x52,
	0x45, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x46, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x46,
	0x41, 0x4c, 0x49, 0x41, 0x53, 0x12, 0x26, 0x0a, 0x19, 0x4c, 0x4c, 0x44, 0x50, 0x52, 0x45, 0x4d,
	0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x50, 0x4f, 0x52, 0x54, 0x12, 0x2a, 0x0a,
	0x1b, 0x4c, 0x4c, 0x44, 0x50, 0x52, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x53, 0x55,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4c, 0x41, 0x44, 0x44, 0x52, 0x10, 0x03, 0x1a, 0x09,
	0x82, 0x41, 0x06, 0x4c, 0x4c, 0x41, 0x44, 0x44, 0x52, 0x12, 0x26, 0x0a, 0x19, 0x4c, 0x4c, 0x44,
	0x50, 0x52, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x04, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x41, 0x44, 0x44,
	0x52, 0x12, 0x2a, 0x0a, 0x1b, 0x4c, 0x4c, 0x44, 0x50, 0x52, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x54,
	0x49, 0x44, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x46, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x05, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x46, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x2e, 0x0a,
	0x1d, 0x4c, 0x4c, 0x44, 0x50, 0x52, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x53, 0x55,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x43, 0x49, 0x44, 0x10, 0x06,
	0x1a, 0x0b, 0x82, 0x41, 0x08, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x43, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x1a, 0x4c, 0x4c, 0x44, 0x50, 0x52, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x53, 0x55,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x07, 0x1a, 0x08, 0x82,
	0x41, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x1a, 0x92, 0x01, 0x0a, 0x0b, 0x4c, 0x6c, 0x64, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f,
	0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6c, 0x6c, 0x64, 0x70,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x09, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e,
	0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x08, 0x6c, 0x6c, 0x64, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x1b, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x5a, 0x07, 0x2e, 0x3b, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_accton_lldp_proto_rawDescOnce sync.Once
	file_accton_lldp_proto_rawDescData = file_accton_lldp_proto_rawDesc
)

func file_accton_lldp_proto_rawDescGZIP() []byte {
	file_accton_lldp_proto_rawDescOnce.Do(func() {
		file_accton_lldp_proto_rawDescData = protoimpl.X.CompressGZIP(file_accton_lldp_proto_rawDescData)
	})
	return file_accton_lldp_proto_rawDescData
}

var file_accton_lldp_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_accton_lldp_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_accton_lldp_proto_goTypes = []interface{}{
	(AcctonLldp_Lldp_LldpList_State_LldpRemChassisIdSubtype)(0), // 0: sonic.AcctonLldp.Lldp.LldpList.State.LldpRemChassisIdSubtype
	(AcctonLldp_Lldp_LldpList_State_LldpRemPortIdSubtype)(0),    // 1: sonic.AcctonLldp.Lldp.LldpList.State.LldpRemPortIdSubtype
	(*AcctonLldp)(nil),                     // 2: sonic.AcctonLldp
	(*AcctonLldp_Lldp)(nil),                // 3: sonic.AcctonLldp.Lldp
	(*AcctonLldp_Lldp_LldpList)(nil),       // 4: sonic.AcctonLldp.Lldp.LldpList
	(*AcctonLldp_Lldp_LldpListKey)(nil),    // 5: sonic.AcctonLldp.Lldp.LldpListKey
	(*AcctonLldp_Lldp_LldpList_State)(nil), // 6: sonic.AcctonLldp.Lldp.LldpList.State
	(*ywrapper.StringValue)(nil),           // 7: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),             // 8: ywrapper.UintValue
}
var file_accton_lldp_proto_depIdxs = []int32{
	3,  // 0: sonic.AcctonLldp.lldp:type_name -> sonic.AcctonLldp.Lldp
	5,  // 1: sonic.AcctonLldp.Lldp.lldp_list:type_name -> sonic.AcctonLldp.Lldp.LldpListKey
	6,  // 2: sonic.AcctonLldp.Lldp.LldpList.state:type_name -> sonic.AcctonLldp.Lldp.LldpList.State
	4,  // 3: sonic.AcctonLldp.Lldp.LldpListKey.lldp_list:type_name -> sonic.AcctonLldp.Lldp.LldpList
	7,  // 4: sonic.AcctonLldp.Lldp.LldpList.State.lldp_rem_chassis_id:type_name -> ywrapper.StringValue
	0,  // 5: sonic.AcctonLldp.Lldp.LldpList.State.lldp_rem_chassis_id_subtype:type_name -> sonic.AcctonLldp.Lldp.LldpList.State.LldpRemChassisIdSubtype
	8,  // 6: sonic.AcctonLldp.Lldp.LldpList.State.lldp_rem_index:type_name -> ywrapper.UintValue
	7,  // 7: sonic.AcctonLldp.Lldp.LldpList.State.lldp_rem_man_addr:type_name -> ywrapper.StringValue
	7,  // 8: sonic.AcctonLldp.Lldp.LldpList.State.lldp_rem_port_desc:type_name -> ywrapper.StringValue
	7,  // 9: sonic.AcctonLldp.Lldp.LldpList.State.lldp_rem_port_id:type_name -> ywrapper.StringValue
	1,  // 10: sonic.AcctonLldp.Lldp.LldpList.State.lldp_rem_port_id_subtype:type_name -> sonic.AcctonLldp.Lldp.LldpList.State.LldpRemPortIdSubtype
	8,  // 11: sonic.AcctonLldp.Lldp.LldpList.State.lldp_rem_sys_cap_enabled:type_name -> ywrapper.UintValue
	8,  // 12: sonic.AcctonLldp.Lldp.LldpList.State.lldp_rem_sys_cap_supported:type_name -> ywrapper.UintValue
	7,  // 13: sonic.AcctonLldp.Lldp.LldpList.State.lldp_rem_sys_desc:type_name -> ywrapper.StringValue
	7,  // 14: sonic.AcctonLldp.Lldp.LldpList.State.lldp_rem_sys_name:type_name -> ywrapper.StringValue
	8,  // 15: sonic.AcctonLldp.Lldp.LldpList.State.lldp_rem_time_mark:type_name -> ywrapper.UintValue
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_accton_lldp_proto_init() }
func file_accton_lldp_proto_init() {
	if File_accton_lldp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_accton_lldp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonLldp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_lldp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonLldp_Lldp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_lldp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonLldp_Lldp_LldpList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_lldp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonLldp_Lldp_LldpListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_lldp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonLldp_Lldp_LldpList_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accton_lldp_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accton_lldp_proto_goTypes,
		DependencyIndexes: file_accton_lldp_proto_depIdxs,
		EnumInfos:         file_accton_lldp_proto_enumTypes,
		MessageInfos:      file_accton_lldp_proto_msgTypes,
	}.Build()
	File_accton_lldp_proto = out.File
	file_accton_lldp_proto_rawDesc = nil
	file_accton_lldp_proto_goTypes = nil
	file_accton_lldp_proto_depIdxs = nil
}
