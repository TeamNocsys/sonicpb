// openconfig.nocsys_platform is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/nocsys-portchannel.yang
//  - ../api/yang/sonic/nocsys-port.yang
//  - ../api/yang/sonic/nocsys-todo.yang
//  - ../api/yang/sonic/nocsys-route.yang
//  - ../api/yang/sonic/nocsys-platform.yang
//  - ../api/yang/sonic/nocsys-fdb.yang
//  - ../api/yang/sonic/nocsys-vrf.yang
//  - ../api/yang/sonic/nocsys-neighbor.yang
//  - ../api/yang/sonic/nocsys-lldp.yang
//  - ../api/yang/sonic/nocsys-vxlan.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/sonic/third_party/ietf/iana-if-type.yang
//  - ../api/yang/sonic/nocsys-mirror-session.yang
//  - ../api/yang/sonic/nocsys-interface.yang
//  - ../api/yang/sonic/nocsys-extension.yang
//  - ../api/yang/sonic/nocsys-platform-types.yang
//  - ../api/yang/sonic/nocsys-types.yang
//  - ../api/yang/sonic/nocsys-vlan.yang
//  - ../api/yang/sonic/nocsys-acl.yang
//  - ../api/yang/sonic/nocsys-ntp.yang
//  - ../api/yang/sonic/nocsys-loopback-interface.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: nocsys_platform.proto

package sonic

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SonicPlatform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform *SonicPlatform_Platform `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *SonicPlatform) Reset() {
	*x = SonicPlatform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform) ProtoMessage() {}

func (x *SonicPlatform) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform.ProtoReflect.Descriptor instead.
func (*SonicPlatform) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0}
}

func (x *SonicPlatform) GetPlatform() *SonicPlatform_Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

type SonicPlatform_Platform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentList []*SonicPlatform_Platform_ComponentListKey `protobuf:"bytes,1,rep,name=component_list,json=componentList,proto3" json:"component_list,omitempty"`
}

func (x *SonicPlatform_Platform) Reset() {
	*x = SonicPlatform_Platform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform) ProtoMessage() {}

func (x *SonicPlatform_Platform) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SonicPlatform_Platform) GetComponentList() []*SonicPlatform_Platform_ComponentListKey {
	if x != nil {
		return x.ComponentList
	}
	return nil
}

type SonicPlatform_Platform_ComponentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *SonicPlatform_Platform_ComponentList_Config      `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Fan         *SonicPlatform_Platform_ComponentList_Fan         `protobuf:"bytes,2,opt,name=fan,proto3" json:"fan,omitempty"`
	PowerSupply *SonicPlatform_Platform_ComponentList_PowerSupply `protobuf:"bytes,3,opt,name=power_supply,json=powerSupply,proto3" json:"power_supply,omitempty"`
	Properrties *SonicPlatform_Platform_ComponentList_Properrties `protobuf:"bytes,4,opt,name=properrties,proto3" json:"properrties,omitempty"`
	State       *SonicPlatform_Platform_ComponentList_State       `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SonicPlatform_Platform_ComponentList) Reset() {
	*x = SonicPlatform_Platform_ComponentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *SonicPlatform_Platform_ComponentList) GetConfig() *SonicPlatform_Platform_ComponentList_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList) GetFan() *SonicPlatform_Platform_ComponentList_Fan {
	if x != nil {
		return x.Fan
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList) GetPowerSupply() *SonicPlatform_Platform_ComponentList_PowerSupply {
	if x != nil {
		return x.PowerSupply
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList) GetProperrties() *SonicPlatform_Platform_ComponentList_Properrties {
	if x != nil {
		return x.Properrties
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList) GetState() *SonicPlatform_Platform_ComponentList_State {
	if x != nil {
		return x.State
	}
	return nil
}

type SonicPlatform_Platform_ComponentListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ComponentList *SonicPlatform_Platform_ComponentList `protobuf:"bytes,2,opt,name=component_list,json=componentList,proto3" json:"component_list,omitempty"`
}

func (x *SonicPlatform_Platform_ComponentListKey) Reset() {
	*x = SonicPlatform_Platform_ComponentListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentListKey) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentListKey) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentListKey.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentListKey) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *SonicPlatform_Platform_ComponentListKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SonicPlatform_Platform_ComponentListKey) GetComponentList() *SonicPlatform_Platform_ComponentList {
	if x != nil {
		return x.ComponentList
	}
	return nil
}

type SonicPlatform_Platform_ComponentList_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SonicPlatform_Platform_ComponentList_Config) Reset() {
	*x = SonicPlatform_Platform_ComponentList_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList_Config) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList_Config) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList_Config.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList_Config) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *SonicPlatform_Platform_ComponentList_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type SonicPlatform_Platform_ComponentList_Fan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *SonicPlatform_Platform_ComponentList_Fan_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	State  *SonicPlatform_Platform_ComponentList_Fan_State  `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SonicPlatform_Platform_ComponentList_Fan) Reset() {
	*x = SonicPlatform_Platform_ComponentList_Fan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList_Fan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList_Fan) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList_Fan) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList_Fan.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList_Fan) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *SonicPlatform_Platform_ComponentList_Fan) GetConfig() *SonicPlatform_Platform_ComponentList_Fan_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList_Fan) GetState() *SonicPlatform_Platform_ComponentList_Fan_State {
	if x != nil {
		return x.State
	}
	return nil
}

type SonicPlatform_Platform_ComponentList_PowerSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *SonicPlatform_Platform_ComponentList_PowerSupply_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	State  *SonicPlatform_Platform_ComponentList_PowerSupply_State  `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SonicPlatform_Platform_ComponentList_PowerSupply) Reset() {
	*x = SonicPlatform_Platform_ComponentList_PowerSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList_PowerSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList_PowerSupply) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList_PowerSupply) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList_PowerSupply.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList_PowerSupply) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *SonicPlatform_Platform_ComponentList_PowerSupply) GetConfig() *SonicPlatform_Platform_ComponentList_PowerSupply_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList_PowerSupply) GetState() *SonicPlatform_Platform_ComponentList_PowerSupply_State {
	if x != nil {
		return x.State
	}
	return nil
}

type SonicPlatform_Platform_ComponentList_Properrties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property []*SonicPlatform_Platform_ComponentList_Properrties_PropertyKey `protobuf:"bytes,1,rep,name=property,proto3" json:"property,omitempty"`
}

func (x *SonicPlatform_Platform_ComponentList_Properrties) Reset() {
	*x = SonicPlatform_Platform_ComponentList_Properrties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList_Properrties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList_Properrties) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList_Properrties) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList_Properrties.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList_Properrties) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (x *SonicPlatform_Platform_ComponentList_Properrties) GetProperty() []*SonicPlatform_Platform_ComponentList_Properrties_PropertyKey {
	if x != nil {
		return x.Property
	}
	return nil
}

type SonicPlatform_Platform_ComponentList_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareVersion *ywrapper.StringValue                                   `protobuf:"bytes,1,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	MfgDate         *ywrapper.StringValue                                   `protobuf:"bytes,2,opt,name=mfg_date,json=mfgDate,proto3" json:"mfg_date,omitempty"`
	MfgName         *ywrapper.StringValue                                   `protobuf:"bytes,3,opt,name=mfg_name,json=mfgName,proto3" json:"mfg_name,omitempty"`
	PartNo          *ywrapper.StringValue                                   `protobuf:"bytes,4,opt,name=part_no,json=partNo,proto3" json:"part_no,omitempty"`
	SerialNo        *ywrapper.StringValue                                   `protobuf:"bytes,5,opt,name=serial_no,json=serialNo,proto3" json:"serial_no,omitempty"`
	SoftwareVersion *ywrapper.StringValue                                   `protobuf:"bytes,6,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	Temperature     *SonicPlatform_Platform_ComponentList_State_Temperature `protobuf:"bytes,7,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// Types that are assignable to Type:
	//	*SonicPlatform_Platform_ComponentList_State_TypeNocsysplatformtypessonichardwarecomponent
	//	*SonicPlatform_Platform_ComponentList_State_TypeNocsysplatformtypessonicsoftwarecomponent
	Type isSonicPlatform_Platform_ComponentList_State_Type `protobuf_oneof:"type"`
}

func (x *SonicPlatform_Platform_ComponentList_State) Reset() {
	*x = SonicPlatform_Platform_ComponentList_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList_State) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList_State) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList_State.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList_State) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0, 4}
}

func (x *SonicPlatform_Platform_ComponentList_State) GetHardwareVersion() *ywrapper.StringValue {
	if x != nil {
		return x.HardwareVersion
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList_State) GetMfgDate() *ywrapper.StringValue {
	if x != nil {
		return x.MfgDate
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList_State) GetMfgName() *ywrapper.StringValue {
	if x != nil {
		return x.MfgName
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList_State) GetPartNo() *ywrapper.StringValue {
	if x != nil {
		return x.PartNo
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList_State) GetSerialNo() *ywrapper.StringValue {
	if x != nil {
		return x.SerialNo
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList_State) GetSoftwareVersion() *ywrapper.StringValue {
	if x != nil {
		return x.SoftwareVersion
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList_State) GetTemperature() *SonicPlatform_Platform_ComponentList_State_Temperature {
	if x != nil {
		return x.Temperature
	}
	return nil
}

func (m *SonicPlatform_Platform_ComponentList_State) GetType() isSonicPlatform_Platform_ComponentList_State_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList_State) GetTypeNocsysplatformtypessonichardwarecomponent() NocsysPlatformTypesSONICHARDWARECOMPONENT {
	if x, ok := x.GetType().(*SonicPlatform_Platform_ComponentList_State_TypeNocsysplatformtypessonichardwarecomponent); ok {
		return x.TypeNocsysplatformtypessonichardwarecomponent
	}
	return NocsysPlatformTypesSONICHARDWARECOMPONENT_NOCSYSPLATFORMTYPESSONICHARDWARECOMPONENT_UNSET
}

func (x *SonicPlatform_Platform_ComponentList_State) GetTypeNocsysplatformtypessonicsoftwarecomponent() NocsysPlatformTypesSONICSOFTWARECOMPONENT {
	if x, ok := x.GetType().(*SonicPlatform_Platform_ComponentList_State_TypeNocsysplatformtypessonicsoftwarecomponent); ok {
		return x.TypeNocsysplatformtypessonicsoftwarecomponent
	}
	return NocsysPlatformTypesSONICSOFTWARECOMPONENT_NOCSYSPLATFORMTYPESSONICSOFTWARECOMPONENT_UNSET
}

type isSonicPlatform_Platform_ComponentList_State_Type interface {
	isSonicPlatform_Platform_ComponentList_State_Type()
}

type SonicPlatform_Platform_ComponentList_State_TypeNocsysplatformtypessonichardwarecomponent struct {
	TypeNocsysplatformtypessonichardwarecomponent NocsysPlatformTypesSONICHARDWARECOMPONENT `protobuf:"varint,9,opt,name=type_nocsysplatformtypessonichardwarecomponent,json=typeNocsysplatformtypessonichardwarecomponent,proto3,enum=sonic.NocsysPlatformTypesSONICHARDWARECOMPONENT,oneof"`
}

type SonicPlatform_Platform_ComponentList_State_TypeNocsysplatformtypessonicsoftwarecomponent struct {
	TypeNocsysplatformtypessonicsoftwarecomponent NocsysPlatformTypesSONICSOFTWARECOMPONENT `protobuf:"varint,10,opt,name=type_nocsysplatformtypessonicsoftwarecomponent,json=typeNocsysplatformtypessonicsoftwarecomponent,proto3,enum=sonic.NocsysPlatformTypesSONICSOFTWARECOMPONENT,oneof"`
}

func (*SonicPlatform_Platform_ComponentList_State_TypeNocsysplatformtypessonichardwarecomponent) isSonicPlatform_Platform_ComponentList_State_Type() {
}

func (*SonicPlatform_Platform_ComponentList_State_TypeNocsysplatformtypessonicsoftwarecomponent) isSonicPlatform_Platform_ComponentList_State_Type() {
}

type SonicPlatform_Platform_ComponentList_Fan_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SonicPlatform_Platform_ComponentList_Fan_Config) Reset() {
	*x = SonicPlatform_Platform_ComponentList_Fan_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList_Fan_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList_Fan_Config) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList_Fan_Config) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList_Fan_Config.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList_Fan_Config) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

type SonicPlatform_Platform_ComponentList_Fan_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Speed *ywrapper.UintValue `protobuf:"bytes,1,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *SonicPlatform_Platform_ComponentList_Fan_State) Reset() {
	*x = SonicPlatform_Platform_ComponentList_Fan_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList_Fan_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList_Fan_State) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList_Fan_State) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList_Fan_State.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList_Fan_State) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1}
}

func (x *SonicPlatform_Platform_ComponentList_Fan_State) GetSpeed() *ywrapper.UintValue {
	if x != nil {
		return x.Speed
	}
	return nil
}

type SonicPlatform_Platform_ComponentList_PowerSupply_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SonicPlatform_Platform_ComponentList_PowerSupply_Config) Reset() {
	*x = SonicPlatform_Platform_ComponentList_PowerSupply_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList_PowerSupply_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList_PowerSupply_Config) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList_PowerSupply_Config) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList_PowerSupply_Config.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList_PowerSupply_Config) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (x *SonicPlatform_Platform_ComponentList_PowerSupply_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type SonicPlatform_Platform_ComponentList_PowerSupply_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SonicPlatform_Platform_ComponentList_PowerSupply_State) Reset() {
	*x = SonicPlatform_Platform_ComponentList_PowerSupply_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList_PowerSupply_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList_PowerSupply_State) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList_PowerSupply_State) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList_PowerSupply_State.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList_PowerSupply_State) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0, 2, 1}
}

func (x *SonicPlatform_Platform_ComponentList_PowerSupply_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type SonicPlatform_Platform_ComponentList_Properrties_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *SonicPlatform_Platform_ComponentList_Properrties_Property_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	State  *SonicPlatform_Platform_ComponentList_Properrties_Property_State  `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property) Reset() {
	*x = SonicPlatform_Platform_ComponentList_Properrties_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList_Properrties_Property) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList_Properrties_Property.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList_Properrties_Property) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0}
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property) GetConfig() *SonicPlatform_Platform_ComponentList_Properrties_Property_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property) GetState() *SonicPlatform_Platform_ComponentList_Properrties_Property_State {
	if x != nil {
		return x.State
	}
	return nil
}

type SonicPlatform_Platform_ComponentList_Properrties_PropertyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                                                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Property *SonicPlatform_Platform_ComponentList_Properrties_Property `protobuf:"bytes,2,opt,name=property,proto3" json:"property,omitempty"`
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_PropertyKey) Reset() {
	*x = SonicPlatform_Platform_ComponentList_Properrties_PropertyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_PropertyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList_Properrties_PropertyKey) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList_Properrties_PropertyKey) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList_Properrties_PropertyKey.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList_Properrties_PropertyKey) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0, 3, 1}
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_PropertyKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_PropertyKey) GetProperty() *SonicPlatform_Platform_ComponentList_Properrties_Property {
	if x != nil {
		return x.Property
	}
	return nil
}

type SonicPlatform_Platform_ComponentList_Properrties_Property_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//	*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueBool
	//	*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueSint64
	//	*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueString
	//	*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueUint64
	//	*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueDecimal64Value
	Value isSonicPlatform_Platform_ComponentList_Properrties_Property_Config_Value `protobuf_oneof:"value"`
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_Config) Reset() {
	*x = SonicPlatform_Platform_ComponentList_Properrties_Property_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList_Properrties_Property_Config) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_Config) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList_Properrties_Property_Config.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList_Properrties_Property_Config) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 0}
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (m *SonicPlatform_Platform_ComponentList_Properrties_Property_Config) GetValue() isSonicPlatform_Platform_ComponentList_Properrties_Property_Config_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_Config) GetValueBool() bool {
	if x, ok := x.GetValue().(*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueBool); ok {
		return x.ValueBool
	}
	return false
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_Config) GetValueSint64() int64 {
	if x, ok := x.GetValue().(*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueSint64); ok {
		return x.ValueSint64
	}
	return 0
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_Config) GetValueString() string {
	if x, ok := x.GetValue().(*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueString); ok {
		return x.ValueString
	}
	return ""
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_Config) GetValueUint64() uint64 {
	if x, ok := x.GetValue().(*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueUint64); ok {
		return x.ValueUint64
	}
	return 0
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_Config) GetValueDecimal64Value() *ywrapper.Decimal64Value {
	if x, ok := x.GetValue().(*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueDecimal64Value); ok {
		return x.ValueDecimal64Value
	}
	return nil
}

type isSonicPlatform_Platform_ComponentList_Properrties_Property_Config_Value interface {
	isSonicPlatform_Platform_ComponentList_Properrties_Property_Config_Value()
}

type SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueBool struct {
	ValueBool bool `protobuf:"varint,3,opt,name=value_bool,json=valueBool,proto3,oneof"`
}

type SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueSint64 struct {
	ValueSint64 int64 `protobuf:"zigzag64,4,opt,name=value_sint64,json=valueSint64,proto3,oneof"`
}

type SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueString struct {
	ValueString string `protobuf:"bytes,5,opt,name=value_string,json=valueString,proto3,oneof"`
}

type SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueUint64 struct {
	ValueUint64 uint64 `protobuf:"varint,6,opt,name=value_uint64,json=valueUint64,proto3,oneof"`
}

type SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueDecimal64Value struct {
	ValueDecimal64Value *ywrapper.Decimal64Value `protobuf:"bytes,7,opt,name=value_decimal64value,json=valueDecimal64value,proto3,oneof"`
}

func (*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueBool) isSonicPlatform_Platform_ComponentList_Properrties_Property_Config_Value() {
}

func (*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueSint64) isSonicPlatform_Platform_ComponentList_Properrties_Property_Config_Value() {
}

func (*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueString) isSonicPlatform_Platform_ComponentList_Properrties_Property_Config_Value() {
}

func (*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueUint64) isSonicPlatform_Platform_ComponentList_Properrties_Property_Config_Value() {
}

func (*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueDecimal64Value) isSonicPlatform_Platform_ComponentList_Properrties_Property_Config_Value() {
}

type SonicPlatform_Platform_ComponentList_Properrties_Property_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configurable *ywrapper.BoolValue   `protobuf:"bytes,1,opt,name=configurable,proto3" json:"configurable,omitempty"`
	Name         *ywrapper.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//	*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueBool
	//	*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueSint64
	//	*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueString
	//	*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueUint64
	//	*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueDecimal64Value
	Value isSonicPlatform_Platform_ComponentList_Properrties_Property_State_Value `protobuf_oneof:"value"`
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_State) Reset() {
	*x = SonicPlatform_Platform_ComponentList_Properrties_Property_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList_Properrties_Property_State) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_State) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList_Properrties_Property_State.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList_Properrties_Property_State) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 1}
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_State) GetConfigurable() *ywrapper.BoolValue {
	if x != nil {
		return x.Configurable
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (m *SonicPlatform_Platform_ComponentList_Properrties_Property_State) GetValue() isSonicPlatform_Platform_ComponentList_Properrties_Property_State_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_State) GetValueBool() bool {
	if x, ok := x.GetValue().(*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueBool); ok {
		return x.ValueBool
	}
	return false
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_State) GetValueSint64() int64 {
	if x, ok := x.GetValue().(*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueSint64); ok {
		return x.ValueSint64
	}
	return 0
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_State) GetValueString() string {
	if x, ok := x.GetValue().(*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueString); ok {
		return x.ValueString
	}
	return ""
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_State) GetValueUint64() uint64 {
	if x, ok := x.GetValue().(*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueUint64); ok {
		return x.ValueUint64
	}
	return 0
}

func (x *SonicPlatform_Platform_ComponentList_Properrties_Property_State) GetValueDecimal64Value() *ywrapper.Decimal64Value {
	if x, ok := x.GetValue().(*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueDecimal64Value); ok {
		return x.ValueDecimal64Value
	}
	return nil
}

type isSonicPlatform_Platform_ComponentList_Properrties_Property_State_Value interface {
	isSonicPlatform_Platform_ComponentList_Properrties_Property_State_Value()
}

type SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueBool struct {
	ValueBool bool `protobuf:"varint,4,opt,name=value_bool,json=valueBool,proto3,oneof"`
}

type SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueSint64 struct {
	ValueSint64 int64 `protobuf:"zigzag64,5,opt,name=value_sint64,json=valueSint64,proto3,oneof"`
}

type SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueString struct {
	ValueString string `protobuf:"bytes,6,opt,name=value_string,json=valueString,proto3,oneof"`
}

type SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueUint64 struct {
	ValueUint64 uint64 `protobuf:"varint,7,opt,name=value_uint64,json=valueUint64,proto3,oneof"`
}

type SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueDecimal64Value struct {
	ValueDecimal64Value *ywrapper.Decimal64Value `protobuf:"bytes,8,opt,name=value_decimal64value,json=valueDecimal64value,proto3,oneof"`
}

func (*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueBool) isSonicPlatform_Platform_ComponentList_Properrties_Property_State_Value() {
}

func (*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueSint64) isSonicPlatform_Platform_ComponentList_Properrties_Property_State_Value() {
}

func (*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueString) isSonicPlatform_Platform_ComponentList_Properrties_Property_State_Value() {
}

func (*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueUint64) isSonicPlatform_Platform_ComponentList_Properrties_Property_State_Value() {
}

func (*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueDecimal64Value) isSonicPlatform_Platform_ComponentList_Properrties_Property_State_Value() {
}

type SonicPlatform_Platform_ComponentList_State_Temperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instant *ywrapper.Decimal64Value `protobuf:"bytes,1,opt,name=instant,proto3" json:"instant,omitempty"`
}

func (x *SonicPlatform_Platform_ComponentList_State_Temperature) Reset() {
	*x = SonicPlatform_Platform_ComponentList_State_Temperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nocsys_platform_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPlatform_Platform_ComponentList_State_Temperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPlatform_Platform_ComponentList_State_Temperature) ProtoMessage() {}

func (x *SonicPlatform_Platform_ComponentList_State_Temperature) ProtoReflect() protoreflect.Message {
	mi := &file_nocsys_platform_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPlatform_Platform_ComponentList_State_Temperature.ProtoReflect.Descriptor instead.
func (*SonicPlatform_Platform_ComponentList_State_Temperature) Descriptor() ([]byte, []int) {
	return file_nocsys_platform_proto_rawDescGZIP(), []int{0, 0, 0, 4, 0}
}

func (x *SonicPlatform_Platform_ComponentList_State_Temperature) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

var File_nocsys_platform_proto protoreflect.FileDescriptor

var file_nocsys_platform_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x1a, 0x0e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf6, 0x27, 0x0a, 0x0d, 0x53, 0x6f, 0x6e, 0x69,
	0x63, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x56, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x1a, 0x8c, 0x27, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x81,
	0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e,
	0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0xcd, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e,
	0x69, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x03, 0x66, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x46, 0x61,
	0x6e, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x66, 0x61,
	0x6e, 0x52, 0x03, 0x66, 0x61, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x91, 0x01, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x36, 0x82, 0x41, 0x33,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x79, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x6b, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x61, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x8b, 0x03, 0x0a, 0x03, 0x46, 0x61, 0x6e,
	0x12, 0x85, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x46,
	0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x66, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x46, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x66, 0x61, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x6e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x65, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x66, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x1a, 0xbb, 0x04, 0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x96, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e,
	0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x92, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3d,
	0x82, 0x41, 0x3a, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x7f, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x75,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x7d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x74,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x1a, 0xb7, 0x0c, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e,
	0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x3f, 0x82, 0x41,
	0x3c, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x1a, 0xbc, 0x09, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0xa7, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f,
	0x6e, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x46,
	0x82, 0x41, 0x43, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa3,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46,
	0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xe8, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x76, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x23, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x4d, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xf4, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x75, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41,
	0x47, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12,
	0x23, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x4d,
	0x0a, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc5, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x58, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x5c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x1a, 0xb1,
	0x0a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6b,
	0x0a, 0x08, 0x6d, 0x66, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x66, 0x67, 0x2d, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x07, 0x6d, 0x66, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a, 0x08, 0x6d,
	0x66, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x66, 0x67, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x07, 0x6d, 0x66, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x2d, 0x6e, 0x6f, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74,
	0x4e, 0x6f, 0x12, 0x6e, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41,
	0x37, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x6e, 0x6f, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x6f, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x9d, 0x01, 0x0a, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x3c, 0x82,
	0x41, 0x39, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x4e, 0x6f, 0x63, 0x73, 0x79, 0x73,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x48, 0x00, 0x52, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x63, 0x73, 0x79,
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6f,
	0x63, 0x73, 0x79, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x4e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x53, 0x4f,
	0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x48,
	0x00, 0x52, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x1a, 0x87, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x78, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x1a, 0xab, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e,
	0x69, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x1b, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x5a, 0x07, 0x2e, 0x3b, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nocsys_platform_proto_rawDescOnce sync.Once
	file_nocsys_platform_proto_rawDescData = file_nocsys_platform_proto_rawDesc
)

func file_nocsys_platform_proto_rawDescGZIP() []byte {
	file_nocsys_platform_proto_rawDescOnce.Do(func() {
		file_nocsys_platform_proto_rawDescData = protoimpl.X.CompressGZIP(file_nocsys_platform_proto_rawDescData)
	})
	return file_nocsys_platform_proto_rawDescData
}

var file_nocsys_platform_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_nocsys_platform_proto_goTypes = []interface{}{
	(*SonicPlatform)(nil),                                                    // 0: sonic.SonicPlatform
	(*SonicPlatform_Platform)(nil),                                           // 1: sonic.SonicPlatform.Platform
	(*SonicPlatform_Platform_ComponentList)(nil),                             // 2: sonic.SonicPlatform.Platform.ComponentList
	(*SonicPlatform_Platform_ComponentListKey)(nil),                          // 3: sonic.SonicPlatform.Platform.ComponentListKey
	(*SonicPlatform_Platform_ComponentList_Config)(nil),                      // 4: sonic.SonicPlatform.Platform.ComponentList.Config
	(*SonicPlatform_Platform_ComponentList_Fan)(nil),                         // 5: sonic.SonicPlatform.Platform.ComponentList.Fan
	(*SonicPlatform_Platform_ComponentList_PowerSupply)(nil),                 // 6: sonic.SonicPlatform.Platform.ComponentList.PowerSupply
	(*SonicPlatform_Platform_ComponentList_Properrties)(nil),                 // 7: sonic.SonicPlatform.Platform.ComponentList.Properrties
	(*SonicPlatform_Platform_ComponentList_State)(nil),                       // 8: sonic.SonicPlatform.Platform.ComponentList.State
	(*SonicPlatform_Platform_ComponentList_Fan_Config)(nil),                  // 9: sonic.SonicPlatform.Platform.ComponentList.Fan.Config
	(*SonicPlatform_Platform_ComponentList_Fan_State)(nil),                   // 10: sonic.SonicPlatform.Platform.ComponentList.Fan.State
	(*SonicPlatform_Platform_ComponentList_PowerSupply_Config)(nil),          // 11: sonic.SonicPlatform.Platform.ComponentList.PowerSupply.Config
	(*SonicPlatform_Platform_ComponentList_PowerSupply_State)(nil),           // 12: sonic.SonicPlatform.Platform.ComponentList.PowerSupply.State
	(*SonicPlatform_Platform_ComponentList_Properrties_Property)(nil),        // 13: sonic.SonicPlatform.Platform.ComponentList.Properrties.Property
	(*SonicPlatform_Platform_ComponentList_Properrties_PropertyKey)(nil),     // 14: sonic.SonicPlatform.Platform.ComponentList.Properrties.PropertyKey
	(*SonicPlatform_Platform_ComponentList_Properrties_Property_Config)(nil), // 15: sonic.SonicPlatform.Platform.ComponentList.Properrties.Property.Config
	(*SonicPlatform_Platform_ComponentList_Properrties_Property_State)(nil),  // 16: sonic.SonicPlatform.Platform.ComponentList.Properrties.Property.State
	(*SonicPlatform_Platform_ComponentList_State_Temperature)(nil),           // 17: sonic.SonicPlatform.Platform.ComponentList.State.Temperature
	(*ywrapper.StringValue)(nil),                                             // 18: ywrapper.StringValue
	(NocsysPlatformTypesSONICHARDWARECOMPONENT)(0),                           // 19: sonic.NocsysPlatformTypesSONICHARDWARECOMPONENT
	(NocsysPlatformTypesSONICSOFTWARECOMPONENT)(0),                           // 20: sonic.NocsysPlatformTypesSONICSOFTWARECOMPONENT
	(*ywrapper.UintValue)(nil),                                               // 21: ywrapper.UintValue
	(*ywrapper.BoolValue)(nil),                                               // 22: ywrapper.BoolValue
	(*ywrapper.Decimal64Value)(nil),                                          // 23: ywrapper.Decimal64Value
}
var file_nocsys_platform_proto_depIdxs = []int32{
	1,  // 0: sonic.SonicPlatform.platform:type_name -> sonic.SonicPlatform.Platform
	3,  // 1: sonic.SonicPlatform.Platform.component_list:type_name -> sonic.SonicPlatform.Platform.ComponentListKey
	4,  // 2: sonic.SonicPlatform.Platform.ComponentList.config:type_name -> sonic.SonicPlatform.Platform.ComponentList.Config
	5,  // 3: sonic.SonicPlatform.Platform.ComponentList.fan:type_name -> sonic.SonicPlatform.Platform.ComponentList.Fan
	6,  // 4: sonic.SonicPlatform.Platform.ComponentList.power_supply:type_name -> sonic.SonicPlatform.Platform.ComponentList.PowerSupply
	7,  // 5: sonic.SonicPlatform.Platform.ComponentList.properrties:type_name -> sonic.SonicPlatform.Platform.ComponentList.Properrties
	8,  // 6: sonic.SonicPlatform.Platform.ComponentList.state:type_name -> sonic.SonicPlatform.Platform.ComponentList.State
	2,  // 7: sonic.SonicPlatform.Platform.ComponentListKey.component_list:type_name -> sonic.SonicPlatform.Platform.ComponentList
	18, // 8: sonic.SonicPlatform.Platform.ComponentList.Config.name:type_name -> ywrapper.StringValue
	9,  // 9: sonic.SonicPlatform.Platform.ComponentList.Fan.config:type_name -> sonic.SonicPlatform.Platform.ComponentList.Fan.Config
	10, // 10: sonic.SonicPlatform.Platform.ComponentList.Fan.state:type_name -> sonic.SonicPlatform.Platform.ComponentList.Fan.State
	11, // 11: sonic.SonicPlatform.Platform.ComponentList.PowerSupply.config:type_name -> sonic.SonicPlatform.Platform.ComponentList.PowerSupply.Config
	12, // 12: sonic.SonicPlatform.Platform.ComponentList.PowerSupply.state:type_name -> sonic.SonicPlatform.Platform.ComponentList.PowerSupply.State
	14, // 13: sonic.SonicPlatform.Platform.ComponentList.Properrties.property:type_name -> sonic.SonicPlatform.Platform.ComponentList.Properrties.PropertyKey
	18, // 14: sonic.SonicPlatform.Platform.ComponentList.State.hardware_version:type_name -> ywrapper.StringValue
	18, // 15: sonic.SonicPlatform.Platform.ComponentList.State.mfg_date:type_name -> ywrapper.StringValue
	18, // 16: sonic.SonicPlatform.Platform.ComponentList.State.mfg_name:type_name -> ywrapper.StringValue
	18, // 17: sonic.SonicPlatform.Platform.ComponentList.State.part_no:type_name -> ywrapper.StringValue
	18, // 18: sonic.SonicPlatform.Platform.ComponentList.State.serial_no:type_name -> ywrapper.StringValue
	18, // 19: sonic.SonicPlatform.Platform.ComponentList.State.software_version:type_name -> ywrapper.StringValue
	17, // 20: sonic.SonicPlatform.Platform.ComponentList.State.temperature:type_name -> sonic.SonicPlatform.Platform.ComponentList.State.Temperature
	19, // 21: sonic.SonicPlatform.Platform.ComponentList.State.type_nocsysplatformtypessonichardwarecomponent:type_name -> sonic.NocsysPlatformTypesSONICHARDWARECOMPONENT
	20, // 22: sonic.SonicPlatform.Platform.ComponentList.State.type_nocsysplatformtypessonicsoftwarecomponent:type_name -> sonic.NocsysPlatformTypesSONICSOFTWARECOMPONENT
	21, // 23: sonic.SonicPlatform.Platform.ComponentList.Fan.State.speed:type_name -> ywrapper.UintValue
	22, // 24: sonic.SonicPlatform.Platform.ComponentList.PowerSupply.Config.enabled:type_name -> ywrapper.BoolValue
	22, // 25: sonic.SonicPlatform.Platform.ComponentList.PowerSupply.State.enabled:type_name -> ywrapper.BoolValue
	15, // 26: sonic.SonicPlatform.Platform.ComponentList.Properrties.Property.config:type_name -> sonic.SonicPlatform.Platform.ComponentList.Properrties.Property.Config
	16, // 27: sonic.SonicPlatform.Platform.ComponentList.Properrties.Property.state:type_name -> sonic.SonicPlatform.Platform.ComponentList.Properrties.Property.State
	13, // 28: sonic.SonicPlatform.Platform.ComponentList.Properrties.PropertyKey.property:type_name -> sonic.SonicPlatform.Platform.ComponentList.Properrties.Property
	18, // 29: sonic.SonicPlatform.Platform.ComponentList.Properrties.Property.Config.name:type_name -> ywrapper.StringValue
	23, // 30: sonic.SonicPlatform.Platform.ComponentList.Properrties.Property.Config.value_decimal64value:type_name -> ywrapper.Decimal64Value
	22, // 31: sonic.SonicPlatform.Platform.ComponentList.Properrties.Property.State.configurable:type_name -> ywrapper.BoolValue
	18, // 32: sonic.SonicPlatform.Platform.ComponentList.Properrties.Property.State.name:type_name -> ywrapper.StringValue
	23, // 33: sonic.SonicPlatform.Platform.ComponentList.Properrties.Property.State.value_decimal64value:type_name -> ywrapper.Decimal64Value
	23, // 34: sonic.SonicPlatform.Platform.ComponentList.State.Temperature.instant:type_name -> ywrapper.Decimal64Value
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_nocsys_platform_proto_init() }
func file_nocsys_platform_proto_init() {
	if File_nocsys_platform_proto != nil {
		return
	}
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nocsys_platform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList_Fan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList_PowerSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList_Properrties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList_Fan_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList_Fan_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList_PowerSupply_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList_PowerSupply_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList_Properrties_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList_Properrties_PropertyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList_Properrties_Property_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList_Properrties_Property_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nocsys_platform_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPlatform_Platform_ComponentList_State_Temperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nocsys_platform_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SonicPlatform_Platform_ComponentList_State_TypeNocsysplatformtypessonichardwarecomponent)(nil),
		(*SonicPlatform_Platform_ComponentList_State_TypeNocsysplatformtypessonicsoftwarecomponent)(nil),
	}
	file_nocsys_platform_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueBool)(nil),
		(*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueSint64)(nil),
		(*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueString)(nil),
		(*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueUint64)(nil),
		(*SonicPlatform_Platform_ComponentList_Properrties_Property_Config_ValueDecimal64Value)(nil),
	}
	file_nocsys_platform_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueBool)(nil),
		(*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueSint64)(nil),
		(*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueString)(nil),
		(*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueUint64)(nil),
		(*SonicPlatform_Platform_ComponentList_Properrties_Property_State_ValueDecimal64Value)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nocsys_platform_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nocsys_platform_proto_goTypes,
		DependencyIndexes: file_nocsys_platform_proto_depIdxs,
		MessageInfos:      file_nocsys_platform_proto_msgTypes,
	}.Build()
	File_nocsys_platform_proto = out.File
	file_nocsys_platform_proto_rawDesc = nil
	file_nocsys_platform_proto_goTypes = nil
	file_nocsys_platform_proto_depIdxs = nil
}
