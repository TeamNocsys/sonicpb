// openconfig.accton_system is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/nocsys-types.yang
//  - ../api/yang/sonic/nocsys-interface.yang
//  - ../api/yang/sonic/nocsys-vlan.yang
//  - ../api/yang/sonic/nocsys-mdns.yang
//  - ../api/yang/sonic/nocsys-extension.yang
//  - ../api/yang/sonic/nocsys-acl.yang
//  - ../api/yang/sonic/nocsys-loopback-interface.yang
//  - ../api/yang/sonic/nocsys-vrf.yang
//  - ../api/yang/sonic/nocsys-portchannel.yang
//  - ../api/yang/sonic/nocsys-system.yang
//  - ../api/yang/sonic/nocsys-neighbor.yang
//  - ../api/yang/sonic/nocsys-vxlan.yang
//  - ../api/yang/sonic/nocsys-port.yang
//  - ../api/yang/sonic/nocsys-route.yang
//  - ../api/yang/sonic/nocsys-ntp.yang
//  - ../api/yang/sonic/nocsys-fdb.yang
//  - ../api/yang/sonic/nocsys-platform-types.yang
//  - ../api/yang/sonic/nocsys-platform.yang
//  - ../api/yang/sonic/nocsys-lldp.yang
//  - ../api/yang/sonic/nocsys-mirror-session.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/sonic/third_party/ietf/iana-if-type.yang
//  - ../api/yang/sonic/third_party/openconfig/openconfig-types.yang
//  - ../api/yang/sonic/third_party/openconfig/openconfig-extensions.yang
//  - ../api/yang/sonic/nocsys-todo.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: accton_system.proto

package sonic

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AcctonSystemTop_Cpus_Cpu_State_IndexEnum int32

const (
	AcctonSystemTop_Cpus_Cpu_State_INDEXENUM_UNSET AcctonSystemTop_Cpus_Cpu_State_IndexEnum = 0
	AcctonSystemTop_Cpus_Cpu_State_INDEXENUM_ALL   AcctonSystemTop_Cpus_Cpu_State_IndexEnum = 1
)

// Enum value maps for AcctonSystemTop_Cpus_Cpu_State_IndexEnum.
var (
	AcctonSystemTop_Cpus_Cpu_State_IndexEnum_name = map[int32]string{
		0: "INDEXENUM_UNSET",
		1: "INDEXENUM_ALL",
	}
	AcctonSystemTop_Cpus_Cpu_State_IndexEnum_value = map[string]int32{
		"INDEXENUM_UNSET": 0,
		"INDEXENUM_ALL":   1,
	}
)

func (x AcctonSystemTop_Cpus_Cpu_State_IndexEnum) Enum() *AcctonSystemTop_Cpus_Cpu_State_IndexEnum {
	p := new(AcctonSystemTop_Cpus_Cpu_State_IndexEnum)
	*p = x
	return p
}

func (x AcctonSystemTop_Cpus_Cpu_State_IndexEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcctonSystemTop_Cpus_Cpu_State_IndexEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_accton_system_proto_enumTypes[0].Descriptor()
}

func (AcctonSystemTop_Cpus_Cpu_State_IndexEnum) Type() protoreflect.EnumType {
	return &file_accton_system_proto_enumTypes[0]
}

func (x AcctonSystemTop_Cpus_Cpu_State_IndexEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcctonSystemTop_Cpus_Cpu_State_IndexEnum.Descriptor instead.
func (AcctonSystemTop_Cpus_Cpu_State_IndexEnum) EnumDescriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

type AcctonSystemTop_Cpus_CpuKey_IndexEnum int32

const (
	AcctonSystemTop_Cpus_CpuKey_INDEXENUM_UNSET AcctonSystemTop_Cpus_CpuKey_IndexEnum = 0
	AcctonSystemTop_Cpus_CpuKey_INDEXENUM_ALL   AcctonSystemTop_Cpus_CpuKey_IndexEnum = 1
)

// Enum value maps for AcctonSystemTop_Cpus_CpuKey_IndexEnum.
var (
	AcctonSystemTop_Cpus_CpuKey_IndexEnum_name = map[int32]string{
		0: "INDEXENUM_UNSET",
		1: "INDEXENUM_ALL",
	}
	AcctonSystemTop_Cpus_CpuKey_IndexEnum_value = map[string]int32{
		"INDEXENUM_UNSET": 0,
		"INDEXENUM_ALL":   1,
	}
)

func (x AcctonSystemTop_Cpus_CpuKey_IndexEnum) Enum() *AcctonSystemTop_Cpus_CpuKey_IndexEnum {
	p := new(AcctonSystemTop_Cpus_CpuKey_IndexEnum)
	*p = x
	return p
}

func (x AcctonSystemTop_Cpus_CpuKey_IndexEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcctonSystemTop_Cpus_CpuKey_IndexEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_accton_system_proto_enumTypes[1].Descriptor()
}

func (AcctonSystemTop_Cpus_CpuKey_IndexEnum) Type() protoreflect.EnumType {
	return &file_accton_system_proto_enumTypes[1]
}

func (x AcctonSystemTop_Cpus_CpuKey_IndexEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcctonSystemTop_Cpus_CpuKey_IndexEnum.Descriptor instead.
func (AcctonSystemTop_Cpus_CpuKey_IndexEnum) EnumDescriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

type AcctonSystemTop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpus   *AcctonSystemTop_Cpus   `protobuf:"bytes,1,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Disk   *AcctonSystemTop_Disk   `protobuf:"bytes,2,opt,name=disk,proto3" json:"disk,omitempty"`
	Memory *AcctonSystemTop_Memory `protobuf:"bytes,3,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *AcctonSystemTop) Reset() {
	*x = AcctonSystemTop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop) ProtoMessage() {}

func (x *AcctonSystemTop) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0}
}

func (x *AcctonSystemTop) GetCpus() *AcctonSystemTop_Cpus {
	if x != nil {
		return x.Cpus
	}
	return nil
}

func (x *AcctonSystemTop) GetDisk() *AcctonSystemTop_Disk {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *AcctonSystemTop) GetMemory() *AcctonSystemTop_Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

type AcctonSystemTop_Cpus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu []*AcctonSystemTop_Cpus_CpuKey `protobuf:"bytes,1,rep,name=cpu,proto3" json:"cpu,omitempty"`
}

func (x *AcctonSystemTop_Cpus) Reset() {
	*x = AcctonSystemTop_Cpus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop_Cpus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop_Cpus) ProtoMessage() {}

func (x *AcctonSystemTop_Cpus) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop_Cpus.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop_Cpus) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AcctonSystemTop_Cpus) GetCpu() []*AcctonSystemTop_Cpus_CpuKey {
	if x != nil {
		return x.Cpu
	}
	return nil
}

type AcctonSystemTop_Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Free *ywrapper.UintValue `protobuf:"bytes,1,opt,name=free,proto3" json:"free,omitempty"`
	Used *ywrapper.UintValue `protobuf:"bytes,2,opt,name=used,proto3" json:"used,omitempty"`
}

func (x *AcctonSystemTop_Disk) Reset() {
	*x = AcctonSystemTop_Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop_Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop_Disk) ProtoMessage() {}

func (x *AcctonSystemTop_Disk) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop_Disk.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop_Disk) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AcctonSystemTop_Disk) GetFree() *ywrapper.UintValue {
	if x != nil {
		return x.Free
	}
	return nil
}

func (x *AcctonSystemTop_Disk) GetUsed() *ywrapper.UintValue {
	if x != nil {
		return x.Used
	}
	return nil
}

type AcctonSystemTop_Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buffered   *ywrapper.UintValue `protobuf:"bytes,1,opt,name=buffered,proto3" json:"buffered,omitempty"`
	Cached     *ywrapper.UintValue `protobuf:"bytes,2,opt,name=cached,proto3" json:"cached,omitempty"`
	Free       *ywrapper.UintValue `protobuf:"bytes,3,opt,name=free,proto3" json:"free,omitempty"`
	SlabUnrecl *ywrapper.UintValue `protobuf:"bytes,4,opt,name=slab_unrecl,json=slabUnrecl,proto3" json:"slab_unrecl,omitempty"`
	Used       *ywrapper.UintValue `protobuf:"bytes,5,opt,name=used,proto3" json:"used,omitempty"`
}

func (x *AcctonSystemTop_Memory) Reset() {
	*x = AcctonSystemTop_Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop_Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop_Memory) ProtoMessage() {}

func (x *AcctonSystemTop_Memory) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop_Memory.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop_Memory) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 2}
}

func (x *AcctonSystemTop_Memory) GetBuffered() *ywrapper.UintValue {
	if x != nil {
		return x.Buffered
	}
	return nil
}

func (x *AcctonSystemTop_Memory) GetCached() *ywrapper.UintValue {
	if x != nil {
		return x.Cached
	}
	return nil
}

func (x *AcctonSystemTop_Memory) GetFree() *ywrapper.UintValue {
	if x != nil {
		return x.Free
	}
	return nil
}

func (x *AcctonSystemTop_Memory) GetSlabUnrecl() *ywrapper.UintValue {
	if x != nil {
		return x.SlabUnrecl
	}
	return nil
}

func (x *AcctonSystemTop_Memory) GetUsed() *ywrapper.UintValue {
	if x != nil {
		return x.Used
	}
	return nil
}

type AcctonSystemTop_Cpus_Cpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *AcctonSystemTop_Cpus_Cpu_State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AcctonSystemTop_Cpus_Cpu) Reset() {
	*x = AcctonSystemTop_Cpus_Cpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop_Cpus_Cpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop_Cpus_Cpu) ProtoMessage() {}

func (x *AcctonSystemTop_Cpus_Cpu) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop_Cpus_Cpu.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop_Cpus_Cpu) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *AcctonSystemTop_Cpus_Cpu) GetState() *AcctonSystemTop_Cpus_Cpu_State {
	if x != nil {
		return x.State
	}
	return nil
}

type AcctonSystemTop_Cpus_CpuKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Index:
	//	*AcctonSystemTop_Cpus_CpuKey_IndexIndexenum
	//	*AcctonSystemTop_Cpus_CpuKey_IndexUint64
	Index isAcctonSystemTop_Cpus_CpuKey_Index `protobuf_oneof:"index"`
	Cpu   *AcctonSystemTop_Cpus_Cpu           `protobuf:"bytes,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
}

func (x *AcctonSystemTop_Cpus_CpuKey) Reset() {
	*x = AcctonSystemTop_Cpus_CpuKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop_Cpus_CpuKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop_Cpus_CpuKey) ProtoMessage() {}

func (x *AcctonSystemTop_Cpus_CpuKey) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop_Cpus_CpuKey.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop_Cpus_CpuKey) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *AcctonSystemTop_Cpus_CpuKey) GetIndex() isAcctonSystemTop_Cpus_CpuKey_Index {
	if m != nil {
		return m.Index
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_CpuKey) GetIndexIndexenum() AcctonSystemTop_Cpus_CpuKey_IndexEnum {
	if x, ok := x.GetIndex().(*AcctonSystemTop_Cpus_CpuKey_IndexIndexenum); ok {
		return x.IndexIndexenum
	}
	return AcctonSystemTop_Cpus_CpuKey_INDEXENUM_UNSET
}

func (x *AcctonSystemTop_Cpus_CpuKey) GetIndexUint64() uint64 {
	if x, ok := x.GetIndex().(*AcctonSystemTop_Cpus_CpuKey_IndexUint64); ok {
		return x.IndexUint64
	}
	return 0
}

func (x *AcctonSystemTop_Cpus_CpuKey) GetCpu() *AcctonSystemTop_Cpus_Cpu {
	if x != nil {
		return x.Cpu
	}
	return nil
}

type isAcctonSystemTop_Cpus_CpuKey_Index interface {
	isAcctonSystemTop_Cpus_CpuKey_Index()
}

type AcctonSystemTop_Cpus_CpuKey_IndexIndexenum struct {
	IndexIndexenum AcctonSystemTop_Cpus_CpuKey_IndexEnum `protobuf:"varint,2,opt,name=index_indexenum,json=indexIndexenum,proto3,enum=sonic.AcctonSystemTop_Cpus_CpuKey_IndexEnum,oneof"`
}

type AcctonSystemTop_Cpus_CpuKey_IndexUint64 struct {
	IndexUint64 uint64 `protobuf:"varint,3,opt,name=index_uint64,json=indexUint64,proto3,oneof"`
}

func (*AcctonSystemTop_Cpus_CpuKey_IndexIndexenum) isAcctonSystemTop_Cpus_CpuKey_Index() {}

func (*AcctonSystemTop_Cpus_CpuKey_IndexUint64) isAcctonSystemTop_Cpus_CpuKey_Index() {}

type AcctonSystemTop_Cpus_Cpu_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareInterrupt *AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt `protobuf:"bytes,1,opt,name=hardware_interrupt,json=hardwareInterrupt,proto3" json:"hardware_interrupt,omitempty"`
	Idle              *AcctonSystemTop_Cpus_Cpu_State_Idle              `protobuf:"bytes,2,opt,name=idle,proto3" json:"idle,omitempty"`
	// Types that are assignable to Index:
	//	*AcctonSystemTop_Cpus_Cpu_State_IndexIndexenum
	//	*AcctonSystemTop_Cpus_Cpu_State_IndexUint64
	Index             isAcctonSystemTop_Cpus_Cpu_State_Index            `protobuf_oneof:"index"`
	Kernel            *AcctonSystemTop_Cpus_Cpu_State_Kernel            `protobuf:"bytes,6,opt,name=kernel,proto3" json:"kernel,omitempty"`
	Nice              *AcctonSystemTop_Cpus_Cpu_State_Nice              `protobuf:"bytes,7,opt,name=nice,proto3" json:"nice,omitempty"`
	SoftwareInterrupt *AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt `protobuf:"bytes,8,opt,name=software_interrupt,json=softwareInterrupt,proto3" json:"software_interrupt,omitempty"`
	Total             *AcctonSystemTop_Cpus_Cpu_State_Total             `protobuf:"bytes,9,opt,name=total,proto3" json:"total,omitempty"`
	User              *AcctonSystemTop_Cpus_Cpu_State_User              `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	Wait              *AcctonSystemTop_Cpus_Cpu_State_Wait              `protobuf:"bytes,11,opt,name=wait,proto3" json:"wait,omitempty"`
}

func (x *AcctonSystemTop_Cpus_Cpu_State) Reset() {
	*x = AcctonSystemTop_Cpus_Cpu_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop_Cpus_Cpu_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop_Cpus_Cpu_State) ProtoMessage() {}

func (x *AcctonSystemTop_Cpus_Cpu_State) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop_Cpus_Cpu_State.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop_Cpus_Cpu_State) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *AcctonSystemTop_Cpus_Cpu_State) GetHardwareInterrupt() *AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt {
	if x != nil {
		return x.HardwareInterrupt
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State) GetIdle() *AcctonSystemTop_Cpus_Cpu_State_Idle {
	if x != nil {
		return x.Idle
	}
	return nil
}

func (m *AcctonSystemTop_Cpus_Cpu_State) GetIndex() isAcctonSystemTop_Cpus_Cpu_State_Index {
	if m != nil {
		return m.Index
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State) GetIndexIndexenum() AcctonSystemTop_Cpus_Cpu_State_IndexEnum {
	if x, ok := x.GetIndex().(*AcctonSystemTop_Cpus_Cpu_State_IndexIndexenum); ok {
		return x.IndexIndexenum
	}
	return AcctonSystemTop_Cpus_Cpu_State_INDEXENUM_UNSET
}

func (x *AcctonSystemTop_Cpus_Cpu_State) GetIndexUint64() uint64 {
	if x, ok := x.GetIndex().(*AcctonSystemTop_Cpus_Cpu_State_IndexUint64); ok {
		return x.IndexUint64
	}
	return 0
}

func (x *AcctonSystemTop_Cpus_Cpu_State) GetKernel() *AcctonSystemTop_Cpus_Cpu_State_Kernel {
	if x != nil {
		return x.Kernel
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State) GetNice() *AcctonSystemTop_Cpus_Cpu_State_Nice {
	if x != nil {
		return x.Nice
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State) GetSoftwareInterrupt() *AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt {
	if x != nil {
		return x.SoftwareInterrupt
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State) GetTotal() *AcctonSystemTop_Cpus_Cpu_State_Total {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State) GetUser() *AcctonSystemTop_Cpus_Cpu_State_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State) GetWait() *AcctonSystemTop_Cpus_Cpu_State_Wait {
	if x != nil {
		return x.Wait
	}
	return nil
}

type isAcctonSystemTop_Cpus_Cpu_State_Index interface {
	isAcctonSystemTop_Cpus_Cpu_State_Index()
}

type AcctonSystemTop_Cpus_Cpu_State_IndexIndexenum struct {
	IndexIndexenum AcctonSystemTop_Cpus_Cpu_State_IndexEnum `protobuf:"varint,4,opt,name=index_indexenum,json=indexIndexenum,proto3,enum=sonic.AcctonSystemTop_Cpus_Cpu_State_IndexEnum,oneof"`
}

type AcctonSystemTop_Cpus_Cpu_State_IndexUint64 struct {
	IndexUint64 uint64 `protobuf:"varint,5,opt,name=index_uint64,json=indexUint64,proto3,oneof"`
}

func (*AcctonSystemTop_Cpus_Cpu_State_IndexIndexenum) isAcctonSystemTop_Cpus_Cpu_State_Index() {}

func (*AcctonSystemTop_Cpus_Cpu_State_IndexUint64) isAcctonSystemTop_Cpus_Cpu_State_Index() {}

type AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,1,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,2,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,5,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,6,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,7,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt) Reset() {
	*x = AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt) ProtoMessage() {}

func (x *AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AcctonSystemTop_Cpus_Cpu_State_Idle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,1,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,2,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,5,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,6,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,7,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Idle) Reset() {
	*x = AcctonSystemTop_Cpus_Cpu_State_Idle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Idle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop_Cpus_Cpu_State_Idle) ProtoMessage() {}

func (x *AcctonSystemTop_Cpus_Cpu_State_Idle) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop_Cpus_Cpu_State_Idle.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop_Cpus_Cpu_State_Idle) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Idle) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Idle) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Idle) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Idle) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Idle) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Idle) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Idle) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AcctonSystemTop_Cpus_Cpu_State_Kernel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,1,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,2,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,5,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,6,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,7,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Kernel) Reset() {
	*x = AcctonSystemTop_Cpus_Cpu_State_Kernel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Kernel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop_Cpus_Cpu_State_Kernel) ProtoMessage() {}

func (x *AcctonSystemTop_Cpus_Cpu_State_Kernel) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop_Cpus_Cpu_State_Kernel.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop_Cpus_Cpu_State_Kernel) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Kernel) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Kernel) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Kernel) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Kernel) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Kernel) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Kernel) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Kernel) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AcctonSystemTop_Cpus_Cpu_State_Nice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,1,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,2,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,5,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,6,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,7,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Nice) Reset() {
	*x = AcctonSystemTop_Cpus_Cpu_State_Nice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Nice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop_Cpus_Cpu_State_Nice) ProtoMessage() {}

func (x *AcctonSystemTop_Cpus_Cpu_State_Nice) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop_Cpus_Cpu_State_Nice.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop_Cpus_Cpu_State_Nice) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 0, 0, 0, 3}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Nice) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Nice) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Nice) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Nice) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Nice) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Nice) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Nice) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,1,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,2,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,5,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,6,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,7,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt) Reset() {
	*x = AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt) ProtoMessage() {}

func (x *AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 0, 0, 0, 4}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AcctonSystemTop_Cpus_Cpu_State_Total struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,1,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,2,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,5,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,6,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,7,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Total) Reset() {
	*x = AcctonSystemTop_Cpus_Cpu_State_Total{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Total) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop_Cpus_Cpu_State_Total) ProtoMessage() {}

func (x *AcctonSystemTop_Cpus_Cpu_State_Total) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop_Cpus_Cpu_State_Total.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop_Cpus_Cpu_State_Total) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 0, 0, 0, 5}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Total) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Total) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Total) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Total) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Total) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Total) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Total) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AcctonSystemTop_Cpus_Cpu_State_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,1,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,2,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,5,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,6,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,7,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AcctonSystemTop_Cpus_Cpu_State_User) Reset() {
	*x = AcctonSystemTop_Cpus_Cpu_State_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop_Cpus_Cpu_State_User) ProtoMessage() {}

func (x *AcctonSystemTop_Cpus_Cpu_State_User) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop_Cpus_Cpu_State_User.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop_Cpus_Cpu_State_User) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 0, 0, 0, 6}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_User) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_User) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_User) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_User) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_User) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_User) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_User) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type AcctonSystemTop_Cpus_Cpu_State_Wait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.UintValue `protobuf:"bytes,1,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.UintValue `protobuf:"bytes,2,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.UintValue `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue `protobuf:"bytes,5,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.UintValue `protobuf:"bytes,6,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue `protobuf:"bytes,7,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Wait) Reset() {
	*x = AcctonSystemTop_Cpus_Cpu_State_Wait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_system_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Wait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonSystemTop_Cpus_Cpu_State_Wait) ProtoMessage() {}

func (x *AcctonSystemTop_Cpus_Cpu_State_Wait) ProtoReflect() protoreflect.Message {
	mi := &file_accton_system_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonSystemTop_Cpus_Cpu_State_Wait.ProtoReflect.Descriptor instead.
func (*AcctonSystemTop_Cpus_Cpu_State_Wait) Descriptor() ([]byte, []int) {
	return file_accton_system_proto_rawDescGZIP(), []int{0, 0, 0, 0, 7}
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Wait) GetAvg() *ywrapper.UintValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Wait) GetInstant() *ywrapper.UintValue {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Wait) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Wait) GetMax() *ywrapper.UintValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Wait) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Wait) GetMin() *ywrapper.UintValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AcctonSystemTop_Cpus_Cpu_State_Wait) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

var File_accton_system_proto protoreflect.FileDescriptor

var file_accton_system_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x1a, 0x0e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65,
	0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x3e, 0x0a, 0x0f, 0x41, 0x63, 0x63,
	0x74, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x12, 0x4b, 0x0a, 0x04,
	0x63, 0x70, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54,
	0x6f, 0x70, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x61, 0x63, 0x63,
	0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63,
	0x70, 0x75, 0x73, 0x52, 0x04, 0x63, 0x70, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x69, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e,
	0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x64, 0x69, 0x73, 0x6b,
	0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x53, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41,
	0x63, 0x63, 0x74, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x2e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f,
	0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x1a, 0xb2, 0x38, 0x0a, 0x04,
	0x43, 0x70, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43,
	0x70, 0x75, 0x4b, 0x65, 0x79, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f,
	0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75,
	0x73, 0x2f, 0x63, 0x70, 0x75, 0x52, 0x03, 0x63, 0x70, 0x75, 0x1a, 0xd1, 0x35, 0x0a, 0x03, 0x43,
	0x70, 0x75, 0x12, 0x61, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43,
	0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x61, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f,
	0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe6, 0x34, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x9f, 0x01, 0x0a, 0x12, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x54, 0x6f, 0x70, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f,
	0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75,
	0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x52, 0x11,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x12, 0x69, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x64, 0x6c, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26,
	0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74,
	0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x5a, 0x0a, 0x0f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x2e, 0x43, 0x70,
	0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x71, 0x0a,
	0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x6f, 0x70, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x42, 0x2b, 0x82, 0x41, 0x28,
	0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74,
	0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x12, 0x69, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x69, 0x63, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f,
	0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f,
	0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6e, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x12,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70,
	0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x52, 0x11, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x6d, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x54, 0x6f, 0x70, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x61,
	0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70,
	0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x69, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54,
	0x6f, 0x70, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x61, 0x63, 0x63, 0x74,
	0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x2e, 0x43, 0x70,
	0x75, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x61, 0x69,
	0x74, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x52, 0x04, 0x77, 0x61,
	0x69, 0x74, 0x1a, 0x86, 0x06, 0x0a, 0x11, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x62, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f,
	0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f,
	0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x6e, 0x0a, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63,
	0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f,
	0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x62, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x12, 0x70, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f,
	0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f,
	0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x63, 0x63,
	0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63,
	0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x70, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x97, 0x05, 0x0a, 0x04,
	0x49, 0x64, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x61, 0x63, 0x63, 0x74,
	0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c,
	0x65, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x60, 0x0a, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f,
	0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x54, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f,
	0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f, 0x6d,
	0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32,
	0x82, 0x41, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82,
	0x41, 0x2a, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f,
	0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xa7, 0x05, 0x0a, 0x06, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x12, 0x56, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63,
	0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f,
	0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x62, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33,
	0x82, 0x41, 0x30, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f,
	0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f,
	0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75,
	0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x64, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63,
	0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f,
	0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x56, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f,
	0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x64, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2f, 0x6d, 0x69,
	0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0x97, 0x05, 0x0a, 0x04, 0x4e, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f,
	0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f,
	0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x60,
	0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73,
	0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x63, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x63, 0x63,
	0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63,
	0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69,
	0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x61, 0x63, 0x63,
	0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63,
	0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69,
	0x63, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x62, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63,
	0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x61,
	0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x54, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x6e,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41,
	0x2f, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d,
	0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x86, 0x06, 0x0a, 0x11, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x12,
	0x62, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03,
	0x61, 0x76, 0x67, 0x12, 0x6e, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x61,
	0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70,
	0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f,
	0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f,
	0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f,
	0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x70, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b,
	0x82, 0x41, 0x38, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x70, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x63, 0x63,
	0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63,
	0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x1a, 0x9f, 0x05, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x55, 0x0a, 0x03,
	0x61, 0x76, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e,
	0x82, 0x41, 0x2b, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03,
	0x61, 0x76, 0x67, 0x12, 0x61, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61,
	0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70,
	0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82,
	0x41, 0x30, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x55, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e,
	0x82, 0x41, 0x2b, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x12, 0x63, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f,
	0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f,
	0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f,
	0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f,
	0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x63, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x61, 0x63, 0x63, 0x74,
	0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0x97, 0x05, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x54, 0x0a,
	0x03, 0x61, 0x76, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03,
	0x61, 0x76, 0x67, 0x12, 0x60, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61,
	0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70,
	0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41,
	0x2f, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d,
	0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41,
	0x2a, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d,
	0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x62, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x63, 0x63,
	0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63,
	0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x61, 0x63, 0x63, 0x74,
	0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x97,
	0x05, 0x0a, 0x04, 0x57, 0x61, 0x69, 0x74, 0x12, 0x54, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x61,
	0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70,
	0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x77, 0x61, 0x69, 0x74, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x60, 0x0a,
	0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f,
	0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12,
	0x63, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x74,
	0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x61, 0x63, 0x63, 0x74,
	0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70,
	0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69,
	0x74, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x2f, 0x6d, 0x61, 0x78,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f,
	0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74,
	0x6f, 0x70, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x0d, 0x49, 0x4e,
	0x44, 0x45, 0x58, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x06, 0x82,
	0x41, 0x03, 0x41, 0x4c, 0x4c, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xff,
	0x01, 0x0a, 0x06, 0x43, 0x70, 0x75, 0x4b, 0x65, 0x79, 0x12, 0x57, 0x0a, 0x0f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f,
	0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x2e, 0x43, 0x70, 0x75, 0x73, 0x2e,
	0x43, 0x70, 0x75, 0x4b, 0x65, 0x79, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x6e,
	0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63,
	0x74, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x2e, 0x43, 0x70, 0x75,
	0x73, 0x2e, 0x43, 0x70, 0x75, 0x52, 0x03, 0x63, 0x70, 0x75, 0x22, 0x3b, 0x0a, 0x09, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x0d,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x1a,
	0x06, 0x82, 0x41, 0x03, 0x41, 0x4c, 0x4c, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x1a, 0x9a, 0x01, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x48, 0x0a, 0x04, 0x66, 0x72, 0x65,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1f, 0x82, 0x41,
	0x1c, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d,
	0x74, 0x6f, 0x70, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2f, 0x66, 0x72, 0x65, 0x65, 0x52, 0x04, 0x66,
	0x72, 0x65, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x61, 0x63, 0x63, 0x74,
	0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x64, 0x69,
	0x73, 0x6b, 0x2f, 0x75, 0x73, 0x65, 0x64, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x1a, 0xaa, 0x03,
	0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x56, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x25, 0x82, 0x41, 0x22, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x50, 0x0a, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f,
	0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x52, 0x06, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x12, 0x4a, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f,
	0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x2f, 0x66, 0x72, 0x65, 0x65, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x5e,
	0x0a, 0x0b, 0x73, 0x6c, 0x61, 0x62, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x61, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x6c, 0x61, 0x62, 0x5f, 0x75, 0x6e, 0x72, 0x65,
	0x63, 0x6c, 0x52, 0x0a, 0x73, 0x6c, 0x61, 0x62, 0x55, 0x6e, 0x72, 0x65, 0x63, 0x6c, 0x12, 0x4a,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2f,
	0x75, 0x73, 0x65, 0x64, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x42, 0x1b, 0x0a, 0x10, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x5a, 0x07,
	0x2e, 0x3b, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_accton_system_proto_rawDescOnce sync.Once
	file_accton_system_proto_rawDescData = file_accton_system_proto_rawDesc
)

func file_accton_system_proto_rawDescGZIP() []byte {
	file_accton_system_proto_rawDescOnce.Do(func() {
		file_accton_system_proto_rawDescData = protoimpl.X.CompressGZIP(file_accton_system_proto_rawDescData)
	})
	return file_accton_system_proto_rawDescData
}

var file_accton_system_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_accton_system_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_accton_system_proto_goTypes = []interface{}{
	(AcctonSystemTop_Cpus_Cpu_State_IndexEnum)(0),            // 0: sonic.AcctonSystemTop.Cpus.Cpu.State.IndexEnum
	(AcctonSystemTop_Cpus_CpuKey_IndexEnum)(0),               // 1: sonic.AcctonSystemTop.Cpus.CpuKey.IndexEnum
	(*AcctonSystemTop)(nil),                                  // 2: sonic.AcctonSystemTop
	(*AcctonSystemTop_Cpus)(nil),                             // 3: sonic.AcctonSystemTop.Cpus
	(*AcctonSystemTop_Disk)(nil),                             // 4: sonic.AcctonSystemTop.Disk
	(*AcctonSystemTop_Memory)(nil),                           // 5: sonic.AcctonSystemTop.Memory
	(*AcctonSystemTop_Cpus_Cpu)(nil),                         // 6: sonic.AcctonSystemTop.Cpus.Cpu
	(*AcctonSystemTop_Cpus_CpuKey)(nil),                      // 7: sonic.AcctonSystemTop.Cpus.CpuKey
	(*AcctonSystemTop_Cpus_Cpu_State)(nil),                   // 8: sonic.AcctonSystemTop.Cpus.Cpu.State
	(*AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt)(nil), // 9: sonic.AcctonSystemTop.Cpus.Cpu.State.HardwareInterrupt
	(*AcctonSystemTop_Cpus_Cpu_State_Idle)(nil),              // 10: sonic.AcctonSystemTop.Cpus.Cpu.State.Idle
	(*AcctonSystemTop_Cpus_Cpu_State_Kernel)(nil),            // 11: sonic.AcctonSystemTop.Cpus.Cpu.State.Kernel
	(*AcctonSystemTop_Cpus_Cpu_State_Nice)(nil),              // 12: sonic.AcctonSystemTop.Cpus.Cpu.State.Nice
	(*AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt)(nil), // 13: sonic.AcctonSystemTop.Cpus.Cpu.State.SoftwareInterrupt
	(*AcctonSystemTop_Cpus_Cpu_State_Total)(nil),             // 14: sonic.AcctonSystemTop.Cpus.Cpu.State.Total
	(*AcctonSystemTop_Cpus_Cpu_State_User)(nil),              // 15: sonic.AcctonSystemTop.Cpus.Cpu.State.User
	(*AcctonSystemTop_Cpus_Cpu_State_Wait)(nil),              // 16: sonic.AcctonSystemTop.Cpus.Cpu.State.Wait
	(*ywrapper.UintValue)(nil),                               // 17: ywrapper.UintValue
}
var file_accton_system_proto_depIdxs = []int32{
	3,  // 0: sonic.AcctonSystemTop.cpus:type_name -> sonic.AcctonSystemTop.Cpus
	4,  // 1: sonic.AcctonSystemTop.disk:type_name -> sonic.AcctonSystemTop.Disk
	5,  // 2: sonic.AcctonSystemTop.memory:type_name -> sonic.AcctonSystemTop.Memory
	7,  // 3: sonic.AcctonSystemTop.Cpus.cpu:type_name -> sonic.AcctonSystemTop.Cpus.CpuKey
	17, // 4: sonic.AcctonSystemTop.Disk.free:type_name -> ywrapper.UintValue
	17, // 5: sonic.AcctonSystemTop.Disk.used:type_name -> ywrapper.UintValue
	17, // 6: sonic.AcctonSystemTop.Memory.buffered:type_name -> ywrapper.UintValue
	17, // 7: sonic.AcctonSystemTop.Memory.cached:type_name -> ywrapper.UintValue
	17, // 8: sonic.AcctonSystemTop.Memory.free:type_name -> ywrapper.UintValue
	17, // 9: sonic.AcctonSystemTop.Memory.slab_unrecl:type_name -> ywrapper.UintValue
	17, // 10: sonic.AcctonSystemTop.Memory.used:type_name -> ywrapper.UintValue
	8,  // 11: sonic.AcctonSystemTop.Cpus.Cpu.state:type_name -> sonic.AcctonSystemTop.Cpus.Cpu.State
	1,  // 12: sonic.AcctonSystemTop.Cpus.CpuKey.index_indexenum:type_name -> sonic.AcctonSystemTop.Cpus.CpuKey.IndexEnum
	6,  // 13: sonic.AcctonSystemTop.Cpus.CpuKey.cpu:type_name -> sonic.AcctonSystemTop.Cpus.Cpu
	9,  // 14: sonic.AcctonSystemTop.Cpus.Cpu.State.hardware_interrupt:type_name -> sonic.AcctonSystemTop.Cpus.Cpu.State.HardwareInterrupt
	10, // 15: sonic.AcctonSystemTop.Cpus.Cpu.State.idle:type_name -> sonic.AcctonSystemTop.Cpus.Cpu.State.Idle
	0,  // 16: sonic.AcctonSystemTop.Cpus.Cpu.State.index_indexenum:type_name -> sonic.AcctonSystemTop.Cpus.Cpu.State.IndexEnum
	11, // 17: sonic.AcctonSystemTop.Cpus.Cpu.State.kernel:type_name -> sonic.AcctonSystemTop.Cpus.Cpu.State.Kernel
	12, // 18: sonic.AcctonSystemTop.Cpus.Cpu.State.nice:type_name -> sonic.AcctonSystemTop.Cpus.Cpu.State.Nice
	13, // 19: sonic.AcctonSystemTop.Cpus.Cpu.State.software_interrupt:type_name -> sonic.AcctonSystemTop.Cpus.Cpu.State.SoftwareInterrupt
	14, // 20: sonic.AcctonSystemTop.Cpus.Cpu.State.total:type_name -> sonic.AcctonSystemTop.Cpus.Cpu.State.Total
	15, // 21: sonic.AcctonSystemTop.Cpus.Cpu.State.user:type_name -> sonic.AcctonSystemTop.Cpus.Cpu.State.User
	16, // 22: sonic.AcctonSystemTop.Cpus.Cpu.State.wait:type_name -> sonic.AcctonSystemTop.Cpus.Cpu.State.Wait
	17, // 23: sonic.AcctonSystemTop.Cpus.Cpu.State.HardwareInterrupt.avg:type_name -> ywrapper.UintValue
	17, // 24: sonic.AcctonSystemTop.Cpus.Cpu.State.HardwareInterrupt.instant:type_name -> ywrapper.UintValue
	17, // 25: sonic.AcctonSystemTop.Cpus.Cpu.State.HardwareInterrupt.interval:type_name -> ywrapper.UintValue
	17, // 26: sonic.AcctonSystemTop.Cpus.Cpu.State.HardwareInterrupt.max:type_name -> ywrapper.UintValue
	17, // 27: sonic.AcctonSystemTop.Cpus.Cpu.State.HardwareInterrupt.max_time:type_name -> ywrapper.UintValue
	17, // 28: sonic.AcctonSystemTop.Cpus.Cpu.State.HardwareInterrupt.min:type_name -> ywrapper.UintValue
	17, // 29: sonic.AcctonSystemTop.Cpus.Cpu.State.HardwareInterrupt.min_time:type_name -> ywrapper.UintValue
	17, // 30: sonic.AcctonSystemTop.Cpus.Cpu.State.Idle.avg:type_name -> ywrapper.UintValue
	17, // 31: sonic.AcctonSystemTop.Cpus.Cpu.State.Idle.instant:type_name -> ywrapper.UintValue
	17, // 32: sonic.AcctonSystemTop.Cpus.Cpu.State.Idle.interval:type_name -> ywrapper.UintValue
	17, // 33: sonic.AcctonSystemTop.Cpus.Cpu.State.Idle.max:type_name -> ywrapper.UintValue
	17, // 34: sonic.AcctonSystemTop.Cpus.Cpu.State.Idle.max_time:type_name -> ywrapper.UintValue
	17, // 35: sonic.AcctonSystemTop.Cpus.Cpu.State.Idle.min:type_name -> ywrapper.UintValue
	17, // 36: sonic.AcctonSystemTop.Cpus.Cpu.State.Idle.min_time:type_name -> ywrapper.UintValue
	17, // 37: sonic.AcctonSystemTop.Cpus.Cpu.State.Kernel.avg:type_name -> ywrapper.UintValue
	17, // 38: sonic.AcctonSystemTop.Cpus.Cpu.State.Kernel.instant:type_name -> ywrapper.UintValue
	17, // 39: sonic.AcctonSystemTop.Cpus.Cpu.State.Kernel.interval:type_name -> ywrapper.UintValue
	17, // 40: sonic.AcctonSystemTop.Cpus.Cpu.State.Kernel.max:type_name -> ywrapper.UintValue
	17, // 41: sonic.AcctonSystemTop.Cpus.Cpu.State.Kernel.max_time:type_name -> ywrapper.UintValue
	17, // 42: sonic.AcctonSystemTop.Cpus.Cpu.State.Kernel.min:type_name -> ywrapper.UintValue
	17, // 43: sonic.AcctonSystemTop.Cpus.Cpu.State.Kernel.min_time:type_name -> ywrapper.UintValue
	17, // 44: sonic.AcctonSystemTop.Cpus.Cpu.State.Nice.avg:type_name -> ywrapper.UintValue
	17, // 45: sonic.AcctonSystemTop.Cpus.Cpu.State.Nice.instant:type_name -> ywrapper.UintValue
	17, // 46: sonic.AcctonSystemTop.Cpus.Cpu.State.Nice.interval:type_name -> ywrapper.UintValue
	17, // 47: sonic.AcctonSystemTop.Cpus.Cpu.State.Nice.max:type_name -> ywrapper.UintValue
	17, // 48: sonic.AcctonSystemTop.Cpus.Cpu.State.Nice.max_time:type_name -> ywrapper.UintValue
	17, // 49: sonic.AcctonSystemTop.Cpus.Cpu.State.Nice.min:type_name -> ywrapper.UintValue
	17, // 50: sonic.AcctonSystemTop.Cpus.Cpu.State.Nice.min_time:type_name -> ywrapper.UintValue
	17, // 51: sonic.AcctonSystemTop.Cpus.Cpu.State.SoftwareInterrupt.avg:type_name -> ywrapper.UintValue
	17, // 52: sonic.AcctonSystemTop.Cpus.Cpu.State.SoftwareInterrupt.instant:type_name -> ywrapper.UintValue
	17, // 53: sonic.AcctonSystemTop.Cpus.Cpu.State.SoftwareInterrupt.interval:type_name -> ywrapper.UintValue
	17, // 54: sonic.AcctonSystemTop.Cpus.Cpu.State.SoftwareInterrupt.max:type_name -> ywrapper.UintValue
	17, // 55: sonic.AcctonSystemTop.Cpus.Cpu.State.SoftwareInterrupt.max_time:type_name -> ywrapper.UintValue
	17, // 56: sonic.AcctonSystemTop.Cpus.Cpu.State.SoftwareInterrupt.min:type_name -> ywrapper.UintValue
	17, // 57: sonic.AcctonSystemTop.Cpus.Cpu.State.SoftwareInterrupt.min_time:type_name -> ywrapper.UintValue
	17, // 58: sonic.AcctonSystemTop.Cpus.Cpu.State.Total.avg:type_name -> ywrapper.UintValue
	17, // 59: sonic.AcctonSystemTop.Cpus.Cpu.State.Total.instant:type_name -> ywrapper.UintValue
	17, // 60: sonic.AcctonSystemTop.Cpus.Cpu.State.Total.interval:type_name -> ywrapper.UintValue
	17, // 61: sonic.AcctonSystemTop.Cpus.Cpu.State.Total.max:type_name -> ywrapper.UintValue
	17, // 62: sonic.AcctonSystemTop.Cpus.Cpu.State.Total.max_time:type_name -> ywrapper.UintValue
	17, // 63: sonic.AcctonSystemTop.Cpus.Cpu.State.Total.min:type_name -> ywrapper.UintValue
	17, // 64: sonic.AcctonSystemTop.Cpus.Cpu.State.Total.min_time:type_name -> ywrapper.UintValue
	17, // 65: sonic.AcctonSystemTop.Cpus.Cpu.State.User.avg:type_name -> ywrapper.UintValue
	17, // 66: sonic.AcctonSystemTop.Cpus.Cpu.State.User.instant:type_name -> ywrapper.UintValue
	17, // 67: sonic.AcctonSystemTop.Cpus.Cpu.State.User.interval:type_name -> ywrapper.UintValue
	17, // 68: sonic.AcctonSystemTop.Cpus.Cpu.State.User.max:type_name -> ywrapper.UintValue
	17, // 69: sonic.AcctonSystemTop.Cpus.Cpu.State.User.max_time:type_name -> ywrapper.UintValue
	17, // 70: sonic.AcctonSystemTop.Cpus.Cpu.State.User.min:type_name -> ywrapper.UintValue
	17, // 71: sonic.AcctonSystemTop.Cpus.Cpu.State.User.min_time:type_name -> ywrapper.UintValue
	17, // 72: sonic.AcctonSystemTop.Cpus.Cpu.State.Wait.avg:type_name -> ywrapper.UintValue
	17, // 73: sonic.AcctonSystemTop.Cpus.Cpu.State.Wait.instant:type_name -> ywrapper.UintValue
	17, // 74: sonic.AcctonSystemTop.Cpus.Cpu.State.Wait.interval:type_name -> ywrapper.UintValue
	17, // 75: sonic.AcctonSystemTop.Cpus.Cpu.State.Wait.max:type_name -> ywrapper.UintValue
	17, // 76: sonic.AcctonSystemTop.Cpus.Cpu.State.Wait.max_time:type_name -> ywrapper.UintValue
	17, // 77: sonic.AcctonSystemTop.Cpus.Cpu.State.Wait.min:type_name -> ywrapper.UintValue
	17, // 78: sonic.AcctonSystemTop.Cpus.Cpu.State.Wait.min_time:type_name -> ywrapper.UintValue
	79, // [79:79] is the sub-list for method output_type
	79, // [79:79] is the sub-list for method input_type
	79, // [79:79] is the sub-list for extension type_name
	79, // [79:79] is the sub-list for extension extendee
	0,  // [0:79] is the sub-list for field type_name
}

func init() { file_accton_system_proto_init() }
func file_accton_system_proto_init() {
	if File_accton_system_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_accton_system_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_system_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop_Cpus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_system_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop_Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_system_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop_Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_system_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop_Cpus_Cpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_system_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop_Cpus_CpuKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_system_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop_Cpus_Cpu_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_system_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop_Cpus_Cpu_State_HardwareInterrupt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_system_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop_Cpus_Cpu_State_Idle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_system_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop_Cpus_Cpu_State_Kernel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_system_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop_Cpus_Cpu_State_Nice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_system_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop_Cpus_Cpu_State_SoftwareInterrupt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_system_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop_Cpus_Cpu_State_Total); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_system_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop_Cpus_Cpu_State_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_system_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonSystemTop_Cpus_Cpu_State_Wait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_accton_system_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*AcctonSystemTop_Cpus_CpuKey_IndexIndexenum)(nil),
		(*AcctonSystemTop_Cpus_CpuKey_IndexUint64)(nil),
	}
	file_accton_system_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*AcctonSystemTop_Cpus_Cpu_State_IndexIndexenum)(nil),
		(*AcctonSystemTop_Cpus_Cpu_State_IndexUint64)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accton_system_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accton_system_proto_goTypes,
		DependencyIndexes: file_accton_system_proto_depIdxs,
		EnumInfos:         file_accton_system_proto_enumTypes,
		MessageInfos:      file_accton_system_proto_msgTypes,
	}.Build()
	File_accton_system_proto = out.File
	file_accton_system_proto_rawDesc = nil
	file_accton_system_proto_goTypes = nil
	file_accton_system_proto_depIdxs = nil
}
