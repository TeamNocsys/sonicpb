// openconfig.sonic_port is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/sonic-acl.yang
//  - ../api/yang/sonic/sonic-port.yang
//  - ../api/yang/sonic/sonic-types.yang
//  - ../api/yang/sonic/sonic-portchannel.yang
//  - ../api/yang/sonic/sonic-platform-types.yang
//  - ../api/yang/sonic/sonic-lldp-types.yang
//  - ../api/yang/sonic/third_party/ietf/iana-if-type.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/sonic/sonic-vlan.yang
//  - ../api/yang/sonic/sonic-lldp.yang
//  - ../api/yang/sonic/sonic-interface.yang
//  - ../api/yang/sonic/sonic-loopback-interface.yang
//  - ../api/yang/sonic/sonic-platform.yang
//  - ../api/yang/sonic/sonic-extension.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.0
// source: sonic_port.proto

package sonic

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SonicPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port *SonicPort_Port `protobuf:"bytes,491297659,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *SonicPort) Reset() {
	*x = SonicPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_port_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPort) ProtoMessage() {}

func (x *SonicPort) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_port_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPort.ProtoReflect.Descriptor instead.
func (*SonicPort) Descriptor() ([]byte, []int) {
	return file_sonic_port_proto_rawDescGZIP(), []int{0}
}

func (x *SonicPort) GetPort() *SonicPort_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

type SonicPort_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortList      []*SonicPort_Port_PortListKey      `protobuf:"bytes,203138784,rep,name=port_list,json=portList,proto3" json:"port_list,omitempty"`
	PortStateList []*SonicPort_Port_PortStateListKey `protobuf:"bytes,348316936,rep,name=port_state_list,json=portStateList,proto3" json:"port_state_list,omitempty"`
}

func (x *SonicPort_Port) Reset() {
	*x = SonicPort_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_port_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPort_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPort_Port) ProtoMessage() {}

func (x *SonicPort_Port) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_port_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPort_Port.ProtoReflect.Descriptor instead.
func (*SonicPort_Port) Descriptor() ([]byte, []int) {
	return file_sonic_port_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SonicPort_Port) GetPortList() []*SonicPort_Port_PortListKey {
	if x != nil {
		return x.PortList
	}
	return nil
}

func (x *SonicPort_Port) GetPortStateList() []*SonicPort_Port_PortStateListKey {
	if x != nil {
		return x.PortStateList
	}
	return nil
}

type SonicPort_Port_PortList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminStatus SonicPortAdminStatus  `protobuf:"varint,204119143,opt,name=admin_status,json=adminStatus,proto3,enum=sonic.SonicPortAdminStatus" json:"admin_status,omitempty"`
	Alias       *ywrapper.StringValue `protobuf:"bytes,451217765,opt,name=alias,proto3" json:"alias,omitempty"`
	Description *ywrapper.StringValue `protobuf:"bytes,372446763,opt,name=description,proto3" json:"description,omitempty"`
	Fec         *ywrapper.StringValue `protobuf:"bytes,352220911,opt,name=fec,proto3" json:"fec,omitempty"`
	Index       *ywrapper.UintValue   `protobuf:"bytes,280841649,opt,name=index,proto3" json:"index,omitempty"`
	Lanes       *ywrapper.StringValue `protobuf:"bytes,379225588,opt,name=lanes,proto3" json:"lanes,omitempty"`
	Mtu         *ywrapper.UintValue   `protobuf:"bytes,65189849,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Speed       *ywrapper.UintValue   `protobuf:"bytes,112572536,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *SonicPort_Port_PortList) Reset() {
	*x = SonicPort_Port_PortList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_port_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPort_Port_PortList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPort_Port_PortList) ProtoMessage() {}

func (x *SonicPort_Port_PortList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_port_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPort_Port_PortList.ProtoReflect.Descriptor instead.
func (*SonicPort_Port_PortList) Descriptor() ([]byte, []int) {
	return file_sonic_port_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *SonicPort_Port_PortList) GetAdminStatus() SonicPortAdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return SonicPortAdminStatus_SONICPORTADMINSTATUS_UNSET
}

func (x *SonicPort_Port_PortList) GetAlias() *ywrapper.StringValue {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *SonicPort_Port_PortList) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *SonicPort_Port_PortList) GetFec() *ywrapper.StringValue {
	if x != nil {
		return x.Fec
	}
	return nil
}

func (x *SonicPort_Port_PortList) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *SonicPort_Port_PortList) GetLanes() *ywrapper.StringValue {
	if x != nil {
		return x.Lanes
	}
	return nil
}

func (x *SonicPort_Port_PortList) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

func (x *SonicPort_Port_PortList) GetSpeed() *ywrapper.UintValue {
	if x != nil {
		return x.Speed
	}
	return nil
}

type SonicPort_Port_PortListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortName string                   `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	PortList *SonicPort_Port_PortList `protobuf:"bytes,2,opt,name=port_list,json=portList,proto3" json:"port_list,omitempty"`
}

func (x *SonicPort_Port_PortListKey) Reset() {
	*x = SonicPort_Port_PortListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_port_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPort_Port_PortListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPort_Port_PortListKey) ProtoMessage() {}

func (x *SonicPort_Port_PortListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_port_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPort_Port_PortListKey.ProtoReflect.Descriptor instead.
func (*SonicPort_Port_PortListKey) Descriptor() ([]byte, []int) {
	return file_sonic_port_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *SonicPort_Port_PortListKey) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *SonicPort_Port_PortListKey) GetPortList() *SonicPort_Port_PortList {
	if x != nil {
		return x.PortList
	}
	return nil
}

type SonicPort_Port_PortStateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminStatus SonicPortAdminStatus                   `protobuf:"varint,220671023,opt,name=admin_status,json=adminStatus,proto3,enum=sonic.SonicPortAdminStatus" json:"admin_status,omitempty"`
	Alias       *ywrapper.StringValue                  `protobuf:"bytes,257596125,opt,name=alias,proto3" json:"alias,omitempty"`
	Counters    *SonicPort_Port_PortStateList_Counters `protobuf:"bytes,431401216,opt,name=counters,proto3" json:"counters,omitempty"`
	Description *ywrapper.StringValue                  `protobuf:"bytes,443224803,opt,name=description,proto3" json:"description,omitempty"`
	Index       *ywrapper.UintValue                    `protobuf:"bytes,331739769,opt,name=index,proto3" json:"index,omitempty"`
	Mtu         *ywrapper.UintValue                    `protobuf:"bytes,429048545,opt,name=mtu,proto3" json:"mtu,omitempty"`
	OperStatus  SonicPortOperStatus                    `protobuf:"varint,438817078,opt,name=oper_status,json=operStatus,proto3,enum=sonic.SonicPortOperStatus" json:"oper_status,omitempty"`
	Speed       *ywrapper.UintValue                    `protobuf:"bytes,221710544,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *SonicPort_Port_PortStateList) Reset() {
	*x = SonicPort_Port_PortStateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_port_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPort_Port_PortStateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPort_Port_PortStateList) ProtoMessage() {}

func (x *SonicPort_Port_PortStateList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_port_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPort_Port_PortStateList.ProtoReflect.Descriptor instead.
func (*SonicPort_Port_PortStateList) Descriptor() ([]byte, []int) {
	return file_sonic_port_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *SonicPort_Port_PortStateList) GetAdminStatus() SonicPortAdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return SonicPortAdminStatus_SONICPORTADMINSTATUS_UNSET
}

func (x *SonicPort_Port_PortStateList) GetAlias() *ywrapper.StringValue {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *SonicPort_Port_PortStateList) GetCounters() *SonicPort_Port_PortStateList_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *SonicPort_Port_PortStateList) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *SonicPort_Port_PortStateList) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *SonicPort_Port_PortStateList) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

func (x *SonicPort_Port_PortStateList) GetOperStatus() SonicPortOperStatus {
	if x != nil {
		return x.OperStatus
	}
	return SonicPortOperStatus_SONICPORTOPERSTATUS_UNSET
}

func (x *SonicPort_Port_PortStateList) GetSpeed() *ywrapper.UintValue {
	if x != nil {
		return x.Speed
	}
	return nil
}

type SonicPort_Port_PortStateListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortName      string                        `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	PortStateList *SonicPort_Port_PortStateList `protobuf:"bytes,2,opt,name=port_state_list,json=portStateList,proto3" json:"port_state_list,omitempty"`
}

func (x *SonicPort_Port_PortStateListKey) Reset() {
	*x = SonicPort_Port_PortStateListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_port_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPort_Port_PortStateListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPort_Port_PortStateListKey) ProtoMessage() {}

func (x *SonicPort_Port_PortStateListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_port_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPort_Port_PortStateListKey.ProtoReflect.Descriptor instead.
func (*SonicPort_Port_PortStateListKey) Descriptor() ([]byte, []int) {
	return file_sonic_port_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *SonicPort_Port_PortStateListKey) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *SonicPort_Port_PortStateListKey) GetPortStateList() *SonicPort_Port_PortStateList {
	if x != nil {
		return x.PortStateList
	}
	return nil
}

type SonicPort_Port_PortStateList_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InBroadcastPkts  *ywrapper.UintValue `protobuf:"bytes,90338217,opt,name=in_broadcast_pkts,json=inBroadcastPkts,proto3" json:"in_broadcast_pkts,omitempty"`
	InDiscards       *ywrapper.UintValue `protobuf:"bytes,499026598,opt,name=in_discards,json=inDiscards,proto3" json:"in_discards,omitempty"`
	InErrors         *ywrapper.UintValue `protobuf:"bytes,239192886,opt,name=in_errors,json=inErrors,proto3" json:"in_errors,omitempty"`
	InMulticastPkts  *ywrapper.UintValue `protobuf:"bytes,42816188,opt,name=in_multicast_pkts,json=inMulticastPkts,proto3" json:"in_multicast_pkts,omitempty"`
	InOctets         *ywrapper.UintValue `protobuf:"bytes,452010871,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts           *ywrapper.UintValue `protobuf:"bytes,302618071,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	InUnicastPkts    *ywrapper.UintValue `protobuf:"bytes,16285847,opt,name=in_unicast_pkts,json=inUnicastPkts,proto3" json:"in_unicast_pkts,omitempty"`
	OutBroadcastPkts *ywrapper.UintValue `protobuf:"bytes,215928864,opt,name=out_broadcast_pkts,json=outBroadcastPkts,proto3" json:"out_broadcast_pkts,omitempty"`
	OutDiscards      *ywrapper.UintValue `protobuf:"bytes,305251515,opt,name=out_discards,json=outDiscards,proto3" json:"out_discards,omitempty"`
	OutErrors        *ywrapper.UintValue `protobuf:"bytes,166373579,opt,name=out_errors,json=outErrors,proto3" json:"out_errors,omitempty"`
	OutMulticastPkts *ywrapper.UintValue `protobuf:"bytes,533661729,opt,name=out_multicast_pkts,json=outMulticastPkts,proto3" json:"out_multicast_pkts,omitempty"`
	OutOctets        *ywrapper.UintValue `protobuf:"bytes,459609310,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts          *ywrapper.UintValue `protobuf:"bytes,76592966,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
	OutUnicastPkts   *ywrapper.UintValue `protobuf:"bytes,397194418,opt,name=out_unicast_pkts,json=outUnicastPkts,proto3" json:"out_unicast_pkts,omitempty"`
}

func (x *SonicPort_Port_PortStateList_Counters) Reset() {
	*x = SonicPort_Port_PortStateList_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_port_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicPort_Port_PortStateList_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicPort_Port_PortStateList_Counters) ProtoMessage() {}

func (x *SonicPort_Port_PortStateList_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_port_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicPort_Port_PortStateList_Counters.ProtoReflect.Descriptor instead.
func (*SonicPort_Port_PortStateList_Counters) Descriptor() ([]byte, []int) {
	return file_sonic_port_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *SonicPort_Port_PortStateList_Counters) GetInBroadcastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InBroadcastPkts
	}
	return nil
}

func (x *SonicPort_Port_PortStateList_Counters) GetInDiscards() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscards
	}
	return nil
}

func (x *SonicPort_Port_PortStateList_Counters) GetInErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InErrors
	}
	return nil
}

func (x *SonicPort_Port_PortStateList_Counters) GetInMulticastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InMulticastPkts
	}
	return nil
}

func (x *SonicPort_Port_PortStateList_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *SonicPort_Port_PortStateList_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *SonicPort_Port_PortStateList_Counters) GetInUnicastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InUnicastPkts
	}
	return nil
}

func (x *SonicPort_Port_PortStateList_Counters) GetOutBroadcastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutBroadcastPkts
	}
	return nil
}

func (x *SonicPort_Port_PortStateList_Counters) GetOutDiscards() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscards
	}
	return nil
}

func (x *SonicPort_Port_PortStateList_Counters) GetOutErrors() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrors
	}
	return nil
}

func (x *SonicPort_Port_PortStateList_Counters) GetOutMulticastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutMulticastPkts
	}
	return nil
}

func (x *SonicPort_Port_PortStateList_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *SonicPort_Port_PortStateList_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

func (x *SonicPort_Port_PortStateList_Counters) GetOutUnicastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutUnicastPkts
	}
	return nil
}

var File_sonic_port_proto protoreflect.FileDescriptor

var file_sonic_port_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xaf, 0x1e, 0x0a, 0x09, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x42, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xfb, 0xb6, 0xa2, 0xea, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x13, 0x82, 0x41, 0x10, 0x2f, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x1a, 0xdd, 0x1d, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x60, 0x0a,
	0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xe0, 0xcd, 0xee, 0x60, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x77, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x88, 0xca, 0x8b, 0xa6, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xd1, 0x05, 0x0a, 0x08, 0x50, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xe7, 0xb8, 0xaa, 0x61, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x2a, 0x82, 0x41, 0x27,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0xe5, 0x92,
	0x94, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23,
	0x82, 0x41, 0x20, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x66, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xab, 0xac, 0xcc, 0xb1, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x03, 0x66, 0x65, 0x63, 0x18, 0xef, 0xed, 0xf9, 0xa7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x66, 0x65, 0x63, 0x52, 0x03, 0x66,
	0x65, 0x63, 0x12, 0x52, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xb1, 0x9b, 0xf5, 0x85,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x18,
	0xf4, 0x8b, 0xea, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x6c, 0x61, 0x6e, 0x65, 0x73, 0x52, 0x05, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x03,
	0x6d, 0x74, 0x75, 0x18, 0xd9, 0xef, 0x8a, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x51, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0xf8, 0xf0, 0xd6, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x1a, 0x90, 0x01, 0x0a,
	0x0b, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x09,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f,
	0x6e, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0xe4, 0x13, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x73, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0xaf, 0xd8, 0x9c, 0x69, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0xdd, 0xb5, 0xea, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x7a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x80, 0xd2,
	0xda, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e,
	0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6c, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe3, 0xa5, 0xac,
	0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82,
	0x41, 0x2c, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0xf9, 0xe4, 0x97, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x52, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0xe1, 0x85, 0xcb,
	0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x70, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xb6, 0xa2, 0x9f, 0xd1, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x2f,
	0x82, 0x41, 0x2c, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0xd0, 0x91, 0xdc, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x1a, 0x9f, 0x0d, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xa9, 0xe7, 0x89, 0x2b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x72, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0xa6, 0x95, 0xfa, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0a,
	0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x6b, 0x0a, 0x09, 0x69, 0x6e,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xb6, 0x96, 0x87, 0x72, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x08, 0x69,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xbc, 0xa5,
	0xb5, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x6c, 0x0a, 0x09,
	0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xf7, 0xc6, 0xc4, 0xd7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x52, 0x08, 0x69, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x07, 0x69, 0x6e,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xd7, 0xab, 0xa6, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b,
	0x74, 0x73, 0x12, 0x7c, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x97, 0x81, 0xe2, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74,
	0x73, 0x52, 0x0d, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73,
	0x12, 0x85, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xa0, 0xa0, 0xfb, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x75, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0xbb, 0x89, 0xc7, 0x91, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x6e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xcb, 0xd1,
	0xaa, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x86, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xa1, 0x90, 0xbc, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xde, 0xa9, 0x94, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x09,
	0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x68, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xc6, 0xee, 0xc2, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x50,
	0x6b, 0x74, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xb2, 0xe9, 0xb2, 0xbd, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x1a, 0xab, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x09, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d,
	0x82, 0x41, 0x2a, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x1b, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73,
	0x79, 0x73, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x5a, 0x07, 0x2e, 0x3b, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sonic_port_proto_rawDescOnce sync.Once
	file_sonic_port_proto_rawDescData = file_sonic_port_proto_rawDesc
)

func file_sonic_port_proto_rawDescGZIP() []byte {
	file_sonic_port_proto_rawDescOnce.Do(func() {
		file_sonic_port_proto_rawDescData = protoimpl.X.CompressGZIP(file_sonic_port_proto_rawDescData)
	})
	return file_sonic_port_proto_rawDescData
}

var file_sonic_port_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_sonic_port_proto_goTypes = []interface{}{
	(*SonicPort)(nil),                             // 0: sonic.SonicPort
	(*SonicPort_Port)(nil),                        // 1: sonic.SonicPort.Port
	(*SonicPort_Port_PortList)(nil),               // 2: sonic.SonicPort.Port.PortList
	(*SonicPort_Port_PortListKey)(nil),            // 3: sonic.SonicPort.Port.PortListKey
	(*SonicPort_Port_PortStateList)(nil),          // 4: sonic.SonicPort.Port.PortStateList
	(*SonicPort_Port_PortStateListKey)(nil),       // 5: sonic.SonicPort.Port.PortStateListKey
	(*SonicPort_Port_PortStateList_Counters)(nil), // 6: sonic.SonicPort.Port.PortStateList.Counters
	(SonicPortAdminStatus)(0),                     // 7: sonic.SonicPortAdminStatus
	(*ywrapper.StringValue)(nil),                  // 8: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                    // 9: ywrapper.UintValue
	(SonicPortOperStatus)(0),                      // 10: sonic.SonicPortOperStatus
}
var file_sonic_port_proto_depIdxs = []int32{
	1,  // 0: sonic.SonicPort.port:type_name -> sonic.SonicPort.Port
	3,  // 1: sonic.SonicPort.Port.port_list:type_name -> sonic.SonicPort.Port.PortListKey
	5,  // 2: sonic.SonicPort.Port.port_state_list:type_name -> sonic.SonicPort.Port.PortStateListKey
	7,  // 3: sonic.SonicPort.Port.PortList.admin_status:type_name -> sonic.SonicPortAdminStatus
	8,  // 4: sonic.SonicPort.Port.PortList.alias:type_name -> ywrapper.StringValue
	8,  // 5: sonic.SonicPort.Port.PortList.description:type_name -> ywrapper.StringValue
	8,  // 6: sonic.SonicPort.Port.PortList.fec:type_name -> ywrapper.StringValue
	9,  // 7: sonic.SonicPort.Port.PortList.index:type_name -> ywrapper.UintValue
	8,  // 8: sonic.SonicPort.Port.PortList.lanes:type_name -> ywrapper.StringValue
	9,  // 9: sonic.SonicPort.Port.PortList.mtu:type_name -> ywrapper.UintValue
	9,  // 10: sonic.SonicPort.Port.PortList.speed:type_name -> ywrapper.UintValue
	2,  // 11: sonic.SonicPort.Port.PortListKey.port_list:type_name -> sonic.SonicPort.Port.PortList
	7,  // 12: sonic.SonicPort.Port.PortStateList.admin_status:type_name -> sonic.SonicPortAdminStatus
	8,  // 13: sonic.SonicPort.Port.PortStateList.alias:type_name -> ywrapper.StringValue
	6,  // 14: sonic.SonicPort.Port.PortStateList.counters:type_name -> sonic.SonicPort.Port.PortStateList.Counters
	8,  // 15: sonic.SonicPort.Port.PortStateList.description:type_name -> ywrapper.StringValue
	9,  // 16: sonic.SonicPort.Port.PortStateList.index:type_name -> ywrapper.UintValue
	9,  // 17: sonic.SonicPort.Port.PortStateList.mtu:type_name -> ywrapper.UintValue
	10, // 18: sonic.SonicPort.Port.PortStateList.oper_status:type_name -> sonic.SonicPortOperStatus
	9,  // 19: sonic.SonicPort.Port.PortStateList.speed:type_name -> ywrapper.UintValue
	4,  // 20: sonic.SonicPort.Port.PortStateListKey.port_state_list:type_name -> sonic.SonicPort.Port.PortStateList
	9,  // 21: sonic.SonicPort.Port.PortStateList.Counters.in_broadcast_pkts:type_name -> ywrapper.UintValue
	9,  // 22: sonic.SonicPort.Port.PortStateList.Counters.in_discards:type_name -> ywrapper.UintValue
	9,  // 23: sonic.SonicPort.Port.PortStateList.Counters.in_errors:type_name -> ywrapper.UintValue
	9,  // 24: sonic.SonicPort.Port.PortStateList.Counters.in_multicast_pkts:type_name -> ywrapper.UintValue
	9,  // 25: sonic.SonicPort.Port.PortStateList.Counters.in_octets:type_name -> ywrapper.UintValue
	9,  // 26: sonic.SonicPort.Port.PortStateList.Counters.in_pkts:type_name -> ywrapper.UintValue
	9,  // 27: sonic.SonicPort.Port.PortStateList.Counters.in_unicast_pkts:type_name -> ywrapper.UintValue
	9,  // 28: sonic.SonicPort.Port.PortStateList.Counters.out_broadcast_pkts:type_name -> ywrapper.UintValue
	9,  // 29: sonic.SonicPort.Port.PortStateList.Counters.out_discards:type_name -> ywrapper.UintValue
	9,  // 30: sonic.SonicPort.Port.PortStateList.Counters.out_errors:type_name -> ywrapper.UintValue
	9,  // 31: sonic.SonicPort.Port.PortStateList.Counters.out_multicast_pkts:type_name -> ywrapper.UintValue
	9,  // 32: sonic.SonicPort.Port.PortStateList.Counters.out_octets:type_name -> ywrapper.UintValue
	9,  // 33: sonic.SonicPort.Port.PortStateList.Counters.out_pkts:type_name -> ywrapper.UintValue
	9,  // 34: sonic.SonicPort.Port.PortStateList.Counters.out_unicast_pkts:type_name -> ywrapper.UintValue
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_sonic_port_proto_init() }
func file_sonic_port_proto_init() {
	if File_sonic_port_proto != nil {
		return
	}
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sonic_port_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_port_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPort_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_port_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPort_Port_PortList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_port_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPort_Port_PortListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_port_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPort_Port_PortStateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_port_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPort_Port_PortStateListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_port_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicPort_Port_PortStateList_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sonic_port_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sonic_port_proto_goTypes,
		DependencyIndexes: file_sonic_port_proto_depIdxs,
		MessageInfos:      file_sonic_port_proto_msgTypes,
	}.Build()
	File_sonic_port_proto = out.File
	file_sonic_port_proto_rawDesc = nil
	file_sonic_port_proto_goTypes = nil
	file_sonic_port_proto_depIdxs = nil
}
