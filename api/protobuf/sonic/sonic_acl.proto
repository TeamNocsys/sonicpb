// openconfig.sonic_acl is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/sonic-platform.yang
//  - ../api/yang/sonic/sonic-interface.yang
//  - ../api/yang/sonic/sonic-port.yang
//  - ../api/yang/sonic/sonic-ntp.yang
//  - ../api/yang/sonic/sonic-vrf.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/sonic/third_party/ietf/iana-if-type.yang
//  - ../api/yang/sonic/sonic-loopback-interface.yang
//  - ../api/yang/sonic/sonic-platform-types.yang
//  - ../api/yang/sonic/sonic-neighbor.yang
//  - ../api/yang/sonic/sonic-route.yang
//  - ../api/yang/sonic/sonic-lldp.yang
//  - ../api/yang/sonic/sonic-vlan.yang
//  - ../api/yang/sonic/sonic-portchannel.yang
//  - ../api/yang/sonic/sonic-extension.yang
//  - ../api/yang/sonic/sonic-mirror-session.yang
//  - ../api/yang/sonic/sonic-vxlan.yang
//  - ../api/yang/sonic/sonic-fdb.yang
//  - ../api/yang/sonic/sonic-acl.yang
//  - ../api/yang/sonic/sonic-types.yang
syntax = "proto3";

package sonic;
option java_package = "com.nocsys.sonic";
option go_package = ".;sonic";

import "ywrapper.proto";
import "yext.proto";
import "enums.proto";

message SonicAcl {
  message AclRule {
    message AclRuleList {
      enum EtherType {
        ETHERTYPE_UNSET = 0;
        ETHERTYPE_LLDP = 1 [(yext.yang_name) = "LLDP"];
        ETHERTYPE_VLAN = 2 [(yext.yang_name) = "VLAN"];
        ETHERTYPE_ROCE = 3 [(yext.yang_name) = "ROCE"];
        ETHERTYPE_ARP = 4 [(yext.yang_name) = "ARP"];
        ETHERTYPE_IPV4 = 5 [(yext.yang_name) = "IPV4"];
        ETHERTYPE_IPV6 = 6 [(yext.yang_name) = "IPV6"];
        ETHERTYPE_MPLS = 7 [(yext.yang_name) = "MPLS"];
      }
      enum IpProtocol {
        IPPROTOCOL_UNSET = 0;
        IPPROTOCOL_TCP = 1 [(yext.yang_name) = "TCP"];
        IPPROTOCOL_ICMP = 2 [(yext.yang_name) = "ICMP"];
        IPPROTOCOL_UDP = 3 [(yext.yang_name) = "UDP"];
        IPPROTOCOL_IGMP = 4 [(yext.yang_name) = "IGMP"];
        IPPROTOCOL_PIM = 5 [(yext.yang_name) = "PIM"];
        IPPROTOCOL_RSVP = 6 [(yext.yang_name) = "RSVP"];
        IPPROTOCOL_GRE = 7 [(yext.yang_name) = "GRE"];
        IPPROTOCOL_AUTH = 8 [(yext.yang_name) = "AUTH"];
        IPPROTOCOL_L2TP = 9 [(yext.yang_name) = "L2TP"];
      }
      ywrapper.UintValue dscp = 1 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/dscp"];
      ywrapper.StringValue dst_ip = 2 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/dst-ip"];
      ywrapper.StringValue dst_ipv6 = 3 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/dst-ipv6"];
      EtherType ether_type = 4 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/ether-type"];
      repeated ywrapper.StringValue in_ports = 5 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/in-ports"];
      IpProtocol ip_protocol = 6 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/ip-protocol"];
      sonic.SonicTypesIpType ip_type = 7 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/ip-type"];
      ywrapper.UintValue l4_dst_port = 8 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/l4-dst-port"];
      ywrapper.StringValue l4_dst_port_range = 9 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/l4-dst-port-range"];
      ywrapper.UintValue l4_src_port = 10 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/l4-src-port"];
      ywrapper.StringValue l4_src_port_range = 11 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/l4-src-port-range"];
      ywrapper.StringValue mirror_action = 12 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/mirror-action"];
      ywrapper.StringValue mirror_egress_action = 13 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/mirror-egress-action"];
      ywrapper.StringValue mirror_ingress_action = 14 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/mirror-ingress-action"];
      repeated ywrapper.StringValue out_ports = 15 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/out-ports"];
      sonic.SonicTypesPacketAction packet_action = 16 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/packet-action"];
      ywrapper.UintValue priority = 17 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/priority"];
      ywrapper.StringValue redirect_action = 18 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/redirect-action"];
      ywrapper.StringValue src_ip = 19 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/src-ip"];
      ywrapper.StringValue src_ipv6 = 20 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/src-ipv6"];
      ywrapper.StringValue tcp_flags = 21 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/tcp-flags"];
    }
    message AclRuleListKey {
      string table_name = 1 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/table-name"];
      string rule_name = 2 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list/rule-name"];
      AclRuleList acl_rule_list = 3;
    }
    repeated AclRuleListKey acl_rule_list = 1 [(yext.schemapath) = "/sonic-acl/acl-rule/acl-rule-list"];
  }
  message AclTable {
    message AclTableList {
      enum Stage {
        STAGE_UNSET = 0;
        STAGE_INGRESS = 1 [(yext.yang_name) = "INGRESS"];
        STAGE_EGRESS = 2 [(yext.yang_name) = "EGRESS"];
      }
      enum Type {
        TYPE_UNSET = 0;
        TYPE_L2 = 1 [(yext.yang_name) = "L2"];
        TYPE_L3 = 2 [(yext.yang_name) = "L3"];
        TYPE_L3V6 = 3 [(yext.yang_name) = "L3V6"];
        TYPE_MIRROR = 4 [(yext.yang_name) = "MIRROR"];
        TYPE_MIRRORV6 = 5 [(yext.yang_name) = "MIRRORV6"];
        TYPE_MIRROR_DSCP = 6 [(yext.yang_name) = "MIRROR_DSCP"];
        TYPE_CTRLPLANE = 7 [(yext.yang_name) = "CTRLPLANE"];
      }
      ywrapper.StringValue policy_desc = 1 [(yext.schemapath) = "/sonic-acl/acl-table/acl-table-list/policy-desc"];
      repeated ywrapper.StringValue ports = 2 [(yext.schemapath) = "/sonic-acl/acl-table/acl-table-list/ports"];
      Stage stage = 3 [(yext.schemapath) = "/sonic-acl/acl-table/acl-table-list/stage"];
      Type type = 4 [(yext.schemapath) = "/sonic-acl/acl-table/acl-table-list/type"];
    }
    message AclTableListKey {
      string table_name = 1 [(yext.schemapath) = "/sonic-acl/acl-table/acl-table-list/table-name"];
      AclTableList acl_table_list = 2;
    }
    repeated AclTableListKey acl_table_list = 1 [(yext.schemapath) = "/sonic-acl/acl-table/acl-table-list"];
  }
  AclRule acl_rule = 1 [(yext.schemapath) = "/sonic-acl/acl-rule"];
  AclTable acl_table = 2 [(yext.schemapath) = "/sonic-acl/acl-table"];
}
