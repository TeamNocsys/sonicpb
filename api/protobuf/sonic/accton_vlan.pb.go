// openconfig.accton_vlan is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/nocsys-types.yang
//  - ../api/yang/sonic/nocsys-interface.yang
//  - ../api/yang/sonic/nocsys-vlan.yang
//  - ../api/yang/sonic/nocsys-mdns.yang
//  - ../api/yang/sonic/nocsys-extension.yang
//  - ../api/yang/sonic/nocsys-acl.yang
//  - ../api/yang/sonic/nocsys-loopback-interface.yang
//  - ../api/yang/sonic/nocsys-vrf.yang
//  - ../api/yang/sonic/nocsys-portchannel.yang
//  - ../api/yang/sonic/nocsys-system.yang
//  - ../api/yang/sonic/nocsys-neighbor.yang
//  - ../api/yang/sonic/nocsys-vxlan.yang
//  - ../api/yang/sonic/nocsys-port.yang
//  - ../api/yang/sonic/nocsys-route.yang
//  - ../api/yang/sonic/nocsys-ntp.yang
//  - ../api/yang/sonic/nocsys-fdb.yang
//  - ../api/yang/sonic/nocsys-platform-types.yang
//  - ../api/yang/sonic/nocsys-platform.yang
//  - ../api/yang/sonic/nocsys-lldp.yang
//  - ../api/yang/sonic/nocsys-mirror-session.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/sonic/third_party/ietf/iana-if-type.yang
//  - ../api/yang/sonic/third_party/openconfig/openconfig-types.yang
//  - ../api/yang/sonic/third_party/openconfig/openconfig-extensions.yang
//  - ../api/yang/sonic/nocsys-todo.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: accton_vlan.proto

package sonic

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope int32

const (
	AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_SCOPE_UNSET  AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope = 0
	AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_SCOPE_global AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope = 1
	AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_SCOPE_local  AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope = 2
)

// Enum value maps for AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope.
var (
	AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope_name = map[int32]string{
		0: "SCOPE_UNSET",
		1: "SCOPE_global",
		2: "SCOPE_local",
	}
	AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope_value = map[string]int32{
		"SCOPE_UNSET":  0,
		"SCOPE_global": 1,
		"SCOPE_local":  2,
	}
)

func (x AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope) Enum() *AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope {
	p := new(AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope)
	*p = x
	return p
}

func (x AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_accton_vlan_proto_enumTypes[0].Descriptor()
}

func (AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope) Type() protoreflect.EnumType {
	return &file_accton_vlan_proto_enumTypes[0]
}

func (x AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope.Descriptor instead.
func (AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope) EnumDescriptor() ([]byte, []int) {
	return file_accton_vlan_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type AcctonVlan_VlanMember_VlanMemberList_TaggingMode int32

const (
	AcctonVlan_VlanMember_VlanMemberList_TAGGINGMODE_UNSET           AcctonVlan_VlanMember_VlanMemberList_TaggingMode = 0
	AcctonVlan_VlanMember_VlanMemberList_TAGGINGMODE_tagged          AcctonVlan_VlanMember_VlanMemberList_TaggingMode = 1
	AcctonVlan_VlanMember_VlanMemberList_TAGGINGMODE_untagged        AcctonVlan_VlanMember_VlanMemberList_TaggingMode = 2
	AcctonVlan_VlanMember_VlanMemberList_TAGGINGMODE_priority_tagged AcctonVlan_VlanMember_VlanMemberList_TaggingMode = 3
)

// Enum value maps for AcctonVlan_VlanMember_VlanMemberList_TaggingMode.
var (
	AcctonVlan_VlanMember_VlanMemberList_TaggingMode_name = map[int32]string{
		0: "TAGGINGMODE_UNSET",
		1: "TAGGINGMODE_tagged",
		2: "TAGGINGMODE_untagged",
		3: "TAGGINGMODE_priority_tagged",
	}
	AcctonVlan_VlanMember_VlanMemberList_TaggingMode_value = map[string]int32{
		"TAGGINGMODE_UNSET":           0,
		"TAGGINGMODE_tagged":          1,
		"TAGGINGMODE_untagged":        2,
		"TAGGINGMODE_priority_tagged": 3,
	}
)

func (x AcctonVlan_VlanMember_VlanMemberList_TaggingMode) Enum() *AcctonVlan_VlanMember_VlanMemberList_TaggingMode {
	p := new(AcctonVlan_VlanMember_VlanMemberList_TaggingMode)
	*p = x
	return p
}

func (x AcctonVlan_VlanMember_VlanMemberList_TaggingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcctonVlan_VlanMember_VlanMemberList_TaggingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_accton_vlan_proto_enumTypes[1].Descriptor()
}

func (AcctonVlan_VlanMember_VlanMemberList_TaggingMode) Type() protoreflect.EnumType {
	return &file_accton_vlan_proto_enumTypes[1]
}

func (x AcctonVlan_VlanMember_VlanMemberList_TaggingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcctonVlan_VlanMember_VlanMemberList_TaggingMode.Descriptor instead.
func (AcctonVlan_VlanMember_VlanMemberList_TaggingMode) EnumDescriptor() ([]byte, []int) {
	return file_accton_vlan_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

type AcctonVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vlan          *AcctonVlan_Vlan          `protobuf:"bytes,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	VlanInterface *AcctonVlan_VlanInterface `protobuf:"bytes,2,opt,name=vlan_interface,json=vlanInterface,proto3" json:"vlan_interface,omitempty"`
	VlanMember    *AcctonVlan_VlanMember    `protobuf:"bytes,3,opt,name=vlan_member,json=vlanMember,proto3" json:"vlan_member,omitempty"`
}

func (x *AcctonVlan) Reset() {
	*x = AcctonVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_vlan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonVlan) ProtoMessage() {}

func (x *AcctonVlan) ProtoReflect() protoreflect.Message {
	mi := &file_accton_vlan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonVlan.ProtoReflect.Descriptor instead.
func (*AcctonVlan) Descriptor() ([]byte, []int) {
	return file_accton_vlan_proto_rawDescGZIP(), []int{0}
}

func (x *AcctonVlan) GetVlan() *AcctonVlan_Vlan {
	if x != nil {
		return x.Vlan
	}
	return nil
}

func (x *AcctonVlan) GetVlanInterface() *AcctonVlan_VlanInterface {
	if x != nil {
		return x.VlanInterface
	}
	return nil
}

func (x *AcctonVlan) GetVlanMember() *AcctonVlan_VlanMember {
	if x != nil {
		return x.VlanMember
	}
	return nil
}

type AcctonVlan_Vlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanList []*AcctonVlan_Vlan_VlanListKey `protobuf:"bytes,1,rep,name=vlan_list,json=vlanList,proto3" json:"vlan_list,omitempty"`
}

func (x *AcctonVlan_Vlan) Reset() {
	*x = AcctonVlan_Vlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_vlan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonVlan_Vlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonVlan_Vlan) ProtoMessage() {}

func (x *AcctonVlan_Vlan) ProtoReflect() protoreflect.Message {
	mi := &file_accton_vlan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonVlan_Vlan.ProtoReflect.Descriptor instead.
func (*AcctonVlan_Vlan) Descriptor() ([]byte, []int) {
	return file_accton_vlan_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AcctonVlan_Vlan) GetVlanList() []*AcctonVlan_Vlan_VlanListKey {
	if x != nil {
		return x.VlanList
	}
	return nil
}

type AcctonVlan_VlanInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanInterfaceIpprefixList []*AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey `protobuf:"bytes,1,rep,name=vlan_interface_ipprefix_list,json=vlanInterfaceIpprefixList,proto3" json:"vlan_interface_ipprefix_list,omitempty"`
	VlanInterfaceList         []*AcctonVlan_VlanInterface_VlanInterfaceListKey         `protobuf:"bytes,2,rep,name=vlan_interface_list,json=vlanInterfaceList,proto3" json:"vlan_interface_list,omitempty"`
}

func (x *AcctonVlan_VlanInterface) Reset() {
	*x = AcctonVlan_VlanInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_vlan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonVlan_VlanInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonVlan_VlanInterface) ProtoMessage() {}

func (x *AcctonVlan_VlanInterface) ProtoReflect() protoreflect.Message {
	mi := &file_accton_vlan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonVlan_VlanInterface.ProtoReflect.Descriptor instead.
func (*AcctonVlan_VlanInterface) Descriptor() ([]byte, []int) {
	return file_accton_vlan_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AcctonVlan_VlanInterface) GetVlanInterfaceIpprefixList() []*AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey {
	if x != nil {
		return x.VlanInterfaceIpprefixList
	}
	return nil
}

func (x *AcctonVlan_VlanInterface) GetVlanInterfaceList() []*AcctonVlan_VlanInterface_VlanInterfaceListKey {
	if x != nil {
		return x.VlanInterfaceList
	}
	return nil
}

type AcctonVlan_VlanMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanMemberList []*AcctonVlan_VlanMember_VlanMemberListKey `protobuf:"bytes,1,rep,name=vlan_member_list,json=vlanMemberList,proto3" json:"vlan_member_list,omitempty"`
}

func (x *AcctonVlan_VlanMember) Reset() {
	*x = AcctonVlan_VlanMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_vlan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonVlan_VlanMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonVlan_VlanMember) ProtoMessage() {}

func (x *AcctonVlan_VlanMember) ProtoReflect() protoreflect.Message {
	mi := &file_accton_vlan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonVlan_VlanMember.ProtoReflect.Descriptor instead.
func (*AcctonVlan_VlanMember) Descriptor() ([]byte, []int) {
	return file_accton_vlan_proto_rawDescGZIP(), []int{0, 2}
}

func (x *AcctonVlan_VlanMember) GetVlanMemberList() []*AcctonVlan_VlanMember_VlanMemberListKey {
	if x != nil {
		return x.VlanMemberList
	}
	return nil
}

type AcctonVlan_Vlan_VlanList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminStatus AcctonTypesAdminStatus  `protobuf:"varint,1,opt,name=admin_status,json=adminStatus,proto3,enum=sonic.AcctonTypesAdminStatus" json:"admin_status,omitempty"`
	Description *ywrapper.StringValue   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DhcpServers []*ywrapper.StringValue `protobuf:"bytes,3,rep,name=dhcp_servers,json=dhcpServers,proto3" json:"dhcp_servers,omitempty"`
	Members     []*ywrapper.StringValue `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	Mtu         *ywrapper.UintValue     `protobuf:"bytes,5,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Vlanid      *ywrapper.UintValue     `protobuf:"bytes,6,opt,name=vlanid,proto3" json:"vlanid,omitempty"`
}

func (x *AcctonVlan_Vlan_VlanList) Reset() {
	*x = AcctonVlan_Vlan_VlanList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_vlan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonVlan_Vlan_VlanList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonVlan_Vlan_VlanList) ProtoMessage() {}

func (x *AcctonVlan_Vlan_VlanList) ProtoReflect() protoreflect.Message {
	mi := &file_accton_vlan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonVlan_Vlan_VlanList.ProtoReflect.Descriptor instead.
func (*AcctonVlan_Vlan_VlanList) Descriptor() ([]byte, []int) {
	return file_accton_vlan_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *AcctonVlan_Vlan_VlanList) GetAdminStatus() AcctonTypesAdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return AcctonTypesAdminStatus_ACCTONTYPESADMINSTATUS_UNSET
}

func (x *AcctonVlan_Vlan_VlanList) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AcctonVlan_Vlan_VlanList) GetDhcpServers() []*ywrapper.StringValue {
	if x != nil {
		return x.DhcpServers
	}
	return nil
}

func (x *AcctonVlan_Vlan_VlanList) GetMembers() []*ywrapper.StringValue {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *AcctonVlan_Vlan_VlanList) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

func (x *AcctonVlan_Vlan_VlanList) GetVlanid() *ywrapper.UintValue {
	if x != nil {
		return x.Vlanid
	}
	return nil
}

type AcctonVlan_Vlan_VlanListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanName string                    `protobuf:"bytes,1,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
	VlanList *AcctonVlan_Vlan_VlanList `protobuf:"bytes,2,opt,name=vlan_list,json=vlanList,proto3" json:"vlan_list,omitempty"`
}

func (x *AcctonVlan_Vlan_VlanListKey) Reset() {
	*x = AcctonVlan_Vlan_VlanListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_vlan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonVlan_Vlan_VlanListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonVlan_Vlan_VlanListKey) ProtoMessage() {}

func (x *AcctonVlan_Vlan_VlanListKey) ProtoReflect() protoreflect.Message {
	mi := &file_accton_vlan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonVlan_Vlan_VlanListKey.ProtoReflect.Descriptor instead.
func (*AcctonVlan_Vlan_VlanListKey) Descriptor() ([]byte, []int) {
	return file_accton_vlan_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *AcctonVlan_Vlan_VlanListKey) GetVlanName() string {
	if x != nil {
		return x.VlanName
	}
	return ""
}

func (x *AcctonVlan_Vlan_VlanListKey) GetVlanList() *AcctonVlan_Vlan_VlanList {
	if x != nil {
		return x.VlanList
	}
	return nil
}

type AcctonVlan_VlanInterface_VlanInterfaceIpprefixList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family AcctonTypesIpFamily                                      `protobuf:"varint,1,opt,name=family,proto3,enum=sonic.AcctonTypesIpFamily" json:"family,omitempty"`
	Scope  AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope `protobuf:"varint,2,opt,name=scope,proto3,enum=sonic.AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope" json:"scope,omitempty"`
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceIpprefixList) Reset() {
	*x = AcctonVlan_VlanInterface_VlanInterfaceIpprefixList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_vlan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceIpprefixList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonVlan_VlanInterface_VlanInterfaceIpprefixList) ProtoMessage() {}

func (x *AcctonVlan_VlanInterface_VlanInterfaceIpprefixList) ProtoReflect() protoreflect.Message {
	mi := &file_accton_vlan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonVlan_VlanInterface_VlanInterfaceIpprefixList.ProtoReflect.Descriptor instead.
func (*AcctonVlan_VlanInterface_VlanInterfaceIpprefixList) Descriptor() ([]byte, []int) {
	return file_accton_vlan_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceIpprefixList) GetFamily() AcctonTypesIpFamily {
	if x != nil {
		return x.Family
	}
	return AcctonTypesIpFamily_ACCTONTYPESIPFAMILY_UNSET
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceIpprefixList) GetScope() AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope {
	if x != nil {
		return x.Scope
	}
	return AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_SCOPE_UNSET
}

type AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanName                  string                                              `protobuf:"bytes,1,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
	IpPrefix                  string                                              `protobuf:"bytes,2,opt,name=ip_prefix,json=ipPrefix,proto3" json:"ip_prefix,omitempty"`
	VlanInterfaceIpprefixList *AcctonVlan_VlanInterface_VlanInterfaceIpprefixList `protobuf:"bytes,3,opt,name=vlan_interface_ipprefix_list,json=vlanInterfaceIpprefixList,proto3" json:"vlan_interface_ipprefix_list,omitempty"`
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey) Reset() {
	*x = AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_vlan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey) ProtoMessage() {}

func (x *AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey) ProtoReflect() protoreflect.Message {
	mi := &file_accton_vlan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey.ProtoReflect.Descriptor instead.
func (*AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey) Descriptor() ([]byte, []int) {
	return file_accton_vlan_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey) GetVlanName() string {
	if x != nil {
		return x.VlanName
	}
	return ""
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey) GetIpPrefix() string {
	if x != nil {
		return x.IpPrefix
	}
	return ""
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey) GetVlanInterfaceIpprefixList() *AcctonVlan_VlanInterface_VlanInterfaceIpprefixList {
	if x != nil {
		return x.VlanInterfaceIpprefixList
	}
	return nil
}

type AcctonVlan_VlanInterface_VlanInterfaceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrfName *ywrapper.StringValue `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceList) Reset() {
	*x = AcctonVlan_VlanInterface_VlanInterfaceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_vlan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonVlan_VlanInterface_VlanInterfaceList) ProtoMessage() {}

func (x *AcctonVlan_VlanInterface_VlanInterfaceList) ProtoReflect() protoreflect.Message {
	mi := &file_accton_vlan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonVlan_VlanInterface_VlanInterfaceList.ProtoReflect.Descriptor instead.
func (*AcctonVlan_VlanInterface_VlanInterfaceList) Descriptor() ([]byte, []int) {
	return file_accton_vlan_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceList) GetVrfName() *ywrapper.StringValue {
	if x != nil {
		return x.VrfName
	}
	return nil
}

type AcctonVlan_VlanInterface_VlanInterfaceListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanName          string                                      `protobuf:"bytes,1,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
	VlanInterfaceList *AcctonVlan_VlanInterface_VlanInterfaceList `protobuf:"bytes,2,opt,name=vlan_interface_list,json=vlanInterfaceList,proto3" json:"vlan_interface_list,omitempty"`
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceListKey) Reset() {
	*x = AcctonVlan_VlanInterface_VlanInterfaceListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_vlan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonVlan_VlanInterface_VlanInterfaceListKey) ProtoMessage() {}

func (x *AcctonVlan_VlanInterface_VlanInterfaceListKey) ProtoReflect() protoreflect.Message {
	mi := &file_accton_vlan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonVlan_VlanInterface_VlanInterfaceListKey.ProtoReflect.Descriptor instead.
func (*AcctonVlan_VlanInterface_VlanInterfaceListKey) Descriptor() ([]byte, []int) {
	return file_accton_vlan_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceListKey) GetVlanName() string {
	if x != nil {
		return x.VlanName
	}
	return ""
}

func (x *AcctonVlan_VlanInterface_VlanInterfaceListKey) GetVlanInterfaceList() *AcctonVlan_VlanInterface_VlanInterfaceList {
	if x != nil {
		return x.VlanInterfaceList
	}
	return nil
}

type AcctonVlan_VlanMember_VlanMemberList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaggingMode AcctonVlan_VlanMember_VlanMemberList_TaggingMode `protobuf:"varint,1,opt,name=tagging_mode,json=taggingMode,proto3,enum=sonic.AcctonVlan_VlanMember_VlanMemberList_TaggingMode" json:"tagging_mode,omitempty"`
}

func (x *AcctonVlan_VlanMember_VlanMemberList) Reset() {
	*x = AcctonVlan_VlanMember_VlanMemberList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_vlan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonVlan_VlanMember_VlanMemberList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonVlan_VlanMember_VlanMemberList) ProtoMessage() {}

func (x *AcctonVlan_VlanMember_VlanMemberList) ProtoReflect() protoreflect.Message {
	mi := &file_accton_vlan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonVlan_VlanMember_VlanMemberList.ProtoReflect.Descriptor instead.
func (*AcctonVlan_VlanMember_VlanMemberList) Descriptor() ([]byte, []int) {
	return file_accton_vlan_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *AcctonVlan_VlanMember_VlanMemberList) GetTaggingMode() AcctonVlan_VlanMember_VlanMemberList_TaggingMode {
	if x != nil {
		return x.TaggingMode
	}
	return AcctonVlan_VlanMember_VlanMemberList_TAGGINGMODE_UNSET
}

type AcctonVlan_VlanMember_VlanMemberListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanName       string                                `protobuf:"bytes,1,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
	Port           string                                `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	VlanMemberList *AcctonVlan_VlanMember_VlanMemberList `protobuf:"bytes,3,opt,name=vlan_member_list,json=vlanMemberList,proto3" json:"vlan_member_list,omitempty"`
}

func (x *AcctonVlan_VlanMember_VlanMemberListKey) Reset() {
	*x = AcctonVlan_VlanMember_VlanMemberListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accton_vlan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctonVlan_VlanMember_VlanMemberListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctonVlan_VlanMember_VlanMemberListKey) ProtoMessage() {}

func (x *AcctonVlan_VlanMember_VlanMemberListKey) ProtoReflect() protoreflect.Message {
	mi := &file_accton_vlan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctonVlan_VlanMember_VlanMemberListKey.ProtoReflect.Descriptor instead.
func (*AcctonVlan_VlanMember_VlanMemberListKey) Descriptor() ([]byte, []int) {
	return file_accton_vlan_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *AcctonVlan_VlanMember_VlanMemberListKey) GetVlanName() string {
	if x != nil {
		return x.VlanName
	}
	return ""
}

func (x *AcctonVlan_VlanMember_VlanMemberListKey) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *AcctonVlan_VlanMember_VlanMemberListKey) GetVlanMemberList() *AcctonVlan_VlanMember_VlanMemberList {
	if x != nil {
		return x.VlanMemberList
	}
	return nil
}

var File_accton_vlan_proto protoreflect.FileDescriptor

var file_accton_vlan_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x19, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x56, 0x6c,
	0x61, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x56,
	0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x42, 0x14, 0x82, 0x41, 0x11, 0x2f, 0x61, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x04,
	0x76, 0x6c, 0x61, 0x6e, 0x12, 0x66, 0x0a, 0x0e, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x2e,
	0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x1e, 0x82,
	0x41, 0x1b, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0d, 0x76,
	0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0b,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e,
	0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x1b, 0x82, 0x41, 0x18, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0a, 0x76, 0x6c,
	0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xbc, 0x06, 0x0a, 0x04, 0x56, 0x6c, 0x61,
	0x6e, 0x12, 0x5f, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63,
	0x74, 0x6f, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x61, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0xbd, 0x04, 0x0a, 0x08, 0x56, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x6d, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x63,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f,
	0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x64,
	0x68, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f,
	0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x52,
	0x0a, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e,
	0x69, 0x64, 0x1a, 0x92, 0x01, 0x0a, 0x0b, 0x56, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x45, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f,
	0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x2e,
	0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x76,
	0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xab, 0x0b, 0x0a, 0x0d, 0x56, 0x6c, 0x61, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x1c, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x56,
	0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x3b,
	0x82, 0x41, 0x38, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x70,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x19, 0x76, 0x6c, 0x61,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x13, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63,
	0x74, 0x6f, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f,
	0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x11,
	0x76, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x80, 0x03, 0x0a, 0x19, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x49, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x76, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x49, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x42, 0x42, 0x82, 0x41, 0x3f,
	0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x70, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x98, 0x01, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e,
	0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x22, 0x50, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x0c,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x10, 0x01, 0x1a, 0x09,
	0x82, 0x41, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x0b, 0x53, 0x43, 0x4f,
	0x50, 0x45, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x02, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x1a, 0xe2, 0x02, 0x0a, 0x1c, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x62, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x09, 0x69, 0x70, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x82, 0x41,
	0x42, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x70, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x08, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x7a, 0x0a,
	0x1c, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74,
	0x6f, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x70, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x19,
	0x76, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x82, 0x01, 0x0a, 0x11, 0x56, 0x6c,
	0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x6d, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x63,
	0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x72, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xd4,
	0x01, 0x0a, 0x14, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x59, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f,
	0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x56, 0x6c,
	0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xef, 0x05, 0x0a, 0x0a, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x56, 0x6c,
	0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42,
	0x2c, 0x82, 0x41, 0x29, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x76,
	0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xce, 0x02,
	0x0a, 0x0e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x95, 0x01, 0x0a, 0x0c, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e,
	0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x74,
	0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x74, 0x61, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x47, 0x47,
	0x49, 0x4e, 0x47, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x12, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x14, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x10, 0x02, 0x1a, 0x0b, 0x82, 0x41,
	0x08, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x1b, 0x54, 0x41, 0x47,
	0x47, 0x49, 0x4e, 0x47, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x10, 0x03, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x1a, 0x86,
	0x02, 0x0a, 0x11, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x61, 0x63, 0x63,
	0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61, 0x63, 0x63,
	0x74, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x55, 0x0a, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x6f, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x76, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x1b, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x63, 0x63, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x5a, 0x07, 0x2e, 0x3b, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_accton_vlan_proto_rawDescOnce sync.Once
	file_accton_vlan_proto_rawDescData = file_accton_vlan_proto_rawDesc
)

func file_accton_vlan_proto_rawDescGZIP() []byte {
	file_accton_vlan_proto_rawDescOnce.Do(func() {
		file_accton_vlan_proto_rawDescData = protoimpl.X.CompressGZIP(file_accton_vlan_proto_rawDescData)
	})
	return file_accton_vlan_proto_rawDescData
}

var file_accton_vlan_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_accton_vlan_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_accton_vlan_proto_goTypes = []interface{}{
	(AcctonVlan_VlanInterface_VlanInterfaceIpprefixList_Scope)(0), // 0: sonic.AcctonVlan.VlanInterface.VlanInterfaceIpprefixList.Scope
	(AcctonVlan_VlanMember_VlanMemberList_TaggingMode)(0),         // 1: sonic.AcctonVlan.VlanMember.VlanMemberList.TaggingMode
	(*AcctonVlan)(nil),                                            // 2: sonic.AcctonVlan
	(*AcctonVlan_Vlan)(nil),                                       // 3: sonic.AcctonVlan.Vlan
	(*AcctonVlan_VlanInterface)(nil),                              // 4: sonic.AcctonVlan.VlanInterface
	(*AcctonVlan_VlanMember)(nil),                                 // 5: sonic.AcctonVlan.VlanMember
	(*AcctonVlan_Vlan_VlanList)(nil),                              // 6: sonic.AcctonVlan.Vlan.VlanList
	(*AcctonVlan_Vlan_VlanListKey)(nil),                           // 7: sonic.AcctonVlan.Vlan.VlanListKey
	(*AcctonVlan_VlanInterface_VlanInterfaceIpprefixList)(nil),    // 8: sonic.AcctonVlan.VlanInterface.VlanInterfaceIpprefixList
	(*AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey)(nil), // 9: sonic.AcctonVlan.VlanInterface.VlanInterfaceIpprefixListKey
	(*AcctonVlan_VlanInterface_VlanInterfaceList)(nil),            // 10: sonic.AcctonVlan.VlanInterface.VlanInterfaceList
	(*AcctonVlan_VlanInterface_VlanInterfaceListKey)(nil),         // 11: sonic.AcctonVlan.VlanInterface.VlanInterfaceListKey
	(*AcctonVlan_VlanMember_VlanMemberList)(nil),                  // 12: sonic.AcctonVlan.VlanMember.VlanMemberList
	(*AcctonVlan_VlanMember_VlanMemberListKey)(nil),               // 13: sonic.AcctonVlan.VlanMember.VlanMemberListKey
	(AcctonTypesAdminStatus)(0),                                   // 14: sonic.AcctonTypesAdminStatus
	(*ywrapper.StringValue)(nil),                                  // 15: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                                    // 16: ywrapper.UintValue
	(AcctonTypesIpFamily)(0),                                      // 17: sonic.AcctonTypesIpFamily
}
var file_accton_vlan_proto_depIdxs = []int32{
	3,  // 0: sonic.AcctonVlan.vlan:type_name -> sonic.AcctonVlan.Vlan
	4,  // 1: sonic.AcctonVlan.vlan_interface:type_name -> sonic.AcctonVlan.VlanInterface
	5,  // 2: sonic.AcctonVlan.vlan_member:type_name -> sonic.AcctonVlan.VlanMember
	7,  // 3: sonic.AcctonVlan.Vlan.vlan_list:type_name -> sonic.AcctonVlan.Vlan.VlanListKey
	9,  // 4: sonic.AcctonVlan.VlanInterface.vlan_interface_ipprefix_list:type_name -> sonic.AcctonVlan.VlanInterface.VlanInterfaceIpprefixListKey
	11, // 5: sonic.AcctonVlan.VlanInterface.vlan_interface_list:type_name -> sonic.AcctonVlan.VlanInterface.VlanInterfaceListKey
	13, // 6: sonic.AcctonVlan.VlanMember.vlan_member_list:type_name -> sonic.AcctonVlan.VlanMember.VlanMemberListKey
	14, // 7: sonic.AcctonVlan.Vlan.VlanList.admin_status:type_name -> sonic.AcctonTypesAdminStatus
	15, // 8: sonic.AcctonVlan.Vlan.VlanList.description:type_name -> ywrapper.StringValue
	15, // 9: sonic.AcctonVlan.Vlan.VlanList.dhcp_servers:type_name -> ywrapper.StringValue
	15, // 10: sonic.AcctonVlan.Vlan.VlanList.members:type_name -> ywrapper.StringValue
	16, // 11: sonic.AcctonVlan.Vlan.VlanList.mtu:type_name -> ywrapper.UintValue
	16, // 12: sonic.AcctonVlan.Vlan.VlanList.vlanid:type_name -> ywrapper.UintValue
	6,  // 13: sonic.AcctonVlan.Vlan.VlanListKey.vlan_list:type_name -> sonic.AcctonVlan.Vlan.VlanList
	17, // 14: sonic.AcctonVlan.VlanInterface.VlanInterfaceIpprefixList.family:type_name -> sonic.AcctonTypesIpFamily
	0,  // 15: sonic.AcctonVlan.VlanInterface.VlanInterfaceIpprefixList.scope:type_name -> sonic.AcctonVlan.VlanInterface.VlanInterfaceIpprefixList.Scope
	8,  // 16: sonic.AcctonVlan.VlanInterface.VlanInterfaceIpprefixListKey.vlan_interface_ipprefix_list:type_name -> sonic.AcctonVlan.VlanInterface.VlanInterfaceIpprefixList
	15, // 17: sonic.AcctonVlan.VlanInterface.VlanInterfaceList.vrf_name:type_name -> ywrapper.StringValue
	10, // 18: sonic.AcctonVlan.VlanInterface.VlanInterfaceListKey.vlan_interface_list:type_name -> sonic.AcctonVlan.VlanInterface.VlanInterfaceList
	1,  // 19: sonic.AcctonVlan.VlanMember.VlanMemberList.tagging_mode:type_name -> sonic.AcctonVlan.VlanMember.VlanMemberList.TaggingMode
	12, // 20: sonic.AcctonVlan.VlanMember.VlanMemberListKey.vlan_member_list:type_name -> sonic.AcctonVlan.VlanMember.VlanMemberList
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_accton_vlan_proto_init() }
func file_accton_vlan_proto_init() {
	if File_accton_vlan_proto != nil {
		return
	}
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_accton_vlan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_vlan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonVlan_Vlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_vlan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonVlan_VlanInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_vlan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonVlan_VlanMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_vlan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonVlan_Vlan_VlanList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_vlan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonVlan_Vlan_VlanListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_vlan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonVlan_VlanInterface_VlanInterfaceIpprefixList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_vlan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonVlan_VlanInterface_VlanInterfaceIpprefixListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_vlan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonVlan_VlanInterface_VlanInterfaceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_vlan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonVlan_VlanInterface_VlanInterfaceListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_vlan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonVlan_VlanMember_VlanMemberList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accton_vlan_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctonVlan_VlanMember_VlanMemberListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accton_vlan_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accton_vlan_proto_goTypes,
		DependencyIndexes: file_accton_vlan_proto_depIdxs,
		EnumInfos:         file_accton_vlan_proto_enumTypes,
		MessageInfos:      file_accton_vlan_proto_msgTypes,
	}.Build()
	File_accton_vlan_proto = out.File
	file_accton_vlan_proto_rawDesc = nil
	file_accton_vlan_proto_goTypes = nil
	file_accton_vlan_proto_depIdxs = nil
}
