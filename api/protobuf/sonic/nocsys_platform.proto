// openconfig.nocsys_platform is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/nocsys-fdb.yang
//  - ../api/yang/sonic/nocsys-ntp.yang
//  - ../api/yang/sonic/nocsys-todo.yang
//  - ../api/yang/sonic/nocsys-types.yang
//  - ../api/yang/sonic/nocsys-route.yang
//  - ../api/yang/sonic/nocsys-extension.yang
//  - ../api/yang/sonic/nocsys-loopback-interface.yang
//  - ../api/yang/sonic/nocsys-portchannel.yang
//  - ../api/yang/sonic/nocsys-vlan.yang
//  - ../api/yang/sonic/nocsys-port.yang
//  - ../api/yang/sonic/nocsys-platform-types.yang
//  - ../api/yang/sonic/nocsys-mirror-session.yang
//  - ../api/yang/sonic/nocsys-vrf.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/sonic/third_party/ietf/iana-if-type.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/sonic/nocsys-neighbor.yang
//  - ../api/yang/sonic/nocsys-acl.yang
//  - ../api/yang/sonic/nocsys-vxlan.yang
//  - ../api/yang/sonic/nocsys-platform.yang
//  - ../api/yang/sonic/nocsys-interface.yang
//  - ../api/yang/sonic/nocsys-lldp.yang
syntax = "proto3";

package sonic;
option java_package = "com.nocsys.sonic";
option go_package = ".;sonic";

import "ywrapper.proto";
import "yext.proto";
import "enums.proto";

message SonicPlatform {
  message Platform {
    message ComponentList {
      message Config {
        ywrapper.StringValue name = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/config/name"];
      }
      message Fan {
        message Config {
        }
        message State {
          ywrapper.UintValue speed = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/fan/state/speed"];
        }
        Config config = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/fan/config"];
        State state = 2 [(yext.schemapath) = "/sonic-platform/platform/component-list/fan/state"];
      }
      message PowerSupply {
        message Config {
          ywrapper.BoolValue enabled = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/power-supply/config/enabled"];
        }
        message State {
          ywrapper.BoolValue enabled = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/power-supply/state/enabled"];
        }
        Config config = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/power-supply/config"];
        State state = 2 [(yext.schemapath) = "/sonic-platform/platform/component-list/power-supply/state"];
      }
      message Properrties {
        message Property {
          message Config {
            ywrapper.StringValue name = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/properrties/property/config/name"];
            oneof value {
              bool value_bool = 3;
              sint64 value_sint64 = 4;
              string value_string = 5;
              uint64 value_uint64 = 6;
              ywrapper.Decimal64Value value_decimal64value = 7;
            }
          }
          message State {
            ywrapper.BoolValue configurable = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/properrties/property/state/configurable"];
            ywrapper.StringValue name = 2 [(yext.schemapath) = "/sonic-platform/platform/component-list/properrties/property/state/name"];
            oneof value {
              bool value_bool = 4;
              sint64 value_sint64 = 5;
              string value_string = 6;
              uint64 value_uint64 = 7;
              ywrapper.Decimal64Value value_decimal64value = 8;
            }
          }
          Config config = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/properrties/property/config"];
          State state = 2 [(yext.schemapath) = "/sonic-platform/platform/component-list/properrties/property/state"];
        }
        message PropertyKey {
          string name = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/properrties/property/name"];
          Property property = 2;
        }
        repeated PropertyKey property = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/properrties/property"];
      }
      message State {
        message Temperature {
          ywrapper.Decimal64Value instant = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/state/temperature/instant"];
        }
        ywrapper.StringValue hardware_version = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/state/hardware-version"];
        ywrapper.StringValue mfg_date = 2 [(yext.schemapath) = "/sonic-platform/platform/component-list/state/mfg-date"];
        ywrapper.StringValue mfg_name = 3 [(yext.schemapath) = "/sonic-platform/platform/component-list/state/mfg-name"];
        ywrapper.StringValue part_no = 4 [(yext.schemapath) = "/sonic-platform/platform/component-list/state/part-no"];
        ywrapper.StringValue serial_no = 5 [(yext.schemapath) = "/sonic-platform/platform/component-list/state/serial-no"];
        ywrapper.StringValue software_version = 6 [(yext.schemapath) = "/sonic-platform/platform/component-list/state/software-version"];
        Temperature temperature = 7 [(yext.schemapath) = "/sonic-platform/platform/component-list/state/temperature"];
        oneof type {
          sonic.NocsysPlatformTypesSONICHARDWARECOMPONENT type_nocsysplatformtypessonichardwarecomponent = 9;
          sonic.NocsysPlatformTypesSONICSOFTWARECOMPONENT type_nocsysplatformtypessonicsoftwarecomponent = 10;
        }
      }
      Config config = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/config"];
      Fan fan = 2 [(yext.schemapath) = "/sonic-platform/platform/component-list/fan"];
      PowerSupply power_supply = 3 [(yext.schemapath) = "/sonic-platform/platform/component-list/power-supply"];
      Properrties properrties = 4 [(yext.schemapath) = "/sonic-platform/platform/component-list/properrties"];
      State state = 5 [(yext.schemapath) = "/sonic-platform/platform/component-list/state"];
    }
    message ComponentListKey {
      string name = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list/name"];
      ComponentList component_list = 2;
    }
    repeated ComponentListKey component_list = 1 [(yext.schemapath) = "/sonic-platform/platform/component-list"];
  }
  Platform platform = 1 [(yext.schemapath) = "/sonic-platform/platform"];
}
