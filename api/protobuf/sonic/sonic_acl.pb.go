// openconfig.sonic_acl is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/sonic-platform.yang
//  - ../api/yang/sonic/sonic-interface.yang
//  - ../api/yang/sonic/sonic-port.yang
//  - ../api/yang/sonic/sonic-ntp.yang
//  - ../api/yang/sonic/sonic-vrf.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/sonic/third_party/ietf/iana-if-type.yang
//  - ../api/yang/sonic/sonic-loopback-interface.yang
//  - ../api/yang/sonic/sonic-platform-types.yang
//  - ../api/yang/sonic/sonic-neighbor.yang
//  - ../api/yang/sonic/sonic-route.yang
//  - ../api/yang/sonic/sonic-lldp.yang
//  - ../api/yang/sonic/sonic-vlan.yang
//  - ../api/yang/sonic/sonic-portchannel.yang
//  - ../api/yang/sonic/sonic-extension.yang
//  - ../api/yang/sonic/sonic-mirror-session.yang
//  - ../api/yang/sonic/sonic-vxlan.yang
//  - ../api/yang/sonic/sonic-fdb.yang
//  - ../api/yang/sonic/sonic-acl.yang
//  - ../api/yang/sonic/sonic-types.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: sonic_acl.proto

package sonic

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SonicAcl_AclRule_AclRuleList_EtherType int32

const (
	SonicAcl_AclRule_AclRuleList_ETHERTYPE_UNSET SonicAcl_AclRule_AclRuleList_EtherType = 0
	SonicAcl_AclRule_AclRuleList_ETHERTYPE_LLDP  SonicAcl_AclRule_AclRuleList_EtherType = 1
	SonicAcl_AclRule_AclRuleList_ETHERTYPE_VLAN  SonicAcl_AclRule_AclRuleList_EtherType = 2
	SonicAcl_AclRule_AclRuleList_ETHERTYPE_ROCE  SonicAcl_AclRule_AclRuleList_EtherType = 3
	SonicAcl_AclRule_AclRuleList_ETHERTYPE_ARP   SonicAcl_AclRule_AclRuleList_EtherType = 4
	SonicAcl_AclRule_AclRuleList_ETHERTYPE_IPV4  SonicAcl_AclRule_AclRuleList_EtherType = 5
	SonicAcl_AclRule_AclRuleList_ETHERTYPE_IPV6  SonicAcl_AclRule_AclRuleList_EtherType = 6
	SonicAcl_AclRule_AclRuleList_ETHERTYPE_MPLS  SonicAcl_AclRule_AclRuleList_EtherType = 7
)

// Enum value maps for SonicAcl_AclRule_AclRuleList_EtherType.
var (
	SonicAcl_AclRule_AclRuleList_EtherType_name = map[int32]string{
		0: "ETHERTYPE_UNSET",
		1: "ETHERTYPE_LLDP",
		2: "ETHERTYPE_VLAN",
		3: "ETHERTYPE_ROCE",
		4: "ETHERTYPE_ARP",
		5: "ETHERTYPE_IPV4",
		6: "ETHERTYPE_IPV6",
		7: "ETHERTYPE_MPLS",
	}
	SonicAcl_AclRule_AclRuleList_EtherType_value = map[string]int32{
		"ETHERTYPE_UNSET": 0,
		"ETHERTYPE_LLDP":  1,
		"ETHERTYPE_VLAN":  2,
		"ETHERTYPE_ROCE":  3,
		"ETHERTYPE_ARP":   4,
		"ETHERTYPE_IPV4":  5,
		"ETHERTYPE_IPV6":  6,
		"ETHERTYPE_MPLS":  7,
	}
)

func (x SonicAcl_AclRule_AclRuleList_EtherType) Enum() *SonicAcl_AclRule_AclRuleList_EtherType {
	p := new(SonicAcl_AclRule_AclRuleList_EtherType)
	*p = x
	return p
}

func (x SonicAcl_AclRule_AclRuleList_EtherType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicAcl_AclRule_AclRuleList_EtherType) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_acl_proto_enumTypes[0].Descriptor()
}

func (SonicAcl_AclRule_AclRuleList_EtherType) Type() protoreflect.EnumType {
	return &file_sonic_acl_proto_enumTypes[0]
}

func (x SonicAcl_AclRule_AclRuleList_EtherType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicAcl_AclRule_AclRuleList_EtherType.Descriptor instead.
func (SonicAcl_AclRule_AclRuleList_EtherType) EnumDescriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type SonicAcl_AclRule_AclRuleList_IpProtocol int32

const (
	SonicAcl_AclRule_AclRuleList_IPPROTOCOL_UNSET SonicAcl_AclRule_AclRuleList_IpProtocol = 0
	SonicAcl_AclRule_AclRuleList_IPPROTOCOL_TCP   SonicAcl_AclRule_AclRuleList_IpProtocol = 1
	SonicAcl_AclRule_AclRuleList_IPPROTOCOL_ICMP  SonicAcl_AclRule_AclRuleList_IpProtocol = 2
	SonicAcl_AclRule_AclRuleList_IPPROTOCOL_UDP   SonicAcl_AclRule_AclRuleList_IpProtocol = 3
	SonicAcl_AclRule_AclRuleList_IPPROTOCOL_IGMP  SonicAcl_AclRule_AclRuleList_IpProtocol = 4
	SonicAcl_AclRule_AclRuleList_IPPROTOCOL_PIM   SonicAcl_AclRule_AclRuleList_IpProtocol = 5
	SonicAcl_AclRule_AclRuleList_IPPROTOCOL_RSVP  SonicAcl_AclRule_AclRuleList_IpProtocol = 6
	SonicAcl_AclRule_AclRuleList_IPPROTOCOL_GRE   SonicAcl_AclRule_AclRuleList_IpProtocol = 7
	SonicAcl_AclRule_AclRuleList_IPPROTOCOL_AUTH  SonicAcl_AclRule_AclRuleList_IpProtocol = 8
	SonicAcl_AclRule_AclRuleList_IPPROTOCOL_L2TP  SonicAcl_AclRule_AclRuleList_IpProtocol = 9
)

// Enum value maps for SonicAcl_AclRule_AclRuleList_IpProtocol.
var (
	SonicAcl_AclRule_AclRuleList_IpProtocol_name = map[int32]string{
		0: "IPPROTOCOL_UNSET",
		1: "IPPROTOCOL_TCP",
		2: "IPPROTOCOL_ICMP",
		3: "IPPROTOCOL_UDP",
		4: "IPPROTOCOL_IGMP",
		5: "IPPROTOCOL_PIM",
		6: "IPPROTOCOL_RSVP",
		7: "IPPROTOCOL_GRE",
		8: "IPPROTOCOL_AUTH",
		9: "IPPROTOCOL_L2TP",
	}
	SonicAcl_AclRule_AclRuleList_IpProtocol_value = map[string]int32{
		"IPPROTOCOL_UNSET": 0,
		"IPPROTOCOL_TCP":   1,
		"IPPROTOCOL_ICMP":  2,
		"IPPROTOCOL_UDP":   3,
		"IPPROTOCOL_IGMP":  4,
		"IPPROTOCOL_PIM":   5,
		"IPPROTOCOL_RSVP":  6,
		"IPPROTOCOL_GRE":   7,
		"IPPROTOCOL_AUTH":  8,
		"IPPROTOCOL_L2TP":  9,
	}
)

func (x SonicAcl_AclRule_AclRuleList_IpProtocol) Enum() *SonicAcl_AclRule_AclRuleList_IpProtocol {
	p := new(SonicAcl_AclRule_AclRuleList_IpProtocol)
	*p = x
	return p
}

func (x SonicAcl_AclRule_AclRuleList_IpProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicAcl_AclRule_AclRuleList_IpProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_acl_proto_enumTypes[1].Descriptor()
}

func (SonicAcl_AclRule_AclRuleList_IpProtocol) Type() protoreflect.EnumType {
	return &file_sonic_acl_proto_enumTypes[1]
}

func (x SonicAcl_AclRule_AclRuleList_IpProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicAcl_AclRule_AclRuleList_IpProtocol.Descriptor instead.
func (SonicAcl_AclRule_AclRuleList_IpProtocol) EnumDescriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

type SonicAcl_AclTable_AclTableList_Stage int32

const (
	SonicAcl_AclTable_AclTableList_STAGE_UNSET   SonicAcl_AclTable_AclTableList_Stage = 0
	SonicAcl_AclTable_AclTableList_STAGE_INGRESS SonicAcl_AclTable_AclTableList_Stage = 1
	SonicAcl_AclTable_AclTableList_STAGE_EGRESS  SonicAcl_AclTable_AclTableList_Stage = 2
)

// Enum value maps for SonicAcl_AclTable_AclTableList_Stage.
var (
	SonicAcl_AclTable_AclTableList_Stage_name = map[int32]string{
		0: "STAGE_UNSET",
		1: "STAGE_INGRESS",
		2: "STAGE_EGRESS",
	}
	SonicAcl_AclTable_AclTableList_Stage_value = map[string]int32{
		"STAGE_UNSET":   0,
		"STAGE_INGRESS": 1,
		"STAGE_EGRESS":  2,
	}
)

func (x SonicAcl_AclTable_AclTableList_Stage) Enum() *SonicAcl_AclTable_AclTableList_Stage {
	p := new(SonicAcl_AclTable_AclTableList_Stage)
	*p = x
	return p
}

func (x SonicAcl_AclTable_AclTableList_Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicAcl_AclTable_AclTableList_Stage) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_acl_proto_enumTypes[2].Descriptor()
}

func (SonicAcl_AclTable_AclTableList_Stage) Type() protoreflect.EnumType {
	return &file_sonic_acl_proto_enumTypes[2]
}

func (x SonicAcl_AclTable_AclTableList_Stage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicAcl_AclTable_AclTableList_Stage.Descriptor instead.
func (SonicAcl_AclTable_AclTableList_Stage) EnumDescriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type SonicAcl_AclTable_AclTableList_Type int32

const (
	SonicAcl_AclTable_AclTableList_TYPE_UNSET       SonicAcl_AclTable_AclTableList_Type = 0
	SonicAcl_AclTable_AclTableList_TYPE_L2          SonicAcl_AclTable_AclTableList_Type = 1
	SonicAcl_AclTable_AclTableList_TYPE_L3          SonicAcl_AclTable_AclTableList_Type = 2
	SonicAcl_AclTable_AclTableList_TYPE_L3V6        SonicAcl_AclTable_AclTableList_Type = 3
	SonicAcl_AclTable_AclTableList_TYPE_MIRROR      SonicAcl_AclTable_AclTableList_Type = 4
	SonicAcl_AclTable_AclTableList_TYPE_MIRRORV6    SonicAcl_AclTable_AclTableList_Type = 5
	SonicAcl_AclTable_AclTableList_TYPE_MIRROR_DSCP SonicAcl_AclTable_AclTableList_Type = 6
	SonicAcl_AclTable_AclTableList_TYPE_CTRLPLANE   SonicAcl_AclTable_AclTableList_Type = 7
)

// Enum value maps for SonicAcl_AclTable_AclTableList_Type.
var (
	SonicAcl_AclTable_AclTableList_Type_name = map[int32]string{
		0: "TYPE_UNSET",
		1: "TYPE_L2",
		2: "TYPE_L3",
		3: "TYPE_L3V6",
		4: "TYPE_MIRROR",
		5: "TYPE_MIRRORV6",
		6: "TYPE_MIRROR_DSCP",
		7: "TYPE_CTRLPLANE",
	}
	SonicAcl_AclTable_AclTableList_Type_value = map[string]int32{
		"TYPE_UNSET":       0,
		"TYPE_L2":          1,
		"TYPE_L3":          2,
		"TYPE_L3V6":        3,
		"TYPE_MIRROR":      4,
		"TYPE_MIRRORV6":    5,
		"TYPE_MIRROR_DSCP": 6,
		"TYPE_CTRLPLANE":   7,
	}
)

func (x SonicAcl_AclTable_AclTableList_Type) Enum() *SonicAcl_AclTable_AclTableList_Type {
	p := new(SonicAcl_AclTable_AclTableList_Type)
	*p = x
	return p
}

func (x SonicAcl_AclTable_AclTableList_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicAcl_AclTable_AclTableList_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_acl_proto_enumTypes[3].Descriptor()
}

func (SonicAcl_AclTable_AclTableList_Type) Type() protoreflect.EnumType {
	return &file_sonic_acl_proto_enumTypes[3]
}

func (x SonicAcl_AclTable_AclTableList_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicAcl_AclTable_AclTableList_Type.Descriptor instead.
func (SonicAcl_AclTable_AclTableList_Type) EnumDescriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

type SonicAcl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclRule  *SonicAcl_AclRule  `protobuf:"bytes,1,opt,name=acl_rule,json=aclRule,proto3" json:"acl_rule,omitempty"`
	AclTable *SonicAcl_AclTable `protobuf:"bytes,2,opt,name=acl_table,json=aclTable,proto3" json:"acl_table,omitempty"`
}

func (x *SonicAcl) Reset() {
	*x = SonicAcl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_acl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicAcl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicAcl) ProtoMessage() {}

func (x *SonicAcl) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_acl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicAcl.ProtoReflect.Descriptor instead.
func (*SonicAcl) Descriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0}
}

func (x *SonicAcl) GetAclRule() *SonicAcl_AclRule {
	if x != nil {
		return x.AclRule
	}
	return nil
}

func (x *SonicAcl) GetAclTable() *SonicAcl_AclTable {
	if x != nil {
		return x.AclTable
	}
	return nil
}

type SonicAcl_AclRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclRuleList []*SonicAcl_AclRule_AclRuleListKey `protobuf:"bytes,1,rep,name=acl_rule_list,json=aclRuleList,proto3" json:"acl_rule_list,omitempty"`
}

func (x *SonicAcl_AclRule) Reset() {
	*x = SonicAcl_AclRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_acl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicAcl_AclRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicAcl_AclRule) ProtoMessage() {}

func (x *SonicAcl_AclRule) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_acl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicAcl_AclRule.ProtoReflect.Descriptor instead.
func (*SonicAcl_AclRule) Descriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SonicAcl_AclRule) GetAclRuleList() []*SonicAcl_AclRule_AclRuleListKey {
	if x != nil {
		return x.AclRuleList
	}
	return nil
}

type SonicAcl_AclTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclTableList []*SonicAcl_AclTable_AclTableListKey `protobuf:"bytes,1,rep,name=acl_table_list,json=aclTableList,proto3" json:"acl_table_list,omitempty"`
}

func (x *SonicAcl_AclTable) Reset() {
	*x = SonicAcl_AclTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_acl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicAcl_AclTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicAcl_AclTable) ProtoMessage() {}

func (x *SonicAcl_AclTable) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_acl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicAcl_AclTable.ProtoReflect.Descriptor instead.
func (*SonicAcl_AclTable) Descriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SonicAcl_AclTable) GetAclTableList() []*SonicAcl_AclTable_AclTableListKey {
	if x != nil {
		return x.AclTableList
	}
	return nil
}

type SonicAcl_AclRule_AclRuleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dscp                *ywrapper.UintValue                     `protobuf:"bytes,1,opt,name=dscp,proto3" json:"dscp,omitempty"`
	DstIp               *ywrapper.StringValue                   `protobuf:"bytes,2,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	DstIpv6             *ywrapper.StringValue                   `protobuf:"bytes,3,opt,name=dst_ipv6,json=dstIpv6,proto3" json:"dst_ipv6,omitempty"`
	EtherType           SonicAcl_AclRule_AclRuleList_EtherType  `protobuf:"varint,4,opt,name=ether_type,json=etherType,proto3,enum=sonic.SonicAcl_AclRule_AclRuleList_EtherType" json:"ether_type,omitempty"`
	InPorts             []*ywrapper.StringValue                 `protobuf:"bytes,5,rep,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	IpProtocol          SonicAcl_AclRule_AclRuleList_IpProtocol `protobuf:"varint,6,opt,name=ip_protocol,json=ipProtocol,proto3,enum=sonic.SonicAcl_AclRule_AclRuleList_IpProtocol" json:"ip_protocol,omitempty"`
	IpType              SonicTypesIpType                        `protobuf:"varint,7,opt,name=ip_type,json=ipType,proto3,enum=sonic.SonicTypesIpType" json:"ip_type,omitempty"`
	L4DstPort           *ywrapper.UintValue                     `protobuf:"bytes,8,opt,name=l4_dst_port,json=l4DstPort,proto3" json:"l4_dst_port,omitempty"`
	L4DstPortRange      *ywrapper.StringValue                   `protobuf:"bytes,9,opt,name=l4_dst_port_range,json=l4DstPortRange,proto3" json:"l4_dst_port_range,omitempty"`
	L4SrcPort           *ywrapper.UintValue                     `protobuf:"bytes,10,opt,name=l4_src_port,json=l4SrcPort,proto3" json:"l4_src_port,omitempty"`
	L4SrcPortRange      *ywrapper.StringValue                   `protobuf:"bytes,11,opt,name=l4_src_port_range,json=l4SrcPortRange,proto3" json:"l4_src_port_range,omitempty"`
	MirrorAction        *ywrapper.StringValue                   `protobuf:"bytes,12,opt,name=mirror_action,json=mirrorAction,proto3" json:"mirror_action,omitempty"`
	MirrorEgressAction  *ywrapper.StringValue                   `protobuf:"bytes,13,opt,name=mirror_egress_action,json=mirrorEgressAction,proto3" json:"mirror_egress_action,omitempty"`
	MirrorIngressAction *ywrapper.StringValue                   `protobuf:"bytes,14,opt,name=mirror_ingress_action,json=mirrorIngressAction,proto3" json:"mirror_ingress_action,omitempty"`
	OutPorts            []*ywrapper.StringValue                 `protobuf:"bytes,15,rep,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	PacketAction        SonicTypesPacketAction                  `protobuf:"varint,16,opt,name=packet_action,json=packetAction,proto3,enum=sonic.SonicTypesPacketAction" json:"packet_action,omitempty"`
	Priority            *ywrapper.UintValue                     `protobuf:"bytes,17,opt,name=priority,proto3" json:"priority,omitempty"`
	RedirectAction      *ywrapper.StringValue                   `protobuf:"bytes,18,opt,name=redirect_action,json=redirectAction,proto3" json:"redirect_action,omitempty"`
	SrcIp               *ywrapper.StringValue                   `protobuf:"bytes,19,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	SrcIpv6             *ywrapper.StringValue                   `protobuf:"bytes,20,opt,name=src_ipv6,json=srcIpv6,proto3" json:"src_ipv6,omitempty"`
	TcpFlags            *ywrapper.StringValue                   `protobuf:"bytes,21,opt,name=tcp_flags,json=tcpFlags,proto3" json:"tcp_flags,omitempty"`
}

func (x *SonicAcl_AclRule_AclRuleList) Reset() {
	*x = SonicAcl_AclRule_AclRuleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_acl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicAcl_AclRule_AclRuleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicAcl_AclRule_AclRuleList) ProtoMessage() {}

func (x *SonicAcl_AclRule_AclRuleList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_acl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicAcl_AclRule_AclRuleList.ProtoReflect.Descriptor instead.
func (*SonicAcl_AclRule_AclRuleList) Descriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *SonicAcl_AclRule_AclRuleList) GetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetDstIp() *ywrapper.StringValue {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetDstIpv6() *ywrapper.StringValue {
	if x != nil {
		return x.DstIpv6
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetEtherType() SonicAcl_AclRule_AclRuleList_EtherType {
	if x != nil {
		return x.EtherType
	}
	return SonicAcl_AclRule_AclRuleList_ETHERTYPE_UNSET
}

func (x *SonicAcl_AclRule_AclRuleList) GetInPorts() []*ywrapper.StringValue {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetIpProtocol() SonicAcl_AclRule_AclRuleList_IpProtocol {
	if x != nil {
		return x.IpProtocol
	}
	return SonicAcl_AclRule_AclRuleList_IPPROTOCOL_UNSET
}

func (x *SonicAcl_AclRule_AclRuleList) GetIpType() SonicTypesIpType {
	if x != nil {
		return x.IpType
	}
	return SonicTypesIpType_SONICTYPESIPTYPE_UNSET
}

func (x *SonicAcl_AclRule_AclRuleList) GetL4DstPort() *ywrapper.UintValue {
	if x != nil {
		return x.L4DstPort
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetL4DstPortRange() *ywrapper.StringValue {
	if x != nil {
		return x.L4DstPortRange
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetL4SrcPort() *ywrapper.UintValue {
	if x != nil {
		return x.L4SrcPort
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetL4SrcPortRange() *ywrapper.StringValue {
	if x != nil {
		return x.L4SrcPortRange
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetMirrorAction() *ywrapper.StringValue {
	if x != nil {
		return x.MirrorAction
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetMirrorEgressAction() *ywrapper.StringValue {
	if x != nil {
		return x.MirrorEgressAction
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetMirrorIngressAction() *ywrapper.StringValue {
	if x != nil {
		return x.MirrorIngressAction
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetOutPorts() []*ywrapper.StringValue {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetPacketAction() SonicTypesPacketAction {
	if x != nil {
		return x.PacketAction
	}
	return SonicTypesPacketAction_SONICTYPESPACKETACTION_UNSET
}

func (x *SonicAcl_AclRule_AclRuleList) GetPriority() *ywrapper.UintValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetRedirectAction() *ywrapper.StringValue {
	if x != nil {
		return x.RedirectAction
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetSrcIp() *ywrapper.StringValue {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetSrcIpv6() *ywrapper.StringValue {
	if x != nil {
		return x.SrcIpv6
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetTcpFlags() *ywrapper.StringValue {
	if x != nil {
		return x.TcpFlags
	}
	return nil
}

type SonicAcl_AclRule_AclRuleListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName   string                        `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	RuleName    string                        `protobuf:"bytes,2,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	AclRuleList *SonicAcl_AclRule_AclRuleList `protobuf:"bytes,3,opt,name=acl_rule_list,json=aclRuleList,proto3" json:"acl_rule_list,omitempty"`
}

func (x *SonicAcl_AclRule_AclRuleListKey) Reset() {
	*x = SonicAcl_AclRule_AclRuleListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_acl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicAcl_AclRule_AclRuleListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicAcl_AclRule_AclRuleListKey) ProtoMessage() {}

func (x *SonicAcl_AclRule_AclRuleListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_acl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicAcl_AclRule_AclRuleListKey.ProtoReflect.Descriptor instead.
func (*SonicAcl_AclRule_AclRuleListKey) Descriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *SonicAcl_AclRule_AclRuleListKey) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *SonicAcl_AclRule_AclRuleListKey) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *SonicAcl_AclRule_AclRuleListKey) GetAclRuleList() *SonicAcl_AclRule_AclRuleList {
	if x != nil {
		return x.AclRuleList
	}
	return nil
}

type SonicAcl_AclTable_AclTableList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyDesc *ywrapper.StringValue                `protobuf:"bytes,1,opt,name=policy_desc,json=policyDesc,proto3" json:"policy_desc,omitempty"`
	Ports      []*ywrapper.StringValue              `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	Stage      SonicAcl_AclTable_AclTableList_Stage `protobuf:"varint,3,opt,name=stage,proto3,enum=sonic.SonicAcl_AclTable_AclTableList_Stage" json:"stage,omitempty"`
	Type       SonicAcl_AclTable_AclTableList_Type  `protobuf:"varint,4,opt,name=type,proto3,enum=sonic.SonicAcl_AclTable_AclTableList_Type" json:"type,omitempty"`
}

func (x *SonicAcl_AclTable_AclTableList) Reset() {
	*x = SonicAcl_AclTable_AclTableList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_acl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicAcl_AclTable_AclTableList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicAcl_AclTable_AclTableList) ProtoMessage() {}

func (x *SonicAcl_AclTable_AclTableList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_acl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicAcl_AclTable_AclTableList.ProtoReflect.Descriptor instead.
func (*SonicAcl_AclTable_AclTableList) Descriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *SonicAcl_AclTable_AclTableList) GetPolicyDesc() *ywrapper.StringValue {
	if x != nil {
		return x.PolicyDesc
	}
	return nil
}

func (x *SonicAcl_AclTable_AclTableList) GetPorts() []*ywrapper.StringValue {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *SonicAcl_AclTable_AclTableList) GetStage() SonicAcl_AclTable_AclTableList_Stage {
	if x != nil {
		return x.Stage
	}
	return SonicAcl_AclTable_AclTableList_STAGE_UNSET
}

func (x *SonicAcl_AclTable_AclTableList) GetType() SonicAcl_AclTable_AclTableList_Type {
	if x != nil {
		return x.Type
	}
	return SonicAcl_AclTable_AclTableList_TYPE_UNSET
}

type SonicAcl_AclTable_AclTableListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName    string                          `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	AclTableList *SonicAcl_AclTable_AclTableList `protobuf:"bytes,2,opt,name=acl_table_list,json=aclTableList,proto3" json:"acl_table_list,omitempty"`
}

func (x *SonicAcl_AclTable_AclTableListKey) Reset() {
	*x = SonicAcl_AclTable_AclTableListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_acl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicAcl_AclTable_AclTableListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicAcl_AclTable_AclTableListKey) ProtoMessage() {}

func (x *SonicAcl_AclTable_AclTableListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_acl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicAcl_AclTable_AclTableListKey.ProtoReflect.Descriptor instead.
func (*SonicAcl_AclTable_AclTableListKey) Descriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *SonicAcl_AclTable_AclTableListKey) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *SonicAcl_AclTable_AclTableListKey) GetAclTableList() *SonicAcl_AclTable_AclTableList {
	if x != nil {
		return x.AclTableList
	}
	return nil
}

var File_sonic_acl_proto protoreflect.FileDescriptor

var file_sonic_acl_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xca, 0x22, 0x0a, 0x08, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x12, 0x4a,
	0x0a, 0x08, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63,
	0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x16, 0x82, 0x41, 0x13, 0x2f, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c,
	0x65, 0x52, 0x07, 0x61, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x61, 0x63,
	0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x2e, 0x41,
	0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x17, 0x82, 0x41, 0x14, 0x2f, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x08, 0x61, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x80, 0x19, 0x0a, 0x07, 0x41,
	0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x70, 0x0a, 0x0d, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x2e, 0x41,
	0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x89, 0x16, 0x0a, 0x0b, 0x41, 0x63, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x64, 0x73, 0x63, 0x70, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x59, 0x0a, 0x06,
	0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61,
	0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70,
	0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x5f, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c,
	0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x52,
	0x07, 0x64, 0x73, 0x74, 0x49, 0x70, 0x76, 0x36, 0x12, 0x7d, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c,
	0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x69, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x2e,
	0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x2e, 0x49, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x30,
	0x82, 0x41, 0x2d, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x52, 0x0a, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x5e, 0x0a, 0x07,
	0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x0b,
	0x6c, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6c, 0x34, 0x2d,
	0x64, 0x73, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x6c, 0x34, 0x44, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x78, 0x0a, 0x11, 0x6c, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6c, 0x34, 0x2d, 0x64,
	0x73, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x6c,
	0x34, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x65, 0x0a,
	0x0b, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6c, 0x34,
	0x2d, 0x73, 0x72, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x6c, 0x34, 0x53, 0x72, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x78, 0x0a, 0x11, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6c, 0x34, 0x2d,
	0x73, 0x72, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e,
	0x6c, 0x34, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x6e,
	0x0a, 0x0d, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41,
	0x2f, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82,
	0x01, 0x0a, 0x14, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x2d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x15, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75,
	0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x09, 0x6f,
	0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x76, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53,
	0x6f, 0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d,
	0x82, 0x41, 0x2a, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x74, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a,
	0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x72, 0x63, 0x2d, 0x69,
	0x70, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x5f, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75,
	0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x76, 0x36,
	0x52, 0x07, 0x73, 0x72, 0x63, 0x49, 0x70, 0x76, 0x36, 0x12, 0x62, 0x0a, 0x09, 0x74, 0x63, 0x70,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61,
	0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x63, 0x70, 0x2d, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x08, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xe9, 0x01,
	0x0a, 0x09, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x0e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4c,
	0x44, 0x50, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4c, 0x4c, 0x44, 0x50, 0x12, 0x1b, 0x0a,
	0x0e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10,
	0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x56, 0x4c, 0x41, 0x4e, 0x12, 0x1b, 0x0a, 0x0e, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x43, 0x45, 0x10, 0x03, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x52, 0x4f, 0x43, 0x45, 0x12, 0x19, 0x0a, 0x0d, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x50, 0x10, 0x04, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41,
	0x52, 0x50, 0x12, 0x1b, 0x0a, 0x0e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x10, 0x05, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12,
	0x1b, 0x0a, 0x0e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x10, 0x06, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x12, 0x1b, 0x0a, 0x0e,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x07,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x22, 0xa8, 0x02, 0x0a, 0x0a, 0x49, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x50, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x0e, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x54, 0x43, 0x50,
	0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x54, 0x43, 0x50, 0x12, 0x1c, 0x0a, 0x0f, 0x49, 0x50,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x02, 0x1a,
	0x07, 0x82, 0x41, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x12, 0x1a, 0x0a, 0x0e, 0x49, 0x50, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x03, 0x1a, 0x06, 0x82, 0x41,
	0x03, 0x55, 0x44, 0x50, 0x12, 0x1c, 0x0a, 0x0f, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x49, 0x47, 0x4d, 0x50, 0x10, 0x04, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x47,
	0x4d, 0x50, 0x12, 0x1a, 0x0a, 0x0e, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x50, 0x49, 0x4d, 0x10, 0x05, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x50, 0x49, 0x4d, 0x12, 0x1c,
	0x0a, 0x0f, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x53, 0x56,
	0x50, 0x10, 0x06, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x52, 0x53, 0x56, 0x50, 0x12, 0x1a, 0x0a, 0x0e,
	0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x47, 0x52, 0x45, 0x10, 0x07,
	0x1a, 0x06, 0x82, 0x41, 0x03, 0x47, 0x52, 0x45, 0x12, 0x1c, 0x0a, 0x0f, 0x49, 0x50, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x08, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x41, 0x55, 0x54, 0x48, 0x12, 0x1c, 0x0a, 0x0f, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4c, 0x32, 0x54, 0x50, 0x10, 0x09, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x4c, 0x32, 0x54, 0x50, 0x1a, 0xf6, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x82, 0x41, 0x2c,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f,
	0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75,
	0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0b, 0x61, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x9e, 0x08,
	0x0a, 0x08, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x76, 0x0a, 0x0e, 0x61, 0x63,
	0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63,
	0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x26, 0x82, 0x41,
	0x23, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0xe6, 0x05, 0x0a, 0x0c, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x32, 0x82, 0x41, 0x2f, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64,
	0x65, 0x73, 0x63, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x59, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x6b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x12, 0x1b, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x02, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x22, 0xda,
	0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x07, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x32, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x4c, 0x32, 0x12, 0x12, 0x0a, 0x07, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x10, 0x02, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x4c, 0x33, 0x12,
	0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x56, 0x36, 0x10, 0x03, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x4c, 0x33, 0x56, 0x36, 0x12, 0x1a, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4d, 0x49, 0x52,
	0x52, 0x4f, 0x52, 0x12, 0x1e, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52,
	0x4f, 0x52, 0x56, 0x36, 0x10, 0x05, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4d, 0x49, 0x52, 0x52, 0x4f,
	0x52, 0x56, 0x36, 0x12, 0x24, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x10, 0x06, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4d, 0x49,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x12, 0x20, 0x0a, 0x0e, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x54, 0x52, 0x4c, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x07, 0x1a, 0x0c, 0x82,
	0x41, 0x09, 0x43, 0x54, 0x52, 0x4c, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x1a, 0xb0, 0x01, 0x0a, 0x0f,
	0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x50, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61,
	0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x63, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6f, 0x6e, 0x69,
	0x63, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0c, 0x61, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x1b,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x5a, 0x07, 0x2e, 0x3b, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_sonic_acl_proto_rawDescOnce sync.Once
	file_sonic_acl_proto_rawDescData = file_sonic_acl_proto_rawDesc
)

func file_sonic_acl_proto_rawDescGZIP() []byte {
	file_sonic_acl_proto_rawDescOnce.Do(func() {
		file_sonic_acl_proto_rawDescData = protoimpl.X.CompressGZIP(file_sonic_acl_proto_rawDescData)
	})
	return file_sonic_acl_proto_rawDescData
}

var file_sonic_acl_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_sonic_acl_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_sonic_acl_proto_goTypes = []interface{}{
	(SonicAcl_AclRule_AclRuleList_EtherType)(0),  // 0: sonic.SonicAcl.AclRule.AclRuleList.EtherType
	(SonicAcl_AclRule_AclRuleList_IpProtocol)(0), // 1: sonic.SonicAcl.AclRule.AclRuleList.IpProtocol
	(SonicAcl_AclTable_AclTableList_Stage)(0),    // 2: sonic.SonicAcl.AclTable.AclTableList.Stage
	(SonicAcl_AclTable_AclTableList_Type)(0),     // 3: sonic.SonicAcl.AclTable.AclTableList.Type
	(*SonicAcl)(nil),                             // 4: sonic.SonicAcl
	(*SonicAcl_AclRule)(nil),                     // 5: sonic.SonicAcl.AclRule
	(*SonicAcl_AclTable)(nil),                    // 6: sonic.SonicAcl.AclTable
	(*SonicAcl_AclRule_AclRuleList)(nil),         // 7: sonic.SonicAcl.AclRule.AclRuleList
	(*SonicAcl_AclRule_AclRuleListKey)(nil),      // 8: sonic.SonicAcl.AclRule.AclRuleListKey
	(*SonicAcl_AclTable_AclTableList)(nil),       // 9: sonic.SonicAcl.AclTable.AclTableList
	(*SonicAcl_AclTable_AclTableListKey)(nil),    // 10: sonic.SonicAcl.AclTable.AclTableListKey
	(*ywrapper.UintValue)(nil),                   // 11: ywrapper.UintValue
	(*ywrapper.StringValue)(nil),                 // 12: ywrapper.StringValue
	(SonicTypesIpType)(0),                        // 13: sonic.SonicTypesIpType
	(SonicTypesPacketAction)(0),                  // 14: sonic.SonicTypesPacketAction
}
var file_sonic_acl_proto_depIdxs = []int32{
	5,  // 0: sonic.SonicAcl.acl_rule:type_name -> sonic.SonicAcl.AclRule
	6,  // 1: sonic.SonicAcl.acl_table:type_name -> sonic.SonicAcl.AclTable
	8,  // 2: sonic.SonicAcl.AclRule.acl_rule_list:type_name -> sonic.SonicAcl.AclRule.AclRuleListKey
	10, // 3: sonic.SonicAcl.AclTable.acl_table_list:type_name -> sonic.SonicAcl.AclTable.AclTableListKey
	11, // 4: sonic.SonicAcl.AclRule.AclRuleList.dscp:type_name -> ywrapper.UintValue
	12, // 5: sonic.SonicAcl.AclRule.AclRuleList.dst_ip:type_name -> ywrapper.StringValue
	12, // 6: sonic.SonicAcl.AclRule.AclRuleList.dst_ipv6:type_name -> ywrapper.StringValue
	0,  // 7: sonic.SonicAcl.AclRule.AclRuleList.ether_type:type_name -> sonic.SonicAcl.AclRule.AclRuleList.EtherType
	12, // 8: sonic.SonicAcl.AclRule.AclRuleList.in_ports:type_name -> ywrapper.StringValue
	1,  // 9: sonic.SonicAcl.AclRule.AclRuleList.ip_protocol:type_name -> sonic.SonicAcl.AclRule.AclRuleList.IpProtocol
	13, // 10: sonic.SonicAcl.AclRule.AclRuleList.ip_type:type_name -> sonic.SonicTypesIpType
	11, // 11: sonic.SonicAcl.AclRule.AclRuleList.l4_dst_port:type_name -> ywrapper.UintValue
	12, // 12: sonic.SonicAcl.AclRule.AclRuleList.l4_dst_port_range:type_name -> ywrapper.StringValue
	11, // 13: sonic.SonicAcl.AclRule.AclRuleList.l4_src_port:type_name -> ywrapper.UintValue
	12, // 14: sonic.SonicAcl.AclRule.AclRuleList.l4_src_port_range:type_name -> ywrapper.StringValue
	12, // 15: sonic.SonicAcl.AclRule.AclRuleList.mirror_action:type_name -> ywrapper.StringValue
	12, // 16: sonic.SonicAcl.AclRule.AclRuleList.mirror_egress_action:type_name -> ywrapper.StringValue
	12, // 17: sonic.SonicAcl.AclRule.AclRuleList.mirror_ingress_action:type_name -> ywrapper.StringValue
	12, // 18: sonic.SonicAcl.AclRule.AclRuleList.out_ports:type_name -> ywrapper.StringValue
	14, // 19: sonic.SonicAcl.AclRule.AclRuleList.packet_action:type_name -> sonic.SonicTypesPacketAction
	11, // 20: sonic.SonicAcl.AclRule.AclRuleList.priority:type_name -> ywrapper.UintValue
	12, // 21: sonic.SonicAcl.AclRule.AclRuleList.redirect_action:type_name -> ywrapper.StringValue
	12, // 22: sonic.SonicAcl.AclRule.AclRuleList.src_ip:type_name -> ywrapper.StringValue
	12, // 23: sonic.SonicAcl.AclRule.AclRuleList.src_ipv6:type_name -> ywrapper.StringValue
	12, // 24: sonic.SonicAcl.AclRule.AclRuleList.tcp_flags:type_name -> ywrapper.StringValue
	7,  // 25: sonic.SonicAcl.AclRule.AclRuleListKey.acl_rule_list:type_name -> sonic.SonicAcl.AclRule.AclRuleList
	12, // 26: sonic.SonicAcl.AclTable.AclTableList.policy_desc:type_name -> ywrapper.StringValue
	12, // 27: sonic.SonicAcl.AclTable.AclTableList.ports:type_name -> ywrapper.StringValue
	2,  // 28: sonic.SonicAcl.AclTable.AclTableList.stage:type_name -> sonic.SonicAcl.AclTable.AclTableList.Stage
	3,  // 29: sonic.SonicAcl.AclTable.AclTableList.type:type_name -> sonic.SonicAcl.AclTable.AclTableList.Type
	9,  // 30: sonic.SonicAcl.AclTable.AclTableListKey.acl_table_list:type_name -> sonic.SonicAcl.AclTable.AclTableList
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_sonic_acl_proto_init() }
func file_sonic_acl_proto_init() {
	if File_sonic_acl_proto != nil {
		return
	}
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sonic_acl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicAcl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_acl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicAcl_AclRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_acl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicAcl_AclTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_acl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicAcl_AclRule_AclRuleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_acl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicAcl_AclRule_AclRuleListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_acl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicAcl_AclTable_AclTableList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_acl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicAcl_AclTable_AclTableListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sonic_acl_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sonic_acl_proto_goTypes,
		DependencyIndexes: file_sonic_acl_proto_depIdxs,
		EnumInfos:         file_sonic_acl_proto_enumTypes,
		MessageInfos:      file_sonic_acl_proto_msgTypes,
	}.Build()
	File_sonic_acl_proto = out.File
	file_sonic_acl_proto_rawDesc = nil
	file_sonic_acl_proto_goTypes = nil
	file_sonic_acl_proto_depIdxs = nil
}
