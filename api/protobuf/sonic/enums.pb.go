// openconfig.enums is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/sonic-platform.yang
//  - ../api/yang/sonic/sonic-interface.yang
//  - ../api/yang/sonic/sonic-port.yang
//  - ../api/yang/sonic/sonic-vrf.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/sonic/third_party/ietf/iana-if-type.yang
//  - ../api/yang/sonic/sonic-loopback-interface.yang
//  - ../api/yang/sonic/sonic-platform-types.yang
//  - ../api/yang/sonic/sonic-lldp-types.yang
//  - ../api/yang/sonic/sonic-lldp.yang
//  - ../api/yang/sonic/sonic-vlan.yang
//  - ../api/yang/sonic/sonic-portchannel.yang
//  - ../api/yang/sonic/sonic-portchannel-interface.yang
//  - ../api/yang/sonic/sonic-extension.yang
//  - ../api/yang/sonic/sonic-bgp.yang
//  - ../api/yang/sonic/sonic-vxlan.yang
//  - ../api/yang/sonic/sonic-acl.yang
//  - ../api/yang/sonic/sonic-types.yang
//  - ../api/yang/sonic/sonic-vlan-interface.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: enums.proto

package sonic

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	_ "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// SonicLldpTypesChassisIdType represents an enumerated type generated for the YANG enumerated type chassis-id-type.
type SonicLldpTypesChassisIdType int32

const (
	SonicLldpTypesChassisIdType_SONICLLDPTYPESCHASSISIDTYPE_UNSET             SonicLldpTypesChassisIdType = 0
	SonicLldpTypesChassisIdType_SONICLLDPTYPESCHASSISIDTYPE_CHASSIS_COMPONENT SonicLldpTypesChassisIdType = 1
	SonicLldpTypesChassisIdType_SONICLLDPTYPESCHASSISIDTYPE_INTERFACE_ALIAS   SonicLldpTypesChassisIdType = 2
	SonicLldpTypesChassisIdType_SONICLLDPTYPESCHASSISIDTYPE_PORT_COMPONENT    SonicLldpTypesChassisIdType = 3
	SonicLldpTypesChassisIdType_SONICLLDPTYPESCHASSISIDTYPE_MAC_ADDRESS       SonicLldpTypesChassisIdType = 4
	SonicLldpTypesChassisIdType_SONICLLDPTYPESCHASSISIDTYPE_NETWORK_ADDRESS   SonicLldpTypesChassisIdType = 5
	SonicLldpTypesChassisIdType_SONICLLDPTYPESCHASSISIDTYPE_INTERFACE_NAME    SonicLldpTypesChassisIdType = 6
	SonicLldpTypesChassisIdType_SONICLLDPTYPESCHASSISIDTYPE_LOCAL             SonicLldpTypesChassisIdType = 7
)

// Enum value maps for SonicLldpTypesChassisIdType.
var (
	SonicLldpTypesChassisIdType_name = map[int32]string{
		0: "SONICLLDPTYPESCHASSISIDTYPE_UNSET",
		1: "SONICLLDPTYPESCHASSISIDTYPE_CHASSIS_COMPONENT",
		2: "SONICLLDPTYPESCHASSISIDTYPE_INTERFACE_ALIAS",
		3: "SONICLLDPTYPESCHASSISIDTYPE_PORT_COMPONENT",
		4: "SONICLLDPTYPESCHASSISIDTYPE_MAC_ADDRESS",
		5: "SONICLLDPTYPESCHASSISIDTYPE_NETWORK_ADDRESS",
		6: "SONICLLDPTYPESCHASSISIDTYPE_INTERFACE_NAME",
		7: "SONICLLDPTYPESCHASSISIDTYPE_LOCAL",
	}
	SonicLldpTypesChassisIdType_value = map[string]int32{
		"SONICLLDPTYPESCHASSISIDTYPE_UNSET":             0,
		"SONICLLDPTYPESCHASSISIDTYPE_CHASSIS_COMPONENT": 1,
		"SONICLLDPTYPESCHASSISIDTYPE_INTERFACE_ALIAS":   2,
		"SONICLLDPTYPESCHASSISIDTYPE_PORT_COMPONENT":    3,
		"SONICLLDPTYPESCHASSISIDTYPE_MAC_ADDRESS":       4,
		"SONICLLDPTYPESCHASSISIDTYPE_NETWORK_ADDRESS":   5,
		"SONICLLDPTYPESCHASSISIDTYPE_INTERFACE_NAME":    6,
		"SONICLLDPTYPESCHASSISIDTYPE_LOCAL":             7,
	}
)

func (x SonicLldpTypesChassisIdType) Enum() *SonicLldpTypesChassisIdType {
	p := new(SonicLldpTypesChassisIdType)
	*p = x
	return p
}

func (x SonicLldpTypesChassisIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicLldpTypesChassisIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[0].Descriptor()
}

func (SonicLldpTypesChassisIdType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[0]
}

func (x SonicLldpTypesChassisIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicLldpTypesChassisIdType.Descriptor instead.
func (SonicLldpTypesChassisIdType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{0}
}

// SonicLldpTypesPortIdType represents an enumerated type generated for the YANG enumerated type port-id-type.
type SonicLldpTypesPortIdType int32

const (
	SonicLldpTypesPortIdType_SONICLLDPTYPESPORTIDTYPE_UNSET            SonicLldpTypesPortIdType = 0
	SonicLldpTypesPortIdType_SONICLLDPTYPESPORTIDTYPE_INTERFACE_ALIAS  SonicLldpTypesPortIdType = 1
	SonicLldpTypesPortIdType_SONICLLDPTYPESPORTIDTYPE_PORT_COMPONENT   SonicLldpTypesPortIdType = 2
	SonicLldpTypesPortIdType_SONICLLDPTYPESPORTIDTYPE_MAC_ADDRESS      SonicLldpTypesPortIdType = 3
	SonicLldpTypesPortIdType_SONICLLDPTYPESPORTIDTYPE_NETWORK_ADDRESS  SonicLldpTypesPortIdType = 4
	SonicLldpTypesPortIdType_SONICLLDPTYPESPORTIDTYPE_INTERFACE_NAME   SonicLldpTypesPortIdType = 5
	SonicLldpTypesPortIdType_SONICLLDPTYPESPORTIDTYPE_AGENT_CIRCUIT_ID SonicLldpTypesPortIdType = 6
	SonicLldpTypesPortIdType_SONICLLDPTYPESPORTIDTYPE_LOCAL            SonicLldpTypesPortIdType = 7
)

// Enum value maps for SonicLldpTypesPortIdType.
var (
	SonicLldpTypesPortIdType_name = map[int32]string{
		0: "SONICLLDPTYPESPORTIDTYPE_UNSET",
		1: "SONICLLDPTYPESPORTIDTYPE_INTERFACE_ALIAS",
		2: "SONICLLDPTYPESPORTIDTYPE_PORT_COMPONENT",
		3: "SONICLLDPTYPESPORTIDTYPE_MAC_ADDRESS",
		4: "SONICLLDPTYPESPORTIDTYPE_NETWORK_ADDRESS",
		5: "SONICLLDPTYPESPORTIDTYPE_INTERFACE_NAME",
		6: "SONICLLDPTYPESPORTIDTYPE_AGENT_CIRCUIT_ID",
		7: "SONICLLDPTYPESPORTIDTYPE_LOCAL",
	}
	SonicLldpTypesPortIdType_value = map[string]int32{
		"SONICLLDPTYPESPORTIDTYPE_UNSET":            0,
		"SONICLLDPTYPESPORTIDTYPE_INTERFACE_ALIAS":  1,
		"SONICLLDPTYPESPORTIDTYPE_PORT_COMPONENT":   2,
		"SONICLLDPTYPESPORTIDTYPE_MAC_ADDRESS":      3,
		"SONICLLDPTYPESPORTIDTYPE_NETWORK_ADDRESS":  4,
		"SONICLLDPTYPESPORTIDTYPE_INTERFACE_NAME":   5,
		"SONICLLDPTYPESPORTIDTYPE_AGENT_CIRCUIT_ID": 6,
		"SONICLLDPTYPESPORTIDTYPE_LOCAL":            7,
	}
)

func (x SonicLldpTypesPortIdType) Enum() *SonicLldpTypesPortIdType {
	p := new(SonicLldpTypesPortIdType)
	*p = x
	return p
}

func (x SonicLldpTypesPortIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicLldpTypesPortIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[1].Descriptor()
}

func (SonicLldpTypesPortIdType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[1]
}

func (x SonicLldpTypesPortIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicLldpTypesPortIdType.Descriptor instead.
func (SonicLldpTypesPortIdType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{1}
}

// SonicPlatformTypesSONICHARDWARECOMPONENT represents an enumerated type generated for the YANG identity SONIC_HARDWARE_COMPONENT.
type SonicPlatformTypesSONICHARDWARECOMPONENT int32

const (
	SonicPlatformTypesSONICHARDWARECOMPONENT_SONICPLATFORMTYPESSONICHARDWARECOMPONENT_UNSET        SonicPlatformTypesSONICHARDWARECOMPONENT = 0
	SonicPlatformTypesSONICHARDWARECOMPONENT_SONICPLATFORMTYPESSONICHARDWARECOMPONENT_POWER_SUPPLY SonicPlatformTypesSONICHARDWARECOMPONENT = 137023917
	SonicPlatformTypesSONICHARDWARECOMPONENT_SONICPLATFORMTYPESSONICHARDWARECOMPONENT_SENSOR       SonicPlatformTypesSONICHARDWARECOMPONENT = 375588988
	SonicPlatformTypesSONICHARDWARECOMPONENT_SONICPLATFORMTYPESSONICHARDWARECOMPONENT_FAN          SonicPlatformTypesSONICHARDWARECOMPONENT = 424176681
)

// Enum value maps for SonicPlatformTypesSONICHARDWARECOMPONENT.
var (
	SonicPlatformTypesSONICHARDWARECOMPONENT_name = map[int32]string{
		0:         "SONICPLATFORMTYPESSONICHARDWARECOMPONENT_UNSET",
		137023917: "SONICPLATFORMTYPESSONICHARDWARECOMPONENT_POWER_SUPPLY",
		375588988: "SONICPLATFORMTYPESSONICHARDWARECOMPONENT_SENSOR",
		424176681: "SONICPLATFORMTYPESSONICHARDWARECOMPONENT_FAN",
	}
	SonicPlatformTypesSONICHARDWARECOMPONENT_value = map[string]int32{
		"SONICPLATFORMTYPESSONICHARDWARECOMPONENT_UNSET":        0,
		"SONICPLATFORMTYPESSONICHARDWARECOMPONENT_POWER_SUPPLY": 137023917,
		"SONICPLATFORMTYPESSONICHARDWARECOMPONENT_SENSOR":       375588988,
		"SONICPLATFORMTYPESSONICHARDWARECOMPONENT_FAN":          424176681,
	}
)

func (x SonicPlatformTypesSONICHARDWARECOMPONENT) Enum() *SonicPlatformTypesSONICHARDWARECOMPONENT {
	p := new(SonicPlatformTypesSONICHARDWARECOMPONENT)
	*p = x
	return p
}

func (x SonicPlatformTypesSONICHARDWARECOMPONENT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicPlatformTypesSONICHARDWARECOMPONENT) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[2].Descriptor()
}

func (SonicPlatformTypesSONICHARDWARECOMPONENT) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[2]
}

func (x SonicPlatformTypesSONICHARDWARECOMPONENT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicPlatformTypesSONICHARDWARECOMPONENT.Descriptor instead.
func (SonicPlatformTypesSONICHARDWARECOMPONENT) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{2}
}

// SonicPlatformTypesSONICSOFTWARECOMPONENT represents an enumerated type generated for the YANG identity SONIC_SOFTWARE_COMPONENT.
type SonicPlatformTypesSONICSOFTWARECOMPONENT int32

const (
	SonicPlatformTypesSONICSOFTWARECOMPONENT_SONICPLATFORMTYPESSONICSOFTWARECOMPONENT_UNSET            SonicPlatformTypesSONICSOFTWARECOMPONENT = 0
	SonicPlatformTypesSONICSOFTWARECOMPONENT_SONICPLATFORMTYPESSONICSOFTWARECOMPONENT_OPERATING_SYSTEM SonicPlatformTypesSONICSOFTWARECOMPONENT = 527639718
)

// Enum value maps for SonicPlatformTypesSONICSOFTWARECOMPONENT.
var (
	SonicPlatformTypesSONICSOFTWARECOMPONENT_name = map[int32]string{
		0:         "SONICPLATFORMTYPESSONICSOFTWARECOMPONENT_UNSET",
		527639718: "SONICPLATFORMTYPESSONICSOFTWARECOMPONENT_OPERATING_SYSTEM",
	}
	SonicPlatformTypesSONICSOFTWARECOMPONENT_value = map[string]int32{
		"SONICPLATFORMTYPESSONICSOFTWARECOMPONENT_UNSET":            0,
		"SONICPLATFORMTYPESSONICSOFTWARECOMPONENT_OPERATING_SYSTEM": 527639718,
	}
)

func (x SonicPlatformTypesSONICSOFTWARECOMPONENT) Enum() *SonicPlatformTypesSONICSOFTWARECOMPONENT {
	p := new(SonicPlatformTypesSONICSOFTWARECOMPONENT)
	*p = x
	return p
}

func (x SonicPlatformTypesSONICSOFTWARECOMPONENT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicPlatformTypesSONICSOFTWARECOMPONENT) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[3].Descriptor()
}

func (SonicPlatformTypesSONICSOFTWARECOMPONENT) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[3]
}

func (x SonicPlatformTypesSONICSOFTWARECOMPONENT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicPlatformTypesSONICSOFTWARECOMPONENT.Descriptor instead.
func (SonicPlatformTypesSONICSOFTWARECOMPONENT) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{3}
}

// SonicTypesAclTableType represents an enumerated type generated for the YANG enumerated type acl-table-type.
type SonicTypesAclTableType int32

const (
	SonicTypesAclTableType_SONICTYPESACLTABLETYPE_UNSET       SonicTypesAclTableType = 0
	SonicTypesAclTableType_SONICTYPESACLTABLETYPE_L2          SonicTypesAclTableType = 1
	SonicTypesAclTableType_SONICTYPESACLTABLETYPE_L3          SonicTypesAclTableType = 2
	SonicTypesAclTableType_SONICTYPESACLTABLETYPE_L3V6        SonicTypesAclTableType = 3
	SonicTypesAclTableType_SONICTYPESACLTABLETYPE_MIRROR      SonicTypesAclTableType = 4
	SonicTypesAclTableType_SONICTYPESACLTABLETYPE_MIRRORV6    SonicTypesAclTableType = 5
	SonicTypesAclTableType_SONICTYPESACLTABLETYPE_MIRROR_DSCP SonicTypesAclTableType = 6
	SonicTypesAclTableType_SONICTYPESACLTABLETYPE_CTRLPLANE   SonicTypesAclTableType = 7
)

// Enum value maps for SonicTypesAclTableType.
var (
	SonicTypesAclTableType_name = map[int32]string{
		0: "SONICTYPESACLTABLETYPE_UNSET",
		1: "SONICTYPESACLTABLETYPE_L2",
		2: "SONICTYPESACLTABLETYPE_L3",
		3: "SONICTYPESACLTABLETYPE_L3V6",
		4: "SONICTYPESACLTABLETYPE_MIRROR",
		5: "SONICTYPESACLTABLETYPE_MIRRORV6",
		6: "SONICTYPESACLTABLETYPE_MIRROR_DSCP",
		7: "SONICTYPESACLTABLETYPE_CTRLPLANE",
	}
	SonicTypesAclTableType_value = map[string]int32{
		"SONICTYPESACLTABLETYPE_UNSET":       0,
		"SONICTYPESACLTABLETYPE_L2":          1,
		"SONICTYPESACLTABLETYPE_L3":          2,
		"SONICTYPESACLTABLETYPE_L3V6":        3,
		"SONICTYPESACLTABLETYPE_MIRROR":      4,
		"SONICTYPESACLTABLETYPE_MIRRORV6":    5,
		"SONICTYPESACLTABLETYPE_MIRROR_DSCP": 6,
		"SONICTYPESACLTABLETYPE_CTRLPLANE":   7,
	}
)

func (x SonicTypesAclTableType) Enum() *SonicTypesAclTableType {
	p := new(SonicTypesAclTableType)
	*p = x
	return p
}

func (x SonicTypesAclTableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicTypesAclTableType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[4].Descriptor()
}

func (SonicTypesAclTableType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[4]
}

func (x SonicTypesAclTableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicTypesAclTableType.Descriptor instead.
func (SonicTypesAclTableType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{4}
}

// SonicTypesAdminStatus represents an enumerated type generated for the YANG enumerated type admin-status.
type SonicTypesAdminStatus int32

const (
	SonicTypesAdminStatus_SONICTYPESADMINSTATUS_UNSET SonicTypesAdminStatus = 0
	SonicTypesAdminStatus_SONICTYPESADMINSTATUS_up    SonicTypesAdminStatus = 1
	SonicTypesAdminStatus_SONICTYPESADMINSTATUS_down  SonicTypesAdminStatus = 2
)

// Enum value maps for SonicTypesAdminStatus.
var (
	SonicTypesAdminStatus_name = map[int32]string{
		0: "SONICTYPESADMINSTATUS_UNSET",
		1: "SONICTYPESADMINSTATUS_up",
		2: "SONICTYPESADMINSTATUS_down",
	}
	SonicTypesAdminStatus_value = map[string]int32{
		"SONICTYPESADMINSTATUS_UNSET": 0,
		"SONICTYPESADMINSTATUS_up":    1,
		"SONICTYPESADMINSTATUS_down":  2,
	}
)

func (x SonicTypesAdminStatus) Enum() *SonicTypesAdminStatus {
	p := new(SonicTypesAdminStatus)
	*p = x
	return p
}

func (x SonicTypesAdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicTypesAdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[5].Descriptor()
}

func (SonicTypesAdminStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[5]
}

func (x SonicTypesAdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicTypesAdminStatus.Descriptor instead.
func (SonicTypesAdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{5}
}

// SonicTypesIpFamily represents an enumerated type generated for the YANG enumerated type ip-family.
type SonicTypesIpFamily int32

const (
	SonicTypesIpFamily_SONICTYPESIPFAMILY_UNSET SonicTypesIpFamily = 0
	SonicTypesIpFamily_SONICTYPESIPFAMILY_IPv4  SonicTypesIpFamily = 1
	SonicTypesIpFamily_SONICTYPESIPFAMILY_IPv6  SonicTypesIpFamily = 2
)

// Enum value maps for SonicTypesIpFamily.
var (
	SonicTypesIpFamily_name = map[int32]string{
		0: "SONICTYPESIPFAMILY_UNSET",
		1: "SONICTYPESIPFAMILY_IPv4",
		2: "SONICTYPESIPFAMILY_IPv6",
	}
	SonicTypesIpFamily_value = map[string]int32{
		"SONICTYPESIPFAMILY_UNSET": 0,
		"SONICTYPESIPFAMILY_IPv4":  1,
		"SONICTYPESIPFAMILY_IPv6":  2,
	}
)

func (x SonicTypesIpFamily) Enum() *SonicTypesIpFamily {
	p := new(SonicTypesIpFamily)
	*p = x
	return p
}

func (x SonicTypesIpFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicTypesIpFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[6].Descriptor()
}

func (SonicTypesIpFamily) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[6]
}

func (x SonicTypesIpFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicTypesIpFamily.Descriptor instead.
func (SonicTypesIpFamily) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{6}
}

// SonicTypesIpType represents an enumerated type generated for the YANG enumerated type ip-type.
type SonicTypesIpType int32

const (
	SonicTypesIpType_SONICTYPESIPTYPE_UNSET    SonicTypesIpType = 0
	SonicTypesIpType_SONICTYPESIPTYPE_ANY      SonicTypesIpType = 1
	SonicTypesIpType_SONICTYPESIPTYPE_IP       SonicTypesIpType = 2
	SonicTypesIpType_SONICTYPESIPTYPE_NON_IP   SonicTypesIpType = 3
	SonicTypesIpType_SONICTYPESIPTYPE_IPV4     SonicTypesIpType = 4
	SonicTypesIpType_SONICTYPESIPTYPE_IPV6     SonicTypesIpType = 5
	SonicTypesIpType_SONICTYPESIPTYPE_IPv4ANY  SonicTypesIpType = 6
	SonicTypesIpType_SONICTYPESIPTYPE_NON_IP4  SonicTypesIpType = 7
	SonicTypesIpType_SONICTYPESIPTYPE_IPv6ANY  SonicTypesIpType = 8
	SonicTypesIpType_SONICTYPESIPTYPE_NON_IPv6 SonicTypesIpType = 9
	SonicTypesIpType_SONICTYPESIPTYPE_ARP      SonicTypesIpType = 10
)

// Enum value maps for SonicTypesIpType.
var (
	SonicTypesIpType_name = map[int32]string{
		0:  "SONICTYPESIPTYPE_UNSET",
		1:  "SONICTYPESIPTYPE_ANY",
		2:  "SONICTYPESIPTYPE_IP",
		3:  "SONICTYPESIPTYPE_NON_IP",
		4:  "SONICTYPESIPTYPE_IPV4",
		5:  "SONICTYPESIPTYPE_IPV6",
		6:  "SONICTYPESIPTYPE_IPv4ANY",
		7:  "SONICTYPESIPTYPE_NON_IP4",
		8:  "SONICTYPESIPTYPE_IPv6ANY",
		9:  "SONICTYPESIPTYPE_NON_IPv6",
		10: "SONICTYPESIPTYPE_ARP",
	}
	SonicTypesIpType_value = map[string]int32{
		"SONICTYPESIPTYPE_UNSET":    0,
		"SONICTYPESIPTYPE_ANY":      1,
		"SONICTYPESIPTYPE_IP":       2,
		"SONICTYPESIPTYPE_NON_IP":   3,
		"SONICTYPESIPTYPE_IPV4":     4,
		"SONICTYPESIPTYPE_IPV6":     5,
		"SONICTYPESIPTYPE_IPv4ANY":  6,
		"SONICTYPESIPTYPE_NON_IP4":  7,
		"SONICTYPESIPTYPE_IPv6ANY":  8,
		"SONICTYPESIPTYPE_NON_IPv6": 9,
		"SONICTYPESIPTYPE_ARP":      10,
	}
)

func (x SonicTypesIpType) Enum() *SonicTypesIpType {
	p := new(SonicTypesIpType)
	*p = x
	return p
}

func (x SonicTypesIpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicTypesIpType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[7].Descriptor()
}

func (SonicTypesIpType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[7]
}

func (x SonicTypesIpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicTypesIpType.Descriptor instead.
func (SonicTypesIpType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{7}
}

// SonicTypesOperStatus represents an enumerated type generated for the YANG enumerated type oper-status.
type SonicTypesOperStatus int32

const (
	SonicTypesOperStatus_SONICTYPESOPERSTATUS_UNSET SonicTypesOperStatus = 0
	SonicTypesOperStatus_SONICTYPESOPERSTATUS_up    SonicTypesOperStatus = 1
	SonicTypesOperStatus_SONICTYPESOPERSTATUS_down  SonicTypesOperStatus = 2
)

// Enum value maps for SonicTypesOperStatus.
var (
	SonicTypesOperStatus_name = map[int32]string{
		0: "SONICTYPESOPERSTATUS_UNSET",
		1: "SONICTYPESOPERSTATUS_up",
		2: "SONICTYPESOPERSTATUS_down",
	}
	SonicTypesOperStatus_value = map[string]int32{
		"SONICTYPESOPERSTATUS_UNSET": 0,
		"SONICTYPESOPERSTATUS_up":    1,
		"SONICTYPESOPERSTATUS_down":  2,
	}
)

func (x SonicTypesOperStatus) Enum() *SonicTypesOperStatus {
	p := new(SonicTypesOperStatus)
	*p = x
	return p
}

func (x SonicTypesOperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicTypesOperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[8].Descriptor()
}

func (SonicTypesOperStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[8]
}

func (x SonicTypesOperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicTypesOperStatus.Descriptor instead.
func (SonicTypesOperStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{8}
}

// SonicTypesPacketAction represents an enumerated type generated for the YANG enumerated type packet-action.
type SonicTypesPacketAction int32

const (
	SonicTypesPacketAction_SONICTYPESPACKETACTION_UNSET    SonicTypesPacketAction = 0
	SonicTypesPacketAction_SONICTYPESPACKETACTION_DROP     SonicTypesPacketAction = 1
	SonicTypesPacketAction_SONICTYPESPACKETACTION_FORWARD  SonicTypesPacketAction = 2
	SonicTypesPacketAction_SONICTYPESPACKETACTION_REDIRECT SonicTypesPacketAction = 3
)

// Enum value maps for SonicTypesPacketAction.
var (
	SonicTypesPacketAction_name = map[int32]string{
		0: "SONICTYPESPACKETACTION_UNSET",
		1: "SONICTYPESPACKETACTION_DROP",
		2: "SONICTYPESPACKETACTION_FORWARD",
		3: "SONICTYPESPACKETACTION_REDIRECT",
	}
	SonicTypesPacketAction_value = map[string]int32{
		"SONICTYPESPACKETACTION_UNSET":    0,
		"SONICTYPESPACKETACTION_DROP":     1,
		"SONICTYPESPACKETACTION_FORWARD":  2,
		"SONICTYPESPACKETACTION_REDIRECT": 3,
	}
)

func (x SonicTypesPacketAction) Enum() *SonicTypesPacketAction {
	p := new(SonicTypesPacketAction)
	*p = x
	return p
}

func (x SonicTypesPacketAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicTypesPacketAction) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[9].Descriptor()
}

func (SonicTypesPacketAction) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[9]
}

func (x SonicTypesPacketAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicTypesPacketAction.Descriptor instead.
func (SonicTypesPacketAction) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{9}
}

// SonicTypesVlanTaggingMode represents an enumerated type generated for the YANG enumerated type vlan-tagging-mode.
type SonicTypesVlanTaggingMode int32

const (
	SonicTypesVlanTaggingMode_SONICTYPESVLANTAGGINGMODE_UNSET           SonicTypesVlanTaggingMode = 0
	SonicTypesVlanTaggingMode_SONICTYPESVLANTAGGINGMODE_tagged          SonicTypesVlanTaggingMode = 1
	SonicTypesVlanTaggingMode_SONICTYPESVLANTAGGINGMODE_untagged        SonicTypesVlanTaggingMode = 2
	SonicTypesVlanTaggingMode_SONICTYPESVLANTAGGINGMODE_priority_tagged SonicTypesVlanTaggingMode = 3
)

// Enum value maps for SonicTypesVlanTaggingMode.
var (
	SonicTypesVlanTaggingMode_name = map[int32]string{
		0: "SONICTYPESVLANTAGGINGMODE_UNSET",
		1: "SONICTYPESVLANTAGGINGMODE_tagged",
		2: "SONICTYPESVLANTAGGINGMODE_untagged",
		3: "SONICTYPESVLANTAGGINGMODE_priority_tagged",
	}
	SonicTypesVlanTaggingMode_value = map[string]int32{
		"SONICTYPESVLANTAGGINGMODE_UNSET":           0,
		"SONICTYPESVLANTAGGINGMODE_tagged":          1,
		"SONICTYPESVLANTAGGINGMODE_untagged":        2,
		"SONICTYPESVLANTAGGINGMODE_priority_tagged": 3,
	}
)

func (x SonicTypesVlanTaggingMode) Enum() *SonicTypesVlanTaggingMode {
	p := new(SonicTypesVlanTaggingMode)
	*p = x
	return p
}

func (x SonicTypesVlanTaggingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicTypesVlanTaggingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[10].Descriptor()
}

func (SonicTypesVlanTaggingMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[10]
}

func (x SonicTypesVlanTaggingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicTypesVlanTaggingMode.Descriptor instead.
func (SonicTypesVlanTaggingMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{10}
}

var File_enums_proto protoreflect.FileDescriptor

var file_enums_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2a, 0x8b, 0x04, 0x0a, 0x1b, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x4c, 0x6c, 0x64, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x21, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x47, 0x0a, 0x2d, 0x53, 0x4f, 0x4e, 0x49, 0x43,
	0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53,
	0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x43,
	0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x12, 0x43, 0x0a, 0x2b, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10,
	0x02, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x41, 0x4c, 0x49, 0x41, 0x53, 0x12, 0x41, 0x0a, 0x2a, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c,
	0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x12, 0x3b, 0x0a, 0x27, 0x53, 0x4f, 0x4e, 0x49,
	0x43, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49,
	0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x04, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x43, 0x0a, 0x2b, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c,
	0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x41, 0x0a, 0x2a, 0x53, 0x4f,
	0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x48, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x2f, 0x0a,
	0x21, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x10, 0x07, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x2a, 0xee,
	0x03, 0x0a, 0x18, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x4c, 0x6c, 0x64, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x53,
	0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x40, 0x0a, 0x28, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x01, 0x1a, 0x12, 0x82,
	0x41, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x41,
	0x53, 0x12, 0x3e, 0x0a, 0x27, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x12, 0x38, 0x0a, 0x24, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x1a, 0x0e, 0x82, 0x41, 0x0b,
	0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x40, 0x0a, 0x28, 0x53,
	0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x3e, 0x0a,
	0x27, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x42, 0x0a,
	0x29, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x1a, 0x13, 0x82, 0x41,
	0x10, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x1e, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x10, 0x07, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x2a,
	0xaf, 0x02, 0x0a, 0x28, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x48, 0x41, 0x52, 0x44, 0x57,
	0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x12, 0x32, 0x0a, 0x2e,
	0x53, 0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x4d, 0x0a, 0x35, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x48, 0x41, 0x52, 0x44, 0x57,
	0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x10, 0xad, 0xa3, 0xab, 0x41, 0x1a, 0x0f,
	0x82, 0x41, 0x0c, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x12,
	0x42, 0x0a, 0x2f, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41,
	0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x53,
	0x4f, 0x52, 0x10, 0xfc, 0x90, 0x8c, 0xb3, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x45, 0x4e,
	0x53, 0x4f, 0x52, 0x12, 0x3c, 0x0a, 0x2c, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x48, 0x41,
	0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x41, 0x4e, 0x10, 0xa9, 0xd8, 0xa1, 0xca, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x46, 0x41,
	0x4e, 0x2a, 0xb6, 0x01, 0x0a, 0x28, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x53, 0x4f, 0x46,
	0x54, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x12, 0x32,
	0x0a, 0x2e, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52,
	0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x56, 0x0a, 0x39, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x53, 0x4f, 0x46,
	0x54, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10,
	0xa6, 0xc9, 0xcc, 0xfb, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x2a, 0xfc, 0x02, 0x0a, 0x16, 0x53,
	0x6f, 0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x19, 0x53, 0x4f, 0x4e, 0x49, 0x43,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x32, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x4c, 0x32, 0x12, 0x24, 0x0a,
	0x19, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x43, 0x4c, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x10, 0x02, 0x1a, 0x05, 0x82, 0x41,
	0x02, 0x4c, 0x33, 0x12, 0x28, 0x0a, 0x1b, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33,
	0x56, 0x36, 0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4c, 0x33, 0x56, 0x36, 0x12, 0x2c, 0x0a,
	0x1d, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x43, 0x4c, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04,
	0x1a, 0x09, 0x82, 0x41, 0x06, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x30, 0x0a, 0x1f, 0x53,
	0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x56, 0x36, 0x10, 0x05,
	0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x56, 0x36, 0x12, 0x36, 0x0a,
	0x22, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x43, 0x4c, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44,
	0x53, 0x43, 0x50, 0x10, 0x06, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x44, 0x53, 0x43, 0x50, 0x12, 0x32, 0x0a, 0x20, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x54, 0x52, 0x4c, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x07, 0x1a, 0x0c, 0x82, 0x41, 0x09,
	0x43, 0x54, 0x52, 0x4c, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x2a, 0x86, 0x01, 0x0a, 0x15, 0x53, 0x6f,
	0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x18, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x75, 0x70,
	0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x1a, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x64, 0x6f,
	0x77, 0x6e, 0x2a, 0x7e, 0x0a, 0x12, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x49, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4f, 0x4e, 0x49,
	0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x17, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x50, 0x76,
	0x34, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x76, 0x34, 0x12, 0x24, 0x0a, 0x17,
	0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x46, 0x41, 0x4d, 0x49,
	0x4c, 0x59, 0x5f, 0x49, 0x50, 0x76, 0x36, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50,
	0x76, 0x36, 0x2a, 0xac, 0x03, 0x0a, 0x10, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x4e, 0x49, 0x43,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x14, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x1a, 0x06, 0x82,
	0x41, 0x03, 0x41, 0x4e, 0x59, 0x12, 0x1e, 0x0a, 0x13, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x10, 0x02, 0x1a, 0x05,
	0x82, 0x41, 0x02, 0x49, 0x50, 0x12, 0x26, 0x0a, 0x17, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x49, 0x50,
	0x10, 0x03, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4e, 0x4f, 0x4e, 0x5f, 0x49, 0x50, 0x12, 0x22, 0x0a,
	0x15, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x04, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56,
	0x34, 0x12, 0x22, 0x0a, 0x15, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x05, 0x1a, 0x07, 0x82, 0x41,
	0x04, 0x49, 0x50, 0x56, 0x36, 0x12, 0x28, 0x0a, 0x18, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x76, 0x34, 0x41, 0x4e,
	0x59, 0x10, 0x06, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50, 0x76, 0x34, 0x41, 0x4e, 0x59, 0x12,
	0x28, 0x0a, 0x18, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x49, 0x50, 0x34, 0x10, 0x07, 0x1a, 0x0a, 0x82,
	0x41, 0x07, 0x4e, 0x4f, 0x4e, 0x5f, 0x49, 0x50, 0x34, 0x12, 0x28, 0x0a, 0x18, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50,
	0x76, 0x36, 0x41, 0x4e, 0x59, 0x10, 0x08, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50, 0x76, 0x36,
	0x41, 0x4e, 0x59, 0x12, 0x2a, 0x0a, 0x19, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x49, 0x50, 0x76, 0x36,
	0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x4e, 0x5f, 0x49, 0x50, 0x76, 0x36, 0x12,
	0x20, 0x0a, 0x14, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x50, 0x10, 0x0a, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x52,
	0x50, 0x2a, 0x82, 0x01, 0x0a, 0x14, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f,
	0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x17, 0x53, 0x4f,
	0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x75, 0x70, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x75, 0x70, 0x12, 0x26,
	0x0a, 0x19, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x52,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x2a, 0xc6, 0x01, 0x0a, 0x16, 0x53, 0x6f, 0x6e, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x1b, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x52, 0x4f, 0x50, 0x12, 0x2e, 0x0a,
	0x1e, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10,
	0x02, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x12, 0x30, 0x0a,
	0x1f, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x10, 0x03, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x2a,
	0xe9, 0x01, 0x0a, 0x19, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x56, 0x6c,
	0x61, 0x6e, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x56, 0x4c, 0x41, 0x4e, 0x54,
	0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x2f, 0x0a, 0x20, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x56, 0x4c, 0x41, 0x4e, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x22, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x10, 0x02, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x29, 0x53, 0x4f, 0x4e, 0x49,
	0x43, 0x54, 0x59, 0x50, 0x45, 0x53, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e,
	0x47, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x10, 0x03, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x42, 0x1b, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x5a,
	0x07, 0x2e, 0x3b, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_enums_proto_rawDescOnce sync.Once
	file_enums_proto_rawDescData = file_enums_proto_rawDesc
)

func file_enums_proto_rawDescGZIP() []byte {
	file_enums_proto_rawDescOnce.Do(func() {
		file_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_enums_proto_rawDescData)
	})
	return file_enums_proto_rawDescData
}

var file_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_enums_proto_goTypes = []interface{}{
	(SonicLldpTypesChassisIdType)(0),              // 0: sonic.SonicLldpTypesChassisIdType
	(SonicLldpTypesPortIdType)(0),                 // 1: sonic.SonicLldpTypesPortIdType
	(SonicPlatformTypesSONICHARDWARECOMPONENT)(0), // 2: sonic.SonicPlatformTypesSONICHARDWARECOMPONENT
	(SonicPlatformTypesSONICSOFTWARECOMPONENT)(0), // 3: sonic.SonicPlatformTypesSONICSOFTWARECOMPONENT
	(SonicTypesAclTableType)(0),                   // 4: sonic.SonicTypesAclTableType
	(SonicTypesAdminStatus)(0),                    // 5: sonic.SonicTypesAdminStatus
	(SonicTypesIpFamily)(0),                       // 6: sonic.SonicTypesIpFamily
	(SonicTypesIpType)(0),                         // 7: sonic.SonicTypesIpType
	(SonicTypesOperStatus)(0),                     // 8: sonic.SonicTypesOperStatus
	(SonicTypesPacketAction)(0),                   // 9: sonic.SonicTypesPacketAction
	(SonicTypesVlanTaggingMode)(0),                // 10: sonic.SonicTypesVlanTaggingMode
}
var file_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enums_proto_init() }
func file_enums_proto_init() {
	if File_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enums_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enums_proto_goTypes,
		DependencyIndexes: file_enums_proto_depIdxs,
		EnumInfos:         file_enums_proto_enumTypes,
	}.Build()
	File_enums_proto = out.File
	file_enums_proto_rawDesc = nil
	file_enums_proto_goTypes = nil
	file_enums_proto_depIdxs = nil
}
