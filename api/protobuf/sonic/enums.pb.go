// openconfig.enums is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/sonic-acl.yang
//  - ../api/yang/sonic/sonic-port.yang
//  - ../api/yang/sonic/sonic-types.yang
//  - ../api/yang/sonic/sonic-portchannel.yang
//  - ../api/yang/sonic/sonic-lldp-types.yang
//  - ../api/yang/sonic/third_party/ietf/iana-if-type.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/sonic/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/sonic/sonic-vlan.yang
//  - ../api/yang/sonic/sonic-lldp.yang
//  - ../api/yang/sonic/sonic-interface.yang
//  - ../api/yang/sonic/sonic-loopback-interface.yang
//  - ../api/yang/sonic/sonic-platform.yang
//  - ../api/yang/sonic/sonic-extension.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: enums.proto

package sonic

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	_ "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// SonicAclAclTableType represents an enumerated type generated for the YANG enumerated type acl-table-type.
type SonicAclAclTableType int32

const (
	SonicAclAclTableType_SONICACLACLTABLETYPE_UNSET       SonicAclAclTableType = 0
	SonicAclAclTableType_SONICACLACLTABLETYPE_L2          SonicAclAclTableType = 1
	SonicAclAclTableType_SONICACLACLTABLETYPE_L3          SonicAclAclTableType = 2
	SonicAclAclTableType_SONICACLACLTABLETYPE_L3V6        SonicAclAclTableType = 3
	SonicAclAclTableType_SONICACLACLTABLETYPE_MIRROR      SonicAclAclTableType = 4
	SonicAclAclTableType_SONICACLACLTABLETYPE_MIRRORV6    SonicAclAclTableType = 5
	SonicAclAclTableType_SONICACLACLTABLETYPE_MIRROR_DSCP SonicAclAclTableType = 6
	SonicAclAclTableType_SONICACLACLTABLETYPE_CTRLPLANE   SonicAclAclTableType = 7
)

// Enum value maps for SonicAclAclTableType.
var (
	SonicAclAclTableType_name = map[int32]string{
		0: "SONICACLACLTABLETYPE_UNSET",
		1: "SONICACLACLTABLETYPE_L2",
		2: "SONICACLACLTABLETYPE_L3",
		3: "SONICACLACLTABLETYPE_L3V6",
		4: "SONICACLACLTABLETYPE_MIRROR",
		5: "SONICACLACLTABLETYPE_MIRRORV6",
		6: "SONICACLACLTABLETYPE_MIRROR_DSCP",
		7: "SONICACLACLTABLETYPE_CTRLPLANE",
	}
	SonicAclAclTableType_value = map[string]int32{
		"SONICACLACLTABLETYPE_UNSET":       0,
		"SONICACLACLTABLETYPE_L2":          1,
		"SONICACLACLTABLETYPE_L3":          2,
		"SONICACLACLTABLETYPE_L3V6":        3,
		"SONICACLACLTABLETYPE_MIRROR":      4,
		"SONICACLACLTABLETYPE_MIRRORV6":    5,
		"SONICACLACLTABLETYPE_MIRROR_DSCP": 6,
		"SONICACLACLTABLETYPE_CTRLPLANE":   7,
	}
)

func (x SonicAclAclTableType) Enum() *SonicAclAclTableType {
	p := new(SonicAclAclTableType)
	*p = x
	return p
}

func (x SonicAclAclTableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicAclAclTableType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[0].Descriptor()
}

func (SonicAclAclTableType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[0]
}

func (x SonicAclAclTableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicAclAclTableType.Descriptor instead.
func (SonicAclAclTableType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{0}
}

// SonicAclIpType represents an enumerated type generated for the YANG enumerated type ip-type.
type SonicAclIpType int32

const (
	SonicAclIpType_SONICACLIPTYPE_UNSET    SonicAclIpType = 0
	SonicAclIpType_SONICACLIPTYPE_ANY      SonicAclIpType = 1
	SonicAclIpType_SONICACLIPTYPE_IP       SonicAclIpType = 2
	SonicAclIpType_SONICACLIPTYPE_NON_IP   SonicAclIpType = 3
	SonicAclIpType_SONICACLIPTYPE_IPV4     SonicAclIpType = 4
	SonicAclIpType_SONICACLIPTYPE_IPV6     SonicAclIpType = 5
	SonicAclIpType_SONICACLIPTYPE_IPv4ANY  SonicAclIpType = 6
	SonicAclIpType_SONICACLIPTYPE_NON_IP4  SonicAclIpType = 7
	SonicAclIpType_SONICACLIPTYPE_IPv6ANY  SonicAclIpType = 8
	SonicAclIpType_SONICACLIPTYPE_NON_IPv6 SonicAclIpType = 9
	SonicAclIpType_SONICACLIPTYPE_ARP      SonicAclIpType = 10
)

// Enum value maps for SonicAclIpType.
var (
	SonicAclIpType_name = map[int32]string{
		0:  "SONICACLIPTYPE_UNSET",
		1:  "SONICACLIPTYPE_ANY",
		2:  "SONICACLIPTYPE_IP",
		3:  "SONICACLIPTYPE_NON_IP",
		4:  "SONICACLIPTYPE_IPV4",
		5:  "SONICACLIPTYPE_IPV6",
		6:  "SONICACLIPTYPE_IPv4ANY",
		7:  "SONICACLIPTYPE_NON_IP4",
		8:  "SONICACLIPTYPE_IPv6ANY",
		9:  "SONICACLIPTYPE_NON_IPv6",
		10: "SONICACLIPTYPE_ARP",
	}
	SonicAclIpType_value = map[string]int32{
		"SONICACLIPTYPE_UNSET":    0,
		"SONICACLIPTYPE_ANY":      1,
		"SONICACLIPTYPE_IP":       2,
		"SONICACLIPTYPE_NON_IP":   3,
		"SONICACLIPTYPE_IPV4":     4,
		"SONICACLIPTYPE_IPV6":     5,
		"SONICACLIPTYPE_IPv4ANY":  6,
		"SONICACLIPTYPE_NON_IP4":  7,
		"SONICACLIPTYPE_IPv6ANY":  8,
		"SONICACLIPTYPE_NON_IPv6": 9,
		"SONICACLIPTYPE_ARP":      10,
	}
)

func (x SonicAclIpType) Enum() *SonicAclIpType {
	p := new(SonicAclIpType)
	*p = x
	return p
}

func (x SonicAclIpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicAclIpType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[1].Descriptor()
}

func (SonicAclIpType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[1]
}

func (x SonicAclIpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicAclIpType.Descriptor instead.
func (SonicAclIpType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{1}
}

// SonicAclPacketAction represents an enumerated type generated for the YANG enumerated type packet-action.
type SonicAclPacketAction int32

const (
	SonicAclPacketAction_SONICACLPACKETACTION_UNSET    SonicAclPacketAction = 0
	SonicAclPacketAction_SONICACLPACKETACTION_DROP     SonicAclPacketAction = 1
	SonicAclPacketAction_SONICACLPACKETACTION_FORWARD  SonicAclPacketAction = 2
	SonicAclPacketAction_SONICACLPACKETACTION_REDIRECT SonicAclPacketAction = 3
)

// Enum value maps for SonicAclPacketAction.
var (
	SonicAclPacketAction_name = map[int32]string{
		0: "SONICACLPACKETACTION_UNSET",
		1: "SONICACLPACKETACTION_DROP",
		2: "SONICACLPACKETACTION_FORWARD",
		3: "SONICACLPACKETACTION_REDIRECT",
	}
	SonicAclPacketAction_value = map[string]int32{
		"SONICACLPACKETACTION_UNSET":    0,
		"SONICACLPACKETACTION_DROP":     1,
		"SONICACLPACKETACTION_FORWARD":  2,
		"SONICACLPACKETACTION_REDIRECT": 3,
	}
)

func (x SonicAclPacketAction) Enum() *SonicAclPacketAction {
	p := new(SonicAclPacketAction)
	*p = x
	return p
}

func (x SonicAclPacketAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicAclPacketAction) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[2].Descriptor()
}

func (SonicAclPacketAction) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[2]
}

func (x SonicAclPacketAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicAclPacketAction.Descriptor instead.
func (SonicAclPacketAction) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{2}
}

// SonicInterfaceIpFamily represents an enumerated type generated for the YANG enumerated type ip-family.
type SonicInterfaceIpFamily int32

const (
	SonicInterfaceIpFamily_SONICINTERFACEIPFAMILY_UNSET SonicInterfaceIpFamily = 0
	SonicInterfaceIpFamily_SONICINTERFACEIPFAMILY_IPv4  SonicInterfaceIpFamily = 1
	SonicInterfaceIpFamily_SONICINTERFACEIPFAMILY_IPv6  SonicInterfaceIpFamily = 2
)

// Enum value maps for SonicInterfaceIpFamily.
var (
	SonicInterfaceIpFamily_name = map[int32]string{
		0: "SONICINTERFACEIPFAMILY_UNSET",
		1: "SONICINTERFACEIPFAMILY_IPv4",
		2: "SONICINTERFACEIPFAMILY_IPv6",
	}
	SonicInterfaceIpFamily_value = map[string]int32{
		"SONICINTERFACEIPFAMILY_UNSET": 0,
		"SONICINTERFACEIPFAMILY_IPv4":  1,
		"SONICINTERFACEIPFAMILY_IPv6":  2,
	}
)

func (x SonicInterfaceIpFamily) Enum() *SonicInterfaceIpFamily {
	p := new(SonicInterfaceIpFamily)
	*p = x
	return p
}

func (x SonicInterfaceIpFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicInterfaceIpFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[3].Descriptor()
}

func (SonicInterfaceIpFamily) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[3]
}

func (x SonicInterfaceIpFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicInterfaceIpFamily.Descriptor instead.
func (SonicInterfaceIpFamily) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{3}
}

// SonicLldpChassisIdType represents an enumerated type generated for the YANG enumerated type chassis-id-type.
type SonicLldpChassisIdType int32

const (
	SonicLldpChassisIdType_SONICLLDPCHASSISIDTYPE_UNSET             SonicLldpChassisIdType = 0
	SonicLldpChassisIdType_SONICLLDPCHASSISIDTYPE_CHASSIS_COMPONENT SonicLldpChassisIdType = 1
	SonicLldpChassisIdType_SONICLLDPCHASSISIDTYPE_INTERFACE_ALIAS   SonicLldpChassisIdType = 2
	SonicLldpChassisIdType_SONICLLDPCHASSISIDTYPE_PORT_COMPONENT    SonicLldpChassisIdType = 3
	SonicLldpChassisIdType_SONICLLDPCHASSISIDTYPE_MAC_ADDRESS       SonicLldpChassisIdType = 4
	SonicLldpChassisIdType_SONICLLDPCHASSISIDTYPE_NETWORK_ADDRESS   SonicLldpChassisIdType = 5
	SonicLldpChassisIdType_SONICLLDPCHASSISIDTYPE_INTERFACE_NAME    SonicLldpChassisIdType = 6
	SonicLldpChassisIdType_SONICLLDPCHASSISIDTYPE_LOCAL             SonicLldpChassisIdType = 7
)

// Enum value maps for SonicLldpChassisIdType.
var (
	SonicLldpChassisIdType_name = map[int32]string{
		0: "SONICLLDPCHASSISIDTYPE_UNSET",
		1: "SONICLLDPCHASSISIDTYPE_CHASSIS_COMPONENT",
		2: "SONICLLDPCHASSISIDTYPE_INTERFACE_ALIAS",
		3: "SONICLLDPCHASSISIDTYPE_PORT_COMPONENT",
		4: "SONICLLDPCHASSISIDTYPE_MAC_ADDRESS",
		5: "SONICLLDPCHASSISIDTYPE_NETWORK_ADDRESS",
		6: "SONICLLDPCHASSISIDTYPE_INTERFACE_NAME",
		7: "SONICLLDPCHASSISIDTYPE_LOCAL",
	}
	SonicLldpChassisIdType_value = map[string]int32{
		"SONICLLDPCHASSISIDTYPE_UNSET":             0,
		"SONICLLDPCHASSISIDTYPE_CHASSIS_COMPONENT": 1,
		"SONICLLDPCHASSISIDTYPE_INTERFACE_ALIAS":   2,
		"SONICLLDPCHASSISIDTYPE_PORT_COMPONENT":    3,
		"SONICLLDPCHASSISIDTYPE_MAC_ADDRESS":       4,
		"SONICLLDPCHASSISIDTYPE_NETWORK_ADDRESS":   5,
		"SONICLLDPCHASSISIDTYPE_INTERFACE_NAME":    6,
		"SONICLLDPCHASSISIDTYPE_LOCAL":             7,
	}
)

func (x SonicLldpChassisIdType) Enum() *SonicLldpChassisIdType {
	p := new(SonicLldpChassisIdType)
	*p = x
	return p
}

func (x SonicLldpChassisIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicLldpChassisIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[4].Descriptor()
}

func (SonicLldpChassisIdType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[4]
}

func (x SonicLldpChassisIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicLldpChassisIdType.Descriptor instead.
func (SonicLldpChassisIdType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{4}
}

// SonicLldpPortIdType represents an enumerated type generated for the YANG enumerated type port-id-type.
type SonicLldpPortIdType int32

const (
	SonicLldpPortIdType_SONICLLDPPORTIDTYPE_UNSET            SonicLldpPortIdType = 0
	SonicLldpPortIdType_SONICLLDPPORTIDTYPE_INTERFACE_ALIAS  SonicLldpPortIdType = 1
	SonicLldpPortIdType_SONICLLDPPORTIDTYPE_PORT_COMPONENT   SonicLldpPortIdType = 2
	SonicLldpPortIdType_SONICLLDPPORTIDTYPE_MAC_ADDRESS      SonicLldpPortIdType = 3
	SonicLldpPortIdType_SONICLLDPPORTIDTYPE_NETWORK_ADDRESS  SonicLldpPortIdType = 4
	SonicLldpPortIdType_SONICLLDPPORTIDTYPE_INTERFACE_NAME   SonicLldpPortIdType = 5
	SonicLldpPortIdType_SONICLLDPPORTIDTYPE_AGENT_CIRCUIT_ID SonicLldpPortIdType = 6
	SonicLldpPortIdType_SONICLLDPPORTIDTYPE_LOCAL            SonicLldpPortIdType = 7
)

// Enum value maps for SonicLldpPortIdType.
var (
	SonicLldpPortIdType_name = map[int32]string{
		0: "SONICLLDPPORTIDTYPE_UNSET",
		1: "SONICLLDPPORTIDTYPE_INTERFACE_ALIAS",
		2: "SONICLLDPPORTIDTYPE_PORT_COMPONENT",
		3: "SONICLLDPPORTIDTYPE_MAC_ADDRESS",
		4: "SONICLLDPPORTIDTYPE_NETWORK_ADDRESS",
		5: "SONICLLDPPORTIDTYPE_INTERFACE_NAME",
		6: "SONICLLDPPORTIDTYPE_AGENT_CIRCUIT_ID",
		7: "SONICLLDPPORTIDTYPE_LOCAL",
	}
	SonicLldpPortIdType_value = map[string]int32{
		"SONICLLDPPORTIDTYPE_UNSET":            0,
		"SONICLLDPPORTIDTYPE_INTERFACE_ALIAS":  1,
		"SONICLLDPPORTIDTYPE_PORT_COMPONENT":   2,
		"SONICLLDPPORTIDTYPE_MAC_ADDRESS":      3,
		"SONICLLDPPORTIDTYPE_NETWORK_ADDRESS":  4,
		"SONICLLDPPORTIDTYPE_INTERFACE_NAME":   5,
		"SONICLLDPPORTIDTYPE_AGENT_CIRCUIT_ID": 6,
		"SONICLLDPPORTIDTYPE_LOCAL":            7,
	}
)

func (x SonicLldpPortIdType) Enum() *SonicLldpPortIdType {
	p := new(SonicLldpPortIdType)
	*p = x
	return p
}

func (x SonicLldpPortIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicLldpPortIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[5].Descriptor()
}

func (SonicLldpPortIdType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[5]
}

func (x SonicLldpPortIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicLldpPortIdType.Descriptor instead.
func (SonicLldpPortIdType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{5}
}

// SonicLoopbackInterfaceIpFamily represents an enumerated type generated for the YANG enumerated type ip-family.
type SonicLoopbackInterfaceIpFamily int32

const (
	SonicLoopbackInterfaceIpFamily_SONICLOOPBACKINTERFACEIPFAMILY_UNSET SonicLoopbackInterfaceIpFamily = 0
	SonicLoopbackInterfaceIpFamily_SONICLOOPBACKINTERFACEIPFAMILY_IPv4  SonicLoopbackInterfaceIpFamily = 1
	SonicLoopbackInterfaceIpFamily_SONICLOOPBACKINTERFACEIPFAMILY_IPv6  SonicLoopbackInterfaceIpFamily = 2
)

// Enum value maps for SonicLoopbackInterfaceIpFamily.
var (
	SonicLoopbackInterfaceIpFamily_name = map[int32]string{
		0: "SONICLOOPBACKINTERFACEIPFAMILY_UNSET",
		1: "SONICLOOPBACKINTERFACEIPFAMILY_IPv4",
		2: "SONICLOOPBACKINTERFACEIPFAMILY_IPv6",
	}
	SonicLoopbackInterfaceIpFamily_value = map[string]int32{
		"SONICLOOPBACKINTERFACEIPFAMILY_UNSET": 0,
		"SONICLOOPBACKINTERFACEIPFAMILY_IPv4":  1,
		"SONICLOOPBACKINTERFACEIPFAMILY_IPv6":  2,
	}
)

func (x SonicLoopbackInterfaceIpFamily) Enum() *SonicLoopbackInterfaceIpFamily {
	p := new(SonicLoopbackInterfaceIpFamily)
	*p = x
	return p
}

func (x SonicLoopbackInterfaceIpFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicLoopbackInterfaceIpFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[6].Descriptor()
}

func (SonicLoopbackInterfaceIpFamily) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[6]
}

func (x SonicLoopbackInterfaceIpFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicLoopbackInterfaceIpFamily.Descriptor instead.
func (SonicLoopbackInterfaceIpFamily) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{6}
}

// SonicPortAdminStatus represents an enumerated type generated for the YANG enumerated type admin-status.
type SonicPortAdminStatus int32

const (
	SonicPortAdminStatus_SONICPORTADMINSTATUS_UNSET SonicPortAdminStatus = 0
	SonicPortAdminStatus_SONICPORTADMINSTATUS_up    SonicPortAdminStatus = 1
	SonicPortAdminStatus_SONICPORTADMINSTATUS_down  SonicPortAdminStatus = 2
)

// Enum value maps for SonicPortAdminStatus.
var (
	SonicPortAdminStatus_name = map[int32]string{
		0: "SONICPORTADMINSTATUS_UNSET",
		1: "SONICPORTADMINSTATUS_up",
		2: "SONICPORTADMINSTATUS_down",
	}
	SonicPortAdminStatus_value = map[string]int32{
		"SONICPORTADMINSTATUS_UNSET": 0,
		"SONICPORTADMINSTATUS_up":    1,
		"SONICPORTADMINSTATUS_down":  2,
	}
)

func (x SonicPortAdminStatus) Enum() *SonicPortAdminStatus {
	p := new(SonicPortAdminStatus)
	*p = x
	return p
}

func (x SonicPortAdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicPortAdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[7].Descriptor()
}

func (SonicPortAdminStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[7]
}

func (x SonicPortAdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicPortAdminStatus.Descriptor instead.
func (SonicPortAdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{7}
}

// SonicPortchannelAdminStatus represents an enumerated type generated for the YANG enumerated type admin-status.
type SonicPortchannelAdminStatus int32

const (
	SonicPortchannelAdminStatus_SONICPORTCHANNELADMINSTATUS_UNSET SonicPortchannelAdminStatus = 0
	SonicPortchannelAdminStatus_SONICPORTCHANNELADMINSTATUS_up    SonicPortchannelAdminStatus = 1
	SonicPortchannelAdminStatus_SONICPORTCHANNELADMINSTATUS_down  SonicPortchannelAdminStatus = 2
)

// Enum value maps for SonicPortchannelAdminStatus.
var (
	SonicPortchannelAdminStatus_name = map[int32]string{
		0: "SONICPORTCHANNELADMINSTATUS_UNSET",
		1: "SONICPORTCHANNELADMINSTATUS_up",
		2: "SONICPORTCHANNELADMINSTATUS_down",
	}
	SonicPortchannelAdminStatus_value = map[string]int32{
		"SONICPORTCHANNELADMINSTATUS_UNSET": 0,
		"SONICPORTCHANNELADMINSTATUS_up":    1,
		"SONICPORTCHANNELADMINSTATUS_down":  2,
	}
)

func (x SonicPortchannelAdminStatus) Enum() *SonicPortchannelAdminStatus {
	p := new(SonicPortchannelAdminStatus)
	*p = x
	return p
}

func (x SonicPortchannelAdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicPortchannelAdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[8].Descriptor()
}

func (SonicPortchannelAdminStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[8]
}

func (x SonicPortchannelAdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicPortchannelAdminStatus.Descriptor instead.
func (SonicPortchannelAdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{8}
}

// SonicVlanAdminStatus represents an enumerated type generated for the YANG enumerated type admin-status.
type SonicVlanAdminStatus int32

const (
	SonicVlanAdminStatus_SONICVLANADMINSTATUS_UNSET SonicVlanAdminStatus = 0
	SonicVlanAdminStatus_SONICVLANADMINSTATUS_up    SonicVlanAdminStatus = 1
	SonicVlanAdminStatus_SONICVLANADMINSTATUS_down  SonicVlanAdminStatus = 2
)

// Enum value maps for SonicVlanAdminStatus.
var (
	SonicVlanAdminStatus_name = map[int32]string{
		0: "SONICVLANADMINSTATUS_UNSET",
		1: "SONICVLANADMINSTATUS_up",
		2: "SONICVLANADMINSTATUS_down",
	}
	SonicVlanAdminStatus_value = map[string]int32{
		"SONICVLANADMINSTATUS_UNSET": 0,
		"SONICVLANADMINSTATUS_up":    1,
		"SONICVLANADMINSTATUS_down":  2,
	}
)

func (x SonicVlanAdminStatus) Enum() *SonicVlanAdminStatus {
	p := new(SonicVlanAdminStatus)
	*p = x
	return p
}

func (x SonicVlanAdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicVlanAdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[9].Descriptor()
}

func (SonicVlanAdminStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[9]
}

func (x SonicVlanAdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicVlanAdminStatus.Descriptor instead.
func (SonicVlanAdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{9}
}

// SonicVlanIpFamily represents an enumerated type generated for the YANG enumerated type ip-family.
type SonicVlanIpFamily int32

const (
	SonicVlanIpFamily_SONICVLANIPFAMILY_UNSET SonicVlanIpFamily = 0
	SonicVlanIpFamily_SONICVLANIPFAMILY_IPv4  SonicVlanIpFamily = 1
	SonicVlanIpFamily_SONICVLANIPFAMILY_IPv6  SonicVlanIpFamily = 2
)

// Enum value maps for SonicVlanIpFamily.
var (
	SonicVlanIpFamily_name = map[int32]string{
		0: "SONICVLANIPFAMILY_UNSET",
		1: "SONICVLANIPFAMILY_IPv4",
		2: "SONICVLANIPFAMILY_IPv6",
	}
	SonicVlanIpFamily_value = map[string]int32{
		"SONICVLANIPFAMILY_UNSET": 0,
		"SONICVLANIPFAMILY_IPv4":  1,
		"SONICVLANIPFAMILY_IPv6":  2,
	}
)

func (x SonicVlanIpFamily) Enum() *SonicVlanIpFamily {
	p := new(SonicVlanIpFamily)
	*p = x
	return p
}

func (x SonicVlanIpFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicVlanIpFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[10].Descriptor()
}

func (SonicVlanIpFamily) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[10]
}

func (x SonicVlanIpFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicVlanIpFamily.Descriptor instead.
func (SonicVlanIpFamily) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{10}
}

// SonicVlanVlanTaggingMode represents an enumerated type generated for the YANG enumerated type vlan-tagging-mode.
type SonicVlanVlanTaggingMode int32

const (
	SonicVlanVlanTaggingMode_SONICVLANVLANTAGGINGMODE_UNSET           SonicVlanVlanTaggingMode = 0
	SonicVlanVlanTaggingMode_SONICVLANVLANTAGGINGMODE_tagged          SonicVlanVlanTaggingMode = 1
	SonicVlanVlanTaggingMode_SONICVLANVLANTAGGINGMODE_untagged        SonicVlanVlanTaggingMode = 2
	SonicVlanVlanTaggingMode_SONICVLANVLANTAGGINGMODE_priority_tagged SonicVlanVlanTaggingMode = 3
)

// Enum value maps for SonicVlanVlanTaggingMode.
var (
	SonicVlanVlanTaggingMode_name = map[int32]string{
		0: "SONICVLANVLANTAGGINGMODE_UNSET",
		1: "SONICVLANVLANTAGGINGMODE_tagged",
		2: "SONICVLANVLANTAGGINGMODE_untagged",
		3: "SONICVLANVLANTAGGINGMODE_priority_tagged",
	}
	SonicVlanVlanTaggingMode_value = map[string]int32{
		"SONICVLANVLANTAGGINGMODE_UNSET":           0,
		"SONICVLANVLANTAGGINGMODE_tagged":          1,
		"SONICVLANVLANTAGGINGMODE_untagged":        2,
		"SONICVLANVLANTAGGINGMODE_priority_tagged": 3,
	}
)

func (x SonicVlanVlanTaggingMode) Enum() *SonicVlanVlanTaggingMode {
	p := new(SonicVlanVlanTaggingMode)
	*p = x
	return p
}

func (x SonicVlanVlanTaggingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicVlanVlanTaggingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[11].Descriptor()
}

func (SonicVlanVlanTaggingMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[11]
}

func (x SonicVlanVlanTaggingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicVlanVlanTaggingMode.Descriptor instead.
func (SonicVlanVlanTaggingMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{11}
}

var File_enums_proto protoreflect.FileDescriptor

var file_enums_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73,
	0x6f, 0x6e, 0x69, 0x63, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2a, 0xea, 0x02, 0x0a, 0x14, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x17, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x32, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x4c, 0x32, 0x12, 0x22, 0x0a,
	0x17, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x10, 0x02, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x4c,
	0x33, 0x12, 0x26, 0x0a, 0x19, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x56, 0x36, 0x10, 0x03,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x4c, 0x33, 0x56, 0x36, 0x12, 0x2a, 0x0a, 0x1b, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4d,
	0x49, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x2e, 0x0a, 0x1d, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43,
	0x4c, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x52, 0x52, 0x4f, 0x52, 0x56, 0x36, 0x10, 0x05, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4d, 0x49, 0x52,
	0x52, 0x4f, 0x52, 0x56, 0x36, 0x12, 0x34, 0x0a, 0x20, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43,
	0x4c, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x10, 0x06, 0x1a, 0x0e, 0x82, 0x41, 0x0b,
	0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x12, 0x30, 0x0a, 0x1e, 0x53,
	0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x54, 0x52, 0x4c, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x07, 0x1a,
	0x0c, 0x82, 0x41, 0x09, 0x43, 0x54, 0x52, 0x4c, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x2a, 0x94, 0x03,
	0x0a, 0x0e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x12, 0x53, 0x4f,
	0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59,
	0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4e, 0x59, 0x12, 0x1c, 0x0a, 0x11, 0x53, 0x4f,
	0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x10,
	0x02, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x49, 0x50, 0x12, 0x24, 0x0a, 0x15, 0x53, 0x4f, 0x4e, 0x49,
	0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x49,
	0x50, 0x10, 0x03, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4e, 0x4f, 0x4e, 0x5f, 0x49, 0x50, 0x12, 0x20,
	0x0a, 0x13, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x04, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34,
	0x12, 0x20, 0x0a, 0x13, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x05, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50,
	0x56, 0x36, 0x12, 0x26, 0x0a, 0x16, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x76, 0x34, 0x41, 0x4e, 0x59, 0x10, 0x06, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x49, 0x50, 0x76, 0x34, 0x41, 0x4e, 0x59, 0x12, 0x26, 0x0a, 0x16, 0x53, 0x4f,
	0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x5f, 0x49, 0x50, 0x34, 0x10, 0x07, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x4e, 0x4f, 0x4e, 0x5f, 0x49,
	0x50, 0x34, 0x12, 0x26, 0x0a, 0x16, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x76, 0x36, 0x41, 0x4e, 0x59, 0x10, 0x08, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x49, 0x50, 0x76, 0x36, 0x41, 0x4e, 0x59, 0x12, 0x28, 0x0a, 0x17, 0x53, 0x4f,
	0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x5f, 0x49, 0x50, 0x76, 0x36, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x4e, 0x5f,
	0x49, 0x50, 0x76, 0x36, 0x12, 0x1e, 0x0a, 0x12, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c,
	0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x50, 0x10, 0x0a, 0x1a, 0x06, 0x82, 0x41,
	0x03, 0x41, 0x52, 0x50, 0x2a, 0xbc, 0x01, 0x0a, 0x14, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63,
	0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x26, 0x0a,
	0x19, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41,
	0x04, 0x44, 0x52, 0x4f, 0x50, 0x12, 0x2c, 0x0a, 0x1c, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43,
	0x4c, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f,
	0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x46, 0x4f, 0x52, 0x57,
	0x41, 0x52, 0x44, 0x12, 0x2e, 0x0a, 0x1d, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x10, 0x03, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x52, 0x45, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x2a, 0x8e, 0x01, 0x0a, 0x16, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x49, 0x50, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x28, 0x0a, 0x1b, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x49, 0x50, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x50, 0x76, 0x34, 0x10,
	0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x76, 0x34, 0x12, 0x28, 0x0a, 0x1b, 0x53, 0x4f,
	0x4e, 0x49, 0x43, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x49, 0x50, 0x46, 0x41,
	0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x50, 0x76, 0x36, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x49, 0x50, 0x76, 0x36, 0x2a, 0xde, 0x03, 0x0a, 0x16, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x4c, 0x6c,
	0x64, 0x70, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x43, 0x48, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x42, 0x0a, 0x28, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x43, 0x48,
	0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a,
	0x14, 0x82, 0x41, 0x11, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x12, 0x3e, 0x0a, 0x26, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c,
	0x44, 0x50, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10,
	0x02, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x41, 0x4c, 0x49, 0x41, 0x53, 0x12, 0x3c, 0x0a, 0x25, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c,
	0x44, 0x50, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x03,
	0x1a, 0x11, 0x82, 0x41, 0x0e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x12, 0x36, 0x0a, 0x22, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50,
	0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x1a, 0x0e, 0x82, 0x41, 0x0b,
	0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x3e, 0x0a, 0x26, 0x53,
	0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49,
	0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x3c, 0x0a, 0x25, 0x53,
	0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49,
	0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x2a, 0x0a, 0x1c, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x49, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x07, 0x1a, 0x08, 0x82, 0x41, 0x05,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x2a, 0xc1, 0x03, 0x0a, 0x13, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x4c,
	0x6c, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3b, 0x0a, 0x23,
	0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x4c,
	0x49, 0x41, 0x53, 0x10, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x12, 0x39, 0x0a, 0x22, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10,
	0x02, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x12, 0x33, 0x0a, 0x1f, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4d, 0x41,
	0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x3b, 0x0a, 0x23, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x04, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x39, 0x0a, 0x22, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c,
	0x4c, 0x44, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x12, 0x3d, 0x0a, 0x24, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x1a, 0x13, 0x82, 0x41, 0x10,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x49, 0x44,
	0x12, 0x27, 0x0a, 0x19, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4c, 0x44, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x07, 0x1a,
	0x08, 0x82, 0x41, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x2a, 0xae, 0x01, 0x0a, 0x1e, 0x53, 0x6f,
	0x6e, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x24,
	0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x49, 0x50, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x23, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x4c,
	0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x49, 0x50, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x50, 0x76, 0x34, 0x10, 0x01, 0x1a,
	0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x76, 0x34, 0x12, 0x30, 0x0a, 0x23, 0x53, 0x4f, 0x4e, 0x49,
	0x43, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x49, 0x50, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x50, 0x76, 0x36, 0x10,
	0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x76, 0x36, 0x2a, 0x82, 0x01, 0x0a, 0x14, 0x53,
	0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4f, 0x52, 0x54,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x17, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4f, 0x52, 0x54,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x75, 0x70, 0x10, 0x01,
	0x1a, 0x05, 0x82, 0x41, 0x02, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x19, 0x53, 0x4f, 0x4e, 0x49, 0x43,
	0x50, 0x4f, 0x52, 0x54, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x2a,
	0x9e, 0x01, 0x0a, 0x1b, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x25, 0x0a, 0x21, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4f, 0x52, 0x54, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x1e, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x50,
	0x4f, 0x52, 0x54, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x75, 0x70, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x75,
	0x70, 0x12, 0x2d, 0x0a, 0x20, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4f, 0x52, 0x54, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x64, 0x6f, 0x77, 0x6e,
	0x2a, 0x82, 0x01, 0x0a, 0x14, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x17, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x75, 0x70, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x75, 0x70, 0x12, 0x26, 0x0a,
	0x19, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41,
	0x04, 0x64, 0x6f, 0x77, 0x6e, 0x2a, 0x7a, 0x0a, 0x11, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x6c,
	0x61, 0x6e, 0x49, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f,
	0x4e, 0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x50, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x16, 0x53, 0x4f, 0x4e, 0x49, 0x43,
	0x56, 0x4c, 0x41, 0x4e, 0x49, 0x50, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x50, 0x76,
	0x34, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x76, 0x34, 0x12, 0x23, 0x0a, 0x16,
	0x53, 0x4f, 0x4e, 0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x50, 0x46, 0x41, 0x4d, 0x49, 0x4c,
	0x59, 0x5f, 0x49, 0x50, 0x76, 0x36, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x76,
	0x36, 0x2a, 0xe4, 0x01, 0x0a, 0x18, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x56,
	0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x56, 0x4c, 0x41, 0x4e, 0x54,
	0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x2e, 0x0a, 0x1f, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x56,
	0x4c, 0x41, 0x4e, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x21, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x56,
	0x4c, 0x41, 0x4e, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x75,
	0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x10, 0x02, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x75, 0x6e,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x28, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x56,
	0x4c, 0x41, 0x4e, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x10, 0x03, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_enums_proto_rawDescOnce sync.Once
	file_enums_proto_rawDescData = file_enums_proto_rawDesc
)

func file_enums_proto_rawDescGZIP() []byte {
	file_enums_proto_rawDescOnce.Do(func() {
		file_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_enums_proto_rawDescData)
	})
	return file_enums_proto_rawDescData
}

var file_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_enums_proto_goTypes = []interface{}{
	(SonicAclAclTableType)(0),           // 0: sonic.SonicAclAclTableType
	(SonicAclIpType)(0),                 // 1: sonic.SonicAclIpType
	(SonicAclPacketAction)(0),           // 2: sonic.SonicAclPacketAction
	(SonicInterfaceIpFamily)(0),         // 3: sonic.SonicInterfaceIpFamily
	(SonicLldpChassisIdType)(0),         // 4: sonic.SonicLldpChassisIdType
	(SonicLldpPortIdType)(0),            // 5: sonic.SonicLldpPortIdType
	(SonicLoopbackInterfaceIpFamily)(0), // 6: sonic.SonicLoopbackInterfaceIpFamily
	(SonicPortAdminStatus)(0),           // 7: sonic.SonicPortAdminStatus
	(SonicPortchannelAdminStatus)(0),    // 8: sonic.SonicPortchannelAdminStatus
	(SonicVlanAdminStatus)(0),           // 9: sonic.SonicVlanAdminStatus
	(SonicVlanIpFamily)(0),              // 10: sonic.SonicVlanIpFamily
	(SonicVlanVlanTaggingMode)(0),       // 11: sonic.SonicVlanVlanTaggingMode
}
var file_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enums_proto_init() }
func file_enums_proto_init() {
	if File_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enums_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enums_proto_goTypes,
		DependencyIndexes: file_enums_proto_depIdxs,
		EnumInfos:         file_enums_proto_enumTypes,
	}.Build()
	File_enums_proto = out.File
	file_enums_proto_rawDesc = nil
	file_enums_proto_goTypes = nil
	file_enums_proto_depIdxs = nil
}
